<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_lYTBoAggEea_md0mpENoqg" name="Replication">
    <eAnnotations xmi:id="_4HZrcAgoEea_md0mpENoqg" source="UMLRT_Default_top">
      <details xmi:id="_4Ha5kAgoEea_md0mpENoqg" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <eAnnotations xmi:id="_Lcp5MKpbEeiNHY6qjNhZ4w" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_LcruYKpbEeiNHY6qjNhZ4w" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_qDAjoEseEemTqNDOuLStFA" source="dummy"/>
    <eAnnotations xmi:id="_SuRFMEv3Eemkg9ktmmdnZQ" source="dummy"/>
    <eAnnotations xmi:id="_XqR8UEwwEemeO8WqtpZCnw" source="dummy"/>
    <eAnnotations xmi:id="_3GQPoExfEembXvPuYoNKrQ" source="dummy"/>
    <eAnnotations xmi:id="_PlVYYEyGEemyIYVUVZUS7w" source="dummy"/>
    <packageImport xmi:id="_wSNW0ErcEemr9sBDNiEkTg">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_rPgFkAggEea_md0mpENoqg" name="ENV">
      <packagedElement xmi:type="uml:Dependency" xmi:id="_vj5dgAghEea_md0mpENoqg" client="_rPgFkAggEea_md0mpENoqg" supplier="_OiTE0AghEea_md0mpENoqg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_sMZ5EAgoEea_md0mpENoqg" name="ENV" visibility="public" classifierBehavior="_gU8CMAgwEea_md0mpENoqg" isActive="true">
        <ownedAttribute xmi:type="uml:Port" xmi:id="_GXsSgAgvEea_md0mpENoqg" name="ConfigComm" visibility="public" type="_v000cAgsEea_md0mpENoqg" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NBhGMAgvEea_md0mpENoqg" value="7"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NBssYAgvEea_md0mpENoqg" value="7"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_b1NrIAjLEea_md0mpENoqg" name="FailureTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_wQHCAAjLEea_md0mpENoqg" name="BITTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_X4ceIAjMEea_md0mpENoqg" name="GeneralTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_lxs5kApkEeaGqPUk-4V4qQ" name="AnnouncmentServer1" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_rXZWwApkEeaGqPUk-4V4qQ" name="AnnouncmentServer2" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_Iq9iAApmEeaGqPUk-4V4qQ" name="AnnouncementServer1Id">
          <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UZHLMApmEeaGqPUk-4V4qQ" name="AnnouncmentServerTimeout">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_UZHLMQpmEeaGqPUk-4V4qQ" value="6"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_bmibMApmEeaGqPUk-4V4qQ" name="AnnouncementServer2Id">
          <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_fXb_wAxwEeaB2MeL96fedA" name="systemConfig" type="_Y1UDYAg6Eea_md0mpENoqg" aggregation="composite" association="_fXXuUAxwEeaB2MeL96fedA"/>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_mKfGEOM2EeaTpaLNj-zYpw" name="configTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_wUZIIErcEemr9sBDNiEkTg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
          <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUeAoUrcEemr9sBDNiEkTg" value="1"/>
          <upperValue xmi:type="uml:LiteralInteger" xmi:id="_wUensErcEemr9sBDNiEkTg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wVR48ErcEemr9sBDNiEkTg" name="Debug__flag">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wVSgAErcEemr9sBDNiEkTg" name="Debug__variablesData">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wVTuIErcEemr9sBDNiEkTg" name="Debug__event">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wVX_kErcEemr9sBDNiEkTg" name="Debug__SRO">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_gU8CMAgwEea_md0mpENoqg" name="StateMachine1">
          <region xmi:id="_jSIzIAgwEea_md0mpENoqg" name="Region1">
            <transition xmi:id="_3Cms8AgwEea_md0mpENoqg" name="Init__ReadConfig__1" source="_wgBJUErcEemr9sBDNiEkTg" target="_sdehUAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_B6hioAg6Eea_md0mpENoqg" name="ENVInit">
                <language>C++</language>
                <body>    std::cout&lt;&lt;&quot;ENV: Intialization\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Init__ReadConfig__1&quot;,(char *)&quot;Debug__Path__Init__ReadConfig__1&quot;,(char *)&quot;ReadConfig&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_nn9HYAgxEea_md0mpENoqg" name="RetryConfig" source="_wg220ErcEemr9sBDNiEkTg" target="_sdehUAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_4q_JgAkAEea_md0mpENoqg" name="retry">
                <language>C++</language>
                <body>    std::cout&lt;&lt;&quot;ENV: retrying configuation, The transtion Failure -> readConfig was taken \n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::RetryConfig&quot;,(char *)&quot;Debug__Path__RetryConfig&quot;,(char *)&quot;ReadConfig&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_su1hoAgxEea_md0mpENoqg" name="configLoaded" source="_wZYV0ErcEemr9sBDNiEkTg" target="_dWznsAgxEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_rKgosAigEea_md0mpENoqg" name="LogTransition">
                <language>C++</language>
                <body>    std::cout&lt;&lt;&quot;ENV: The transition from ReadConfig -> Config was taken\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::configLoaded&quot;,(char *)&quot;Debug__Path__configLoaded&quot;,(char *)&quot;Config&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_zlOKoAgxEea_md0mpENoqg" name="configOK" source="_wdjEIErcEemr9sBDNiEkTg" target="__kywcAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Sw7kAAjHEea_md0mpENoqg" name="configCheckL">
                <language>C++</language>
                <body>    std::cout&lt;&lt;&quot;ENV: The configuration is OK, the transition config-> Running was taken, sending signal to servers and clients \n&quot;;
    ConfigComm.StartUp(this->systemConfig).send();
    std::cout&lt;&lt;&quot;ENV: ENV is in  Running State\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::configOK&quot;,(char *)&quot;Debug__Path__configOK&quot;,(char *)&quot;Running&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_32w4UAgxEea_md0mpENoqg" name="ConfigNOK" source="_wfMp8ErcEemr9sBDNiEkTg" target="_NvBagAgxEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_r3tJQAjJEea_md0mpENoqg" name="LogFailure">
                <language>C++</language>
                <body>    std::cout&lt;&lt;&quot;ENV: The configuration is not OK, the transition configCheck-> ConfigFailure was taken\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::ConfigNOK&quot;,(char *)&quot;Debug__Path__ConfigNOK&quot;,(char *)&quot;ConfigFailure&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_BiTZIAmpEea_md0mpENoqg" name="MasterAnnouncment" source="_wbMTsErcEemr9sBDNiEkTg" target="__kywcAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_2u7rQAmqEea_md0mpENoqg" name="RegisterMaster">
                <language>C++</language>
                <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Master Annoucment from &quot;&lt;&lt; MasterName&lt;&lt;&quot;\n&quot;;
    if (strcmp((char *)MasterName,&quot;server1&quot;)==0)
    {
    systemConfig.MasterList[0]=true;
    if (AnnouncementServer1Id.isValid())
    AnnouncmentServer1.cancelTimer(AnnouncementServer1Id);
    AnnouncementServer1Id=AnnouncmentServer1.informEvery(UMLRTTimespec(AnnouncmentServerTimeout,0),4);
    }
    else if (strcmp((char *)MasterName,&quot;server2&quot;)==0)
    {
    systemConfig.MasterList[1]=true;
    if (AnnouncementServer2Id.isValid())
    AnnouncmentServer2.cancelTimer(AnnouncementServer2Id);
    AnnouncementServer2Id=AnnouncmentServer2.informEvery(UMLRTTimespec(AnnouncmentServerTimeout,0),4);
    }
    // the following code has been generated
    if ((systemConfig.RunningMode==1)&amp;&amp; (systemConfig.MasterList[0] ) &amp;&amp; (systemConfig.MasterList[1]))
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Violation, there are 2 master in passive mode\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::MasterAnnouncment&quot;,(char *)&quot;Debug__Path__MasterAnnouncment&quot;,(char *)&quot;Running&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_WsCs0AnGEeaGqPUk-4V4qQ" name="QueryConfig" source="_wh5YoErcEemr9sBDNiEkTg" target="__kywcAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_488xQAnGEeaGqPUk-4V4qQ" name="configReply">
                <language>C++</language>
                <body>    std::cout&lt;&lt;&quot;ENV: The Config request replied at index&quot; &lt;&lt; msg->sapIndex0_&lt;&lt; &quot;\n&quot;;
    int tempid=msg->sapIndex0_;
    ConfigComm.ReplyConfig(systemConfig).sendAt(tempid);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::QueryConfig&quot;,(char *)&quot;Debug__Path__QueryConfig&quot;,(char *)&quot;Running&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_J02wAAprEeaGqPUk-4V4qQ" name="Server1Failure" source="_weRc4ErcEemr9sBDNiEkTg" target="__kywcAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_jzDXYAprEeaGqPUk-4V4qQ" name="Server1failure">
                <language>C++</language>
                <body>    std::cout&lt;&lt;&quot;ENV: No announcment from server1, remove server1 from masters list\n&quot;;
    systemConfig.MasterList[0]=false;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Server1Failure&quot;,(char *)&quot;Debug__Path__Server1Failure&quot;,(char *)&quot;Running&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_FVtOsApsEeaGqPUk-4V4qQ" name="server2Failure" source="_wcX_cErcEemr9sBDNiEkTg" target="__kywcAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_BjKUsAptEeaGqPUk-4V4qQ" name="Server2Failure">
                <language>C++</language>
                <body>    std::cout&lt;&lt;&quot;ENV: No announcment from server2, remove Server2 from masters list\n&quot;;
    systemConfig.MasterList[1]=false;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::server2Failure&quot;,(char *)&quot;Debug__Path__server2Failure&quot;,(char *)&quot;Running&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wZd1YUrcEemr9sBDNiEkTg" name="Debug__configLoaded" source="_sdehUAgwEea_md0mpENoqg" target="_wZYV0ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wZfDgErcEemr9sBDNiEkTg" name="Debug__configLoaded__3">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__configLoaded&quot;,(char *)&quot;ReadConfig&quot;,(char *)&quot;Debug__Path__configLoaded&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_AvcsEAg5Eea_md0mpENoqg" name="configLoaded" port="_mKfGEOM2EeaTpaLNj-zYpw">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wZlKIErcEemr9sBDNiEkTg" name="Debug__configLoaded__S" guard="_wZnmYUrcEemr9sBDNiEkTg" source="_wZYV0ErcEemr9sBDNiEkTg" target="_wZcAMUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wZnmYUrcEemr9sBDNiEkTg" name="Debug__GuardconfigLoaded">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wZnmYErcEemr9sBDNiEkTg" name="Debug__GuardconfigLoaded">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;ReadConfig&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wZqpsErcEemr9sBDNiEkTg" name="Debug__configLoaded__S__5">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__configLoaded__S&quot;,(char *)&quot;Debug__Path__configLoaded&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wZwJQErcEemr9sBDNiEkTg" name="Debug__configLoaded__E" source="_wZdOUUrcEemr9sBDNiEkTg" target="_dWznsAgxEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wZwwUErcEemr9sBDNiEkTg" name="Debug__configLoaded__E__6">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__configLoaded__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Config&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wZ1BwErcEemr9sBDNiEkTg" name="Debug__configLoaded__dbg__varChange" source="_wZaLAUrcEemr9sBDNiEkTg" target="_wZaLAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wZ2P4ErcEemr9sBDNiEkTg" name="Debug__configLoaded__dbg__varChange__8">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wZ1o0ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wZ5TMErcEemr9sBDNiEkTg" name="Debug__configLoaded__dbg__setBreakPoint" source="_wZaLAUrcEemr9sBDNiEkTg" target="_wZaLAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wZ56QErcEemr9sBDNiEkTg" name="Debug__configLoaded__dbg__setBreakPoint__9">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wZ5TMUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wZ7IYErcEemr9sBDNiEkTg" name="Debug__configLoaded__dbg__remBreakPoint" source="_wZaLAUrcEemr9sBDNiEkTg" target="_wZaLAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wZ7vcUrcEemr9sBDNiEkTg" name="Debug__configLoaded__dbg__remBreakPoint__10">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wZ7vcErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wZ-LsErcEemr9sBDNiEkTg" name="Debug__configLoaded__dbg__viewBreakPoints" source="_wZaLAUrcEemr9sBDNiEkTg" target="_wZaLAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wZ_Z0ErcEemr9sBDNiEkTg" name="Debug__configLoaded__dbg__viewBreakPoints__11">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wZ-ywErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_waB2EErcEemr9sBDNiEkTg" name="Debug__configLoaded__dbg__dbgSetExecMode" source="_wZaLAUrcEemr9sBDNiEkTg" target="_wZaLAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_waDEMErcEemr9sBDNiEkTg" name="Debug__configLoaded__dbg__dbgSetExecMode__12">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_waCdIErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_waESUErcEemr9sBDNiEkTg" name="Debug__configLoaded__dbg__dbgDeferMsg" source="_wZaLAUrcEemr9sBDNiEkTg" target="_wZaLAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_waFgcErcEemr9sBDNiEkTg" name="Debug__configLoaded__dbg__dbgDeferMsg__13">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_waE5YErcEemr9sBDNiEkTg" name="Debug__MSG" port="_GXsSgAgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wbTocErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment" source="__kywcAgwEea_md0mpENoqg" target="_wbMTsErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wbU2kErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__24">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__MasterAnnouncment&quot;,(char *)&quot;Running&quot;,(char *)&quot;Debug__Path__MasterAnnouncment&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_UGqsMAmpEea_md0mpENoqg" name="MasterAnnouncment" event="_xu1hMgl4Eea_md0mpENoqg" port="_GXsSgAgvEea_md0mpENoqg"/>
            </transition>
            <transition xmi:id="_wba9MErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__S" guard="_wbcLUUrcEemr9sBDNiEkTg" source="_wbMTsErcEemr9sBDNiEkTg" target="_wbP-EErcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wbcLUUrcEemr9sBDNiEkTg" name="Debug__GuardMasterAnnouncment">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wbcLUErcEemr9sBDNiEkTg" name="Debug__GuardMasterAnnouncment">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Running&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wbenkErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__S__26">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__MasterAnnouncment__S&quot;,(char *)&quot;Debug__Path__MasterAnnouncment&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wbhq4ErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__E" source="_wbRMMUrcEemr9sBDNiEkTg" target="__kywcAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wbhq4UrcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__E__27">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__MasterAnnouncment__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Running&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wblVQErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__dbg__varChange" source="_wbOI4ErcEemr9sBDNiEkTg" target="_wbOI4ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wbmjYErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__dbg__varChange__29">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wbl8UErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wbnKcErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__dbg__setBreakPoint" source="_wbOI4ErcEemr9sBDNiEkTg" target="_wbOI4ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wboYkErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__dbg__setBreakPoint__30">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wbnKcUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wbpmsErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__dbg__remBreakPoint" source="_wbOI4ErcEemr9sBDNiEkTg" target="_wbOI4ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wbqNwErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__dbg__remBreakPoint__31">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wbpmsUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wbq00ErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__dbg__viewBreakPoints" source="_wbOI4ErcEemr9sBDNiEkTg" target="_wbOI4ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wbrb4UrcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__dbg__viewBreakPoints__32">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wbrb4ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wbsC8ErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__dbg__dbgSetExecMode" source="_wbOI4ErcEemr9sBDNiEkTg" target="_wbOI4ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wbsqAErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__dbg__dbgSetExecMode__33">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wbsC8UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wbtREErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__dbg__dbgDeferMsg" source="_wbOI4ErcEemr9sBDNiEkTg" target="_wbOI4ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wbt4IErcEemr9sBDNiEkTg" name="Debug__MasterAnnouncment__dbg__dbgDeferMsg__34">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wbtREUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_GXsSgAgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wciXgErcEemr9sBDNiEkTg" name="Debug__server2Failure" source="__kywcAgwEea_md0mpENoqg" target="_wcX_cErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wci-kErcEemr9sBDNiEkTg" name="Debug__server2Failure__49">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__server2Failure&quot;,(char *)&quot;Running&quot;,(char *)&quot;Debug__Path__server2Failure&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_IX_MkApvEeaGqPUk-4V4qQ" name="server2Failure" event="_xM6tkApBEeaGqPUk-4V4qQ" port="_rXZWwApkEeaGqPUk-4V4qQ"/>
            </transition>
            <transition xmi:id="_wcn3EErcEemr9sBDNiEkTg" name="Debug__server2Failure__S" guard="_wcpFMUrcEemr9sBDNiEkTg" source="_wcX_cErcEemr9sBDNiEkTg" target="_wceGEErcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wcpFMUrcEemr9sBDNiEkTg" name="Debug__Guardserver2Failure">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wcpFMErcEemr9sBDNiEkTg" name="Debug__Guardserver2Failure">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Running&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wcqTUErcEemr9sBDNiEkTg" name="Debug__server2Failure__S__51">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__server2Failure__S&quot;,(char *)&quot;Debug__Path__server2Failure&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wcsvkErcEemr9sBDNiEkTg" name="Debug__server2Failure__E" source="_wcgiUUrcEemr9sBDNiEkTg" target="__kywcAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wctWoErcEemr9sBDNiEkTg" name="Debug__server2Failure__E__52">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__server2Failure__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Running&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wcwZ8ErcEemr9sBDNiEkTg" name="Debug__server2Failure__dbg__varChange" source="_wcabsErcEemr9sBDNiEkTg" target="_wcabsErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wcxBAErcEemr9sBDNiEkTg" name="Debug__server2Failure__dbg__varChange__54">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wcwZ8UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wcyPIErcEemr9sBDNiEkTg" name="Debug__server2Failure__dbg__setBreakPoint" source="_wcabsErcEemr9sBDNiEkTg" target="_wcabsErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wcy2MErcEemr9sBDNiEkTg" name="Debug__server2Failure__dbg__setBreakPoint__55">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wcyPIUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wczdQErcEemr9sBDNiEkTg" name="Debug__server2Failure__dbg__remBreakPoint" source="_wcabsErcEemr9sBDNiEkTg" target="_wcabsErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wc0EUErcEemr9sBDNiEkTg" name="Debug__server2Failure__dbg__remBreakPoint__56">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wczdQUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wc0rYErcEemr9sBDNiEkTg" name="Debug__server2Failure__dbg__viewBreakPoints" source="_wcabsErcEemr9sBDNiEkTg" target="_wcabsErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wc0rYkrcEemr9sBDNiEkTg" name="Debug__server2Failure__dbg__viewBreakPoints__57">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wc0rYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wc1ScErcEemr9sBDNiEkTg" name="Debug__server2Failure__dbg__dbgSetExecMode" source="_wcabsErcEemr9sBDNiEkTg" target="_wcabsErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wc15gUrcEemr9sBDNiEkTg" name="Debug__server2Failure__dbg__dbgSetExecMode__58">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wc15gErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wc2gkErcEemr9sBDNiEkTg" name="Debug__server2Failure__dbg__dbgDeferMsg" source="_wcabsErcEemr9sBDNiEkTg" target="_wcabsErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wc3HoUrcEemr9sBDNiEkTg" name="Debug__server2Failure__dbg__dbgDeferMsg__59">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wc3HoErcEemr9sBDNiEkTg" name="Debug__MSG" port="_GXsSgAgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wdnVkUrcEemr9sBDNiEkTg" name="Debug__configOK" guard="_24BOUAjEEea_md0mpENoqg" source="_dWznsAgxEea_md0mpENoqg" target="_wdjEIErcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_24BOUAjEEea_md0mpENoqg" name="checkConfig">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_m0dZMAjGEea_md0mpENoqg" name="checkConfig">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
                  <language>C++</language>
                  <body>    return systemConfig.ConfigOK;
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wdn8oErcEemr9sBDNiEkTg" name="Debug__configOK__74">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__configOK&quot;,(char *)&quot;Config&quot;,(char *)&quot;Debug__Path__configOK&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wdpx0ErcEemr9sBDNiEkTg" name="Debug__configOK__S" guard="_wdqY4UrcEemr9sBDNiEkTg" source="_wdjEIErcEemr9sBDNiEkTg" target="_wdlgYUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wdqY4UrcEemr9sBDNiEkTg" name="Debug__GuardconfigOK">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wdqY4ErcEemr9sBDNiEkTg" name="Debug__GuardconfigOK">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Config&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wdq_8ErcEemr9sBDNiEkTg" name="Debug__configOK__S__76">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__configOK__S&quot;,(char *)&quot;Debug__Path__configOK&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wduqUErcEemr9sBDNiEkTg" name="Debug__configOK__E" source="_wdmugUrcEemr9sBDNiEkTg" target="__kywcAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wduqUUrcEemr9sBDNiEkTg" name="Debug__configOK__E__77">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__configOK__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Running&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wdwfgErcEemr9sBDNiEkTg" name="Debug__configOK__dbg__varChange" source="_wdkSQUrcEemr9sBDNiEkTg" target="_wdkSQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wdxGkErcEemr9sBDNiEkTg" name="Debug__configOK__dbg__varChange__79">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wdwfgUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wdxGkUrcEemr9sBDNiEkTg" name="Debug__configOK__dbg__setBreakPoint" source="_wdkSQUrcEemr9sBDNiEkTg" target="_wdkSQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wdxtoUrcEemr9sBDNiEkTg" name="Debug__configOK__dbg__setBreakPoint__80">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wdxtoErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wdyUsErcEemr9sBDNiEkTg" name="Debug__configOK__dbg__remBreakPoint" source="_wdkSQUrcEemr9sBDNiEkTg" target="_wdkSQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wdy7wUrcEemr9sBDNiEkTg" name="Debug__configOK__dbg__remBreakPoint__81">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wdy7wErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wd0J4ErcEemr9sBDNiEkTg" name="Debug__configOK__dbg__viewBreakPoints" source="_wdkSQUrcEemr9sBDNiEkTg" target="_wdkSQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wd0w8ErcEemr9sBDNiEkTg" name="Debug__configOK__dbg__viewBreakPoints__82">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wd0J4UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wd1YAErcEemr9sBDNiEkTg" name="Debug__configOK__dbg__dbgSetExecMode" source="_wdkSQUrcEemr9sBDNiEkTg" target="_wdkSQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wd1_EErcEemr9sBDNiEkTg" name="Debug__configOK__dbg__dbgSetExecMode__83">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wd1YAUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wd2mIErcEemr9sBDNiEkTg" name="Debug__configOK__dbg__dbgDeferMsg" source="_wdkSQUrcEemr9sBDNiEkTg" target="_wdkSQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wd3NMErcEemr9sBDNiEkTg" name="Debug__configOK__dbg__dbgDeferMsg__84">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wd2mIUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_GXsSgAgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_weW8cUrcEemr9sBDNiEkTg" name="Debug__Server1Failure" source="__kywcAgwEea_md0mpENoqg" target="_weRc4ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_weXjgErcEemr9sBDNiEkTg" name="Debug__Server1Failure__96">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__Server1Failure&quot;,(char *)&quot;Running&quot;,(char *)&quot;Debug__Path__Server1Failure&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_X5K_UAprEeaGqPUk-4V4qQ" name="Server1Failure" event="_xM6tkApBEeaGqPUk-4V4qQ" port="_lxs5kApkEeaGqPUk-4V4qQ"/>
            </transition>
            <transition xmi:id="_weZ_wErcEemr9sBDNiEkTg" name="Debug__Server1Failure__S" guard="_weam0UrcEemr9sBDNiEkTg" source="_weRc4ErcEemr9sBDNiEkTg" target="_weUgMUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_weam0UrcEemr9sBDNiEkTg" name="Debug__GuardServer1Failure">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_weam0ErcEemr9sBDNiEkTg" name="Debug__GuardServer1Failure">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Running&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_web08ErcEemr9sBDNiEkTg" name="Debug__Server1Failure__S__98">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__Server1Failure__S&quot;,(char *)&quot;Debug__Path__Server1Failure&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wedqIErcEemr9sBDNiEkTg" name="Debug__Server1Failure__E" source="_weWVYErcEemr9sBDNiEkTg" target="__kywcAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_weeRMErcEemr9sBDNiEkTg" name="Debug__Server1Failure__E__99">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__Server1Failure__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Running&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wegGYErcEemr9sBDNiEkTg" name="Debug__Server1Failure__dbg__varChange" source="_weSrAUrcEemr9sBDNiEkTg" target="_weSrAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wegtcErcEemr9sBDNiEkTg" name="Debug__Server1Failure__dbg__varChange__101">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wegGYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wehUgErcEemr9sBDNiEkTg" name="Debug__Server1Failure__dbg__setBreakPoint" source="_weSrAUrcEemr9sBDNiEkTg" target="_weSrAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_weh7kUrcEemr9sBDNiEkTg" name="Debug__Server1Failure__dbg__setBreakPoint__102">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_weh7kErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_weiioErcEemr9sBDNiEkTg" name="Debug__Server1Failure__dbg__remBreakPoint" source="_weSrAUrcEemr9sBDNiEkTg" target="_weSrAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wejJsErcEemr9sBDNiEkTg" name="Debug__Server1Failure__dbg__remBreakPoint__103">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_weiioUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wejwwErcEemr9sBDNiEkTg" name="Debug__Server1Failure__dbg__viewBreakPoints" source="_weSrAUrcEemr9sBDNiEkTg" target="_weSrAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wejwwkrcEemr9sBDNiEkTg" name="Debug__Server1Failure__dbg__viewBreakPoints__104">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wejwwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wekX0ErcEemr9sBDNiEkTg" name="Debug__Server1Failure__dbg__dbgSetExecMode" source="_weSrAUrcEemr9sBDNiEkTg" target="_weSrAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wekX0krcEemr9sBDNiEkTg" name="Debug__Server1Failure__dbg__dbgSetExecMode__105">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wekX0UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wek-4ErcEemr9sBDNiEkTg" name="Debug__Server1Failure__dbg__dbgDeferMsg" source="_weSrAUrcEemr9sBDNiEkTg" target="_weSrAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wek-4krcEemr9sBDNiEkTg" name="Debug__Server1Failure__dbg__dbgDeferMsg__106">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wek-4UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_GXsSgAgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wfSwkErcEemr9sBDNiEkTg" name="Debug__ConfigNOK" source="_dWznsAgxEea_md0mpENoqg" target="_wfMp8ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfTXoErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__121">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__ConfigNOK&quot;,(char *)&quot;Config&quot;,(char *)&quot;Debug__Path__ConfigNOK&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wfUlwErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__S" guard="_wfVz4UrcEemr9sBDNiEkTg" source="_wfMp8ErcEemr9sBDNiEkTg" target="_wfPtQErcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wfVz4UrcEemr9sBDNiEkTg" name="Debug__GuardConfigNOK">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wfVz4ErcEemr9sBDNiEkTg" name="Debug__GuardConfigNOK">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Config&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfXCAErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__S__123">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__ConfigNOK__S&quot;,(char *)&quot;Debug__Path__ConfigNOK&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wfY3MErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__E" source="_wfQ7YUrcEemr9sBDNiEkTg" target="_NvBagAgxEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfY3MUrcEemr9sBDNiEkTg" name="Debug__ConfigNOK__E__124">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__ConfigNOK__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;ConfigFailure&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wfasYErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__dbg__varChange" source="_wfN4EUrcEemr9sBDNiEkTg" target="_wfN4EUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfbTcUrcEemr9sBDNiEkTg" name="Debug__ConfigNOK__dbg__varChange__126">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wfbTcErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wfb6gErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__dbg__setBreakPoint" source="_wfN4EUrcEemr9sBDNiEkTg" target="_wfN4EUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfchkErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__dbg__setBreakPoint__127">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wfb6gUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wfdIoErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__dbg__remBreakPoint" source="_wfN4EUrcEemr9sBDNiEkTg" target="_wfN4EUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfdvsErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__dbg__remBreakPoint__128">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wfdIoUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wfe90ErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__dbg__viewBreakPoints" source="_wfN4EUrcEemr9sBDNiEkTg" target="_wfN4EUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfe90krcEemr9sBDNiEkTg" name="Debug__ConfigNOK__dbg__viewBreakPoints__129">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wfe90UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wffk4ErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__dbg__dbgSetExecMode" source="_wfN4EUrcEemr9sBDNiEkTg" target="_wfN4EUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfgL8ErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__dbg__dbgSetExecMode__130">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wffk4UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wfgzAErcEemr9sBDNiEkTg" name="Debug__ConfigNOK__dbg__dbgDeferMsg" source="_wfN4EUrcEemr9sBDNiEkTg" target="_wfN4EUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfgzAkrcEemr9sBDNiEkTg" name="Debug__ConfigNOK__dbg__dbgDeferMsg__131">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wfgzAUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_GXsSgAgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wgGo4UrcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1" source="_wjMZIErcEemr9sBDNiEkTg" target="_wgBJUErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wgHP8ErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__143">
                <language>C++</language>
                <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;ConfigFailure&quot;,&quot;RetryConfig&quot;,&quot;ReadConfig&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;server2Failure&quot;,&quot;Running&quot;,&quot;IAmAlive&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Config&quot;,&quot;configOK&quot;,&quot;Running&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;Server1Failure&quot;,&quot;Running&quot;,&quot;IAmAlive&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;QueryConfig&quot;,&quot;Running&quot;,&quot;QueryConfig&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Config&quot;,&quot;ConfigNOK&quot;,&quot;ConfigFailure&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Init&quot;,&quot;&quot;,&quot;ReadConfig&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;ReadConfig&quot;,&quot;configLoaded&quot;,&quot;Config&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;MasterAnnouncment&quot;,&quot;Running&quot;,&quot;IAMMaster&quot;,&quot;ConfigProtocol&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
              </effect>
              <trigger xmi:id="_wjOOUErcEemr9sBDNiEkTg" name="ConnectionEstablished" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
              </trigger>
            </transition>
            <transition xmi:id="_wgJFIErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__S" guard="_wgJsMUrcEemr9sBDNiEkTg" source="_wgBJUErcEemr9sBDNiEkTg" target="_wgDlkUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wgJsMUrcEemr9sBDNiEkTg" name="Debug__GuardInit__ReadConfig__1">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wgJsMErcEemr9sBDNiEkTg" name="Debug__GuardInit__ReadConfig__1">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Init&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wgK6UErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__S__145">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__Init__ReadConfig__1__S&quot;,(char *)&quot;Debug__Path__Init__ReadConfig__1&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wgMvgErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__E" source="_wgFawUrcEemr9sBDNiEkTg" target="_sdehUAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wgN9oErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__E__146">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__Init__ReadConfig__1__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;ReadConfig&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wgQZ4ErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__dbg__varChange" source="_wgCXcUrcEemr9sBDNiEkTg" target="_wgCXcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wgRA8ErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__dbg__varChange__148">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wgQZ4UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wgSPEErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__dbg__setBreakPoint" source="_wgCXcUrcEemr9sBDNiEkTg" target="_wgCXcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wgS2IErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__dbg__setBreakPoint__149">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wgSPEUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wgTdMErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__dbg__remBreakPoint" source="_wgCXcUrcEemr9sBDNiEkTg" target="_wgCXcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wgUEQErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__dbg__remBreakPoint__150">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wgTdMUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wgUrUErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__dbg__viewBreakPoints" source="_wgCXcUrcEemr9sBDNiEkTg" target="_wgCXcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wgVSYUrcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__dbg__viewBreakPoints__151">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wgVSYErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wgV5cErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__dbg__dbgSetExecMode" source="_wgCXcUrcEemr9sBDNiEkTg" target="_wgCXcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wgWggErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__dbg__dbgSetExecMode__152">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wgV5cUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wgXHkErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__dbg__dbgDeferMsg" source="_wgCXcUrcEemr9sBDNiEkTg" target="_wgCXcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wgXuoErcEemr9sBDNiEkTg" name="Debug__Init__ReadConfig__1__dbg__dbgDeferMsg__153">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wgXHkUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_GXsSgAgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wg7IQUrcEemr9sBDNiEkTg" name="Debug__RetryConfig" source="_NvBagAgxEea_md0mpENoqg" target="_wg220ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wg7vUErcEemr9sBDNiEkTg" name="Debug__RetryConfig__165">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__RetryConfig&quot;,(char *)&quot;ConfigFailure&quot;,(char *)&quot;Debug__Path__RetryConfig&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_eihL0AkAEea_md0mpENoqg" port="_b1NrIAjLEea_md0mpENoqg">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wg9kgErcEemr9sBDNiEkTg" name="Debug__RetryConfig__S" guard="_wg-LkUrcEemr9sBDNiEkTg" source="_wg220ErcEemr9sBDNiEkTg" target="_wg5TEUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wg-LkUrcEemr9sBDNiEkTg" name="Debug__GuardRetryConfig">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wg-LkErcEemr9sBDNiEkTg" name="Debug__GuardRetryConfig">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;ConfigFailure&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wg_ZsErcEemr9sBDNiEkTg" name="Debug__RetryConfig__S__167">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__RetryConfig__S&quot;,(char *)&quot;Debug__Path__RetryConfig&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_whBO4ErcEemr9sBDNiEkTg" name="Debug__RetryConfig__E" source="_wg6hMUrcEemr9sBDNiEkTg" target="_sdehUAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_whBO4UrcEemr9sBDNiEkTg" name="Debug__RetryConfig__E__168">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__RetryConfig__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;ReadConfig&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_whDEEErcEemr9sBDNiEkTg" name="Debug__RetryConfig__dbg__varChange" source="_wg4E8UrcEemr9sBDNiEkTg" target="_wg4E8UrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_whDrIUrcEemr9sBDNiEkTg" name="Debug__RetryConfig__dbg__varChange__170">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_whDrIErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_whE5QErcEemr9sBDNiEkTg" name="Debug__RetryConfig__dbg__setBreakPoint" source="_wg4E8UrcEemr9sBDNiEkTg" target="_wg4E8UrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_whE5QkrcEemr9sBDNiEkTg" name="Debug__RetryConfig__dbg__setBreakPoint__171">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_whE5QUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_whGHYErcEemr9sBDNiEkTg" name="Debug__RetryConfig__dbg__remBreakPoint" source="_wg4E8UrcEemr9sBDNiEkTg" target="_wg4E8UrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_whGHYkrcEemr9sBDNiEkTg" name="Debug__RetryConfig__dbg__remBreakPoint__172">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_whGHYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_whHVgErcEemr9sBDNiEkTg" name="Debug__RetryConfig__dbg__viewBreakPoints" source="_wg4E8UrcEemr9sBDNiEkTg" target="_wg4E8UrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_whHVgkrcEemr9sBDNiEkTg" name="Debug__RetryConfig__dbg__viewBreakPoints__173">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_whHVgUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_whIjoErcEemr9sBDNiEkTg" name="Debug__RetryConfig__dbg__dbgSetExecMode" source="_wg4E8UrcEemr9sBDNiEkTg" target="_wg4E8UrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_whJKsErcEemr9sBDNiEkTg" name="Debug__RetryConfig__dbg__dbgSetExecMode__174">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_whIjoUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_whJxwErcEemr9sBDNiEkTg" name="Debug__RetryConfig__dbg__dbgDeferMsg" source="_wg4E8UrcEemr9sBDNiEkTg" target="_wg4E8UrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_whK_4ErcEemr9sBDNiEkTg" name="Debug__RetryConfig__dbg__dbgDeferMsg__175">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_whKY0ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_GXsSgAgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wh9qEUrcEemr9sBDNiEkTg" name="Debug__QueryConfig" source="__kywcAgwEea_md0mpENoqg" target="_wh5YoErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wh9qEkrcEemr9sBDNiEkTg" name="Debug__QueryConfig__190">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__QueryConfig&quot;,(char *)&quot;Running&quot;,(char *)&quot;Debug__Path__QueryConfig&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_nF2QAAnKEeaGqPUk-4V4qQ" name="QueryConfig" event="_BB3b0Al4Eea_md0mpENoqg" port="_GXsSgAgvEea_md0mpENoqg"/>
            </transition>
            <transition xmi:id="_wh_fQErcEemr9sBDNiEkTg" name="Debug__QueryConfig__S" guard="_wiAGUUrcEemr9sBDNiEkTg" source="_wh5YoErcEemr9sBDNiEkTg" target="_wh704UrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wiAGUUrcEemr9sBDNiEkTg" name="Debug__GuardQueryConfig">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wiAGUErcEemr9sBDNiEkTg" name="Debug__GuardQueryConfig">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Running&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wiAtYErcEemr9sBDNiEkTg" name="Debug__QueryConfig__S__192">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__QueryConfig__S&quot;,(char *)&quot;Debug__Path__QueryConfig&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wiCikErcEemr9sBDNiEkTg" name="Debug__QueryConfig__E" source="_wh8b8UrcEemr9sBDNiEkTg" target="__kywcAgwEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wiCikUrcEemr9sBDNiEkTg" name="Debug__QueryConfig__E__193">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__QueryConfig__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Running&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wiEXwErcEemr9sBDNiEkTg" name="Debug__QueryConfig__dbg__varChange" source="_wh6mwUrcEemr9sBDNiEkTg" target="_wh6mwUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wiE-0ErcEemr9sBDNiEkTg" name="Debug__QueryConfig__dbg__varChange__195">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wiEXwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wiFl4ErcEemr9sBDNiEkTg" name="Debug__QueryConfig__dbg__setBreakPoint" source="_wh6mwUrcEemr9sBDNiEkTg" target="_wh6mwUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wiGM8UrcEemr9sBDNiEkTg" name="Debug__QueryConfig__dbg__setBreakPoint__196">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wiGM8ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wiIpMErcEemr9sBDNiEkTg" name="Debug__QueryConfig__dbg__remBreakPoint" source="_wh6mwUrcEemr9sBDNiEkTg" target="_wh6mwUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wiJ3UUrcEemr9sBDNiEkTg" name="Debug__QueryConfig__dbg__remBreakPoint__197">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wiJ3UErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wiKeYErcEemr9sBDNiEkTg" name="Debug__QueryConfig__dbg__viewBreakPoints" source="_wh6mwUrcEemr9sBDNiEkTg" target="_wh6mwUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wiLFcUrcEemr9sBDNiEkTg" name="Debug__QueryConfig__dbg__viewBreakPoints__198">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wiLFcErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wiMTkErcEemr9sBDNiEkTg" name="Debug__QueryConfig__dbg__dbgSetExecMode" source="_wh6mwUrcEemr9sBDNiEkTg" target="_wh6mwUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wiM6oErcEemr9sBDNiEkTg" name="Debug__QueryConfig__dbg__dbgSetExecMode__199">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wiMTkUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wUZIIErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wiNhsErcEemr9sBDNiEkTg" name="Debug__QueryConfig__dbg__dbgDeferMsg" source="_wh6mwUrcEemr9sBDNiEkTg" target="_wh6mwUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wiOIwUrcEemr9sBDNiEkTg" name="Debug__QueryConfig__dbg__dbgDeferMsg__200">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wiOIwErcEemr9sBDNiEkTg" name="Debug__MSG" port="_GXsSgAgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wjNAMUrcEemr9sBDNiEkTg" name="Debug__InitDebug" source="_npsCMAgwEea_md0mpENoqg" target="_wjMZIErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wjNnQErcEemr9sBDNiEkTg" name="DebugCheck">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
              </effect>
            </transition>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_npsCMAgwEea_md0mpENoqg" name="Init"/>
            <subvertex xmi:type="uml:State" xmi:id="_sdehUAgwEea_md0mpENoqg" name="ReadConfig">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_EE4RAAigEea_md0mpENoqg" name="ReadConfig">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;ReadConfig&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    std::cout&lt;&lt;&quot;ENV: Reading the configuration \n&quot;;
    configTimer.informIn(UMLRTTimespec(3,0));
    systemConfig.loadConfig();
    std::cout&lt;&lt;&quot;ENV: Reading the configuration was done\n&quot;;

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::ReadConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wjbpsErcEemr9sBDNiEkTg" name="ReadConfig__215">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::ReadConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="__kywcAgwEea_md0mpENoqg" name="Running">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_BfusgAjIEea_md0mpENoqg" name="runningEntry">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;Running&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wjYmYErcEemr9sBDNiEkTg" name="Running__214">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_NvBagAgxEea_md0mpENoqg" name="ConfigFailure">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TasAwAjJEea_md0mpENoqg" name="failurEntry">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;ConfigFailure&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    std::cout&lt;&lt;&quot;ENV: The system is in Failure State, try to reload the config after 10 second\n&quot;;
    FailureTimer.informIn(UMLRTTimespec(10,0),4);

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::ConfigFailure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wjeF8ErcEemr9sBDNiEkTg" name="ConfigFailure__216">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::ConfigFailure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_dWznsAgxEea_md0mpENoqg" name="Config" kind="choice"/>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wZYV0ErcEemr9sBDNiEkTg" name="Debug__Path__configLoaded" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wZaLAUrcEemr9sBDNiEkTg" name="Debug__C__configLoaded">
              <connectionPoint xmi:id="_wZcAMUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wZdOUUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wZaLAkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_waYbYErcEemr9sBDNiEkTg" name="Debug__init__trans__configLoaded" source="_wZcAMUrcEemr9sBDNiEkTg" target="_waPRcUrcEemr9sBDNiEkTg"/>
                <transition xmi:id="_waYbYUrcEemr9sBDNiEkTg" name="Debug__Ex__ReadConfig" source="_waPRcUrcEemr9sBDNiEkTg" target="_waRtsErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_waxc8ErcEemr9sBDNiEkTg" name="Debug__Ex__ReadConfig__18">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configLoaded::Region1::Debug__Ex__ReadConfig&quot;,(char *)&quot;Debug__B__Ex__ReadConfig&quot;,(char *)&quot;Debug__B__Ac__configLoaded&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_waYbYkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_waZCcErcEemr9sBDNiEkTg" name="Debug__AC__configLoaded" source="_waRtsErcEemr9sBDNiEkTg" target="_waVYEErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_waZpgErcEemr9sBDNiEkTg" name="LogTransition" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;ENV: The transition from ReadConfig -> Config was taken\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configLoaded::Region1::Debug__AC__configLoaded&quot;,(char *)&quot;Debug__B__Ac__configLoaded&quot;,(char *)&quot;Debug__A__Ac__configLoaded&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_waZCcUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_waa3oErcEemr9sBDNiEkTg" name="Debug__end__trans__configLoaded" source="_waVYEErcEemr9sBDNiEkTg" target="_wZdOUUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wa6m4ErcEemr9sBDNiEkTg" name="Debug__end__trans__configLoaded__21">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configLoaded::Region1::Debug__end__trans__configLoaded&quot;,(char *)&quot;Debug__A__Ac__configLoaded&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_waa3oUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_waPRcUrcEemr9sBDNiEkTg" name="Debug__B__Ex__ReadConfig">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_waP4gErcEemr9sBDNiEkTg" name="Debug__B__Ex__ReadConfig">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ReadConfig&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configLoaded::Region1::Debug__B__Ex__ReadConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wacs0ErcEemr9sBDNiEkTg" name="Debug__B__Ex__ReadConfig__14">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configLoaded::Region1::Debug__B__Ex__ReadConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_waRtsErcEemr9sBDNiEkTg" name="Debug__B__Ac__configLoaded">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_waRtsUrcEemr9sBDNiEkTg" name="Debug__B__Ac__configLoaded">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ReadConfig&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;configLoaded&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configLoaded::Region1::Debug__B__Ac__configLoaded&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wakBkErcEemr9sBDNiEkTg" name="Debug__B__Ac__configLoaded__15">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configLoaded::Region1::Debug__B__Ac__configLoaded&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_waVYEErcEemr9sBDNiEkTg" name="Debug__A__Ac__configLoaded">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_waVYEUrcEemr9sBDNiEkTg" name="Debug__A__Ac__configLoaded">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;configLoaded&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configLoaded::Region1::Debug__A__Ac__configLoaded&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_warWUErcEemr9sBDNiEkTg" name="Debug__A__Ac__configLoaded__16">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configLoaded::Region1::Debug__A__Ac__configLoaded&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wbMTsErcEemr9sBDNiEkTg" name="Debug__Path__MasterAnnouncment" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wbOI4ErcEemr9sBDNiEkTg" name="Debug__C__MasterAnnouncment">
              <connectionPoint xmi:id="_wbP-EErcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wbRMMUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wbOI4UrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wb3CEErcEemr9sBDNiEkTg" name="Debug__init__trans__MasterAnnouncment" source="_wbP-EErcEemr9sBDNiEkTg" target="_wbxigErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wcMZQErcEemr9sBDNiEkTg" name="Debug__init__trans__MasterAnnouncment__40">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__init__trans__MasterAnnouncment&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Running&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wb3CEUrcEemr9sBDNiEkTg" name="Debug__Ex__Running" source="_wbxigErcEemr9sBDNiEkTg" target="_wbywoErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wcOOcErcEemr9sBDNiEkTg" name="Debug__Ex__Running__42">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__Ex__Running&quot;,(char *)&quot;Debug__B__Ex__Running&quot;,(char *)&quot;Debug__B__Ac__MasterAnnouncment&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wb3pIErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wb4QMErcEemr9sBDNiEkTg" name="Debug__AC__MasterAnnouncment" source="_wbywoErcEemr9sBDNiEkTg" target="_wb0l0ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wb43QErcEemr9sBDNiEkTg" name="RegisterMaster" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Master Annoucment from &quot;&lt;&lt; MasterName&lt;&lt;&quot;\n&quot;;
    if (strcmp((char *)MasterName,&quot;server1&quot;)==0)
    {
    systemConfig.MasterList[0]=true;
    if (AnnouncementServer1Id.isValid())
    AnnouncmentServer1.cancelTimer(AnnouncementServer1Id);
    AnnouncementServer1Id=AnnouncmentServer1.informEvery(UMLRTTimespec(AnnouncmentServerTimeout,0),4);
    }
    else if (strcmp((char *)MasterName,&quot;server2&quot;)==0)
    {
    systemConfig.MasterList[1]=true;
    if (AnnouncementServer2Id.isValid())
    AnnouncmentServer2.cancelTimer(AnnouncementServer2Id);
    AnnouncementServer2Id=AnnouncmentServer2.informEvery(UMLRTTimespec(AnnouncmentServerTimeout,0),4);
    }
    // the following code has been generated
    if ((systemConfig.RunningMode==1)&amp;&amp; (systemConfig.MasterList[0] ) &amp;&amp; (systemConfig.MasterList[1]))
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Violation, there are 2 master in passive mode\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__AC__MasterAnnouncment&quot;,(char *)&quot;Debug__B__Ac__MasterAnnouncment&quot;,(char *)&quot;Debug__A__Ac__MasterAnnouncment&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wb4QMUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wb5eUErcEemr9sBDNiEkTg" name="Debug__En__Running" source="_wb0l0ErcEemr9sBDNiEkTg" target="_wb1z8ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wb6FYErcEemr9sBDNiEkTg" name="runningEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__En__Running&quot;,(char *)&quot;Debug__A__Ac__MasterAnnouncment&quot;,(char *)&quot;Debug__A__En__Running&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wb5eUUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wb6scErcEemr9sBDNiEkTg" name="Debug__end__trans__MasterAnnouncment" source="_wb1z8ErcEemr9sBDNiEkTg" target="_wbRMMUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wcTG8ErcEemr9sBDNiEkTg" name="Debug__end__trans__MasterAnnouncment__46">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__end__trans__MasterAnnouncment&quot;,(char *)&quot;Debug__A__En__Running&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wb6scUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wbxigErcEemr9sBDNiEkTg" name="Debug__B__Ex__Running">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wbxigUrcEemr9sBDNiEkTg" name="Debug__B__Ex__Running">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__B__Ex__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wb8hoUrcEemr9sBDNiEkTg" name="Debug__B__Ex__Running__35">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__B__Ex__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wbywoErcEemr9sBDNiEkTg" name="Debug__B__Ac__MasterAnnouncment">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wbywoUrcEemr9sBDNiEkTg" name="Debug__B__Ac__MasterAnnouncment">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;MasterAnnouncment&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__B__Ac__MasterAnnouncment&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wcAzEUrcEemr9sBDNiEkTg" name="Debug__B__Ac__MasterAnnouncment__36">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__B__Ac__MasterAnnouncment&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wb0l0ErcEemr9sBDNiEkTg" name="Debug__A__Ac__MasterAnnouncment">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wb0l0UrcEemr9sBDNiEkTg" name="Debug__A__Ac__MasterAnnouncment">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;MasterAnnouncment&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__A__Ac__MasterAnnouncment&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wcFEgErcEemr9sBDNiEkTg" name="Debug__A__Ac__MasterAnnouncment__37">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__A__Ac__MasterAnnouncment&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wb1z8ErcEemr9sBDNiEkTg" name="Debug__A__En__Running">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wb1z8UrcEemr9sBDNiEkTg" name="Debug__A__En__Running">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__A__En__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wcIH0ErcEemr9sBDNiEkTg" name="Debug__A__En__Running__38">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__MasterAnnouncment::Region1::Debug__A__En__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wcX_cErcEemr9sBDNiEkTg" name="Debug__Path__server2Failure" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wcabsErcEemr9sBDNiEkTg" name="Debug__C__server2Failure">
              <connectionPoint xmi:id="_wceGEErcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wcgiUUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wcabsUrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wdCt0ErcEemr9sBDNiEkTg" name="Debug__init__trans__server2Failure" source="_wceGEErcEemr9sBDNiEkTg" target="_wc8AIErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wdVowErcEemr9sBDNiEkTg" name="Debug__init__trans__server2Failure__65">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__init__trans__server2Failure&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Running&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wdDU4ErcEemr9sBDNiEkTg" name="Debug__Ex__Running" source="_wc8AIErcEemr9sBDNiEkTg" target="_wc91UErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wdW24ErcEemr9sBDNiEkTg" name="Debug__Ex__Running__67">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__Ex__Running&quot;,(char *)&quot;Debug__B__Ex__Running&quot;,(char *)&quot;Debug__B__Ac__server2Failure&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wdDU4UrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wdD78ErcEemr9sBDNiEkTg" name="Debug__AC__server2Failure" source="_wc91UErcEemr9sBDNiEkTg" target="_wc_qgErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wdEjAErcEemr9sBDNiEkTg" name="Server2Failure" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;ENV: No announcment from server2, remove Server2 from masters list\n&quot;;
    systemConfig.MasterList[1]=false;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__AC__server2Failure&quot;,(char *)&quot;Debug__B__Ac__server2Failure&quot;,(char *)&quot;Debug__A__Ac__server2Failure&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wdD78UrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wdEjAUrcEemr9sBDNiEkTg" name="Debug__En__Running" source="_wc_qgErcEemr9sBDNiEkTg" target="_wdBfsErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wdFKEUrcEemr9sBDNiEkTg" name="runningEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__En__Running&quot;,(char *)&quot;Debug__A__Ac__server2Failure&quot;,(char *)&quot;Debug__A__En__Running&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wdFKEErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wdFxIErcEemr9sBDNiEkTg" name="Debug__end__trans__server2Failure" source="_wdBfsErcEemr9sBDNiEkTg" target="_wcgiUUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wdc9gErcEemr9sBDNiEkTg" name="Debug__end__trans__server2Failure__71">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__end__trans__server2Failure&quot;,(char *)&quot;Debug__A__En__Running&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wdFxIUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wc8AIErcEemr9sBDNiEkTg" name="Debug__B__Ex__Running">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wc8nMErcEemr9sBDNiEkTg" name="Debug__B__Ex__Running">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__B__Ex__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wdG_QUrcEemr9sBDNiEkTg" name="Debug__B__Ex__Running__60">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__B__Ex__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wc91UErcEemr9sBDNiEkTg" name="Debug__B__Ac__server2Failure">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wc91UUrcEemr9sBDNiEkTg" name="Debug__B__Ac__server2Failure">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;server2Failure&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__B__Ac__server2Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wdKCkErcEemr9sBDNiEkTg" name="Debug__B__Ac__server2Failure__61">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__B__Ac__server2Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wc_qgErcEemr9sBDNiEkTg" name="Debug__A__Ac__server2Failure">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wdARkErcEemr9sBDNiEkTg" name="Debug__A__Ac__server2Failure">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;server2Failure&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__A__Ac__server2Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wdNF4UrcEemr9sBDNiEkTg" name="Debug__A__Ac__server2Failure__62">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__A__Ac__server2Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wdBfsErcEemr9sBDNiEkTg" name="Debug__A__En__Running">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wdBfsUrcEemr9sBDNiEkTg" name="Debug__A__En__Running">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__A__En__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wdQJMErcEemr9sBDNiEkTg" name="Debug__A__En__Running__63">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__server2Failure::Region1::Debug__A__En__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wdjEIErcEemr9sBDNiEkTg" name="Debug__Path__configOK" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wdkSQUrcEemr9sBDNiEkTg" name="Debug__C__configOK">
              <connectionPoint xmi:id="_wdlgYUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wdmugUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wdkSQkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wd-h8ErcEemr9sBDNiEkTg" name="Debug__init__trans__configOK" source="_wdlgYUrcEemr9sBDNiEkTg" target="_wd6QgErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_weI6AErcEemr9sBDNiEkTg" name="Debug__init__trans__configOK__89">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configOK::Region1::Debug__init__trans__configOK&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__configOK&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wd_JAErcEemr9sBDNiEkTg" name="Debug__Ac__configOK" source="_wd6QgErcEemr9sBDNiEkTg" target="_wd7eoErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wd_wEErcEemr9sBDNiEkTg" name="configCheckL" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;ENV: The configuration is OK, the transition config-> Running was taken, sending signal to servers and clients \n&quot;;
    ConfigComm.StartUp(this->systemConfig).send();
    std::cout&lt;&lt;&quot;ENV: ENV is in  Running State\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configOK::Region1::Debug__Ac__configOK&quot;,(char *)&quot;Debug__B__Ac__configOK&quot;,(char *)&quot;Debug__A__Ac__configOK&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wd_JAUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wd_wEUrcEemr9sBDNiEkTg" name="Debug__En__Running" source="_wd7eoErcEemr9sBDNiEkTg" target="_wd9T0ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_weAXIErcEemr9sBDNiEkTg" name="runningEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configOK::Region1::Debug__En__Running&quot;,(char *)&quot;Debug__A__Ac__configOK&quot;,(char *)&quot;Debug__A__En__configOK&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wd_wEkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_weA-MErcEemr9sBDNiEkTg" name="Debug__end__trans__configOK" source="_wd9T0ErcEemr9sBDNiEkTg" target="_wdmugUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_weNLcErcEemr9sBDNiEkTg" name="Debug__end__trans__configOK__93">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configOK::Region1::Debug__end__trans__configOK&quot;,(char *)&quot;Debug__A__En__configOK&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_weA-MUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wd6QgErcEemr9sBDNiEkTg" name="Debug__B__Ac__configOK">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wd6QgUrcEemr9sBDNiEkTg" name="Debug__B__Ac__configOK">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;configOK&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configOK::Region1::Debug__B__Ac__configOK&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_weCzYErcEemr9sBDNiEkTg" name="Debug__B__Ac__configOK__85">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configOK::Region1::Debug__B__Ac__configOK&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wd7eoErcEemr9sBDNiEkTg" name="Debug__A__Ac__configOK">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wd7eoUrcEemr9sBDNiEkTg" name="Debug__A__Ac__configOK">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;configOK&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configOK::Region1::Debug__A__Ac__configOK&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_weEokUrcEemr9sBDNiEkTg" name="Debug__A__Ac__configOK__86">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configOK::Region1::Debug__A__Ac__configOK&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wd9T0ErcEemr9sBDNiEkTg" name="Debug__A__En__configOK">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wd9T0UrcEemr9sBDNiEkTg" name="Debug__A__En__configOK">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configOK::Region1::Debug__A__En__configOK&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_weHE0UrcEemr9sBDNiEkTg" name="Debug__A__En__configOK__87">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__configOK::Region1::Debug__A__En__configOK&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_weRc4ErcEemr9sBDNiEkTg" name="Debug__Path__Server1Failure" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_weSrAUrcEemr9sBDNiEkTg" name="Debug__C__Server1Failure">
              <connectionPoint xmi:id="_weUgMUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_weWVYErcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_weSrAkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wesToErcEemr9sBDNiEkTg" name="Debug__init__trans__Server1Failure" source="_weUgMUrcEemr9sBDNiEkTg" target="_wenbIUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfAcsErcEemr9sBDNiEkTg" name="Debug__init__trans__Server1Failure__112">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__init__trans__Server1Failure&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Running&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wes6sErcEemr9sBDNiEkTg" name="Debug__Ex__Running" source="_wenbIUrcEemr9sBDNiEkTg" target="_weopQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfCR4ErcEemr9sBDNiEkTg" name="Debug__Ex__Running__114">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__Ex__Running&quot;,(char *)&quot;Debug__B__Ex__Running&quot;,(char *)&quot;Debug__B__Ac__Server1Failure&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wes6sUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wes6skrcEemr9sBDNiEkTg" name="Debug__AC__Server1Failure" source="_weopQErcEemr9sBDNiEkTg" target="_weqecErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wethwErcEemr9sBDNiEkTg" name="Server1failure" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;ENV: No announcment from server1, remove server1 from masters list\n&quot;;
    systemConfig.MasterList[0]=false;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__AC__Server1Failure&quot;,(char *)&quot;Debug__B__Ac__Server1Failure&quot;,(char *)&quot;Debug__A__Ac__Server1Failure&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wes6s0rcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_weuI0ErcEemr9sBDNiEkTg" name="Debug__En__Running" source="_weqecErcEemr9sBDNiEkTg" target="_werskErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wev-AErcEemr9sBDNiEkTg" name="runningEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__En__Running&quot;,(char *)&quot;Debug__A__Ac__Server1Failure&quot;,(char *)&quot;Debug__A__En__Running&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_weuv4ErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wewlEErcEemr9sBDNiEkTg" name="Debug__end__trans__Server1Failure" source="_werskErcEemr9sBDNiEkTg" target="_weWVYErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfHxcErcEemr9sBDNiEkTg" name="Debug__end__trans__Server1Failure__118">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__end__trans__Server1Failure&quot;,(char *)&quot;Debug__A__En__Running&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wexMIErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wenbIUrcEemr9sBDNiEkTg" name="Debug__B__Ex__Running">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_weoCMErcEemr9sBDNiEkTg" name="Debug__B__Ex__Running">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__B__Ex__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wezBUErcEemr9sBDNiEkTg" name="Debug__B__Ex__Running__107">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__B__Ex__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_weopQErcEemr9sBDNiEkTg" name="Debug__B__Ac__Server1Failure">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_weopQUrcEemr9sBDNiEkTg" name="Debug__B__Ac__Server1Failure">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Server1Failure&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__B__Ac__Server1Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_we2EoUrcEemr9sBDNiEkTg" name="Debug__B__Ac__Server1Failure__108">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__B__Ac__Server1Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_weqecErcEemr9sBDNiEkTg" name="Debug__A__Ac__Server1Failure">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_weqecUrcEemr9sBDNiEkTg" name="Debug__A__Ac__Server1Failure">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Server1Failure&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__A__Ac__Server1Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_we5vAErcEemr9sBDNiEkTg" name="Debug__A__Ac__Server1Failure__109">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__A__Ac__Server1Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_werskErcEemr9sBDNiEkTg" name="Debug__A__En__Running">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_werskUrcEemr9sBDNiEkTg" name="Debug__A__En__Running">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__A__En__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_we7kMErcEemr9sBDNiEkTg" name="Debug__A__En__Running__110">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Server1Failure::Region1::Debug__A__En__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wfMp8ErcEemr9sBDNiEkTg" name="Debug__Path__ConfigNOK" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wfN4EUrcEemr9sBDNiEkTg" name="Debug__C__ConfigNOK">
              <connectionPoint xmi:id="_wfPtQErcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wfQ7YUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wfN4EkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wfpV4ErcEemr9sBDNiEkTg" name="Debug__init__trans__ConfigNOK" source="_wfPtQErcEemr9sBDNiEkTg" target="_wfkdYUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wf3_YErcEemr9sBDNiEkTg" name="Debug__init__trans__ConfigNOK__136">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__ConfigNOK::Region1::Debug__init__trans__ConfigNOK&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__ConfigNOK&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wfp88ErcEemr9sBDNiEkTg" name="Debug__Ac__ConfigNOK" source="_wfkdYUrcEemr9sBDNiEkTg" target="_wflrgErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfp88krcEemr9sBDNiEkTg" name="LogFailure" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;ENV: The configuration is not OK, the transition configCheck-> ConfigFailure was taken\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__ConfigNOK::Region1::Debug__Ac__ConfigNOK&quot;,(char *)&quot;Debug__B__Ac__ConfigNOK&quot;,(char *)&quot;Debug__A__Ac__ConfigNOK&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wfp88UrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wfqkAErcEemr9sBDNiEkTg" name="Debug__En__ConfigFailure" source="_wflrgErcEemr9sBDNiEkTg" target="_wfou0ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wfrLEErcEemr9sBDNiEkTg" name="failurEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;ENV: The system is in Failure State, try to reload the config after 10 second\n&quot;;
    FailureTimer.informIn(UMLRTTimespec(10,0),4);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__ConfigNOK::Region1::Debug__En__ConfigFailure&quot;,(char *)&quot;Debug__A__Ac__ConfigNOK&quot;,(char *)&quot;Debug__A__En__ConfigNOK&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wfqkAUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wfrLEUrcEemr9sBDNiEkTg" name="Debug__end__trans__ConfigNOK" source="_wfou0ErcEemr9sBDNiEkTg" target="_wfQ7YUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wf9e8ErcEemr9sBDNiEkTg" name="Debug__end__trans__ConfigNOK__140">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__ConfigNOK::Region1::Debug__end__trans__ConfigNOK&quot;,(char *)&quot;Debug__A__En__ConfigNOK&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wfrLEkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wfkdYUrcEemr9sBDNiEkTg" name="Debug__B__Ac__ConfigNOK">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wfkdYkrcEemr9sBDNiEkTg" name="Debug__B__Ac__ConfigNOK">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ConfigNOK&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__ConfigNOK::Region1::Debug__B__Ac__ConfigNOK&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wftAQUrcEemr9sBDNiEkTg" name="Debug__B__Ac__ConfigNOK__132">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__ConfigNOK::Region1::Debug__B__Ac__ConfigNOK&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wflrgErcEemr9sBDNiEkTg" name="Debug__A__Ac__ConfigNOK">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wflrgUrcEemr9sBDNiEkTg" name="Debug__A__Ac__ConfigNOK">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ConfigNOK&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;ConfigFailure&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__ConfigNOK::Region1::Debug__A__Ac__ConfigNOK&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wfxRsErcEemr9sBDNiEkTg" name="Debug__A__Ac__ConfigNOK__133">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__ConfigNOK::Region1::Debug__A__Ac__ConfigNOK&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wfou0ErcEemr9sBDNiEkTg" name="Debug__A__En__ConfigNOK">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wfou0UrcEemr9sBDNiEkTg" name="Debug__A__En__ConfigNOK">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ConfigFailure&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__ConfigNOK::Region1::Debug__A__En__ConfigNOK&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wf08EErcEemr9sBDNiEkTg" name="Debug__A__En__ConfigNOK__134">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__ConfigNOK::Region1::Debug__A__En__ConfigNOK&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wgBJUErcEemr9sBDNiEkTg" name="Debug__Path__Init__ReadConfig__1" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wgCXcUrcEemr9sBDNiEkTg" name="Debug__C__Init__ReadConfig__1">
              <connectionPoint xmi:id="_wgDlkUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wgFawUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wgCXckrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wgecUErcEemr9sBDNiEkTg" name="Debug__init__trans__Init__ReadConfig__1" source="_wgDlkUrcEemr9sBDNiEkTg" target="_wgax8UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wgqCgErcEemr9sBDNiEkTg" name="Debug__init__trans__Init__ReadConfig__1__158">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Init__ReadConfig__1::Region1::Debug__init__trans__Init__ReadConfig__1&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Init__ReadConfig__1&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wgecUUrcEemr9sBDNiEkTg" name="Debug__Ac__Init__ReadConfig__1" source="_wgax8UrcEemr9sBDNiEkTg" target="_wgcAEErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wgfDYErcEemr9sBDNiEkTg" name="ENVInit" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;ENV: Intialization\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Init__ReadConfig__1::Region1::Debug__Ac__Init__ReadConfig__1&quot;,(char *)&quot;Debug__B__Ac__Init__ReadConfig__1&quot;,(char *)&quot;Debug__A__Ac__Init__ReadConfig__1&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wgecUkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wgfqcErcEemr9sBDNiEkTg" name="Debug__En__ReadConfig" source="_wgcAEErcEemr9sBDNiEkTg" target="_wgdOMErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wggRgErcEemr9sBDNiEkTg" name="ReadConfig" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;ENV: Reading the configuration \n&quot;;
    configTimer.informIn(UMLRTTimespec(3,0));
    systemConfig.loadConfig();
    std::cout&lt;&lt;&quot;ENV: Reading the configuration was done\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Init__ReadConfig__1::Region1::Debug__En__ReadConfig&quot;,(char *)&quot;Debug__A__Ac__Init__ReadConfig__1&quot;,(char *)&quot;Debug__A__En__Init__ReadConfig__1&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wgfqcUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wgg4kErcEemr9sBDNiEkTg" name="Debug__end__trans__Init__ReadConfig__1" source="_wgdOMErcEemr9sBDNiEkTg" target="_wgFawUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wgwwMErcEemr9sBDNiEkTg" name="Debug__end__trans__Init__ReadConfig__1__162">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Init__ReadConfig__1::Region1::Debug__end__trans__Init__ReadConfig__1&quot;,(char *)&quot;Debug__A__En__Init__ReadConfig__1&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wgg4kUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wgax8UrcEemr9sBDNiEkTg" name="Debug__B__Ac__Init__ReadConfig__1">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wgax8krcEemr9sBDNiEkTg" name="Debug__B__Ac__Init__ReadConfig__1">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Init__ReadConfig__1&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Init__ReadConfig__1::Region1::Debug__B__Ac__Init__ReadConfig__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wgiGsErcEemr9sBDNiEkTg" name="Debug__B__Ac__Init__ReadConfig__1__154">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Init__ReadConfig__1::Region1::Debug__B__Ac__Init__ReadConfig__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wgcAEErcEemr9sBDNiEkTg" name="Debug__A__Ac__Init__ReadConfig__1">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wgcAEUrcEemr9sBDNiEkTg" name="Debug__A__Ac__Init__ReadConfig__1">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Init__ReadConfig__1&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;ReadConfig&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Init__ReadConfig__1::Region1::Debug__A__Ac__Init__ReadConfig__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wglKAErcEemr9sBDNiEkTg" name="Debug__A__Ac__Init__ReadConfig__1__155">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Init__ReadConfig__1::Region1::Debug__A__Ac__Init__ReadConfig__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wgdOMErcEemr9sBDNiEkTg" name="Debug__A__En__Init__ReadConfig__1">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wgdOMUrcEemr9sBDNiEkTg" name="Debug__A__En__Init__ReadConfig__1">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ReadConfig&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Init__ReadConfig__1::Region1::Debug__A__En__Init__ReadConfig__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wgnmQUrcEemr9sBDNiEkTg" name="Debug__A__En__Init__ReadConfig__1__156">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__Init__ReadConfig__1::Region1::Debug__A__En__Init__ReadConfig__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wg220ErcEemr9sBDNiEkTg" name="Debug__Path__RetryConfig" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wg4E8UrcEemr9sBDNiEkTg" name="Debug__C__RetryConfig">
              <connectionPoint xmi:id="_wg5TEUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wg6hMUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wg4E8krcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_whX0MErcEemr9sBDNiEkTg" name="Debug__init__trans__RetryConfig" source="_wg5TEUrcEemr9sBDNiEkTg" target="_whRtkUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_whrWMErcEemr9sBDNiEkTg" name="Debug__init__trans__RetryConfig__181">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__init__trans__RetryConfig&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__ConfigFailure&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_whYbQErcEemr9sBDNiEkTg" name="Debug__Ex__ConfigFailure" source="_whRtkUrcEemr9sBDNiEkTg" target="_whS7sErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_whtLYErcEemr9sBDNiEkTg" name="Debug__Ex__ConfigFailure__183">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__Ex__ConfigFailure&quot;,(char *)&quot;Debug__B__Ex__ConfigFailure&quot;,(char *)&quot;Debug__B__Ac__RetryConfig&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_whYbQUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_whZCUErcEemr9sBDNiEkTg" name="Debug__AC__RetryConfig" source="_whS7sErcEemr9sBDNiEkTg" target="_whUw4ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_whZpYErcEemr9sBDNiEkTg" name="retry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;ENV: retrying configuation, The transtion Failure -> readConfig was taken \n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__AC__RetryConfig&quot;,(char *)&quot;Debug__B__Ac__RetryConfig&quot;,(char *)&quot;Debug__A__Ac__RetryConfig&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_whZCUUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_whZpYUrcEemr9sBDNiEkTg" name="Debug__En__ReadConfig" source="_whUw4ErcEemr9sBDNiEkTg" target="_whWmEErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_whaQcErcEemr9sBDNiEkTg" name="ReadConfig" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;ENV: Reading the configuration \n&quot;;
    configTimer.informIn(UMLRTTimespec(3,0));
    systemConfig.loadConfig();
    std::cout&lt;&lt;&quot;ENV: Reading the configuration was done\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__En__ReadConfig&quot;,(char *)&quot;Debug__A__Ac__RetryConfig&quot;,(char *)&quot;Debug__A__En__ReadConfig&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_whZpYkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wha3gErcEemr9sBDNiEkTg" name="Debug__end__trans__RetryConfig" source="_whWmEErcEemr9sBDNiEkTg" target="_wg6hMUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_whz5EErcEemr9sBDNiEkTg" name="Debug__end__trans__RetryConfig__187">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__end__trans__RetryConfig&quot;,(char *)&quot;Debug__A__En__ReadConfig&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_whbekErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_whRtkUrcEemr9sBDNiEkTg" name="Debug__B__Ex__ConfigFailure">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_whRtkkrcEemr9sBDNiEkTg" name="Debug__B__Ex__ConfigFailure">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ConfigFailure&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__B__Ex__ConfigFailure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_whcssErcEemr9sBDNiEkTg" name="Debug__B__Ex__ConfigFailure__176">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__B__Ex__ConfigFailure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_whS7sErcEemr9sBDNiEkTg" name="Debug__B__Ac__RetryConfig">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_whS7sUrcEemr9sBDNiEkTg" name="Debug__B__Ac__RetryConfig">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ConfigFailure&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;RetryConfig&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__B__Ac__RetryConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_whfwAUrcEemr9sBDNiEkTg" name="Debug__B__Ac__RetryConfig__177">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__B__Ac__RetryConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_whUw4ErcEemr9sBDNiEkTg" name="Debug__A__Ac__RetryConfig">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_whUw4UrcEemr9sBDNiEkTg" name="Debug__A__Ac__RetryConfig">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RetryConfig&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;ReadConfig&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__A__Ac__RetryConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_whkBcUrcEemr9sBDNiEkTg" name="Debug__A__Ac__RetryConfig__178">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__A__Ac__RetryConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_whWmEErcEemr9sBDNiEkTg" name="Debug__A__En__ReadConfig">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_whXNIErcEemr9sBDNiEkTg" name="Debug__A__En__ReadConfig">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ReadConfig&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__A__En__ReadConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_whnEwErcEemr9sBDNiEkTg" name="Debug__A__En__ReadConfig__179">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__RetryConfig::Region1::Debug__A__En__ReadConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wh5YoErcEemr9sBDNiEkTg" name="Debug__Path__QueryConfig" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wh6mwUrcEemr9sBDNiEkTg" name="Debug__C__QueryConfig">
              <connectionPoint xmi:id="_wh704UrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wh8b8UrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wh6mwkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wia9EErcEemr9sBDNiEkTg" name="Debug__init__trans__QueryConfig" source="_wh704UrcEemr9sBDNiEkTg" target="_wiSaMErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wiufEErcEemr9sBDNiEkTg" name="Debug__init__trans__QueryConfig__206">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__init__trans__QueryConfig&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Running&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wibkIErcEemr9sBDNiEkTg" name="Debug__Ex__Running" source="_wiSaMErcEemr9sBDNiEkTg" target="_wiUPYErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wiwUQErcEemr9sBDNiEkTg" name="Debug__Ex__Running__208">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__Ex__Running&quot;,(char *)&quot;Debug__B__Ex__Running&quot;,(char *)&quot;Debug__B__Ac__QueryConfig&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wibkIUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wicLMErcEemr9sBDNiEkTg" name="Debug__AC__QueryConfig" source="_wiUPYErcEemr9sBDNiEkTg" target="_wiWEkErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wicyQErcEemr9sBDNiEkTg" name="configReply" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;ENV: The Config request replied at index&quot; &lt;&lt; msg->sapIndex0_&lt;&lt; &quot;\n&quot;;
    int tempid=msg->sapIndex0_;
    ConfigComm.ReplyConfig(systemConfig).sendAt(tempid);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__AC__QueryConfig&quot;,(char *)&quot;Debug__B__Ac__QueryConfig&quot;,(char *)&quot;Debug__A__Ac__QueryConfig&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wicLMUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_widZUErcEemr9sBDNiEkTg" name="Debug__En__Running" source="_wiWEkErcEemr9sBDNiEkTg" target="_wiX5wErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wifOgErcEemr9sBDNiEkTg" name="runningEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__En__Running&quot;,(char *)&quot;Debug__A__Ac__QueryConfig&quot;,(char *)&quot;Debug__A__En__Running&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_widZUUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wif1kErcEemr9sBDNiEkTg" name="Debug__end__trans__QueryConfig" source="_wiX5wErcEemr9sBDNiEkTg" target="_wh8b8UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wi1MwErcEemr9sBDNiEkTg" name="Debug__end__trans__QueryConfig__212">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__end__trans__QueryConfig&quot;,(char *)&quot;Debug__A__En__Running&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wif1kUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wUZIIErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wiSaMErcEemr9sBDNiEkTg" name="Debug__B__Ex__Running">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wiSaMUrcEemr9sBDNiEkTg" name="Debug__B__Ex__Running">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__B__Ex__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wihqwErcEemr9sBDNiEkTg" name="Debug__B__Ex__Running__201">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__B__Ex__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wiUPYErcEemr9sBDNiEkTg" name="Debug__B__Ac__QueryConfig">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wiUPYUrcEemr9sBDNiEkTg" name="Debug__B__Ac__QueryConfig">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;QueryConfig&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__B__Ac__QueryConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wikuEErcEemr9sBDNiEkTg" name="Debug__B__Ac__QueryConfig__202">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__B__Ac__QueryConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wiWEkErcEemr9sBDNiEkTg" name="Debug__A__Ac__QueryConfig">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wiWEkUrcEemr9sBDNiEkTg" name="Debug__A__Ac__QueryConfig">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;QueryConfig&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__A__Ac__QueryConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wioYcUrcEemr9sBDNiEkTg" name="Debug__A__Ac__QueryConfig__203">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__A__Ac__QueryConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wiX5wErcEemr9sBDNiEkTg" name="Debug__A__En__Running">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wiX5wUrcEemr9sBDNiEkTg" name="Debug__A__En__Running">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Running&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__A__En__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wirbwErcEemr9sBDNiEkTg" name="Debug__A__En__Running__204">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::ENV::ENV::StateMachine1::Region1::Debug__C__QueryConfig::Region1::Debug__A__En__Running&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_wjMZIErcEemr9sBDNiEkTg" name="Debug__InitState"/>
          </region>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUUPoErcEemr9sBDNiEkTg" name="Debug__recallAllMsg" specification="_wUTBgErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>ConfigComm.recallAll();
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wU6skUrcEemr9sBDNiEkTg" name="Debug__variablesViewMethod" specification="_wU6skErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;AnnouncmentServerTimeout,&quot;);
tempS.append(&quot;Integer,&quot;);
if(AnnouncmentServerTimeout!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,AnnouncmentServerTimeout);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wVOOkErcEemr9sBDNiEkTg" name="Debug__variablesChange" specification="_wVEdkErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;AnnouncmentServerTimeout&quot;==tempVarName){
    AnnouncmentServerTimeout=atoi(varValue);
    return true;
}else 
    return false;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wV8AQErcEemr9sBDNiEkTg" name="Debug__sendEvent" specification="_wVjlwErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_wUTBgErcEemr9sBDNiEkTg" name="Debug__recallAllMsg" visibility="private" method="_wUUPoErcEemr9sBDNiEkTg"/>
        <ownedOperation xmi:id="_wU6skErcEemr9sBDNiEkTg" name="Debug__variablesView" visibility="private" method="_wU6skUrcEemr9sBDNiEkTg"/>
        <ownedOperation xmi:id="_wVEdkErcEemr9sBDNiEkTg" name="Debug__variablesChange" visibility="private" method="_wVOOkErcEemr9sBDNiEkTg">
          <ownedParameter xmi:id="_wVJ9IErcEemr9sBDNiEkTg" name="methodReturn" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wVKkMErcEemr9sBDNiEkTg" name="varName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wVNngErcEemr9sBDNiEkTg" name="varValue">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_wVjlwErcEemr9sBDNiEkTg" name="Debug__sendEvent" visibility="private" method="_wV8AQErcEemr9sBDNiEkTg">
          <ownedParameter xmi:id="_wVla8ErcEemr9sBDNiEkTg" name="eventSourceKind">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wVrhkErcEemr9sBDNiEkTg" name="eventType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wVt90ErcEemr9sBDNiEkTg" name="instanceName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wVvzAUrcEemr9sBDNiEkTg" name="capsuleIndex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wVwaEErcEemr9sBDNiEkTg" name="signalName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wVyPQErcEemr9sBDNiEkTg" name="capsuleName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wV15oErcEemr9sBDNiEkTg" name="sourceName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wV2gsErcEemr9sBDNiEkTg" name="reserve1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wV3HwErcEemr9sBDNiEkTg" name="reserve2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wV6LEErcEemr9sBDNiEkTg" name="reserve3">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Dependency" xmi:id="_Y0NjUAxwEeaB2MeL96fedA" client="_sMZ5EAgoEea_md0mpENoqg" supplier="_nk_BAAgzEea_md0mpENoqg"/>
      <packagedElement xmi:type="uml:Dependency" xmi:id="_aaXBwAxwEeaB2MeL96fedA" client="_sMZ5EAgoEea_md0mpENoqg" supplier="_v000cAgsEea_md0mpENoqg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_fXXuUAxwEeaB2MeL96fedA" memberEnd="_fXb_wAxwEeaB2MeL96fedA _fXcm0AxwEeaB2MeL96fedA">
        <eAnnotations xmi:id="_fXaKkAxwEeaB2MeL96fedA" source="org.eclipse.papyrus">
          <details xmi:id="_fXaxoAxwEeaB2MeL96fedA" key="nature" value="UML_Nature"/>
        </eAnnotations>
        <ownedEnd xmi:id="_fXcm0AxwEeaB2MeL96fedA" name="env" type="_sMZ5EAgoEea_md0mpENoqg" association="_fXXuUAxwEeaB2MeL96fedA"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_z1vioAggEea_md0mpENoqg" name="Hosts">
      <packagedElement xmi:type="uml:Dependency" xmi:id="_wVFC0AghEea_md0mpENoqg" client="_z1vioAggEea_md0mpENoqg" supplier="_OiTE0AghEea_md0mpENoqg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_4_oYIAghEea_md0mpENoqg" name="Host" isActive="true">
        <ownedAttribute xmi:id="_qKL_IAgnEea_md0mpENoqg" name="hostInfo" type="_JesyoAgiEea_md0mpENoqg"/>
        <ownedAttribute xmi:id="_wp2QEAltEea_md0mpENoqg" name="hostConfig" type="_Y1UDYAg6Eea_md0mpENoqg"/>
        <ownedAttribute xmi:id="_MFku4Ao-EeaGqPUk-4V4qQ" name="TimerId">
          <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_yqPtMgxwEeaB2MeL96fedA" name="hostinfo" type="_JesyoAgiEea_md0mpENoqg" aggregation="composite" association="_yqOfEAxwEeaB2MeL96fedA"/>
        <ownedAttribute xmi:id="_z8hNYQxwEeaB2MeL96fedA" name="configuration" type="_Y1UDYAg6Eea_md0mpENoqg" aggregation="composite" association="_z8f_QAxwEeaB2MeL96fedA"/>
        <ownedAttribute xmi:id="_dCa_wPMYEeauO5SNGpOV7w" name="logfile"/>
        <ownedAttribute xmi:id="_nU84IPMbEeauO5SNGpOV7w" name="ts">
          <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IWYV4G6NEeSyDdTKostG4Q"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_G0bAoPMlEeauO5SNGpOV7w" name="messageID">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Real"/>
          <defaultValue xmi:type="uml:LiteralReal" xmi:id="_G0bAofMlEeauO5SNGpOV7w"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_xCGHkAgmEea_md0mpENoqg" name="Server" classifierBehavior="_lT4V0AlLEea_md0mpENoqg" isActive="true">
        <generalization xmi:id="_6zESYAgmEea_md0mpENoqg" general="_4_oYIAghEea_md0mpENoqg"/>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_-3KD0AgvEea_md0mpENoqg" name="ConfigComm" visibility="protected" type="_v000cAgsEea_md0mpENoqg" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_xByucAlLEea_md0mpENoqg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_xB_iwAlLEea_md0mpENoqg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_pQ6HcAnMEeaGqPUk-4V4qQ" name="ServerComm" visibility="public" type="_4--ccAnEEeaGqPUk-4V4qQ" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_etWXMAnOEeaGqPUk-4V4qQ" value="5"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_euWcwAnOEeaGqPUk-4V4qQ" value="5"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_HIvrsApCEeaGqPUk-4V4qQ" name="Master" visibility="public" type="_f2ud0ApBEeaGqPUk-4V4qQ" isOrdered="true" aggregation="composite" isBehavior="true"/>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_ZDrx0ApDEeaGqPUk-4V4qQ" name="KeepAliveTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_Vj1U4ApFEeaGqPUk-4V4qQ" name="MasterAnnounceTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_6YR3oApGEeaGqPUk-4V4qQ" name="KeepAliveTimerId">
          <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_Ceg-8ApHEeaGqPUk-4V4qQ" name="KeepAliveTimeOut">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_Ceg-8QpHEeaGqPUk-4V4qQ" value="5"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_N795sApHEeaGqPUk-4V4qQ" name="AnnouncementTimerId">
          <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_YVMXUApHEeaGqPUk-4V4qQ" name="AnnouncementTimeOut">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_YVMXUQpHEeaGqPUk-4V4qQ" value="4"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_855RMAs1EeaGqPUk-4V4qQ" name="Timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_rmnI0OM8EeaTpaLNj-zYpw" name="Slave" visibility="public" type="_f2ud0ApBEeaGqPUk-4V4qQ" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_wYTXwErcEemr9sBDNiEkTg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
          <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wYUl4UrcEemr9sBDNiEkTg" value="1"/>
          <upperValue xmi:type="uml:LiteralInteger" xmi:id="_wYVM8ErcEemr9sBDNiEkTg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wYzHAErcEemr9sBDNiEkTg" name="Debug__flag">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wY0VIErcEemr9sBDNiEkTg" name="Debug__variablesData">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wY0VIUrcEemr9sBDNiEkTg" name="Debug__event">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wY1jQUrcEemr9sBDNiEkTg" name="Debug__SRO">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_lT4V0AlLEea_md0mpENoqg" name="ServerStateMachine">
          <region xmi:id="_lvCAwAlLEea_md0mpENoqg" name="Region1">
            <transition xmi:id="_myR7kAlNEea_md0mpENoqg" name="Init__StandBy__3" source="_wuN9YErcEemr9sBDNiEkTg" target="_jLPjcAlNEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vR0TsAlNEea_md0mpENoqg" name="InitLog">
                <language>C++</language>
                <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: Intialization\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Init__StandBy__3&quot;,(char *)&quot;Debug__Path__Init__StandBy__3&quot;,(char *)&quot;StandBy&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_fhk4oAlOEea_md0mpENoqg" name="StandBy__CheckConfig__6" source="_wzW8EErcEemr9sBDNiEkTg" target="_Rrrc0AlvEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_jEMbEAlfEea_md0mpENoqg" name="StartupServer">
                <language>C++</language>
                <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: StartingUp\n&quot;;
    this->hostConfig=config;
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Configuration is:&quot;&lt;&lt; config.RunningMode&lt;&lt;&quot;\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::StandBy__CheckConfig__6&quot;,(char *)&quot;Debug__Path__StandBy__CheckConfig__6&quot;,(char *)&quot;CheckConfig&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_l1V8wAlOEea_md0mpENoqg" name="ServerFaliure" source="_wkq_0ErcEemr9sBDNiEkTg" target="_hgSoEAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xgwrEApLEeaGqPUk-4V4qQ" name="CancellTimer">
                <language>C++</language>
                <body>    if (KeepAliveTimerId.isValid())
    KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    if (AnnouncementTimerId.isValid())
    MasterAnnounceTimer.cancelTimer(AnnouncementTimerId);
    if (TimerId.isValid())
    Timer.cancelTimer(TimerId);
    int r=random()%30+5;
    Timer.informEvery(UMLRTTimespec(r,0),4);
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Failure,  will recover after &quot; &lt;&lt; r &lt;&lt; &quot; seconds\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::ServerFaliure&quot;,(char *)&quot;Debug__Path__ServerFaliure&quot;,(char *)&quot;Failure&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_pku_oAlOEea_md0mpENoqg" name="Recover" source="_wrgnoErcEemr9sBDNiEkTg" target="_Pyhf8Ap5EeaGqPUk-4V4qQ">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yH_CUAp7EeaGqPUk-4V4qQ" name="Recover">
                <language>C++</language>
                <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: is recovering\n&quot;;
    if (TimerId.isValid())
    Timer.cancelTimer(TimerId);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Recover&quot;,(char *)&quot;Debug__Path__Recover&quot;,(char *)&quot;Choice1&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_iM5MYAlvEea_md0mpENoqg" name="initTimer" source="_wocFgErcEemr9sBDNiEkTg" target="_UrcckAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_nB58AApKEeaGqPUk-4V4qQ" name="InitTimer">
                <language>C++</language>
                <body>logfile&lt;&lt;&quot;capsuleName&quot;&lt;&lt;&quot;,messageType,&quot;&lt;&lt;&quot;messageID&quot;&lt;&lt;&quot;,&quot;&lt;&lt;&quot;second&quot;&lt;&lt;&quot;,&quot;&lt;&lt;&quot;nano&quot;&lt;&lt;&quot;\n&quot;;    
//UMLRTTimespec ts;
    //ts.getclock(ts);
    //this->setTimePointSecond();
    logfile.open(this->getName());
    //if (logfile.is_open())
    //	logfile&lt;&lt;ts.tv_sec&lt;&lt;&quot;:&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
    //logfile.close();
    int r=random()%30+5;
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: will go fail state after &quot;&lt;&lt; r &lt;&lt; &quot;second\n&quot;;
    //TimerId=Timer.informEvery(UMLRTTimespec(r,0),4);
   TimerId=Timer.informEvery(UMLRTTimespec(3600000,0),4);
    KeepAliveTimerId=KeepAliveTimer.informEvery(UMLRTTimespec(KeepAliveTimeOut,0),4);
    AnnouncementTimerId=MasterAnnounceTimer.informEvery(UMLRTTimespec(AnnouncementTimeOut,0),4);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::initTimer&quot;,(char *)&quot;Debug__Path__initTimer&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_kdt_gAlvEea_md0mpENoqg" name="BeSlave" source="_wwkt0ErcEemr9sBDNiEkTg" target="_88oQAKozEeiNHY6qjNhZ4w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wxIHcErcEemr9sBDNiEkTg" name="BeSlave__571">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::BeSlave&quot;,(char *)&quot;Debug__Path__BeSlave&quot;,(char *)&quot;Pseudo5&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_aRWloAnREeaGqPUk-4V4qQ" name="ServiceRequest" source="_wx908ErcEemr9sBDNiEkTg" target="_UrcckAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_jf2tMAosEeaGqPUk-4V4qQ" name="ReplyRequest">
                <language>C++</language>
                <body>   //messageID=messageID+1;
    ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,ClientRequest,&quot;&lt;&lt;messageID&lt;&lt;&quot;,,&quot;&lt;&lt;&quot;\n&quot;;
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Message from client replied at index &quot;&lt;&lt;msg->sapIndex0_&lt;&lt;&quot;\n&quot;;
    int tempid=msg->sapIndex0_;
    ServerComm.Reply(0).sendAt(tempid);
    int j=1;
    for (int i=0;i&lt;=1000000;i++)
	j=j+1;
    j=j+1;
    std::cout&lt;&lt;j&lt;&lt;&quot;\n&quot;;
    //ts.getclock(ts);
    //if (logfile.is_open())
    //logfile&lt;&lt;&quot;CleintReply,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
    //logfile.flush();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::ServiceRequest&quot;,(char *)&quot;Debug__Path__ServiceRequest&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_2jFDsApyEeaGqPUk-4V4qQ" name="MasterAnnounce" source="_wvZCEErcEemr9sBDNiEkTg" target="_UrcckAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_1qc9IApzEeaGqPUk-4V4qQ" name="MasterAnnounce">
                <language>C++</language>
                <body>    //messageID=messageID+1;
    ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;&quot;keepAliveStart,&quot;&lt;&lt;messageID&lt;&lt;&quot;,,&quot;&lt;&lt;&quot;\n&quot;;
    if (AnnouncementTimerId.isValid())
    MasterAnnounceTimer.cancelTimer(AnnouncementTimerId);
    AnnouncementTimerId=MasterAnnounceTimer.informEvery(UMLRTTimespec(AnnouncementTimeOut,0),4);
    int j=1;
    for (int i=0;i&lt;=1000000;i++)
	j=j+1;
    j=j+1;
    std::cout&lt;&lt;j&lt;&lt;&quot;\n&quot;;


Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::MasterAnnounce&quot;,(char *)&quot;Debug__Path__MasterAnnounce&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_ElyUAAp0EeaGqPUk-4V4qQ" name="KeepAlive" source="_w0BDYErcEemr9sBDNiEkTg" target="_UrcckAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_9ovXcAp1EeaGqPUk-4V4qQ" name="SendKeepAlive">
                <language>C++</language>
                <body>    if (KeepAliveTimerId.isValid())
    KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    KeepAliveTimerId=KeepAliveTimer.informEvery(UMLRTTimespec(KeepAliveTimeOut,0),4);
    if (hostConfig.RunningMode==1)
    Master.IAmAlive((char *)this->getName()).send();
    std::cout&lt;&lt;&quot;Master: Keep Alive is sent\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::KeepAlive&quot;,(char *)&quot;Debug__Path__KeepAlive&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_i_dO4Ap5EeaGqPUk-4V4qQ" name="ActiveMode" source="_wrA4YErcEemr9sBDNiEkTg" target="_kLngAAp5EeaGqPUk-4V4qQ">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrdkUErcEemr9sBDNiEkTg" name="ActiveMode__400">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::ActiveMode&quot;,(char *)&quot;Debug__Path__ActiveMode&quot;,(char *)&quot;BeMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_pYtP8Ap5EeaGqPUk-4V4qQ" name="BeingMaster" source="_wsT44ErcEemr9sBDNiEkTg" target="_UrcckAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lf6aoAqTEeaGqPUk-4V4qQ" name="BeMaster">
                <language>C++</language>
                <body>    int r=random()%30+5;
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: will go fail state after &quot;&lt;&lt; r &lt;&lt; &quot;second\n&quot;;
    //TimerId=Timer.informEvery(360000);
    TimerId=Timer.informEvery(UMLRTTimespec(3600000,0),4);
    KeepAliveTimerId=KeepAliveTimer.informEvery(UMLRTTimespec(KeepAliveTimeOut,0),4);
    AnnouncementTimerId=MasterAnnounceTimer.informEvery(UMLRTTimespec(AnnouncementTimeOut,0),4);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::BeingMaster&quot;,(char *)&quot;Debug__Path__BeingMaster&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wPvR0Ap8EeaGqPUk-4V4qQ" name="PassiveMode" source="_wttAAErcEemr9sBDNiEkTg" target="_887yAKozEeiNHY6qjNhZ4w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wuKTAErcEemr9sBDNiEkTg" name="PassiveMode__482">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::PassiveMode&quot;,(char *)&quot;Debug__Path__PassiveMode&quot;,(char *)&quot;Pseudo2&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_QEtu0AsLEeaGqPUk-4V4qQ" name="purgeotherMessage" source="_wm5NYErcEemr9sBDNiEkTg" target="_hgSoEAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_woYbIErcEemr9sBDNiEkTg" name="purgeotherMessage__315">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::purgeotherMessage&quot;,(char *)&quot;Debug__Path__purgeotherMessage&quot;,(char *)&quot;Failure&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_bHEIAONOEeaTpaLNj-zYpw" name="ExitPoint1__BeMaster__4" source="_wwKeIErcEemr9sBDNiEkTg" target="_kLngAAp5EeaGqPUk-4V4qQ">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwi4oErcEemr9sBDNiEkTg" name="ExitPoint1__BeMaster__4__557">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::ExitPoint1__BeMaster__4&quot;,(char *)&quot;Debug__Path__ExitPoint1__BeMaster__4&quot;,(char *)&quot;BeMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wkxGcUrcEemr9sBDNiEkTg" name="Debug__ServerFaliure" source="_UrcckAlOEea_md0mpENoqg" target="_wkq_0ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wkxtgErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__241">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__ServerFaliure&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;Debug__Path__ServerFaliure&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_qt8XoApEEeaGqPUk-4V4qQ" name="Failure" port="_855RMAs1EeaGqPUk-4V4qQ">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wkzisErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__S" guard="_wk0w0UrcEemr9sBDNiEkTg" source="_wkq_0ErcEemr9sBDNiEkTg" target="_wkuqMUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wk0w0UrcEemr9sBDNiEkTg" name="Debug__GuardServerFaliure">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wk0w0ErcEemr9sBDNiEkTg" name="Debug__GuardServerFaliure">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wk1-8ErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__S__243">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__ServerFaliure__S&quot;,(char *)&quot;Debug__Path__ServerFaliure&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wk6QYErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__E" source="_wkv4UUrcEemr9sBDNiEkTg" target="_hgSoEAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wk6QYUrcEemr9sBDNiEkTg" name="Debug__ServerFaliure__E__244">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__ServerFaliure__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Failure&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wk9TsErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__dbg__varChange" source="_wks1AErcEemr9sBDNiEkTg" target="_wks1AErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wk96wErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__dbg__varChange__246">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wk9TsUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wk_I4ErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__dbg__setBreakPoint" source="_wks1AErcEemr9sBDNiEkTg" target="_wks1AErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wk_v8UrcEemr9sBDNiEkTg" name="Debug__ServerFaliure__dbg__setBreakPoint__247">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wk_v8ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wlA-EErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__dbg__remBreakPoint" source="_wks1AErcEemr9sBDNiEkTg" target="_wks1AErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wlCzQErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__dbg__remBreakPoint__248">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wlBlIErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wlDaUErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__dbg__viewBreakPoints" source="_wks1AErcEemr9sBDNiEkTg" target="_wks1AErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wlEBYUrcEemr9sBDNiEkTg" name="Debug__ServerFaliure__dbg__viewBreakPoints__249">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wlEBYErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wlEocErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__dbg__dbgSetExecMode" source="_wks1AErcEemr9sBDNiEkTg" target="_wks1AErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wlFPgUrcEemr9sBDNiEkTg" name="Debug__ServerFaliure__dbg__dbgSetExecMode__250">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wlFPgErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wlF2kErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__dbg__dbgDeferMsg" source="_wks1AErcEemr9sBDNiEkTg" target="_wks1AErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wlHrwErcEemr9sBDNiEkTg" name="Debug__ServerFaliure__dbg__dbgDeferMsg__251">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wlGdoErcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wlGdoUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wlHEsErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wlHEsUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wm_UAUrcEemr9sBDNiEkTg" name="Debug__purgeotherMessage" source="_hgSoEAlOEea_md0mpENoqg" target="_wm5NYErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wm_7EErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__290">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__purgeotherMessage&quot;,(char *)&quot;Failure&quot;,(char *)&quot;Debug__Path__purgeotherMessage&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_WQkXoAsMEeaGqPUk-4V4qQ" name="purge" event="_f4LPUApBEeaGqPUk-4V4qQ" port="_pQ6HcAnMEeaGqPUk-4V4qQ _HIvrsApCEeaGqPUk-4V4qQ"/>
            </transition>
            <transition xmi:id="_wnBwQErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__S" guard="_wnCXUUrcEemr9sBDNiEkTg" source="_wm5NYErcEemr9sBDNiEkTg" target="_wm83wUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wnCXUUrcEemr9sBDNiEkTg" name="Debug__GuardpurgeotherMessage">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wnCXUErcEemr9sBDNiEkTg" name="Debug__GuardpurgeotherMessage">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Failure&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wnC-YErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__S__292">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__purgeotherMessage__S&quot;,(char *)&quot;Debug__Path__purgeotherMessage&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wnFaoErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__E" source="_wm9e0UrcEemr9sBDNiEkTg" target="_hgSoEAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wnGBsErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__E__293">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__purgeotherMessage__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Failure&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wnH24ErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__dbg__varChange" source="_wm7poUrcEemr9sBDNiEkTg" target="_wm7poUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wnJFAErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__dbg__varChange__295">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wnH24UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wnKTIErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__dbg__setBreakPoint" source="_wm7poUrcEemr9sBDNiEkTg" target="_wm7poUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wnKTIkrcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__dbg__setBreakPoint__296">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wnKTIUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wnLhQErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__dbg__remBreakPoint" source="_wm7poUrcEemr9sBDNiEkTg" target="_wm7poUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wnMvYErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__dbg__remBreakPoint__297">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wnLhQUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wnN9gErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__dbg__viewBreakPoints" source="_wm7poUrcEemr9sBDNiEkTg" target="_wm7poUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wnPysErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__dbg__viewBreakPoints__298">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wnOkkErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wnQZwErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__dbg__dbgSetExecMode" source="_wm7poUrcEemr9sBDNiEkTg" target="_wm7poUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wnRA0ErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__dbg__dbgSetExecMode__299">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wnQZwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wnRn4ErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__dbg__dbgDeferMsg" source="_wm7poUrcEemr9sBDNiEkTg" target="_wm7poUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wnTdEErcEemr9sBDNiEkTg" name="Debug__purgeotherMessage__dbg__dbgDeferMsg__300">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wnRn4UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wnSO8ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wnS2AErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wnS2AUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wolPcErcEemr9sBDNiEkTg" name="Debug__initTimer" guard="_zq0b0AlvEea_md0mpENoqg" source="_Rrrc0AlvEea_md0mpENoqg" target="_wocFgErcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_zq0b0AlvEea_md0mpENoqg" name="CheckConfig">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_XImjEAlwEea_md0mpENoqg" name="CheckConfig">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
                  <language>C++</language>
                  <body>    if ((hostConfig.RunningMode==0) ||
    ((hostConfig.RunningMode==1) &amp;&amp; (strcmp(hostConfig.MasterName,this->getName())==0)))
    return true;
    else 
    return false;
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wol2gErcEemr9sBDNiEkTg" name="Debug__initTimer__317">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__initTimer&quot;,(char *)&quot;CheckConfig&quot;,(char *)&quot;Debug__Path__initTimer&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_pWyMEApzEeaGqPUk-4V4qQ" port="_Vj1U4ApFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wor9IErcEemr9sBDNiEkTg" name="Debug__initTimer__S" guard="_wotLQUrcEemr9sBDNiEkTg" source="_wocFgErcEemr9sBDNiEkTg" target="_woiMIUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wotLQUrcEemr9sBDNiEkTg" name="Debug__GuardinitTimer">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wotLQErcEemr9sBDNiEkTg" name="Debug__GuardinitTimer">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;CheckConfig&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wouZYErcEemr9sBDNiEkTg" name="Debug__initTimer__S__319">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__initTimer__S&quot;,(char *)&quot;Debug__Path__initTimer&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wowOkErcEemr9sBDNiEkTg" name="Debug__initTimer__E" source="_wokBUErcEemr9sBDNiEkTg" target="_UrcckAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wowOkUrcEemr9sBDNiEkTg" name="Debug__initTimer__E__320">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__initTimer__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_woyDwErcEemr9sBDNiEkTg" name="Debug__initTimer__dbg__varChange" source="_woehwErcEemr9sBDNiEkTg" target="_woehwErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wozR4ErcEemr9sBDNiEkTg" name="Debug__initTimer__dbg__varChange__322">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_woyq0ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wo0gAErcEemr9sBDNiEkTg" name="Debug__initTimer__dbg__setBreakPoint" source="_woehwErcEemr9sBDNiEkTg" target="_woehwErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wo1HEUrcEemr9sBDNiEkTg" name="Debug__initTimer__dbg__setBreakPoint__323">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wo1HEErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wo2VMErcEemr9sBDNiEkTg" name="Debug__initTimer__dbg__remBreakPoint" source="_woehwErcEemr9sBDNiEkTg" target="_woehwErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wo28QUrcEemr9sBDNiEkTg" name="Debug__initTimer__dbg__remBreakPoint__324">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wo28QErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wo4KYErcEemr9sBDNiEkTg" name="Debug__initTimer__dbg__viewBreakPoints" source="_woehwErcEemr9sBDNiEkTg" target="_woehwErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wo4xcErcEemr9sBDNiEkTg" name="Debug__initTimer__dbg__viewBreakPoints__325">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wo4KYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wo5_kErcEemr9sBDNiEkTg" name="Debug__initTimer__dbg__dbgSetExecMode" source="_woehwErcEemr9sBDNiEkTg" target="_woehwErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wo6moUrcEemr9sBDNiEkTg" name="Debug__initTimer__dbg__dbgSetExecMode__326">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wo6moErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wo7NsErcEemr9sBDNiEkTg" name="Debug__initTimer__dbg__dbgDeferMsg" source="_woehwErcEemr9sBDNiEkTg" target="_woehwErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wo9p8ErcEemr9sBDNiEkTg" name="Debug__initTimer__dbg__dbgDeferMsg__327">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wo70wErcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wo70wUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wo8b0ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wo9C4ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wrD7sUrcEemr9sBDNiEkTg" name="Debug__ActiveMode" guard="_OyNyIAp8EeaGqPUk-4V4qQ" source="_Pyhf8Ap5EeaGqPUk-4V4qQ" target="_wrA4YErcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_OyNyIAp8EeaGqPUk-4V4qQ" name="checkConfig">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_OyOZMAp8EeaGqPUk-4V4qQ" name="checkConfig">
                  <language>C++</language>
                  <body>    if (hostConfig.RunningMode==0)
    return true;
    else return false;
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrEiwErcEemr9sBDNiEkTg" name="Debug__ActiveMode__388">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__ActiveMode&quot;,(char *)&quot;Choice1&quot;,(char *)&quot;Debug__Path__ActiveMode&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wrFw4ErcEemr9sBDNiEkTg" name="Debug__ActiveMode__S" guard="_wrG_AErcEemr9sBDNiEkTg" source="_wrA4YErcEemr9sBDNiEkTg" target="_wrCtkUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wrG_AErcEemr9sBDNiEkTg" name="Debug__GuardActiveMode">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wrGX8ErcEemr9sBDNiEkTg" name="Debug__GuardActiveMode">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Choice1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrHmEErcEemr9sBDNiEkTg" name="Debug__ActiveMode__S__390">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__ActiveMode__S&quot;,(char *)&quot;Debug__Path__ActiveMode&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wrJbQErcEemr9sBDNiEkTg" name="Debug__ActiveMode__E" source="_wrDUoUrcEemr9sBDNiEkTg" target="_kLngAAp5EeaGqPUk-4V4qQ">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrKCUErcEemr9sBDNiEkTg" name="Debug__ActiveMode__E__391">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__ActiveMode__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;BeMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wrLQcErcEemr9sBDNiEkTg" name="Debug__ActiveMode__dbg__varChange" source="_wrCGgUrcEemr9sBDNiEkTg" target="_wrCGgUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrL3gUrcEemr9sBDNiEkTg" name="Debug__ActiveMode__dbg__varChange__393">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wrL3gErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wrMekErcEemr9sBDNiEkTg" name="Debug__ActiveMode__dbg__setBreakPoint" source="_wrCGgUrcEemr9sBDNiEkTg" target="_wrCGgUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrNFoUrcEemr9sBDNiEkTg" name="Debug__ActiveMode__dbg__setBreakPoint__394">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wrNFoErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wrNssErcEemr9sBDNiEkTg" name="Debug__ActiveMode__dbg__remBreakPoint" source="_wrCGgUrcEemr9sBDNiEkTg" target="_wrCGgUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrOTwUrcEemr9sBDNiEkTg" name="Debug__ActiveMode__dbg__remBreakPoint__395">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wrOTwErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wrO60ErcEemr9sBDNiEkTg" name="Debug__ActiveMode__dbg__viewBreakPoints" source="_wrCGgUrcEemr9sBDNiEkTg" target="_wrCGgUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrPh4UrcEemr9sBDNiEkTg" name="Debug__ActiveMode__dbg__viewBreakPoints__396">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wrPh4ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wrQwAErcEemr9sBDNiEkTg" name="Debug__ActiveMode__dbg__dbgSetExecMode" source="_wrCGgUrcEemr9sBDNiEkTg" target="_wrCGgUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrRXEErcEemr9sBDNiEkTg" name="Debug__ActiveMode__dbg__dbgSetExecMode__397">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wrQwAUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wrR-IErcEemr9sBDNiEkTg" name="Debug__ActiveMode__dbg__dbgDeferMsg" source="_wrCGgUrcEemr9sBDNiEkTg" target="_wrCGgUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrTMQErcEemr9sBDNiEkTg" name="Debug__ActiveMode__dbg__dbgDeferMsg__398">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wrR-IUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wrR-IkrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wrSlMErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wrSlMUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wrmuQUrcEemr9sBDNiEkTg" name="Debug__Recover" source="_hgSoEAlOEea_md0mpENoqg" target="_wrgnoErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrmuQkrcEemr9sBDNiEkTg" name="Debug__Recover__402">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__Recover&quot;,(char *)&quot;Failure&quot;,(char *)&quot;Debug__Path__Recover&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_uSw5sAp6EeaGqPUk-4V4qQ" name="Timeout" port="_855RMAs1EeaGqPUk-4V4qQ">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wrojcErcEemr9sBDNiEkTg" name="Debug__Recover__S" guard="_wrpKgUrcEemr9sBDNiEkTg" source="_wrgnoErcEemr9sBDNiEkTg" target="_wrkSAUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wrpKgUrcEemr9sBDNiEkTg" name="Debug__GuardRecover">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wrpKgErcEemr9sBDNiEkTg" name="Debug__GuardRecover">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Failure&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrqYoErcEemr9sBDNiEkTg" name="Debug__Recover__S__404">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__Recover__S&quot;,(char *)&quot;Debug__Path__Recover&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wrs04ErcEemr9sBDNiEkTg" name="Debug__Recover__E" source="_wrlgIUrcEemr9sBDNiEkTg" target="_Pyhf8Ap5EeaGqPUk-4V4qQ">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrtb8ErcEemr9sBDNiEkTg" name="Debug__Recover__E__405">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__Recover__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Choice1&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wrvRIErcEemr9sBDNiEkTg" name="Debug__Recover__dbg__varChange" source="_wrh1wUrcEemr9sBDNiEkTg" target="_wrh1wUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrv4MErcEemr9sBDNiEkTg" name="Debug__Recover__dbg__varChange__407">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wrvRIUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wrwfQErcEemr9sBDNiEkTg" name="Debug__Recover__dbg__setBreakPoint" source="_wrh1wUrcEemr9sBDNiEkTg" target="_wrh1wUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrwfQkrcEemr9sBDNiEkTg" name="Debug__Recover__dbg__setBreakPoint__408">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wrwfQUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wrxGUErcEemr9sBDNiEkTg" name="Debug__Recover__dbg__remBreakPoint" source="_wrh1wUrcEemr9sBDNiEkTg" target="_wrh1wUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrxGUkrcEemr9sBDNiEkTg" name="Debug__Recover__dbg__remBreakPoint__409">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wrxGUUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wrxtYErcEemr9sBDNiEkTg" name="Debug__Recover__dbg__viewBreakPoints" source="_wrh1wUrcEemr9sBDNiEkTg" target="_wrh1wUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wryUcUrcEemr9sBDNiEkTg" name="Debug__Recover__dbg__viewBreakPoints__410">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wryUcErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wry7gErcEemr9sBDNiEkTg" name="Debug__Recover__dbg__dbgSetExecMode" source="_wrh1wUrcEemr9sBDNiEkTg" target="_wrh1wUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wrzikErcEemr9sBDNiEkTg" name="Debug__Recover__dbg__dbgSetExecMode__411">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wry7gUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wr0JoErcEemr9sBDNiEkTg" name="Debug__Recover__dbg__dbgDeferMsg" source="_wrh1wUrcEemr9sBDNiEkTg" target="_wrh1wUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wr1XwErcEemr9sBDNiEkTg" name="Debug__Recover__dbg__dbgDeferMsg__412">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wr0JoUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wr0JokrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wr0wsErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wr0wsUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wsXjQUrcEemr9sBDNiEkTg" name="Debug__BeingMaster" source="_kLngAAp5EeaGqPUk-4V4qQ" target="_wsT44ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wsYKUErcEemr9sBDNiEkTg" name="Debug__BeingMaster__423">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__BeingMaster&quot;,(char *)&quot;BeMaster&quot;,(char *)&quot;Debug__Path__BeingMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wsZYcErcEemr9sBDNiEkTg" name="Debug__BeingMaster__S" guard="_wsZ_gUrcEemr9sBDNiEkTg" source="_wsT44ErcEemr9sBDNiEkTg" target="_wsVuEUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wsZ_gUrcEemr9sBDNiEkTg" name="Debug__GuardBeingMaster">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wsZ_gErcEemr9sBDNiEkTg" name="Debug__GuardBeingMaster">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;BeMaster&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wsbNoErcEemr9sBDNiEkTg" name="Debug__BeingMaster__S__425">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__BeingMaster__S&quot;,(char *)&quot;Debug__Path__BeingMaster&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wscbwErcEemr9sBDNiEkTg" name="Debug__BeingMaster__E" source="_wsW8MUrcEemr9sBDNiEkTg" target="_UrcckAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wscbwUrcEemr9sBDNiEkTg" name="Debug__BeingMaster__E__426">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__BeingMaster__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wsdp4ErcEemr9sBDNiEkTg" name="Debug__BeingMaster__dbg__varChange" source="_wsVHAUrcEemr9sBDNiEkTg" target="_wsVHAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wseQ8UrcEemr9sBDNiEkTg" name="Debug__BeingMaster__dbg__varChange__428">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wseQ8ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wse4AErcEemr9sBDNiEkTg" name="Debug__BeingMaster__dbg__setBreakPoint" source="_wsVHAUrcEemr9sBDNiEkTg" target="_wsVHAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wsffEUrcEemr9sBDNiEkTg" name="Debug__BeingMaster__dbg__setBreakPoint__429">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wsffEErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wsgGIErcEemr9sBDNiEkTg" name="Debug__BeingMaster__dbg__remBreakPoint" source="_wsVHAUrcEemr9sBDNiEkTg" target="_wsVHAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wsgGIkrcEemr9sBDNiEkTg" name="Debug__BeingMaster__dbg__remBreakPoint__430">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wsgGIUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wsgtMErcEemr9sBDNiEkTg" name="Debug__BeingMaster__dbg__viewBreakPoints" source="_wsVHAUrcEemr9sBDNiEkTg" target="_wsVHAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wshUQUrcEemr9sBDNiEkTg" name="Debug__BeingMaster__dbg__viewBreakPoints__431">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wshUQErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wsh7UErcEemr9sBDNiEkTg" name="Debug__BeingMaster__dbg__dbgSetExecMode" source="_wsVHAUrcEemr9sBDNiEkTg" target="_wsVHAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wsh7UkrcEemr9sBDNiEkTg" name="Debug__BeingMaster__dbg__dbgSetExecMode__432">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wsh7UUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wsiiYErcEemr9sBDNiEkTg" name="Debug__BeingMaster__dbg__dbgDeferMsg" source="_wsVHAUrcEemr9sBDNiEkTg" target="_wsVHAUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wsjwgUrcEemr9sBDNiEkTg" name="Debug__BeingMaster__dbg__dbgDeferMsg__433">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wsiiYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wsjJcErcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wsjJcUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wsjwgErcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wtwDUUrcEemr9sBDNiEkTg" name="Debug__PassiveMode" source="_Pyhf8Ap5EeaGqPUk-4V4qQ" target="_wttAAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtwqYErcEemr9sBDNiEkTg" name="Debug__PassiveMode__470">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__PassiveMode&quot;,(char *)&quot;Choice1&quot;,(char *)&quot;Debug__Path__PassiveMode&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wtx4gErcEemr9sBDNiEkTg" name="Debug__PassiveMode__S" guard="_wtyfkUrcEemr9sBDNiEkTg" source="_wttAAErcEemr9sBDNiEkTg" target="_wtu1MUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wtyfkUrcEemr9sBDNiEkTg" name="Debug__GuardPassiveMode">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wtyfkErcEemr9sBDNiEkTg" name="Debug__GuardPassiveMode">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Choice1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtztsErcEemr9sBDNiEkTg" name="Debug__PassiveMode__S__472">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__PassiveMode__S&quot;,(char *)&quot;Debug__Path__PassiveMode&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wt1i4ErcEemr9sBDNiEkTg" name="Debug__PassiveMode__E" source="_wtvcQUrcEemr9sBDNiEkTg" target="_887yAKozEeiNHY6qjNhZ4w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wt1i4UrcEemr9sBDNiEkTg" name="Debug__PassiveMode__E__473">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__PassiveMode__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo2&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wt3YEErcEemr9sBDNiEkTg" name="Debug__PassiveMode__dbg__varChange" source="_wttnEUrcEemr9sBDNiEkTg" target="_wttnEUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wt3_IErcEemr9sBDNiEkTg" name="Debug__PassiveMode__dbg__varChange__475">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wt3YEUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wt4mMErcEemr9sBDNiEkTg" name="Debug__PassiveMode__dbg__setBreakPoint" source="_wttnEUrcEemr9sBDNiEkTg" target="_wttnEUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wt5NQErcEemr9sBDNiEkTg" name="Debug__PassiveMode__dbg__setBreakPoint__476">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wt4mMUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wt50UErcEemr9sBDNiEkTg" name="Debug__PassiveMode__dbg__remBreakPoint" source="_wttnEUrcEemr9sBDNiEkTg" target="_wttnEUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wt7CcErcEemr9sBDNiEkTg" name="Debug__PassiveMode__dbg__remBreakPoint__477">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wt50UUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wt7pgErcEemr9sBDNiEkTg" name="Debug__PassiveMode__dbg__viewBreakPoints" source="_wttnEUrcEemr9sBDNiEkTg" target="_wttnEUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wt8QkErcEemr9sBDNiEkTg" name="Debug__PassiveMode__dbg__viewBreakPoints__478">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wt7pgUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wt83oErcEemr9sBDNiEkTg" name="Debug__PassiveMode__dbg__dbgSetExecMode" source="_wttnEUrcEemr9sBDNiEkTg" target="_wttnEUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wt83okrcEemr9sBDNiEkTg" name="Debug__PassiveMode__dbg__dbgSetExecMode__479">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wt83oUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wt9esErcEemr9sBDNiEkTg" name="Debug__PassiveMode__dbg__dbgDeferMsg" source="_wttnEUrcEemr9sBDNiEkTg" target="_wttnEUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wt-s0krcEemr9sBDNiEkTg" name="Debug__PassiveMode__dbg__dbgDeferMsg__480">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wt9esUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wt-FwErcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wt-s0ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wt-s0UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wuRnwUrcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3" source="_w1vhsErcEemr9sBDNiEkTg" target="_wuN9YErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wuSO0ErcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__484">
                <language>C++</language>
                <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;CheckConfig&quot;,&quot;BeSlave&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsSlave&quot;,&quot;NokeepAlive&quot;,&quot;TryBeMaster&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsMaster&quot;,&quot;KeepAlive&quot;,&quot;RunAsMaster&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Slave&quot;,&quot;backtoslave&quot;,&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsMaster&quot;,&quot;ServerFaliure&quot;,&quot;Failure&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;BeMaster&quot;,&quot;BeingMaster&quot;,&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Init&quot;,&quot;&quot;,&quot;StandBy&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;server2Failure&quot;,&quot;Running&quot;,&quot;IAmAlive&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;Server1Failure&quot;,&quot;Running&quot;,&quot;IAmAlive&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Initial1&quot;,&quot;&quot;,&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;ReadConfig&quot;,&quot;configLoaded&quot;,&quot;Config&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;MasterAnnouncment&quot;,&quot;Running&quot;,&quot;IAMMaster&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice1&quot;,&quot;ActiveMode&quot;,&quot;BeMaster&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsSlave&quot;,&quot;KeepAliveMsg&quot;,&quot;RunAsSlave&quot;,&quot;IAmAlive&quot;,&quot;FailOver&quot;);
Debug__SRO.addTransitionsFromState(&quot;ExitPoint1&quot;,&quot;&quot;,&quot;BeMaster&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;StandBy&quot;,&quot;&quot;,&quot;CheckConfig&quot;,&quot;StartUp&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;QueryConfig&quot;,&quot;Running&quot;,&quot;QueryConfig&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Config&quot;,&quot;ConfigNOK&quot;,&quot;ConfigFailure&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Failure&quot;,&quot;purgeotherMessage&quot;,&quot;Failure&quot;,&quot;*&quot;,&quot;Services&quot;);
Debug__SRO.addTransitionsFromState(&quot;Failure&quot;,&quot;purgeotherMessage&quot;,&quot;Failure&quot;,&quot;*&quot;,&quot;FailOver&quot;);
Debug__SRO.addTransitionsFromState(&quot;CheckConfig&quot;,&quot;initTimer&quot;,&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Failure&quot;,&quot;Recover&quot;,&quot;Choice1&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsMaster&quot;,&quot;MasterAnnounce&quot;,&quot;RunAsMaster&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;ConfigFailure&quot;,&quot;RetryConfig&quot;,&quot;ReadConfig&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice2&quot;,&quot;CheckNoMaster&quot;,&quot;ExitPoint1&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Config&quot;,&quot;configOK&quot;,&quot;Running&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Init&quot;,&quot;&quot;,&quot;ReadConfig&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;TryBeMaster&quot;,&quot;ReplyConfig&quot;,&quot;Choice2&quot;,&quot;ReplyConfig&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice2&quot;,&quot;backtoslave1&quot;,&quot;Slave&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsMaster&quot;,&quot;ServiceRequest&quot;,&quot;RunAsMaster&quot;,&quot;Request&quot;,&quot;Services&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice1&quot;,&quot;PassiveMode&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
              </effect>
              <trigger xmi:id="_w1xW4ErcEemr9sBDNiEkTg" name="ConnectionEstablished" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
              </trigger>
            </transition>
            <transition xmi:id="_wuUEAErcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__S" guard="_wuUrEUrcEemr9sBDNiEkTg" source="_wuN9YErcEemr9sBDNiEkTg" target="_wuQZoUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wuUrEUrcEemr9sBDNiEkTg" name="Debug__GuardInit__StandBy__3">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wuUrEErcEemr9sBDNiEkTg" name="Debug__GuardInit__StandBy__3">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Init&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wuV5MErcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__S__486">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__Init__StandBy__3__S&quot;,(char *)&quot;Debug__Path__Init__StandBy__3&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wuXuYErcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__E" source="_wuRAsUrcEemr9sBDNiEkTg" target="_jLPjcAlNEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wuXuYUrcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__E__487">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__Init__StandBy__3__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;StandBy&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wuaxsErcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__dbg__varChange" source="_wuPLgUrcEemr9sBDNiEkTg" target="_wuPLgUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wubYwUrcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__dbg__varChange__489">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wubYwErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wub_0ErcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__dbg__setBreakPoint" source="_wuPLgUrcEemr9sBDNiEkTg" target="_wuPLgUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wucm4UrcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__dbg__setBreakPoint__490">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wucm4ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wudN8ErcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__dbg__remBreakPoint" source="_wuPLgUrcEemr9sBDNiEkTg" target="_wuPLgUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wud1AErcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__dbg__remBreakPoint__491">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wudN8UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wuecEErcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__dbg__viewBreakPoints" source="_wuPLgUrcEemr9sBDNiEkTg" target="_wuPLgUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wufDIErcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__dbg__viewBreakPoints__492">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wuecEUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wufDIUrcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__dbg__dbgSetExecMode" source="_wuPLgUrcEemr9sBDNiEkTg" target="_wuPLgUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wufqMUrcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__dbg__dbgSetExecMode__493">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wufqMErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wugRQErcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__dbg__dbgDeferMsg" source="_wuPLgUrcEemr9sBDNiEkTg" target="_wuPLgUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wuhfYUrcEemr9sBDNiEkTg" name="Debug__Init__StandBy__3__dbg__dbgDeferMsg__494">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wugRQUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wug4UErcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wug4UUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wuhfYErcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wvcscUrcEemr9sBDNiEkTg" name="Debug__MasterAnnounce" source="_UrcckAlOEea_md0mpENoqg" target="_wvZCEErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvdTgErcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__521">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__MasterAnnounce&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;Debug__Path__MasterAnnounce&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_8oV_gAp3EeaGqPUk-4V4qQ" name="MasterAnnouncment" port="_Vj1U4ApFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wvfIsErcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__S" guard="_wvfvwUrcEemr9sBDNiEkTg" source="_wvZCEErcEemr9sBDNiEkTg" target="_wvbeUErcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wvfvwUrcEemr9sBDNiEkTg" name="Debug__GuardMasterAnnounce">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wvfvwErcEemr9sBDNiEkTg" name="Debug__GuardMasterAnnounce">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvhk8ErcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__S__523">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__MasterAnnounce__S&quot;,(char *)&quot;Debug__Path__MasterAnnounce&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wvjaIErcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__E" source="_wvcFYUrcEemr9sBDNiEkTg" target="_UrcckAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvjaIUrcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__E__524">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__MasterAnnounce__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wvlPUErcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__dbg__varChange" source="_wvZpIUrcEemr9sBDNiEkTg" target="_wvZpIUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvlPUkrcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__dbg__varChange__526">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wvlPUUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wvmdcErcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__dbg__setBreakPoint" source="_wvZpIUrcEemr9sBDNiEkTg" target="_wvZpIUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvmdckrcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__dbg__setBreakPoint__527">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wvmdcUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wvnEgErcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__dbg__remBreakPoint" source="_wvZpIUrcEemr9sBDNiEkTg" target="_wvZpIUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvnEgkrcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__dbg__remBreakPoint__528">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wvnEgUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wvnrkErcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__dbg__viewBreakPoints" source="_wvZpIUrcEemr9sBDNiEkTg" target="_wvZpIUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvoSoErcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__dbg__viewBreakPoints__529">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wvnrkUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wvoSoUrcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__dbg__dbgSetExecMode" source="_wvZpIUrcEemr9sBDNiEkTg" target="_wvZpIUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvo5sUrcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__dbg__dbgSetExecMode__530">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wvo5sErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wvpgwErcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__dbg__dbgDeferMsg" source="_wvZpIUrcEemr9sBDNiEkTg" target="_wvZpIUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvqu4ErcEemr9sBDNiEkTg" name="Debug__MasterAnnounce__dbg__dbgDeferMsg__531">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wvpgwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wvpgwkrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wvqH0ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wvqH0UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wwOIgErcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4" source="_M8iZcONCEeaTpaLNj-zYpw" target="_wwKeIErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwOIgUrcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__545">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__ExitPoint1__BeMaster__4&quot;,(char *)&quot;ExitPoint1&quot;,(char *)&quot;Debug__Path__ExitPoint1__BeMaster__4&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wwPWoErcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__S" guard="_wwP9sUrcEemr9sBDNiEkTg" source="_wwKeIErcEemr9sBDNiEkTg" target="_wwMTUUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wwP9sUrcEemr9sBDNiEkTg" name="Debug__GuardExitPoint1__BeMaster__4">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wwP9sErcEemr9sBDNiEkTg" name="Debug__GuardExitPoint1__BeMaster__4">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;ExitPoint1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwQkwErcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__S__547">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__ExitPoint1__BeMaster__4__S&quot;,(char *)&quot;Debug__Path__ExitPoint1__BeMaster__4&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wwRL0ErcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__E" source="_wwM6YUrcEemr9sBDNiEkTg" target="_kLngAAp5EeaGqPUk-4V4qQ">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwRy4ErcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__E__548">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__ExitPoint1__BeMaster__4__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;BeMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wwU2MErcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__dbg__varChange" source="_wwLFMUrcEemr9sBDNiEkTg" target="_wwLFMUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwU2MkrcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__dbg__varChange__550">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wwU2MUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wwVdQErcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__dbg__setBreakPoint" source="_wwLFMUrcEemr9sBDNiEkTg" target="_wwLFMUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwWEUUrcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__dbg__setBreakPoint__551">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wwWEUErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wwWrYErcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__dbg__remBreakPoint" source="_wwLFMUrcEemr9sBDNiEkTg" target="_wwLFMUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwXScErcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__dbg__remBreakPoint__552">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wwWrYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wwX5gErcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__dbg__viewBreakPoints" source="_wwLFMUrcEemr9sBDNiEkTg" target="_wwLFMUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwX5gkrcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__dbg__viewBreakPoints__553">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wwX5gUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wwYgkErcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__dbg__dbgSetExecMode" source="_wwLFMUrcEemr9sBDNiEkTg" target="_wwLFMUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwZHoErcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__dbg__dbgSetExecMode__554">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wwYgkUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wwZHoUrcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__dbg__dbgDeferMsg" source="_wwLFMUrcEemr9sBDNiEkTg" target="_wwLFMUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwaVwkrcEemr9sBDNiEkTg" name="Debug__ExitPoint1__BeMaster__4__dbg__dbgDeferMsg__555">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wwZusErcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wwZusUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wwaVwErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wwaVwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wwo_QUrcEemr9sBDNiEkTg" name="Debug__BeSlave" source="_Rrrc0AlvEea_md0mpENoqg" target="_wwkt0ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwpmUErcEemr9sBDNiEkTg" name="Debug__BeSlave__559">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__BeSlave&quot;,(char *)&quot;CheckConfig&quot;,(char *)&quot;Debug__Path__BeSlave&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wwq0cErcEemr9sBDNiEkTg" name="Debug__BeSlave__S" guard="_wwrbgUrcEemr9sBDNiEkTg" source="_wwkt0ErcEemr9sBDNiEkTg" target="_wwnKEUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wwrbgUrcEemr9sBDNiEkTg" name="Debug__GuardBeSlave">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wwrbgErcEemr9sBDNiEkTg" name="Debug__GuardBeSlave">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;CheckConfig&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwspoErcEemr9sBDNiEkTg" name="Debug__BeSlave__S__561">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__BeSlave__S&quot;,(char *)&quot;Debug__Path__BeSlave&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wwt3wErcEemr9sBDNiEkTg" name="Debug__BeSlave__E" source="_wwoYMUrcEemr9sBDNiEkTg" target="_88oQAKozEeiNHY6qjNhZ4w">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwue0ErcEemr9sBDNiEkTg" name="Debug__BeSlave__E__562">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__BeSlave__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Pseudo5&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wwvs8ErcEemr9sBDNiEkTg" name="Debug__BeSlave__dbg__varChange" source="_wwl78UrcEemr9sBDNiEkTg" target="_wwl78UrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwwUAUrcEemr9sBDNiEkTg" name="Debug__BeSlave__dbg__varChange__564">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wwwUAErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_www7EErcEemr9sBDNiEkTg" name="Debug__BeSlave__dbg__setBreakPoint" source="_wwl78UrcEemr9sBDNiEkTg" target="_wwl78UrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwywQErcEemr9sBDNiEkTg" name="Debug__BeSlave__dbg__setBreakPoint__565">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wwxiIErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wwzXUErcEemr9sBDNiEkTg" name="Debug__BeSlave__dbg__remBreakPoint" source="_wwl78UrcEemr9sBDNiEkTg" target="_wwl78UrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwzXUkrcEemr9sBDNiEkTg" name="Debug__BeSlave__dbg__remBreakPoint__566">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wwzXUUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wwz-YErcEemr9sBDNiEkTg" name="Debug__BeSlave__dbg__viewBreakPoints" source="_wwl78UrcEemr9sBDNiEkTg" target="_wwl78UrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ww0lcUrcEemr9sBDNiEkTg" name="Debug__BeSlave__dbg__viewBreakPoints__567">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_ww0lcErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_ww1MgErcEemr9sBDNiEkTg" name="Debug__BeSlave__dbg__dbgSetExecMode" source="_wwl78UrcEemr9sBDNiEkTg" target="_wwl78UrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ww1MgkrcEemr9sBDNiEkTg" name="Debug__BeSlave__dbg__dbgSetExecMode__568">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_ww1MgUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_ww1zkErcEemr9sBDNiEkTg" name="Debug__BeSlave__dbg__dbgDeferMsg" source="_wwl78UrcEemr9sBDNiEkTg" target="_wwl78UrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ww3owErcEemr9sBDNiEkTg" name="Debug__BeSlave__dbg__dbgDeferMsg__569">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_ww2aoErcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_ww2aoUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_ww2aokrcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_ww3BsErcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wyFJsUrcEemr9sBDNiEkTg" name="Debug__ServiceRequest" source="_UrcckAlOEea_md0mpENoqg" target="_wx908ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wyFwwErcEemr9sBDNiEkTg" name="Debug__ServiceRequest__587">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__ServiceRequest&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;Debug__Path__ServiceRequest&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_2NJiIAnREeaGqPUk-4V4qQ" event="_G3K7UAnFEeaGqPUk-4V4qQ" port="_pQ6HcAnMEeaGqPUk-4V4qQ"/>
            </transition>
            <transition xmi:id="_wyINAErcEemr9sBDNiEkTg" name="Debug__ServiceRequest__S" guard="_wyJbIUrcEemr9sBDNiEkTg" source="_wx908ErcEemr9sBDNiEkTg" target="_wyA4QErcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wyJbIUrcEemr9sBDNiEkTg" name="Debug__GuardServiceRequest">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wyJbIErcEemr9sBDNiEkTg" name="Debug__GuardServiceRequest">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wyLQUErcEemr9sBDNiEkTg" name="Debug__ServiceRequest__S__589">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__ServiceRequest__S&quot;,(char *)&quot;Debug__Path__ServiceRequest&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wyNskErcEemr9sBDNiEkTg" name="Debug__ServiceRequest__E" source="_wyCGYErcEemr9sBDNiEkTg" target="_UrcckAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wyOToErcEemr9sBDNiEkTg" name="Debug__ServiceRequest__E__590">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__ServiceRequest__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wyeLQErcEemr9sBDNiEkTg" name="Debug__ServiceRequest__dbg__varChange" source="_wx_DEUrcEemr9sBDNiEkTg" target="_wx_DEUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wyeyUUrcEemr9sBDNiEkTg" name="Debug__ServiceRequest__dbg__varChange__592">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wyeyUErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wyfZYErcEemr9sBDNiEkTg" name="Debug__ServiceRequest__dbg__setBreakPoint" source="_wx_DEUrcEemr9sBDNiEkTg" target="_wx_DEUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wygAcErcEemr9sBDNiEkTg" name="Debug__ServiceRequest__dbg__setBreakPoint__593">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wyfZYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wygngErcEemr9sBDNiEkTg" name="Debug__ServiceRequest__dbg__remBreakPoint" source="_wx_DEUrcEemr9sBDNiEkTg" target="_wx_DEUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wygngkrcEemr9sBDNiEkTg" name="Debug__ServiceRequest__dbg__remBreakPoint__594">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wygngUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wyh1oErcEemr9sBDNiEkTg" name="Debug__ServiceRequest__dbg__viewBreakPoints" source="_wx_DEUrcEemr9sBDNiEkTg" target="_wx_DEUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wyh1okrcEemr9sBDNiEkTg" name="Debug__ServiceRequest__dbg__viewBreakPoints__595">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wyh1oUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wyjDwErcEemr9sBDNiEkTg" name="Debug__ServiceRequest__dbg__dbgSetExecMode" source="_wx_DEUrcEemr9sBDNiEkTg" target="_wx_DEUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wyjDwkrcEemr9sBDNiEkTg" name="Debug__ServiceRequest__dbg__dbgSetExecMode__596">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wyjDwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wyjq0ErcEemr9sBDNiEkTg" name="Debug__ServiceRequest__dbg__dbgDeferMsg" source="_wx_DEUrcEemr9sBDNiEkTg" target="_wx_DEUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wylgAUrcEemr9sBDNiEkTg" name="Debug__ServiceRequest__dbg__dbgDeferMsg__597">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wykR4ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wyk48ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wyk48UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wylgAErcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_wzamcUrcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6" source="_jLPjcAlNEea_md0mpENoqg" target="_wzW8EErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wzbNgErcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__611">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__StandBy__CheckConfig__6&quot;,(char *)&quot;StandBy&quot;,(char *)&quot;Debug__Path__StandBy__CheckConfig__6&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_aihU8AlfEea_md0mpENoqg" event="_MloQ4AguEea_md0mpENoqg" port="_-3KD0AgvEea_md0mpENoqg"/>
            </transition>
            <transition xmi:id="_wzcboErcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__S" guard="_wzdCsUrcEemr9sBDNiEkTg" source="_wzW8EErcEemr9sBDNiEkTg" target="_wzZYUUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_wzdCsUrcEemr9sBDNiEkTg" name="Debug__GuardStandBy__CheckConfig__6">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_wzdCsErcEemr9sBDNiEkTg" name="Debug__GuardStandBy__CheckConfig__6">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;StandBy&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wzeQ0ErcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__S__613">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__StandBy__CheckConfig__6__S&quot;,(char *)&quot;Debug__Path__StandBy__CheckConfig__6&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wzgGAErcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__E" source="_wzZ_YUrcEemr9sBDNiEkTg" target="_Rrrc0AlvEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wzgGAUrcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__E__614">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__StandBy__CheckConfig__6__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;CheckConfig&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_wzh7MErcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__dbg__varChange" source="_wzYKMUrcEemr9sBDNiEkTg" target="_wzYKMUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wziiQUrcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__dbg__varChange__616">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_wziiQErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_wzjJUErcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__dbg__setBreakPoint" source="_wzYKMUrcEemr9sBDNiEkTg" target="_wzYKMUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wzjwYErcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__dbg__setBreakPoint__617">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wzjJUUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wzjwYUrcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__dbg__remBreakPoint" source="_wzYKMUrcEemr9sBDNiEkTg" target="_wzYKMUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wzkXcErcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__dbg__remBreakPoint__618">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wzjwYkrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wzk-gErcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__dbg__viewBreakPoints" source="_wzYKMUrcEemr9sBDNiEkTg" target="_wzYKMUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wzk-gkrcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__dbg__viewBreakPoints__619">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wzk-gUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wzllkErcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__dbg__dbgSetExecMode" source="_wzYKMUrcEemr9sBDNiEkTg" target="_wzYKMUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wzllkkrcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__dbg__dbgSetExecMode__620">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_wzllkUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_wzmMoErcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__dbg__dbgDeferMsg" source="_wzYKMUrcEemr9sBDNiEkTg" target="_wzYKMUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wznawErcEemr9sBDNiEkTg" name="Debug__StandBy__CheckConfig__6__dbg__dbgDeferMsg__621">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_wzmMoUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wzmzsErcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wzmzsUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_wzmzskrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w0DfoUrcEemr9sBDNiEkTg" name="Debug__KeepAlive" source="_UrcckAlOEea_md0mpENoqg" target="_w0BDYErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0DfokrcEemr9sBDNiEkTg" name="Debug__KeepAlive__632">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__KeepAlive&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;Debug__Path__KeepAlive&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_RAsgEAp1EeaGqPUk-4V4qQ" name="KeppAlive" port="_ZDrx0ApDEeaGqPUk-4V4qQ">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w0FU0ErcEemr9sBDNiEkTg" name="Debug__KeepAlive__S" guard="_w0F74UrcEemr9sBDNiEkTg" source="_w0BDYErcEemr9sBDNiEkTg" target="_w0CRgUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w0F74UrcEemr9sBDNiEkTg" name="Debug__GuardKeepAlive">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w0F74ErcEemr9sBDNiEkTg" name="Debug__GuardKeepAlive">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0HKAErcEemr9sBDNiEkTg" name="Debug__KeepAlive__S__634">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__KeepAlive__S&quot;,(char *)&quot;Debug__Path__KeepAlive&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w0IYIErcEemr9sBDNiEkTg" name="Debug__KeepAlive__E" source="_w0C4kUrcEemr9sBDNiEkTg" target="_UrcckAlOEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0I_MErcEemr9sBDNiEkTg" name="Debug__KeepAlive__E__635">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__KeepAlive__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w0KNUErcEemr9sBDNiEkTg" name="Debug__KeepAlive__dbg__varChange" source="_w0BqcUrcEemr9sBDNiEkTg" target="_w0BqcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0KNUkrcEemr9sBDNiEkTg" name="Debug__KeepAlive__dbg__varChange__637">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w0KNUUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w0K0YErcEemr9sBDNiEkTg" name="Debug__KeepAlive__dbg__setBreakPoint" source="_w0BqcUrcEemr9sBDNiEkTg" target="_w0BqcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0LbcErcEemr9sBDNiEkTg" name="Debug__KeepAlive__dbg__setBreakPoint__638">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w0K0YUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w0LbcUrcEemr9sBDNiEkTg" name="Debug__KeepAlive__dbg__remBreakPoint" source="_w0BqcUrcEemr9sBDNiEkTg" target="_w0BqcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0MCgUrcEemr9sBDNiEkTg" name="Debug__KeepAlive__dbg__remBreakPoint__639">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w0MCgErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w0MCgkrcEemr9sBDNiEkTg" name="Debug__KeepAlive__dbg__viewBreakPoints" source="_w0BqcUrcEemr9sBDNiEkTg" target="_w0BqcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0MpkUrcEemr9sBDNiEkTg" name="Debug__KeepAlive__dbg__viewBreakPoints__640">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w0MpkErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w0MpkkrcEemr9sBDNiEkTg" name="Debug__KeepAlive__dbg__dbgSetExecMode" source="_w0BqcUrcEemr9sBDNiEkTg" target="_w0BqcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0NQoErcEemr9sBDNiEkTg" name="Debug__KeepAlive__dbg__dbgSetExecMode__641">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w0Mpk0rcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w0NQoUrcEemr9sBDNiEkTg" name="Debug__KeepAlive__dbg__dbgDeferMsg" source="_w0BqcUrcEemr9sBDNiEkTg" target="_w0BqcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0N3s0rcEemr9sBDNiEkTg" name="Debug__KeepAlive__dbg__dbgDeferMsg__642">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w0NQokrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w0N3sErcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w0N3sUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w0N3skrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w1wIwUrcEemr9sBDNiEkTg" name="Debug__InitDebug" source="_hY-7oAlNEea_md0mpENoqg" target="_w1vhsErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w1wv0ErcEemr9sBDNiEkTg" name="DebugCheck">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
              </effect>
            </transition>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_hY-7oAlNEea_md0mpENoqg" name="Init"/>
            <subvertex xmi:type="uml:State" xmi:id="_jLPjcAlNEea_md0mpENoqg" name="StandBy">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w2RtMErcEemr9sBDNiEkTg" name="StandBy__679">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::StandBy&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w2SUQErcEemr9sBDNiEkTg" name="StandBy__680">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::StandBy&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_UrcckAlOEea_md0mpENoqg" name="RunAsMaster">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_YzyAkAlyEea_md0mpENoqg" name="RunAsMasterEntry">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Run as Master now\n&quot;;
    ConfigComm.IAMMaster((char *)this->getName()).send();
    ts.getclock(ts);
    //messageID=messageID+1;
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,TranstionEnd,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
     logfile.flush();

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_cjKg0PMsEeauO5SNGpOV7w" name="startTransition">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
    ts.getclock(ts);
    messageID=messageID+1;
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,TranstionStart,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
     //logfile.flush();
}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_hgSoEAlOEea_md0mpENoqg" name="Failure">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_GNo-cAp7EeaGqPUk-4V4qQ" name="SetTimer">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;Failure&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    //------

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w2gWsErcEemr9sBDNiEkTg" name="Failure__685">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_Rrrc0AlvEea_md0mpENoqg" name="CheckConfig" kind="choice"/>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_Pyhf8Ap5EeaGqPUk-4V4qQ" name="Choice1" kind="choice"/>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_kLngAAp5EeaGqPUk-4V4qQ" name="BeMaster" kind="junction"/>
            <subvertex xmi:type="uml:State" xmi:id="_2g5S0ONBEeaTpaLNj-zYpw" name="Backup">
              <connectionPoint xmi:id="_M8iZcONCEeaTpaLNj-zYpw" name="ExitPoint1" kind="exitPoint"/>
              <connectionPoint xmi:id="_88oQAKozEeiNHY6qjNhZ4w" name="Pseudo5" kind="entryPoint"/>
              <connectionPoint xmi:id="_887yAKozEeiNHY6qjNhZ4w" name="Pseudo2" kind="entryPoint"/>
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w2Ya4ErcEemr9sBDNiEkTg" name="Backup__681">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w2ZB8ErcEemr9sBDNiEkTg" name="Backup__682">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
              <region xmi:id="_ThAzEONCEeaTpaLNj-zYpw" name="Region1">
                <transition xmi:id="_LmVmEONDEeaTpaLNj-zYpw" name="NokeepAlive" source="_wpcyIErcEemr9sBDNiEkTg" target="_Px2BIAqSEeaGqPUk-4V4qQ">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LmWNIONDEeaTpaLNj-zYpw" name="CancellTimer">
                    <language>C++</language>
                    <body>    //if (KeepAliveTimerId.isValid())
    //	KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: No keep Alive message from Master, Try to be Master-------\n&quot;;
    //TimerId=Timer.informEvery(UMLRTTimespec(2,0),4);
    ConfigComm.QueryConfig().send();
    //std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: trying to be Master\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::NokeepAlive&quot;,(char *)&quot;Debug__Path__NokeepAlive&quot;,(char *)&quot;TryBeMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_R_7lYONDEeaTpaLNj-zYpw" name="BackToSlave" source="_wlyaIErcEemr9sBDNiEkTg" target="_ZaK1gAlOEea_md0mpENoqg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_R_7lYeNDEeaTpaLNj-zYpw" name="MasterRecovered">
                    <language>C++</language>
                    <body>    //std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: The Master recovered itself, backing to slave mode\n&quot;;
    //if (TimerId.isValid())
    //	Timer.cancelTimer(TimerId);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::BackToSlave&quot;,(char *)&quot;Debug__Path__BackToSlave&quot;,(char *)&quot;RunAsSlave&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_XafJkONDEeaTpaLNj-zYpw" name="ReplyConfig" source="_wjvywErcEemr9sBDNiEkTg" target="_NU8OsAszEeaGqPUk-4V4qQ">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wknVcErcEemr9sBDNiEkTg" name="ReplyConfig__239">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::ReplyConfig&quot;,(char *)&quot;Debug__Path__ReplyConfig&quot;,(char *)&quot;Choice2&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_dg_NwONDEeaTpaLNj-zYpw" name="backtoslave1" source="_wu4EsErcEemr9sBDNiEkTg" target="_5yefMAszEeaGqPUk-4V4qQ">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvVXsErcEemr9sBDNiEkTg" name="backtoslave1__519">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::backtoslave1&quot;,(char *)&quot;Debug__Path__backtoslave1&quot;,(char *)&quot;Slave&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_dg_NweNDEeaTpaLNj-zYpw" name="backtoslave" source="_wqLx8ErcEemr9sBDNiEkTg" target="_ZaK1gAlOEea_md0mpENoqg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wq-cIErcEemr9sBDNiEkTg" name="backtoslave__386">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::backtoslave&quot;,(char *)&quot;Debug__Path__backtoslave&quot;,(char *)&quot;RunAsSlave&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_mHBPcONDEeaTpaLNj-zYpw" name="KeepAliveMsg" source="_ws-AMErcEemr9sBDNiEkTg" target="_ZaK1gAlOEea_md0mpENoqg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_mHBPceNDEeaTpaLNj-zYpw" name="ProcessKeppAlive">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Keep Alive Message from &quot;&lt;&lt; ServerName&lt;&lt;&quot;\n&quot;;
    //if (KeepAliveTimerId.isValid())
    //	KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    //KeepAliveTimerId=KeepAliveTimer.informEvery(UMLRTTimespec(6,0),4);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::KeepAliveMsg&quot;,(char *)&quot;Debug__Path__KeepAliveMsg&quot;,(char *)&quot;RunAsSlave&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_-mdZ0ONDEeaTpaLNj-zYpw" name="Initial1__RunAsSlave__7" source="_w0wDMErcEemr9sBDNiEkTg" target="_ZaK1gAlOEea_md0mpENoqg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w1V5EErcEemr9sBDNiEkTg" name="Initial1__RunAsSlave__7__678">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Initial1__RunAsSlave__7&quot;,(char *)&quot;Debug__Path__Initial1__RunAsSlave__7&quot;,(char *)&quot;RunAsSlave&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_CPd8UONOEeaTpaLNj-zYpw" name="CheckNoMaster" source="_wxLx0ErcEemr9sBDNiEkTg" target="_M8iZcONCEeaTpaLNj-zYpw">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wx6KkErcEemr9sBDNiEkTg" name="CheckNoMaster__585">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::CheckNoMaster&quot;,(char *)&quot;Debug__Path__CheckNoMaster&quot;,(char *)&quot;ExitPoint1&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wj0rQUrcEemr9sBDNiEkTg" name="Debug__ReplyConfig" source="_Px2BIAqSEeaGqPUk-4V4qQ" target="_wjvywErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wj1SUErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__218">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__ReplyConfig&quot;,(char *)&quot;TryBeMaster&quot;,(char *)&quot;Debug__Path__ReplyConfig&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_XafJkeNDEeaTpaLNj-zYpw" name="ConfigReply" event="_Iv3CQAl4Eea_md0mpENoqg" port="_-3KD0AgvEea_md0mpENoqg"/>
                </transition>
                <transition xmi:id="_wj3HgErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__S" guard="_wj4VoUrcEemr9sBDNiEkTg" source="_wjvywErcEemr9sBDNiEkTg" target="_wjy2EErcEemr9sBDNiEkTg">
                  <ownedRule xmi:id="_wj4VoUrcEemr9sBDNiEkTg" name="Debug__GuardReplyConfig">
                    <specification xmi:type="uml:OpaqueExpression" xmi:id="_wj4VoErcEemr9sBDNiEkTg" name="Debug__GuardReplyConfig">
                      <language>C++</language>
                      <body>return Debug__SRO.checkDebug(&quot;TryBeMaster&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                    </specification>
                  </ownedRule>
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wj5jwErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__S__220">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__ReplyConfig__S&quot;,(char *)&quot;Debug__Path__ReplyConfig&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wj7Y8ErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__E" source="_wjzdIUrcEemr9sBDNiEkTg" target="_NU8OsAszEeaGqPUk-4V4qQ">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wj8AAErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__E__221">
                    <language>C++</language>
                    <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__ReplyConfig__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Choice2&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wj91MErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__dbg__varChange" source="_wjxA4UrcEemr9sBDNiEkTg" target="_wjxA4UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wj91MkrcEemr9sBDNiEkTg" name="Debug__ReplyConfig__dbg__varChange__223">
                    <language>C++</language>
                    <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                  </effect>
                  <trigger xmi:id="_wj91MUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wj_DUErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__dbg__setBreakPoint" source="_wjxA4UrcEemr9sBDNiEkTg" target="_wjxA4UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wj_DUkrcEemr9sBDNiEkTg" name="Debug__ReplyConfig__dbg__setBreakPoint__224">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wj_DUUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wkARcErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__dbg__remBreakPoint" source="_wjxA4UrcEemr9sBDNiEkTg" target="_wjxA4UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wkARckrcEemr9sBDNiEkTg" name="Debug__ReplyConfig__dbg__remBreakPoint__225">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wkARcUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wkBfkErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__dbg__viewBreakPoints" source="_wjxA4UrcEemr9sBDNiEkTg" target="_wjxA4UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wkBfkkrcEemr9sBDNiEkTg" name="Debug__ReplyConfig__dbg__viewBreakPoints__226">
                    <language>C++</language>
                    <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wkBfkUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wkCtsErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__dbg__dbgSetExecMode" source="_wjxA4UrcEemr9sBDNiEkTg" target="_wjxA4UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wkDUwErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__dbg__dbgSetExecMode__227">
                    <language>C++</language>
                    <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                  </effect>
                  <trigger xmi:id="_wkCtsUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wkD70ErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__dbg__dbgDeferMsg" source="_wjxA4UrcEemr9sBDNiEkTg" target="_wjxA4UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wkGYEErcEemr9sBDNiEkTg" name="Debug__ReplyConfig__dbg__dbgDeferMsg__228">
                    <language>C++</language>
                    <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wkD70UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wkEi4ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wkFJ8ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wkFxAErcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wl4gwUrcEemr9sBDNiEkTg" name="Debug__BackToSlave" source="_Px2BIAqSEeaGqPUk-4V4qQ" target="_wlyaIErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wl5H0ErcEemr9sBDNiEkTg" name="Debug__BackToSlave__265">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__BackToSlave&quot;,(char *)&quot;TryBeMaster&quot;,(char *)&quot;Debug__Path__BackToSlave&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_R_7lYuNDEeaTpaLNj-zYpw" name="BackToSlave" event="_xM6tkApBEeaGqPUk-4V4qQ"/>
                </transition>
                <transition xmi:id="_wl8LIErcEemr9sBDNiEkTg" name="Debug__BackToSlave__S" guard="_wl9ZQErcEemr9sBDNiEkTg" source="_wlyaIErcEemr9sBDNiEkTg" target="_wl2rkErcEemr9sBDNiEkTg">
                  <ownedRule xmi:id="_wl9ZQErcEemr9sBDNiEkTg" name="Debug__GuardBackToSlave">
                    <specification xmi:type="uml:OpaqueExpression" xmi:id="_wl8yMErcEemr9sBDNiEkTg" name="Debug__GuardBackToSlave">
                      <language>C++</language>
                      <body>return Debug__SRO.checkDebug(&quot;TryBeMaster&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                    </specification>
                  </ownedRule>
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wl-AUErcEemr9sBDNiEkTg" name="Debug__BackToSlave__S__267">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__BackToSlave__S&quot;,(char *)&quot;Debug__Path__BackToSlave&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wmBDoErcEemr9sBDNiEkTg" name="Debug__BackToSlave__E" source="_wl35sErcEemr9sBDNiEkTg" target="_ZaK1gAlOEea_md0mpENoqg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wmBqsErcEemr9sBDNiEkTg" name="Debug__BackToSlave__E__268">
                    <language>C++</language>
                    <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__BackToSlave__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;RunAsSlave&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wmEG8ErcEemr9sBDNiEkTg" name="Debug__BackToSlave__dbg__varChange" source="_wlzoQErcEemr9sBDNiEkTg" target="_wlzoQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wmFVEErcEemr9sBDNiEkTg" name="Debug__BackToSlave__dbg__varChange__270">
                    <language>C++</language>
                    <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                  </effect>
                  <trigger xmi:id="_wmEuAErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wmGjMErcEemr9sBDNiEkTg" name="Debug__BackToSlave__dbg__setBreakPoint" source="_wlzoQErcEemr9sBDNiEkTg" target="_wlzoQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wmHKQErcEemr9sBDNiEkTg" name="Debug__BackToSlave__dbg__setBreakPoint__271">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wmGjMUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wmHxUErcEemr9sBDNiEkTg" name="Debug__BackToSlave__dbg__remBreakPoint" source="_wlzoQErcEemr9sBDNiEkTg" target="_wlzoQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wmIYYErcEemr9sBDNiEkTg" name="Debug__BackToSlave__dbg__remBreakPoint__272">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wmHxUUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wmJmgErcEemr9sBDNiEkTg" name="Debug__BackToSlave__dbg__viewBreakPoints" source="_wlzoQErcEemr9sBDNiEkTg" target="_wlzoQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wmJmgkrcEemr9sBDNiEkTg" name="Debug__BackToSlave__dbg__viewBreakPoints__273">
                    <language>C++</language>
                    <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wmJmgUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wmK0oErcEemr9sBDNiEkTg" name="Debug__BackToSlave__dbg__dbgSetExecMode" source="_wlzoQErcEemr9sBDNiEkTg" target="_wlzoQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wmLbsErcEemr9sBDNiEkTg" name="Debug__BackToSlave__dbg__dbgSetExecMode__274">
                    <language>C++</language>
                    <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                  </effect>
                  <trigger xmi:id="_wmK0oUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wmLbsUrcEemr9sBDNiEkTg" name="Debug__BackToSlave__dbg__dbgDeferMsg" source="_wlzoQErcEemr9sBDNiEkTg" target="_wlzoQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wmMp0krcEemr9sBDNiEkTg" name="Debug__BackToSlave__dbg__dbgDeferMsg__275">
                    <language>C++</language>
                    <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wmMCwErcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wmMCwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wmMp0ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wmMp0UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wpgcgUrcEemr9sBDNiEkTg" name="Debug__NokeepAlive" source="_ZaK1gAlOEea_md0mpENoqg" target="_wpcyIErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wphDkErcEemr9sBDNiEkTg" name="Debug__NokeepAlive__339">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__NokeepAlive&quot;,(char *)&quot;RunAsSlave&quot;,(char *)&quot;Debug__Path__NokeepAlive&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_LmWNIeNDEeaTpaLNj-zYpw" name="KeepAliveTimer" port="_ZDrx0ApDEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wpi4wErcEemr9sBDNiEkTg" name="Debug__NokeepAlive__S" guard="_wpjf0UrcEemr9sBDNiEkTg" source="_wpcyIErcEemr9sBDNiEkTg" target="_wpenUUrcEemr9sBDNiEkTg">
                  <ownedRule xmi:id="_wpjf0UrcEemr9sBDNiEkTg" name="Debug__GuardNokeepAlive">
                    <specification xmi:type="uml:OpaqueExpression" xmi:id="_wpjf0ErcEemr9sBDNiEkTg" name="Debug__GuardNokeepAlive">
                      <language>C++</language>
                      <body>return Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                    </specification>
                  </ownedRule>
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wpkG4ErcEemr9sBDNiEkTg" name="Debug__NokeepAlive__S__341">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__NokeepAlive__S&quot;,(char *)&quot;Debug__Path__NokeepAlive&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wplVAErcEemr9sBDNiEkTg" name="Debug__NokeepAlive__E" source="_wpf1cUrcEemr9sBDNiEkTg" target="_Px2BIAqSEeaGqPUk-4V4qQ">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wpl8EErcEemr9sBDNiEkTg" name="Debug__NokeepAlive__E__342">
                    <language>C++</language>
                    <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__NokeepAlive__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;TryBeMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wpnKMErcEemr9sBDNiEkTg" name="Debug__NokeepAlive__dbg__varChange" source="_wpeAQErcEemr9sBDNiEkTg" target="_wpeAQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wpnxQUrcEemr9sBDNiEkTg" name="Debug__NokeepAlive__dbg__varChange__344">
                    <language>C++</language>
                    <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                  </effect>
                  <trigger xmi:id="_wpnxQErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wpo_YErcEemr9sBDNiEkTg" name="Debug__NokeepAlive__dbg__setBreakPoint" source="_wpeAQErcEemr9sBDNiEkTg" target="_wpeAQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wpo_YkrcEemr9sBDNiEkTg" name="Debug__NokeepAlive__dbg__setBreakPoint__345">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wpo_YUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wppmcErcEemr9sBDNiEkTg" name="Debug__NokeepAlive__dbg__remBreakPoint" source="_wpeAQErcEemr9sBDNiEkTg" target="_wpeAQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wpqNgUrcEemr9sBDNiEkTg" name="Debug__NokeepAlive__dbg__remBreakPoint__346">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wpqNgErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wpq0kErcEemr9sBDNiEkTg" name="Debug__NokeepAlive__dbg__viewBreakPoints" source="_wpeAQErcEemr9sBDNiEkTg" target="_wpeAQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wpq0kkrcEemr9sBDNiEkTg" name="Debug__NokeepAlive__dbg__viewBreakPoints__347">
                    <language>C++</language>
                    <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wpq0kUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wprboErcEemr9sBDNiEkTg" name="Debug__NokeepAlive__dbg__dbgSetExecMode" source="_wpeAQErcEemr9sBDNiEkTg" target="_wpeAQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wprbokrcEemr9sBDNiEkTg" name="Debug__NokeepAlive__dbg__dbgSetExecMode__348">
                    <language>C++</language>
                    <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                  </effect>
                  <trigger xmi:id="_wprboUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wpsCsErcEemr9sBDNiEkTg" name="Debug__NokeepAlive__dbg__dbgDeferMsg" source="_wpeAQErcEemr9sBDNiEkTg" target="_wpeAQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wpspwkrcEemr9sBDNiEkTg" name="Debug__NokeepAlive__dbg__dbgDeferMsg__349">
                    <language>C++</language>
                    <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wpsCsUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wpsCskrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wpspwErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wpspwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wqQDYUrcEemr9sBDNiEkTg" name="Debug__backtoslave" source="_5yefMAszEeaGqPUk-4V4qQ" target="_wqLx8ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqRRgErcEemr9sBDNiEkTg" name="Debug__backtoslave__364">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__backtoslave&quot;,(char *)&quot;Slave&quot;,(char *)&quot;Debug__Path__backtoslave&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wqTtwErcEemr9sBDNiEkTg" name="Debug__backtoslave__S" guard="_wqUU0UrcEemr9sBDNiEkTg" source="_wqLx8ErcEemr9sBDNiEkTg" target="_wqOOMErcEemr9sBDNiEkTg">
                  <ownedRule xmi:id="_wqUU0UrcEemr9sBDNiEkTg" name="Debug__Guardbacktoslave">
                    <specification xmi:type="uml:OpaqueExpression" xmi:id="_wqUU0ErcEemr9sBDNiEkTg" name="Debug__Guardbacktoslave">
                      <language>C++</language>
                      <body>return Debug__SRO.checkDebug(&quot;Slave&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                    </specification>
                  </ownedRule>
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqXYIErcEemr9sBDNiEkTg" name="Debug__backtoslave__S__366">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__backtoslave__S&quot;,(char *)&quot;Debug__Path__backtoslave&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wqZNUErcEemr9sBDNiEkTg" name="Debug__backtoslave__E" source="_wqO1QUrcEemr9sBDNiEkTg" target="_ZaK1gAlOEea_md0mpENoqg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqZNUUrcEemr9sBDNiEkTg" name="Debug__backtoslave__E__367">
                    <language>C++</language>
                    <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__backtoslave__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;RunAsSlave&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wqcQoErcEemr9sBDNiEkTg" name="Debug__backtoslave__dbg__varChange" source="_wqNAEUrcEemr9sBDNiEkTg" target="_wqNAEUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqc3sUrcEemr9sBDNiEkTg" name="Debug__backtoslave__dbg__varChange__369">
                    <language>C++</language>
                    <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                  </effect>
                  <trigger xmi:id="_wqc3sErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wqgiEErcEemr9sBDNiEkTg" name="Debug__backtoslave__dbg__setBreakPoint" source="_wqNAEUrcEemr9sBDNiEkTg" target="_wqNAEUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqgiEkrcEemr9sBDNiEkTg" name="Debug__backtoslave__dbg__setBreakPoint__370">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wqgiEUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wqhwMErcEemr9sBDNiEkTg" name="Debug__backtoslave__dbg__remBreakPoint" source="_wqNAEUrcEemr9sBDNiEkTg" target="_wqNAEUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqhwMkrcEemr9sBDNiEkTg" name="Debug__backtoslave__dbg__remBreakPoint__371">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wqhwMUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wqi-UErcEemr9sBDNiEkTg" name="Debug__backtoslave__dbg__viewBreakPoints" source="_wqNAEUrcEemr9sBDNiEkTg" target="_wqNAEUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqi-UkrcEemr9sBDNiEkTg" name="Debug__backtoslave__dbg__viewBreakPoints__372">
                    <language>C++</language>
                    <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wqi-UUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wqjlYErcEemr9sBDNiEkTg" name="Debug__backtoslave__dbg__dbgSetExecMode" source="_wqNAEUrcEemr9sBDNiEkTg" target="_wqNAEUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqkMcErcEemr9sBDNiEkTg" name="Debug__backtoslave__dbg__dbgSetExecMode__373">
                    <language>C++</language>
                    <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                  </effect>
                  <trigger xmi:id="_wqjlYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wqkzgErcEemr9sBDNiEkTg" name="Debug__backtoslave__dbg__dbgDeferMsg" source="_wqNAEUrcEemr9sBDNiEkTg" target="_wqNAEUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqmBoErcEemr9sBDNiEkTg" name="Debug__backtoslave__dbg__dbgDeferMsg__374">
                    <language>C++</language>
                    <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wqkzgUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wqkzgkrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wqlakErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wqlakUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wtBDgErcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg" source="_ZaK1gAlOEea_md0mpENoqg" target="_ws-AMErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtBDgUrcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__445">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__KeepAliveMsg&quot;,(char *)&quot;RunAsSlave&quot;,(char *)&quot;Debug__Path__KeepAliveMsg&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_mHBPcuNDEeaTpaLNj-zYpw" name="IAmlive" event="_xM6tkApBEeaGqPUk-4V4qQ" port="_rmnI0OM8EeaTpaLNj-zYpw"/>
                </transition>
                <transition xmi:id="_wtC4sErcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__S" guard="_wtDfwUrcEemr9sBDNiEkTg" source="_ws-AMErcEemr9sBDNiEkTg" target="_ws_OUUrcEemr9sBDNiEkTg">
                  <ownedRule xmi:id="_wtDfwUrcEemr9sBDNiEkTg" name="Debug__GuardKeepAliveMsg">
                    <specification xmi:type="uml:OpaqueExpression" xmi:id="_wtDfwErcEemr9sBDNiEkTg" name="Debug__GuardKeepAliveMsg">
                      <language>C++</language>
                      <body>return Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                    </specification>
                  </ownedRule>
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtEG0ErcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__S__447">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__KeepAliveMsg__S&quot;,(char *)&quot;Debug__Path__KeepAliveMsg&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wtF8AErcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__E" source="_ws_1YUrcEemr9sBDNiEkTg" target="_ZaK1gAlOEea_md0mpENoqg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtGjEErcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__E__448">
                    <language>C++</language>
                    <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__KeepAliveMsg__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;RunAsSlave&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wtIYQErcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__dbg__varChange" source="_ws-nQUrcEemr9sBDNiEkTg" target="_ws-nQUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtI_UUrcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__dbg__varChange__450">
                    <language>C++</language>
                    <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                  </effect>
                  <trigger xmi:id="_wtI_UErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wtJmYErcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__dbg__setBreakPoint" source="_ws-nQUrcEemr9sBDNiEkTg" target="_ws-nQUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtJmYkrcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__dbg__setBreakPoint__451">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wtJmYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wtKNcErcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__dbg__remBreakPoint" source="_ws-nQUrcEemr9sBDNiEkTg" target="_ws-nQUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtK0gUrcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__dbg__remBreakPoint__452">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wtK0gErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wtLbkErcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__dbg__viewBreakPoints" source="_ws-nQUrcEemr9sBDNiEkTg" target="_ws-nQUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtLbkkrcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__dbg__viewBreakPoints__453">
                    <language>C++</language>
                    <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wtLbkUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wtMCoErcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__dbg__dbgSetExecMode" source="_ws-nQUrcEemr9sBDNiEkTg" target="_ws-nQUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtMCokrcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__dbg__dbgSetExecMode__454">
                    <language>C++</language>
                    <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                  </effect>
                  <trigger xmi:id="_wtMCoUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wtMpsErcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__dbg__dbgDeferMsg" source="_ws-nQUrcEemr9sBDNiEkTg" target="_ws-nQUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtNQwkrcEemr9sBDNiEkTg" name="Debug__KeepAliveMsg__dbg__dbgDeferMsg__455">
                    <language>C++</language>
                    <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wtMpsUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wtMpskrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wtNQwErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wtNQwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wu8WIUrcEemr9sBDNiEkTg" name="Debug__backtoslave1" source="_NU8OsAszEeaGqPUk-4V4qQ" target="_wu4EsErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wu89MErcEemr9sBDNiEkTg" name="Debug__backtoslave1__507">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__backtoslave1&quot;,(char *)&quot;Choice2&quot;,(char *)&quot;Debug__Path__backtoslave1&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wu-yYErcEemr9sBDNiEkTg" name="Debug__backtoslave1__S" guard="_wu_ZcUrcEemr9sBDNiEkTg" source="_wu4EsErcEemr9sBDNiEkTg" target="_wu554UrcEemr9sBDNiEkTg">
                  <ownedRule xmi:id="_wu_ZcUrcEemr9sBDNiEkTg" name="Debug__Guardbacktoslave1">
                    <specification xmi:type="uml:OpaqueExpression" xmi:id="_wu_ZcErcEemr9sBDNiEkTg" name="Debug__Guardbacktoslave1">
                      <language>C++</language>
                      <body>return Debug__SRO.checkDebug(&quot;Choice2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                    </specification>
                  </ownedRule>
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvAnkErcEemr9sBDNiEkTg" name="Debug__backtoslave1__S__509">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__backtoslave1__S&quot;,(char *)&quot;Debug__Path__backtoslave1&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wvB1sErcEemr9sBDNiEkTg" name="Debug__backtoslave1__E" source="_wu7IAUrcEemr9sBDNiEkTg" target="_5yefMAszEeaGqPUk-4V4qQ">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvCcwErcEemr9sBDNiEkTg" name="Debug__backtoslave1__E__510">
                    <language>C++</language>
                    <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__backtoslave1__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Slave&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wvDq4ErcEemr9sBDNiEkTg" name="Debug__backtoslave1__dbg__varChange" source="_wu4rwUrcEemr9sBDNiEkTg" target="_wu4rwUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvER8UrcEemr9sBDNiEkTg" name="Debug__backtoslave1__dbg__varChange__512">
                    <language>C++</language>
                    <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                  </effect>
                  <trigger xmi:id="_wvER8ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wvE5AErcEemr9sBDNiEkTg" name="Debug__backtoslave1__dbg__setBreakPoint" source="_wu4rwUrcEemr9sBDNiEkTg" target="_wu4rwUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvGHIErcEemr9sBDNiEkTg" name="Debug__backtoslave1__dbg__setBreakPoint__513">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wvFgEErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wvGuMErcEemr9sBDNiEkTg" name="Debug__backtoslave1__dbg__remBreakPoint" source="_wu4rwUrcEemr9sBDNiEkTg" target="_wu4rwUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvGuMkrcEemr9sBDNiEkTg" name="Debug__backtoslave1__dbg__remBreakPoint__514">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wvGuMUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wvHVQErcEemr9sBDNiEkTg" name="Debug__backtoslave1__dbg__viewBreakPoints" source="_wu4rwUrcEemr9sBDNiEkTg" target="_wu4rwUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvH8UErcEemr9sBDNiEkTg" name="Debug__backtoslave1__dbg__viewBreakPoints__515">
                    <language>C++</language>
                    <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wvHVQUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wvH8UUrcEemr9sBDNiEkTg" name="Debug__backtoslave1__dbg__dbgSetExecMode" source="_wu4rwUrcEemr9sBDNiEkTg" target="_wu4rwUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvIjYUrcEemr9sBDNiEkTg" name="Debug__backtoslave1__dbg__dbgSetExecMode__516">
                    <language>C++</language>
                    <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                  </effect>
                  <trigger xmi:id="_wvIjYErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wvJKcErcEemr9sBDNiEkTg" name="Debug__backtoslave1__dbg__dbgDeferMsg" source="_wu4rwUrcEemr9sBDNiEkTg" target="_wu4rwUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvKYkErcEemr9sBDNiEkTg" name="Debug__backtoslave1__dbg__dbgDeferMsg__517">
                    <language>C++</language>
                    <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wvJKcUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wvJKckrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wvJxgErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wvJxgUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wxWJ4UrcEemr9sBDNiEkTg" name="Debug__CheckNoMaster" guard="_CPd8UeNOEeaTpaLNj-zYpw" source="_NU8OsAszEeaGqPUk-4V4qQ" target="_wxLx0ErcEemr9sBDNiEkTg">
                  <ownedRule xmi:id="_CPd8UeNOEeaTpaLNj-zYpw" name="CheckNoServer">
                    <specification xmi:type="uml:OpaqueExpression" xmi:id="_CPd8UuNOEeaTpaLNj-zYpw" name="checkNoServer">
                      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
                      <language>C++</language>
                      <body>    std::cout&lt;&lt;&quot;00000----------------------------------------------------000000\n&quot;;
    this->hostConfig=config;
    if (!(this->hostConfig.MasterList[0] || this->hostConfig.MasterList[1]))
    {
    //Echo.Echo().send();
    //Timer.cancelTimer(TimerId);
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: No one is Master, I am going to Be master\n&quot;;
    return true;
    }
    else if ((strcmp((char*)this->getName(),&quot;server1&quot;)==0) &amp;&amp; (config.MasterList[1]==false))
    {
    //Echo.Echo().send();
    //Timer.cancelTimer(TimerId);
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: No one is Master, I am going to Be master\n&quot;;
    return true;
    }
    else if ((strcmp((char *)this->getName(),&quot;server2&quot;))==0 &amp;&amp; (config.MasterList[0]==false))
    {
    //Echo.Echo().send();
    //Timer.cancelTimer(TimerId);
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: No one is Master, I am going to Be master\n&quot;;
    return true;
    }
    std::cout&lt;&lt;&quot;11111111-----------------------------------------111111111111\n&quot;;
    return false;
</body>
                    </specification>
                  </ownedRule>
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wxXYAErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__573">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__CheckNoMaster&quot;,(char *)&quot;Choice2&quot;,(char *)&quot;Debug__Path__CheckNoMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wxZNMErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__S" guard="_wxbCYUrcEemr9sBDNiEkTg" source="_wxLx0ErcEemr9sBDNiEkTg" target="_wxOOEUrcEemr9sBDNiEkTg">
                  <ownedRule xmi:id="_wxbCYUrcEemr9sBDNiEkTg" name="Debug__GuardCheckNoMaster">
                    <specification xmi:type="uml:OpaqueExpression" xmi:id="_wxbCYErcEemr9sBDNiEkTg" name="Debug__GuardCheckNoMaster">
                      <language>C++</language>
                      <body>return Debug__SRO.checkDebug(&quot;Choice2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                    </specification>
                  </ownedRule>
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wxc3kErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__S__575">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__CheckNoMaster__S&quot;,(char *)&quot;Debug__Path__CheckNoMaster&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wxfT0ErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__E" source="_wxTtoUrcEemr9sBDNiEkTg" target="_M8iZcONCEeaTpaLNj-zYpw">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wxf64ErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__E__576">
                    <language>C++</language>
                    <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__CheckNoMaster__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;ExitPoint1&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wxhwEErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__dbg__varChange" source="_wxM_8UrcEemr9sBDNiEkTg" target="_wxM_8UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wxiXIErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__dbg__varChange__578">
                    <language>C++</language>
                    <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                  </effect>
                  <trigger xmi:id="_wxhwEUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wxi-MErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__dbg__setBreakPoint" source="_wxM_8UrcEemr9sBDNiEkTg" target="_wxM_8UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wxjlQUrcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__dbg__setBreakPoint__579">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wxjlQErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wxkzYErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__dbg__remBreakPoint" source="_wxM_8UrcEemr9sBDNiEkTg" target="_wxM_8UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wxlacErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__dbg__remBreakPoint__580">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wxkzYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wxmBgErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__dbg__viewBreakPoints" source="_wxM_8UrcEemr9sBDNiEkTg" target="_wxM_8UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wxmBgkrcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__dbg__viewBreakPoints__581">
                    <language>C++</language>
                    <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wxmBgUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wxmokErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__dbg__dbgSetExecMode" source="_wxM_8UrcEemr9sBDNiEkTg" target="_wxM_8UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wxnPoErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__dbg__dbgSetExecMode__582">
                    <language>C++</language>
                    <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                  </effect>
                  <trigger xmi:id="_wxmokUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wxnPoUrcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__dbg__dbgDeferMsg" source="_wxM_8UrcEemr9sBDNiEkTg" target="_wxM_8UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wxpE0ErcEemr9sBDNiEkTg" name="Debug__CheckNoMaster__dbg__dbgDeferMsg__583">
                    <language>C++</language>
                    <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_wxnPokrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wxn2sErcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wxodwErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_wxodwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w0ztkUrcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7" source="_8WMAUONDEeaTpaLNj-zYpw" target="_w0wDMErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w00UoErcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__656">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__Initial1__RunAsSlave__7&quot;,(char *)&quot;Initial1&quot;,(char *)&quot;Debug__Path__Initial1__RunAsSlave__7&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w01iwErcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__S" guard="_w02J0UrcEemr9sBDNiEkTg" source="_w0wDMErcEemr9sBDNiEkTg" target="_w0x4YUrcEemr9sBDNiEkTg">
                  <ownedRule xmi:id="_w02J0UrcEemr9sBDNiEkTg" name="Debug__GuardInitial1__RunAsSlave__7">
                    <specification xmi:type="uml:OpaqueExpression" xmi:id="_w02J0ErcEemr9sBDNiEkTg" name="Debug__GuardInitial1__RunAsSlave__7">
                      <language>C++</language>
                      <body>return Debug__SRO.checkDebug(&quot;Initial1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                    </specification>
                  </ownedRule>
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w02w4ErcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__S__658">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__Initial1__RunAsSlave__7__S&quot;,(char *)&quot;Debug__Path__Initial1__RunAsSlave__7&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w03_AErcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__E" source="_w0zGgUrcEemr9sBDNiEkTg" target="_ZaK1gAlOEea_md0mpENoqg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w03_AUrcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__E__659">
                    <language>C++</language>
                    <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__Initial1__RunAsSlave__7__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;RunAsSlave&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w050MErcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__dbg__varChange" source="_w0xRUErcEemr9sBDNiEkTg" target="_w0xRUErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w050MkrcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__dbg__varChange__661">
                    <language>C++</language>
                    <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
                  </effect>
                  <trigger xmi:id="_w050MUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w07CUErcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__dbg__setBreakPoint" source="_w0xRUErcEemr9sBDNiEkTg" target="_w0xRUErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w07CUkrcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__dbg__setBreakPoint__662">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_w07CUUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w07pYErcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__dbg__remBreakPoint" source="_w0xRUErcEemr9sBDNiEkTg" target="_w0xRUErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w08QcErcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__dbg__remBreakPoint__663">
                    <language>C++</language>
                    <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_w07pYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w083gErcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__dbg__viewBreakPoints" source="_w0xRUErcEemr9sBDNiEkTg" target="_w0xRUErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w09ekErcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__dbg__viewBreakPoints__664">
                    <language>C++</language>
                    <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_w083gUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w09ekUrcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__dbg__dbgSetExecMode" source="_w0xRUErcEemr9sBDNiEkTg" target="_w0xRUErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0-FoUrcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__dbg__dbgSetExecMode__665">
                    <language>C++</language>
                    <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
                  </effect>
                  <trigger xmi:id="_w0-FoErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w0-ssErcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__dbg__dbgDeferMsg" source="_w0xRUErcEemr9sBDNiEkTg" target="_w0xRUErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0_TwkrcEemr9sBDNiEkTg" name="Debug__Initial1__RunAsSlave__7__dbg__dbgDeferMsg__666">
                    <language>C++</language>
                    <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
                  </effect>
                  <trigger xmi:id="_w0-ssUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_rmnI0OM8EeaTpaLNj-zYpw">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_w0-sskrcEemr9sBDNiEkTg" name="Debug__MSG" port="_-3KD0AgvEea_md0mpENoqg">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_w0_TwErcEemr9sBDNiEkTg" name="Debug__MSG" port="_HIvrsApCEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                  <trigger xmi:id="_w0_TwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_pQ6HcAnMEeaGqPUk-4V4qQ">
                    <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_Px2BIAqSEeaGqPUk-4V4qQ" name="TryBeMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_6FKVcAqVEeaGqPUk-4V4qQ" name="trytobemasterinit">
                    <language>C++</language>
                    <body>if( not Debug__SRO.checkDebug(&quot;TryBeMaster&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    //std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: trying to Be Master ------------\n&quot;;

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::TryBeMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w2d6cErcEemr9sBDNiEkTg" name="TryBeMaster__684">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::TryBeMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:Pseudostate" xmi:id="_NU8OsAszEeaGqPUk-4V4qQ" name="Choice2" kind="choice"/>
                <subvertex xmi:type="uml:State" xmi:id="_ZaK1gAlOEea_md0mpENoqg" name="RunAsSlave">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_JeHBoAlzEea_md0mpENoqg" name="RunAsSlaveEntry">
                    <language>C++</language>
                    <body>if( not Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Running as Slave now\n&quot;;
    //if (KeepAliveTimerId.isValid())
    //	KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    KeepAliveTimerId=KeepAliveTimer.informIn(UMLRTTimespec(6,0),4);

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::RunAsSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w2beMErcEemr9sBDNiEkTg" name="RunAsSlave__683">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::RunAsSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:Pseudostate" xmi:id="_5yefMAszEeaGqPUk-4V4qQ" name="Slave" kind="junction"/>
                <subvertex xmi:type="uml:Pseudostate" xmi:id="_8WMAUONDEeaTpaLNj-zYpw" name="Initial1"/>
                <subvertex xmi:type="uml:Pseudostate" xmi:id="_wjvywErcEemr9sBDNiEkTg" name="Debug__Path__ReplyConfig" kind="choice"/>
                <subvertex xmi:type="uml:State" xmi:id="_wjxA4UrcEemr9sBDNiEkTg" name="Debug__C__ReplyConfig">
                  <connectionPoint xmi:id="_wjy2EErcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
                  <connectionPoint xmi:id="_wjzdIUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
                  <region xmi:id="_wjxA4krcEemr9sBDNiEkTg" name="Region1">
                    <transition xmi:id="_wkSlUErcEemr9sBDNiEkTg" name="Debug__init__trans__ReplyConfig" source="_wjy2EErcEemr9sBDNiEkTg" target="_wkOT4UrcEemr9sBDNiEkTg"/>
                    <transition xmi:id="_wkTMYErcEemr9sBDNiEkTg" name="Debug__Ex__TryBeMaster" source="_wkOT4UrcEemr9sBDNiEkTg" target="_wkPiAErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wkgnwErcEemr9sBDNiEkTg" name="Debug__Ex__TryBeMaster__233">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__ReplyConfig::Region1::Debug__Ex__TryBeMaster&quot;,(char *)&quot;Debug__B__Ex__TryBeMaster&quot;,(char *)&quot;Debug__B__Ac__ReplyConfig&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wkTMYUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wkTzcErcEemr9sBDNiEkTg" name="Debug__AC__ReplyConfig" source="_wkPiAErcEemr9sBDNiEkTg" target="_wkRXMErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wkjEAErcEemr9sBDNiEkTg" name="Debug__AC__ReplyConfig__235">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__ReplyConfig::Region1::Debug__AC__ReplyConfig&quot;,(char *)&quot;Debug__B__Ac__ReplyConfig&quot;,(char *)&quot;Debug__A__Ac__ReplyConfig&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wkTzcUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wkUagErcEemr9sBDNiEkTg" name="Debug__end__trans__ReplyConfig" source="_wkRXMErcEemr9sBDNiEkTg" target="_wjzdIUrcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wklgQErcEemr9sBDNiEkTg" name="Debug__end__trans__ReplyConfig__237">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__ReplyConfig::Region1::Debug__end__trans__ReplyConfig&quot;,(char *)&quot;Debug__A__Ac__ReplyConfig&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wkUagUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <subvertex xmi:type="uml:State" xmi:id="_wkOT4UrcEemr9sBDNiEkTg" name="Debug__B__Ex__TryBeMaster">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wkOT4krcEemr9sBDNiEkTg" name="Debug__B__Ex__TryBeMaster">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;TryBeMaster&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__ReplyConfig::Region1::Debug__B__Ex__TryBeMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wkWPsErcEemr9sBDNiEkTg" name="Debug__B__Ex__TryBeMaster__229">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__ReplyConfig::Region1::Debug__B__Ex__TryBeMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wkPiAErcEemr9sBDNiEkTg" name="Debug__B__Ac__ReplyConfig">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wkPiAUrcEemr9sBDNiEkTg" name="Debug__B__Ac__ReplyConfig">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;TryBeMaster&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;ReplyConfig&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__ReplyConfig::Region1::Debug__B__Ac__ReplyConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wkahIErcEemr9sBDNiEkTg" name="Debug__B__Ac__ReplyConfig__230">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__ReplyConfig::Region1::Debug__B__Ac__ReplyConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wkRXMErcEemr9sBDNiEkTg" name="Debug__A__Ac__ReplyConfig">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wkRXMUrcEemr9sBDNiEkTg" name="Debug__A__Ac__ReplyConfig">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;ReplyConfig&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__ReplyConfig::Region1::Debug__A__Ac__ReplyConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wkdkcUrcEemr9sBDNiEkTg" name="Debug__A__Ac__ReplyConfig__231">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__ReplyConfig::Region1::Debug__A__Ac__ReplyConfig&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                  </region>
                </subvertex>
                <subvertex xmi:type="uml:Pseudostate" xmi:id="_wlyaIErcEemr9sBDNiEkTg" name="Debug__Path__BackToSlave" kind="choice"/>
                <subvertex xmi:type="uml:State" xmi:id="_wlzoQErcEemr9sBDNiEkTg" name="Debug__C__BackToSlave">
                  <connectionPoint xmi:id="_wl2rkErcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
                  <connectionPoint xmi:id="_wl35sErcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
                  <region xmi:id="_wlzoQUrcEemr9sBDNiEkTg" name="Region1">
                    <transition xmi:id="_wmXB4ErcEemr9sBDNiEkTg" name="Debug__init__trans__BackToSlave" source="_wl2rkErcEemr9sBDNiEkTg" target="_wmQ7QUrcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wmrK8ErcEemr9sBDNiEkTg" name="Debug__init__trans__BackToSlave__281">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__init__trans__BackToSlave&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__TryBeMaster&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                    </transition>
                    <transition xmi:id="_wmXo8ErcEemr9sBDNiEkTg" name="Debug__Ex__TryBeMaster" source="_wmQ7QUrcEemr9sBDNiEkTg" target="_wmSwcErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wmsZEErcEemr9sBDNiEkTg" name="Debug__Ex__TryBeMaster__283">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__Ex__TryBeMaster&quot;,(char *)&quot;Debug__B__Ex__TryBeMaster&quot;,(char *)&quot;Debug__B__Ac__BackToSlave&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wmXo8UrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wmYQAErcEemr9sBDNiEkTg" name="Debug__AC__BackToSlave" source="_wmSwcErcEemr9sBDNiEkTg" target="_wmT-kErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wmY3EErcEemr9sBDNiEkTg" name="MasterRecovered" visibility="public" isReentrant="true">
                        <language>C++</language>
                        <body>    //std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: The Master recovered itself, backing to slave mode\n&quot;;
    //if (TimerId.isValid())
    //	Timer.cancelTimer(TimerId);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__AC__BackToSlave&quot;,(char *)&quot;Debug__B__Ac__BackToSlave&quot;,(char *)&quot;Debug__A__Ac__BackToSlave&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wmYQAUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wmZeIErcEemr9sBDNiEkTg" name="Debug__En__RunAsSlave" source="_wmT-kErcEemr9sBDNiEkTg" target="_wmVzwErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wmaFMErcEemr9sBDNiEkTg" name="RunAsSlaveEntry" visibility="public" isReentrant="true">
                        <language>C++</language>
                        <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Running as Slave now\n&quot;;
    //if (KeepAliveTimerId.isValid())
    //	KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    KeepAliveTimerId=KeepAliveTimer.informIn(UMLRTTimespec(6,0),4);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__En__RunAsSlave&quot;,(char *)&quot;Debug__A__Ac__BackToSlave&quot;,(char *)&quot;Debug__A__En__RunAsSlave&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wmZeIUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wmasQErcEemr9sBDNiEkTg" name="Debug__end__trans__BackToSlave" source="_wmVzwErcEemr9sBDNiEkTg" target="_wl35sErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wmyfsErcEemr9sBDNiEkTg" name="Debug__end__trans__BackToSlave__287">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__end__trans__BackToSlave&quot;,(char *)&quot;Debug__A__En__RunAsSlave&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wmbTUErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <subvertex xmi:type="uml:State" xmi:id="_wmQ7QUrcEemr9sBDNiEkTg" name="Debug__B__Ex__TryBeMaster">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wmRiUErcEemr9sBDNiEkTg" name="Debug__B__Ex__TryBeMaster">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;TryBeMaster&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__B__Ex__TryBeMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wmdvkErcEemr9sBDNiEkTg" name="Debug__B__Ex__TryBeMaster__276">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__B__Ex__TryBeMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wmSwcErcEemr9sBDNiEkTg" name="Debug__B__Ac__BackToSlave">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wmSwcUrcEemr9sBDNiEkTg" name="Debug__B__Ac__BackToSlave">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;TryBeMaster&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;BackToSlave&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__B__Ac__BackToSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wmhZ8UrcEemr9sBDNiEkTg" name="Debug__B__Ac__BackToSlave__277">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__B__Ac__BackToSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wmT-kErcEemr9sBDNiEkTg" name="Debug__A__Ac__BackToSlave">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wmT-kUrcEemr9sBDNiEkTg" name="Debug__A__Ac__BackToSlave">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;BackToSlave&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__A__Ac__BackToSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wmlEUErcEemr9sBDNiEkTg" name="Debug__A__Ac__BackToSlave__278">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__A__Ac__BackToSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wmVzwErcEemr9sBDNiEkTg" name="Debug__A__En__RunAsSlave">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wmVzwUrcEemr9sBDNiEkTg" name="Debug__A__En__RunAsSlave">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__A__En__RunAsSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wmngkErcEemr9sBDNiEkTg" name="Debug__A__En__RunAsSlave__279">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__BackToSlave::Region1::Debug__A__En__RunAsSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                  </region>
                </subvertex>
                <subvertex xmi:type="uml:Pseudostate" xmi:id="_wpcyIErcEemr9sBDNiEkTg" name="Debug__Path__NokeepAlive" kind="choice"/>
                <subvertex xmi:type="uml:State" xmi:id="_wpeAQErcEemr9sBDNiEkTg" name="Debug__C__NokeepAlive">
                  <connectionPoint xmi:id="_wpenUUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
                  <connectionPoint xmi:id="_wpf1cUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
                  <region xmi:id="_wpeAQUrcEemr9sBDNiEkTg" name="Region1">
                    <transition xmi:id="_wp0lkErcEemr9sBDNiEkTg" name="Debug__init__trans__NokeepAlive" source="_wpenUUrcEemr9sBDNiEkTg" target="_wpvGAUrcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqBZ4ErcEemr9sBDNiEkTg" name="Debug__init__trans__NokeepAlive__355">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__init__trans__NokeepAlive&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__RunAsSlave&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                    </transition>
                    <transition xmi:id="_wp1MoErcEemr9sBDNiEkTg" name="Debug__Ex__RunAsSlave" source="_wpvGAUrcEemr9sBDNiEkTg" target="_wpvtEErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqCA8ErcEemr9sBDNiEkTg" name="Debug__Ex__RunAsSlave__357">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__Ex__RunAsSlave&quot;,(char *)&quot;Debug__B__Ex__RunAsSlave&quot;,(char *)&quot;Debug__B__Ac__NokeepAlive&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wp1MoUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wp1MokrcEemr9sBDNiEkTg" name="Debug__AC__NokeepAlive" source="_wpvtEErcEemr9sBDNiEkTg" target="_wpywYErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wp1zsErcEemr9sBDNiEkTg" name="CancellTimer" visibility="public" isReentrant="true">
                        <language>C++</language>
                        <body>    //if (KeepAliveTimerId.isValid())
    //	KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: No keep Alive message from Master, Try to be Master-------\n&quot;;
    //TimerId=Timer.informEvery(UMLRTTimespec(2,0),4);
    ConfigComm.QueryConfig().send();
    //std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: trying to be Master\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__AC__NokeepAlive&quot;,(char *)&quot;Debug__B__Ac__NokeepAlive&quot;,(char *)&quot;Debug__A__Ac__NokeepAlive&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wp1Mo0rcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wp1zsUrcEemr9sBDNiEkTg" name="Debug__En__TryBeMaster" source="_wpywYErcEemr9sBDNiEkTg" target="_wpz-gErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wp2awErcEemr9sBDNiEkTg" name="trytobemasterinit" visibility="public" isReentrant="true">
                        <language>C++</language>
                        <body>    //std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: trying to Be Master ------------\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__En__TryBeMaster&quot;,(char *)&quot;Debug__A__Ac__NokeepAlive&quot;,(char *)&quot;Debug__A__En__TryBeMaster&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wp1zskrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wp2awUrcEemr9sBDNiEkTg" name="Debug__end__trans__NokeepAlive" source="_wpz-gErcEemr9sBDNiEkTg" target="_wpf1cUrcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqHggErcEemr9sBDNiEkTg" name="Debug__end__trans__NokeepAlive__361">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__end__trans__NokeepAlive&quot;,(char *)&quot;Debug__A__En__TryBeMaster&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wp2awkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <subvertex xmi:type="uml:State" xmi:id="_wpvGAUrcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsSlave">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wpvGAkrcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsSlave">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__B__Ex__RunAsSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wp3o4ErcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsSlave__350">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__B__Ex__RunAsSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wpvtEErcEemr9sBDNiEkTg" name="Debug__B__Ac__NokeepAlive">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wpwUIErcEemr9sBDNiEkTg" name="Debug__B__Ac__NokeepAlive">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;NokeepAlive&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__B__Ac__NokeepAlive&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wp6FIErcEemr9sBDNiEkTg" name="Debug__B__Ac__NokeepAlive__351">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__B__Ac__NokeepAlive&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wpywYErcEemr9sBDNiEkTg" name="Debug__A__Ac__NokeepAlive">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wpywYUrcEemr9sBDNiEkTg" name="Debug__A__Ac__NokeepAlive">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;NokeepAlive&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;TryBeMaster&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__A__Ac__NokeepAlive&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wp9IcErcEemr9sBDNiEkTg" name="Debug__A__Ac__NokeepAlive__352">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__A__Ac__NokeepAlive&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wpz-gErcEemr9sBDNiEkTg" name="Debug__A__En__TryBeMaster">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wpz-gUrcEemr9sBDNiEkTg" name="Debug__A__En__TryBeMaster">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;TryBeMaster&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__A__En__TryBeMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wp-9oErcEemr9sBDNiEkTg" name="Debug__A__En__TryBeMaster__353">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__NokeepAlive::Region1::Debug__A__En__TryBeMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                  </region>
                </subvertex>
                <subvertex xmi:type="uml:Pseudostate" xmi:id="_wqLx8ErcEemr9sBDNiEkTg" name="Debug__Path__backtoslave" kind="choice"/>
                <subvertex xmi:type="uml:State" xmi:id="_wqNAEUrcEemr9sBDNiEkTg" name="Debug__C__backtoslave">
                  <connectionPoint xmi:id="_wqOOMErcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
                  <connectionPoint xmi:id="_wqO1QUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
                  <region xmi:id="_wqNAEkrcEemr9sBDNiEkTg" name="Region1">
                    <transition xmi:id="_wqtWYErcEemr9sBDNiEkTg" name="Debug__init__trans__backtoslave" source="_wqOOMErcEemr9sBDNiEkTg" target="_wqpE8UrcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wq4VgErcEemr9sBDNiEkTg" name="Debug__init__trans__backtoslave__379">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__backtoslave::Region1::Debug__init__trans__backtoslave&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__backtoslave&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                    </transition>
                    <transition xmi:id="_wqtWYUrcEemr9sBDNiEkTg" name="Debug__Ac__backtoslave" source="_wqpE8UrcEemr9sBDNiEkTg" target="_wqqTEErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wq6KsErcEemr9sBDNiEkTg" name="Debug__Ac__backtoslave__381">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__backtoslave::Region1::Debug__Ac__backtoslave&quot;,(char *)&quot;Debug__B__Ac__backtoslave&quot;,(char *)&quot;Debug__A__Ac__backtoslave&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wqtWYkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wqt9cErcEemr9sBDNiEkTg" name="Debug__En__RunAsSlave" source="_wqqTEErcEemr9sBDNiEkTg" target="_wqsIQErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wqukgErcEemr9sBDNiEkTg" name="RunAsSlaveEntry" visibility="public" isReentrant="true">
                        <language>C++</language>
                        <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Running as Slave now\n&quot;;
    //if (KeepAliveTimerId.isValid())
    //	KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    KeepAliveTimerId=KeepAliveTimer.informIn(UMLRTTimespec(6,0),4);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__backtoslave::Region1::Debug__En__RunAsSlave&quot;,(char *)&quot;Debug__A__Ac__backtoslave&quot;,(char *)&quot;Debug__A__En__backtoslave&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wqt9cUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wqukgUrcEemr9sBDNiEkTg" name="Debug__end__trans__backtoslave" source="_wqsIQErcEemr9sBDNiEkTg" target="_wqO1QUrcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wq9OAErcEemr9sBDNiEkTg" name="Debug__end__trans__backtoslave__384">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__backtoslave::Region1::Debug__end__trans__backtoslave&quot;,(char *)&quot;Debug__A__En__backtoslave&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wqukgkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <subvertex xmi:type="uml:State" xmi:id="_wqpE8UrcEemr9sBDNiEkTg" name="Debug__B__Ac__backtoslave">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wqpsAErcEemr9sBDNiEkTg" name="Debug__B__Ac__backtoslave">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;backtoslave&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__backtoslave::Region1::Debug__B__Ac__backtoslave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wqwZsErcEemr9sBDNiEkTg" name="Debug__B__Ac__backtoslave__375">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__backtoslave::Region1::Debug__B__Ac__backtoslave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wqqTEErcEemr9sBDNiEkTg" name="Debug__A__Ac__backtoslave">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wqqTEUrcEemr9sBDNiEkTg" name="Debug__A__Ac__backtoslave">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;backtoslave&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__backtoslave::Region1::Debug__A__Ac__backtoslave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wqzdAErcEemr9sBDNiEkTg" name="Debug__A__Ac__backtoslave__376">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__backtoslave::Region1::Debug__A__Ac__backtoslave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wqsIQErcEemr9sBDNiEkTg" name="Debug__A__En__backtoslave">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wqsIQUrcEemr9sBDNiEkTg" name="Debug__A__En__backtoslave">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__backtoslave::Region1::Debug__A__En__backtoslave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wq15QUrcEemr9sBDNiEkTg" name="Debug__A__En__backtoslave__377">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__backtoslave::Region1::Debug__A__En__backtoslave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                  </region>
                </subvertex>
                <subvertex xmi:type="uml:Pseudostate" xmi:id="_ws-AMErcEemr9sBDNiEkTg" name="Debug__Path__KeepAliveMsg" kind="choice"/>
                <subvertex xmi:type="uml:State" xmi:id="_ws-nQUrcEemr9sBDNiEkTg" name="Debug__C__KeepAliveMsg">
                  <connectionPoint xmi:id="_ws_OUUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
                  <connectionPoint xmi:id="_ws_1YUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
                  <region xmi:id="_ws-nQkrcEemr9sBDNiEkTg" name="Region1">
                    <transition xmi:id="_wtVMkErcEemr9sBDNiEkTg" name="Debug__init__trans__KeepAliveMsg" source="_ws_OUUrcEemr9sBDNiEkTg" target="_wtQUEErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtjPAErcEemr9sBDNiEkTg" name="Debug__init__trans__KeepAliveMsg__461">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__init__trans__KeepAliveMsg&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__RunAsSlave&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                    </transition>
                    <transition xmi:id="_wtVMkUrcEemr9sBDNiEkTg" name="Debug__Ex__RunAsSlave" source="_wtQUEErcEemr9sBDNiEkTg" target="_wtQ7IErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtkdIErcEemr9sBDNiEkTg" name="Debug__Ex__RunAsSlave__463">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__Ex__RunAsSlave&quot;,(char *)&quot;Debug__B__Ex__RunAsSlave&quot;,(char *)&quot;Debug__B__Ac__KeepAliveMsg&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wtVMkkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wtVzoErcEemr9sBDNiEkTg" name="Debug__AC__KeepAliveMsg" source="_wtQ7IErcEemr9sBDNiEkTg" target="_wtSwUErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtVzokrcEemr9sBDNiEkTg" name="ProcessKeppAlive" visibility="public" isReentrant="true">
                        <language>C++</language>
                        <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Keep Alive Message from &quot;&lt;&lt; ServerName&lt;&lt;&quot;\n&quot;;
    //if (KeepAliveTimerId.isValid())
    //	KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    //KeepAliveTimerId=KeepAliveTimer.informEvery(UMLRTTimespec(6,0),4);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__AC__KeepAliveMsg&quot;,(char *)&quot;Debug__B__Ac__KeepAliveMsg&quot;,(char *)&quot;Debug__A__Ac__KeepAliveMsg&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wtVzoUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wtWasErcEemr9sBDNiEkTg" name="Debug__En__RunAsSlave" source="_wtSwUErcEemr9sBDNiEkTg" target="_wtT-cErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtXBwErcEemr9sBDNiEkTg" name="RunAsSlaveEntry" visibility="public" isReentrant="true">
                        <language>C++</language>
                        <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Running as Slave now\n&quot;;
    //if (KeepAliveTimerId.isValid())
    //	KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    KeepAliveTimerId=KeepAliveTimer.informIn(UMLRTTimespec(6,0),4);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__En__RunAsSlave&quot;,(char *)&quot;Debug__A__Ac__KeepAliveMsg&quot;,(char *)&quot;Debug__A__En__RunAsSlave&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wtWasUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wtXBwUrcEemr9sBDNiEkTg" name="Debug__end__trans__KeepAliveMsg" source="_wtT-cErcEemr9sBDNiEkTg" target="_ws_1YUrcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wtp8sErcEemr9sBDNiEkTg" name="Debug__end__trans__KeepAliveMsg__467">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__end__trans__KeepAliveMsg&quot;,(char *)&quot;Debug__A__En__RunAsSlave&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_wtXBwkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <subvertex xmi:type="uml:State" xmi:id="_wtQUEErcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsSlave">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wtQUEUrcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsSlave">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__B__Ex__RunAsSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wtYP4UrcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsSlave__456">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__B__Ex__RunAsSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wtQ7IErcEemr9sBDNiEkTg" name="Debug__B__Ac__KeepAliveMsg">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wtQ7IUrcEemr9sBDNiEkTg" name="Debug__B__Ac__KeepAliveMsg">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;KeepAliveMsg&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__B__Ac__KeepAliveMsg&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wtbTMErcEemr9sBDNiEkTg" name="Debug__B__Ac__KeepAliveMsg__457">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__B__Ac__KeepAliveMsg&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wtSwUErcEemr9sBDNiEkTg" name="Debug__A__Ac__KeepAliveMsg">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wtSwUUrcEemr9sBDNiEkTg" name="Debug__A__Ac__KeepAliveMsg">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;KeepAliveMsg&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__A__Ac__KeepAliveMsg&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wteWgErcEemr9sBDNiEkTg" name="Debug__A__Ac__KeepAliveMsg__458">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__A__Ac__KeepAliveMsg&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wtT-cErcEemr9sBDNiEkTg" name="Debug__A__En__RunAsSlave">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wtT-cUrcEemr9sBDNiEkTg" name="Debug__A__En__RunAsSlave">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__A__En__RunAsSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wtgLsErcEemr9sBDNiEkTg" name="Debug__A__En__RunAsSlave__459">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__KeepAliveMsg::Region1::Debug__A__En__RunAsSlave&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                  </region>
                </subvertex>
                <subvertex xmi:type="uml:Pseudostate" xmi:id="_wu4EsErcEemr9sBDNiEkTg" name="Debug__Path__backtoslave1" kind="choice"/>
                <subvertex xmi:type="uml:State" xmi:id="_wu4rwUrcEemr9sBDNiEkTg" name="Debug__C__backtoslave1">
                  <connectionPoint xmi:id="_wu554UrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
                  <connectionPoint xmi:id="_wu7IAUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
                  <region xmi:id="_wu4rwkrcEemr9sBDNiEkTg" name="Region1">
                    <transition xmi:id="_wvQfMErcEemr9sBDNiEkTg" name="Debug__init__trans__backtoslave1" source="_wu554UrcEemr9sBDNiEkTg" target="_wvOC8ErcEemr9sBDNiEkTg"/>
                    <transition xmi:id="_wvQfMUrcEemr9sBDNiEkTg" name="Debug__Ac__backtoslave1" source="_wvOC8ErcEemr9sBDNiEkTg" target="_wvPREErcEemr9sBDNiEkTg">
                      <trigger xmi:id="_wvQfMkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wvRGQErcEemr9sBDNiEkTg" name="Debug__end__trans__backtoslave1" source="_wvPREErcEemr9sBDNiEkTg" target="_wu7IAUrcEemr9sBDNiEkTg">
                      <trigger xmi:id="_wvRGQUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <subvertex xmi:type="uml:State" xmi:id="_wvOC8ErcEemr9sBDNiEkTg" name="Debug__B__Ac__backtoslave1">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wvOC8UrcEemr9sBDNiEkTg" name="Debug__B__Ac__backtoslave1">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;backtoslave1&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                      </entry>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wvPREErcEemr9sBDNiEkTg" name="Debug__A__Ac__backtoslave1">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wvPREUrcEemr9sBDNiEkTg" name="Debug__A__Ac__backtoslave1">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;backtoslave1&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                      </entry>
                    </subvertex>
                  </region>
                </subvertex>
                <subvertex xmi:type="uml:Pseudostate" xmi:id="_wxLx0ErcEemr9sBDNiEkTg" name="Debug__Path__CheckNoMaster" kind="choice"/>
                <subvertex xmi:type="uml:State" xmi:id="_wxM_8UrcEemr9sBDNiEkTg" name="Debug__C__CheckNoMaster">
                  <connectionPoint xmi:id="_wxOOEUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
                  <connectionPoint xmi:id="_wxTtoUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
                  <region xmi:id="_wxM_8krcEemr9sBDNiEkTg" name="Region1">
                    <transition xmi:id="_wxvLcErcEemr9sBDNiEkTg" name="Debug__init__trans__CheckNoMaster" source="_wxOOEUrcEemr9sBDNiEkTg" target="_wxsIIErcEemr9sBDNiEkTg"/>
                    <transition xmi:id="_wxyOwErcEemr9sBDNiEkTg" name="Debug__Ac__CheckNoMaster" source="_wxsIIErcEemr9sBDNiEkTg" target="_wxt9UErcEemr9sBDNiEkTg">
                      <trigger xmi:id="_wxzc4ErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_wx0D8ErcEemr9sBDNiEkTg" name="Debug__end__trans__CheckNoMaster" source="_wxt9UErcEemr9sBDNiEkTg" target="_wxTtoUrcEemr9sBDNiEkTg">
                      <trigger xmi:id="_wx0rAErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <subvertex xmi:type="uml:State" xmi:id="_wxsIIErcEemr9sBDNiEkTg" name="Debug__B__Ac__CheckNoMaster">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wxsIIUrcEemr9sBDNiEkTg" name="Debug__B__Ac__CheckNoMaster">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;CheckNoMaster&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                      </entry>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_wxt9UErcEemr9sBDNiEkTg" name="Debug__A__Ac__CheckNoMaster">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wxt9UUrcEemr9sBDNiEkTg" name="Debug__A__Ac__CheckNoMaster">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;CheckNoMaster&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                      </entry>
                    </subvertex>
                  </region>
                </subvertex>
                <subvertex xmi:type="uml:Pseudostate" xmi:id="_w0wDMErcEemr9sBDNiEkTg" name="Debug__Path__Initial1__RunAsSlave__7" kind="choice"/>
                <subvertex xmi:type="uml:State" xmi:id="_w0xRUErcEemr9sBDNiEkTg" name="Debug__C__Initial1__RunAsSlave__7">
                  <connectionPoint xmi:id="_w0x4YUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
                  <connectionPoint xmi:id="_w0zGgUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
                  <region xmi:id="_w0xRUUrcEemr9sBDNiEkTg" name="Region1">
                    <transition xmi:id="_w1GBcErcEemr9sBDNiEkTg" name="Debug__init__trans__Initial1__RunAsSlave__7" source="_w0x4YUrcEemr9sBDNiEkTg" target="_w1CXEUrcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w1PycErcEemr9sBDNiEkTg" name="Debug__init__trans__Initial1__RunAsSlave__7__671">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__Initial1__RunAsSlave__7::Region1::Debug__init__trans__Initial1__RunAsSlave__7&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial1__RunAsSlave__7&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                    </transition>
                    <transition xmi:id="_w1GBcUrcEemr9sBDNiEkTg" name="Debug__Ac__Initial1__RunAsSlave__7" source="_w1CXEUrcEemr9sBDNiEkTg" target="_w1C-IErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w1RAkErcEemr9sBDNiEkTg" name="Debug__Ac__Initial1__RunAsSlave__7__673">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__Initial1__RunAsSlave__7::Region1::Debug__Ac__Initial1__RunAsSlave__7&quot;,(char *)&quot;Debug__B__Ac__Initial1__RunAsSlave__7&quot;,(char *)&quot;Debug__A__Ac__Initial1__RunAsSlave__7&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_w1GBckrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_w1GBc0rcEemr9sBDNiEkTg" name="Debug__En__RunAsSlave" source="_w1C-IErcEemr9sBDNiEkTg" target="_w1EzUErcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w1GogErcEemr9sBDNiEkTg" name="RunAsSlaveEntry" visibility="public" isReentrant="true">
                        <language>C++</language>
                        <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Running as Slave now\n&quot;;
    //if (KeepAliveTimerId.isValid())
    //	KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    KeepAliveTimerId=KeepAliveTimer.informIn(UMLRTTimespec(6,0),4);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__Initial1__RunAsSlave__7::Region1::Debug__En__RunAsSlave&quot;,(char *)&quot;Debug__A__Ac__Initial1__RunAsSlave__7&quot;,(char *)&quot;Debug__A__En__Initial1__RunAsSlave__7&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_w1GBdErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <transition xmi:id="_w1GogUrcEemr9sBDNiEkTg" name="Debug__end__trans__Initial1__RunAsSlave__7" source="_w1EzUErcEemr9sBDNiEkTg" target="_w0zGgUrcEemr9sBDNiEkTg">
                      <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w1Uq8ErcEemr9sBDNiEkTg" name="Debug__end__trans__Initial1__RunAsSlave__7__676">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__Initial1__RunAsSlave__7::Region1::Debug__end__trans__Initial1__RunAsSlave__7&quot;,(char *)&quot;Debug__A__En__Initial1__RunAsSlave__7&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                      </effect>
                      <trigger xmi:id="_w1GogkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                        <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                      </trigger>
                    </transition>
                    <subvertex xmi:type="uml:State" xmi:id="_w1CXEUrcEemr9sBDNiEkTg" name="Debug__B__Ac__Initial1__RunAsSlave__7">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w1CXEkrcEemr9sBDNiEkTg" name="Debug__B__Ac__Initial1__RunAsSlave__7">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;Initial1__RunAsSlave__7&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__Initial1__RunAsSlave__7::Region1::Debug__B__Ac__Initial1__RunAsSlave__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w1H2oUrcEemr9sBDNiEkTg" name="Debug__B__Ac__Initial1__RunAsSlave__7__667">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__Initial1__RunAsSlave__7::Region1::Debug__B__Ac__Initial1__RunAsSlave__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_w1C-IErcEemr9sBDNiEkTg" name="Debug__A__Ac__Initial1__RunAsSlave__7">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w1DlMErcEemr9sBDNiEkTg" name="Debug__A__Ac__Initial1__RunAsSlave__7">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;Initial1__RunAsSlave__7&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__Initial1__RunAsSlave__7::Region1::Debug__A__Ac__Initial1__RunAsSlave__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w1K58ErcEemr9sBDNiEkTg" name="Debug__A__Ac__Initial1__RunAsSlave__7__668">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__Initial1__RunAsSlave__7::Region1::Debug__A__Ac__Initial1__RunAsSlave__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                    <subvertex xmi:type="uml:State" xmi:id="_w1EzUErcEemr9sBDNiEkTg" name="Debug__A__En__Initial1__RunAsSlave__7">
                      <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w1EzUUrcEemr9sBDNiEkTg" name="Debug__A__En__Initial1__RunAsSlave__7">
                        <language>C++</language>
                        <body>if (not(Debug__SRO.checkDebug(&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__Initial1__RunAsSlave__7::Region1::Debug__A__En__Initial1__RunAsSlave__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </entry>
                      <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w1N9QErcEemr9sBDNiEkTg" name="Debug__A__En__Initial1__RunAsSlave__7__669">
                        <language>C++</language>
                        <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Backup::Region1::Debug__C__Initial1__RunAsSlave__7::Region1::Debug__A__En__Initial1__RunAsSlave__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                      </exit>
                    </subvertex>
                  </region>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wkq_0ErcEemr9sBDNiEkTg" name="Debug__Path__ServerFaliure" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wks1AErcEemr9sBDNiEkTg" name="Debug__C__ServerFaliure">
              <connectionPoint xmi:id="_wkuqMUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wkv4UUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wks1AUrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wlQ1sErcEemr9sBDNiEkTg" name="Debug__init__trans__ServerFaliure" source="_wkuqMUrcEemr9sBDNiEkTg" target="_wlLWIUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wlmz8ErcEemr9sBDNiEkTg" name="Debug__init__trans__ServerFaliure__257">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__init__trans__ServerFaliure&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wlQ1sUrcEemr9sBDNiEkTg" name="Debug__Ex__RunAsMaster" source="_wlLWIUrcEemr9sBDNiEkTg" target="_wlMkQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wlQ1s0rcEemr9sBDNiEkTg" name="startTransition" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    ts.getclock(ts);
    messageID=messageID+1;
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,TranstionStart,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
     //logfile.flush();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__Ex__RunAsMaster&quot;,(char *)&quot;Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;Debug__B__Ac__ServerFaliure&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wlQ1skrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wlRcwErcEemr9sBDNiEkTg" name="Debug__AC__ServerFaliure" source="_wlMkQErcEemr9sBDNiEkTg" target="_wlOZcErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wlRcwkrcEemr9sBDNiEkTg" name="CancellTimer" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    if (KeepAliveTimerId.isValid())
    KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    if (AnnouncementTimerId.isValid())
    MasterAnnounceTimer.cancelTimer(AnnouncementTimerId);
    if (TimerId.isValid())
    Timer.cancelTimer(TimerId);
    int r=random()%30+5;
    Timer.informEvery(UMLRTTimespec(r,0),4);
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Failure,  will recover after &quot; &lt;&lt; r &lt;&lt; &quot; seconds\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__AC__ServerFaliure&quot;,(char *)&quot;Debug__B__Ac__ServerFaliure&quot;,(char *)&quot;Debug__A__Ac__ServerFaliure&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wlRcwUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wlSD0ErcEemr9sBDNiEkTg" name="Debug__En__Failure" source="_wlOZcErcEemr9sBDNiEkTg" target="_wlPnkErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wlSD0krcEemr9sBDNiEkTg" name="SetTimer" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    //------

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__En__Failure&quot;,(char *)&quot;Debug__A__Ac__ServerFaliure&quot;,(char *)&quot;Debug__A__En__Failure&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wlSD0UrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wlSq4ErcEemr9sBDNiEkTg" name="Debug__end__trans__ServerFaliure" source="_wlPnkErcEemr9sBDNiEkTg" target="_wkv4UUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wlthoErcEemr9sBDNiEkTg" name="Debug__end__trans__ServerFaliure__262">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__end__trans__ServerFaliure&quot;,(char *)&quot;Debug__A__En__Failure&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wlSq4UrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wlLWIUrcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wlL9MErcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wlT5AErcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsMaster__252">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wlMkQErcEemr9sBDNiEkTg" name="Debug__B__Ac__ServerFaliure">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wlMkQUrcEemr9sBDNiEkTg" name="Debug__B__Ac__ServerFaliure">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;ServerFaliure&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__B__Ac__ServerFaliure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wlZ_oErcEemr9sBDNiEkTg" name="Debug__B__Ac__ServerFaliure__253">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__B__Ac__ServerFaliure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wlOZcErcEemr9sBDNiEkTg" name="Debug__A__Ac__ServerFaliure">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wlPAgErcEemr9sBDNiEkTg" name="Debug__A__Ac__ServerFaliure">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ServerFaliure&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Failure&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__A__Ac__ServerFaliure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wldC8ErcEemr9sBDNiEkTg" name="Debug__A__Ac__ServerFaliure__254">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__A__Ac__ServerFaliure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wlPnkErcEemr9sBDNiEkTg" name="Debug__A__En__Failure">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wlQOoErcEemr9sBDNiEkTg" name="Debug__A__En__Failure">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Failure&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__A__En__Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wliigErcEemr9sBDNiEkTg" name="Debug__A__En__Failure__255">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServerFaliure::Region1::Debug__A__En__Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wm5NYErcEemr9sBDNiEkTg" name="Debug__Path__purgeotherMessage" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wm7poUrcEemr9sBDNiEkTg" name="Debug__C__purgeotherMessage">
              <connectionPoint xmi:id="_wm83wUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wm9e0UrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wm7pokrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wnr3kErcEemr9sBDNiEkTg" name="Debug__init__trans__purgeotherMessage" source="_wm83wUrcEemr9sBDNiEkTg" target="_wnnmIErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_woJKkErcEemr9sBDNiEkTg" name="Debug__init__trans__purgeotherMessage__306">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__init__trans__purgeotherMessage&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Failure&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wnseoErcEemr9sBDNiEkTg" name="Debug__Ex__Failure" source="_wnnmIErcEemr9sBDNiEkTg" target="_wnoNMErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_woK_wErcEemr9sBDNiEkTg" name="Debug__Ex__Failure__308">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__Ex__Failure&quot;,(char *)&quot;Debug__B__Ex__Failure&quot;,(char *)&quot;Debug__B__Ac__purgeotherMessage&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wnseoUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wntFsErcEemr9sBDNiEkTg" name="Debug__AC__purgeotherMessage" source="_wnoNMErcEemr9sBDNiEkTg" target="_wnpbUErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_woOqIErcEemr9sBDNiEkTg" name="Debug__AC__purgeotherMessage__310">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__AC__purgeotherMessage&quot;,(char *)&quot;Debug__B__Ac__purgeotherMessage&quot;,(char *)&quot;Debug__A__Ac__purgeotherMessage&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wntswErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wnuT0ErcEemr9sBDNiEkTg" name="Debug__En__Failure" source="_wnpbUErcEemr9sBDNiEkTg" target="_wnqpcErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wnuT0krcEemr9sBDNiEkTg" name="SetTimer" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    //------

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__En__Failure&quot;,(char *)&quot;Debug__A__Ac__purgeotherMessage&quot;,(char *)&quot;Debug__A__En__Failure&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wnuT0UrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wnu64ErcEemr9sBDNiEkTg" name="Debug__end__trans__purgeotherMessage" source="_wnqpcErcEemr9sBDNiEkTg" target="_wm9e0UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_woV-4ErcEemr9sBDNiEkTg" name="Debug__end__trans__purgeotherMessage__313">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__end__trans__purgeotherMessage&quot;,(char *)&quot;Debug__A__En__Failure&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wnu64UrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wnnmIErcEemr9sBDNiEkTg" name="Debug__B__Ex__Failure">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wnnmIUrcEemr9sBDNiEkTg" name="Debug__B__Ex__Failure">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Failure&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__B__Ex__Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wnylQErcEemr9sBDNiEkTg" name="Debug__B__Ex__Failure__301">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__B__Ex__Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wnoNMErcEemr9sBDNiEkTg" name="Debug__B__Ac__purgeotherMessage">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wnoNMUrcEemr9sBDNiEkTg" name="Debug__B__Ac__purgeotherMessage">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Failure&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;purgeotherMessage&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__B__Ac__purgeotherMessage&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wn2PoErcEemr9sBDNiEkTg" name="Debug__B__Ac__purgeotherMessage__302">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__B__Ac__purgeotherMessage&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wnpbUErcEemr9sBDNiEkTg" name="Debug__A__Ac__purgeotherMessage">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wnpbUUrcEemr9sBDNiEkTg" name="Debug__A__Ac__purgeotherMessage">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;purgeotherMessage&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Failure&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__A__Ac__purgeotherMessage&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wn7vMErcEemr9sBDNiEkTg" name="Debug__A__Ac__purgeotherMessage__303">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__A__Ac__purgeotherMessage&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wnqpcErcEemr9sBDNiEkTg" name="Debug__A__En__Failure">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wnrQgErcEemr9sBDNiEkTg" name="Debug__A__En__Failure">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Failure&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__A__En__Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_woFgMErcEemr9sBDNiEkTg" name="Debug__A__En__Failure__304">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__purgeotherMessage::Region1::Debug__A__En__Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wocFgErcEemr9sBDNiEkTg" name="Debug__Path__initTimer" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_woehwErcEemr9sBDNiEkTg" name="Debug__C__initTimer">
              <connectionPoint xmi:id="_woiMIUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wokBUErcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_woehwUrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wpGM0ErcEemr9sBDNiEkTg" name="Debug__init__trans__initTimer" source="_woiMIUrcEemr9sBDNiEkTg" target="_wpCicErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wpSaEErcEemr9sBDNiEkTg" name="Debug__init__trans__initTimer__332">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__initTimer::Region1::Debug__init__trans__initTimer&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__initTimer&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wpGM0UrcEemr9sBDNiEkTg" name="Debug__Ac__initTimer" source="_wpCicErcEemr9sBDNiEkTg" target="_wpEXoErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wpGz4ErcEemr9sBDNiEkTg" name="InitTimer" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>logfile&lt;&lt;&quot;capsuleName&quot;&lt;&lt;&quot;,messageType,&quot;&lt;&lt;&quot;messageID&quot;&lt;&lt;&quot;,&quot;&lt;&lt;&quot;second&quot;&lt;&lt;&quot;,&quot;&lt;&lt;&quot;nano&quot;&lt;&lt;&quot;\n&quot;;    
//UMLRTTimespec ts;
    //ts.getclock(ts);
    //this->setTimePointSecond();
    logfile.open(this->getName());
    //if (logfile.is_open())
    //	logfile&lt;&lt;ts.tv_sec&lt;&lt;&quot;:&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
    //logfile.close();
    int r=random()%30+5;
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: will go fail state after &quot;&lt;&lt; r &lt;&lt; &quot;second\n&quot;;
    //TimerId=Timer.informEvery(UMLRTTimespec(r,0),4);
   TimerId=Timer.informEvery(UMLRTTimespec(3600000,0),4);
    KeepAliveTimerId=KeepAliveTimer.informEvery(UMLRTTimespec(KeepAliveTimeOut,0),4);
    AnnouncementTimerId=MasterAnnounceTimer.informEvery(UMLRTTimespec(AnnouncementTimeOut,0),4);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__initTimer::Region1::Debug__Ac__initTimer&quot;,(char *)&quot;Debug__B__Ac__initTimer&quot;,(char *)&quot;Debug__A__Ac__initTimer&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wpGM0krcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wpGz4UrcEemr9sBDNiEkTg" name="Debug__En__RunAsMaster" source="_wpEXoErcEemr9sBDNiEkTg" target="_wpE-sErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wpHa8ErcEemr9sBDNiEkTg" name="RunAsMasterEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Run as Master now\n&quot;;
    ConfigComm.IAMMaster((char *)this->getName()).send();
    ts.getclock(ts);
    //messageID=messageID+1;
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,TranstionEnd,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
     logfile.flush();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__initTimer::Region1::Debug__En__RunAsMaster&quot;,(char *)&quot;Debug__A__Ac__initTimer&quot;,(char *)&quot;Debug__A__En__initTimer&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wpGz4krcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wpHa8UrcEemr9sBDNiEkTg" name="Debug__end__trans__initTimer" source="_wpE-sErcEemr9sBDNiEkTg" target="_wokBUErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wpZHwErcEemr9sBDNiEkTg" name="Debug__end__trans__initTimer__336">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__initTimer::Region1::Debug__end__trans__initTimer&quot;,(char *)&quot;Debug__A__En__initTimer&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wpICAErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wpCicErcEemr9sBDNiEkTg" name="Debug__B__Ac__initTimer">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wpCicUrcEemr9sBDNiEkTg" name="Debug__B__Ac__initTimer">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;initTimer&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__initTimer::Region1::Debug__B__Ac__initTimer&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wpJQIErcEemr9sBDNiEkTg" name="Debug__B__Ac__initTimer__328">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__initTimer::Region1::Debug__B__Ac__initTimer&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wpEXoErcEemr9sBDNiEkTg" name="Debug__A__Ac__initTimer">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wpEXoUrcEemr9sBDNiEkTg" name="Debug__A__Ac__initTimer">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;initTimer&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__initTimer::Region1::Debug__A__Ac__initTimer&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wpM6gUrcEemr9sBDNiEkTg" name="Debug__A__Ac__initTimer__329">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__initTimer::Region1::Debug__A__Ac__initTimer&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wpE-sErcEemr9sBDNiEkTg" name="Debug__A__En__initTimer">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wpE-sUrcEemr9sBDNiEkTg" name="Debug__A__En__initTimer">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__initTimer::Region1::Debug__A__En__initTimer&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wpP90ErcEemr9sBDNiEkTg" name="Debug__A__En__initTimer__330">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__initTimer::Region1::Debug__A__En__initTimer&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wrA4YErcEemr9sBDNiEkTg" name="Debug__Path__ActiveMode" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wrCGgUrcEemr9sBDNiEkTg" name="Debug__C__ActiveMode">
              <connectionPoint xmi:id="_wrCtkUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wrDUoUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wrCGgkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wrZS4ErcEemr9sBDNiEkTg" name="Debug__init__trans__ActiveMode" source="_wrCtkUrcEemr9sBDNiEkTg" target="_wrWPkErcEemr9sBDNiEkTg"/>
                <transition xmi:id="_wrZ58ErcEemr9sBDNiEkTg" name="Debug__Ac__ActiveMode" source="_wrWPkErcEemr9sBDNiEkTg" target="_wrXdsErcEemr9sBDNiEkTg">
                  <trigger xmi:id="_wrZ58UrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wrahAErcEemr9sBDNiEkTg" name="Debug__end__trans__ActiveMode" source="_wrXdsErcEemr9sBDNiEkTg" target="_wrDUoUrcEemr9sBDNiEkTg">
                  <trigger xmi:id="_wrahAUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wrWPkErcEemr9sBDNiEkTg" name="Debug__B__Ac__ActiveMode">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wrWPkUrcEemr9sBDNiEkTg" name="Debug__B__Ac__ActiveMode">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ActiveMode&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wrXdsErcEemr9sBDNiEkTg" name="Debug__A__Ac__ActiveMode">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wrXdsUrcEemr9sBDNiEkTg" name="Debug__A__Ac__ActiveMode">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ActiveMode&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wrgnoErcEemr9sBDNiEkTg" name="Debug__Path__Recover" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wrh1wUrcEemr9sBDNiEkTg" name="Debug__C__Recover">
              <connectionPoint xmi:id="_wrkSAUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wrlgIUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wrh1wkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wr9TkErcEemr9sBDNiEkTg" name="Debug__init__trans__Recover" source="_wrkSAUrcEemr9sBDNiEkTg" target="_wr5pMUrcEemr9sBDNiEkTg"/>
                <transition xmi:id="_wr96oErcEemr9sBDNiEkTg" name="Debug__Ex__Failure" source="_wr5pMUrcEemr9sBDNiEkTg" target="_wr63UErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wsL9EErcEemr9sBDNiEkTg" name="Debug__Ex__Failure__417">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Recover::Region1::Debug__Ex__Failure&quot;,(char *)&quot;Debug__B__Ex__Failure&quot;,(char *)&quot;Debug__B__Ac__Recover&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wr96oUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wr96okrcEemr9sBDNiEkTg" name="Debug__AC__Recover" source="_wr63UErcEemr9sBDNiEkTg" target="_wr8sgErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wr-hsUrcEemr9sBDNiEkTg" name="Recover" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: is recovering\n&quot;;
    if (TimerId.isValid())
    Timer.cancelTimer(TimerId);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Recover::Region1::Debug__AC__Recover&quot;,(char *)&quot;Debug__B__Ac__Recover&quot;,(char *)&quot;Debug__A__Ac__Recover&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wr-hsErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wr_IwErcEemr9sBDNiEkTg" name="Debug__end__trans__Recover" source="_wr8sgErcEemr9sBDNiEkTg" target="_wrlgIUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wsPncErcEemr9sBDNiEkTg" name="Debug__end__trans__Recover__420">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Recover::Region1::Debug__end__trans__Recover&quot;,(char *)&quot;Debug__A__Ac__Recover&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wr_IwUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wr5pMUrcEemr9sBDNiEkTg" name="Debug__B__Ex__Failure">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wr5pMkrcEemr9sBDNiEkTg" name="Debug__B__Ex__Failure">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Failure&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Recover::Region1::Debug__B__Ex__Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wsA98ErcEemr9sBDNiEkTg" name="Debug__B__Ex__Failure__413">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Recover::Region1::Debug__B__Ex__Failure&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wr63UErcEemr9sBDNiEkTg" name="Debug__B__Ac__Recover">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wr63UUrcEemr9sBDNiEkTg" name="Debug__B__Ac__Recover">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Failure&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Recover&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Recover::Region1::Debug__B__Ac__Recover&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wsEoUErcEemr9sBDNiEkTg" name="Debug__B__Ac__Recover__414">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Recover::Region1::Debug__B__Ac__Recover&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wr8sgErcEemr9sBDNiEkTg" name="Debug__A__Ac__Recover">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wr8sgUrcEemr9sBDNiEkTg" name="Debug__A__Ac__Recover">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Recover&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Recover::Region1::Debug__A__Ac__Recover&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wsHroErcEemr9sBDNiEkTg" name="Debug__A__Ac__Recover__415">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Recover::Region1::Debug__A__Ac__Recover&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wsT44ErcEemr9sBDNiEkTg" name="Debug__Path__BeingMaster" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wsVHAUrcEemr9sBDNiEkTg" name="Debug__C__BeingMaster">
              <connectionPoint xmi:id="_wsVuEUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wsW8MUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wsVHAkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wsqeMErcEemr9sBDNiEkTg" name="Debug__init__trans__BeingMaster" source="_wsVuEUrcEemr9sBDNiEkTg" target="_wsmz0UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ws2rcErcEemr9sBDNiEkTg" name="Debug__init__trans__BeingMaster__438">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__BeingMaster::Region1::Debug__init__trans__BeingMaster&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__BeingMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wsqeMUrcEemr9sBDNiEkTg" name="Debug__Ac__BeingMaster" source="_wsmz0UrcEemr9sBDNiEkTg" target="_wsoB8ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wsrFQUrcEemr9sBDNiEkTg" name="BeMaster" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    int r=random()%30+5;
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: will go fail state after &quot;&lt;&lt; r &lt;&lt; &quot;second\n&quot;;
    //TimerId=Timer.informEvery(360000);
    TimerId=Timer.informEvery(UMLRTTimespec(3600000,0),4);
    KeepAliveTimerId=KeepAliveTimer.informEvery(UMLRTTimespec(KeepAliveTimeOut,0),4);
    AnnouncementTimerId=MasterAnnounceTimer.informEvery(UMLRTTimespec(AnnouncementTimeOut,0),4);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__BeingMaster::Region1::Debug__Ac__BeingMaster&quot;,(char *)&quot;Debug__B__Ac__BeingMaster&quot;,(char *)&quot;Debug__A__Ac__BeingMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wsrFQErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wsrsUErcEemr9sBDNiEkTg" name="Debug__En__RunAsMaster" source="_wsoB8ErcEemr9sBDNiEkTg" target="_wspQEErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wssTYErcEemr9sBDNiEkTg" name="RunAsMasterEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Run as Master now\n&quot;;
    ConfigComm.IAMMaster((char *)this->getName()).send();
    ts.getclock(ts);
    //messageID=messageID+1;
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,TranstionEnd,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
     logfile.flush();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__BeingMaster::Region1::Debug__En__RunAsMaster&quot;,(char *)&quot;Debug__A__Ac__BeingMaster&quot;,(char *)&quot;Debug__A__En__BeingMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wsrsUUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wss6cErcEemr9sBDNiEkTg" name="Debug__end__trans__BeingMaster" source="_wspQEErcEemr9sBDNiEkTg" target="_wsW8MUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ws684ErcEemr9sBDNiEkTg" name="Debug__end__trans__BeingMaster__442">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__BeingMaster::Region1::Debug__end__trans__BeingMaster&quot;,(char *)&quot;Debug__A__En__BeingMaster&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wss6cUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wsmz0UrcEemr9sBDNiEkTg" name="Debug__B__Ac__BeingMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wsmz0krcEemr9sBDNiEkTg" name="Debug__B__Ac__BeingMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;BeingMaster&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__BeingMaster::Region1::Debug__B__Ac__BeingMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wsuIkUrcEemr9sBDNiEkTg" name="Debug__B__Ac__BeingMaster__434">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__BeingMaster::Region1::Debug__B__Ac__BeingMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wsoB8ErcEemr9sBDNiEkTg" name="Debug__A__Ac__BeingMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wsoB8UrcEemr9sBDNiEkTg" name="Debug__A__Ac__BeingMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;BeingMaster&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__BeingMaster::Region1::Debug__A__Ac__BeingMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wsxL4UrcEemr9sBDNiEkTg" name="Debug__A__Ac__BeingMaster__435">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__BeingMaster::Region1::Debug__A__Ac__BeingMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wspQEErcEemr9sBDNiEkTg" name="Debug__A__En__BeingMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wspQEUrcEemr9sBDNiEkTg" name="Debug__A__En__BeingMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__BeingMaster::Region1::Debug__A__En__BeingMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_ws02QErcEemr9sBDNiEkTg" name="Debug__A__En__BeingMaster__436">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__BeingMaster::Region1::Debug__A__En__BeingMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wttAAErcEemr9sBDNiEkTg" name="Debug__Path__PassiveMode" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wttnEUrcEemr9sBDNiEkTg" name="Debug__C__PassiveMode">
              <connectionPoint xmi:id="_wtu1MUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wtvcQUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wttnEkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wuEzcErcEemr9sBDNiEkTg" name="Debug__init__trans__PassiveMode" source="_wtu1MUrcEemr9sBDNiEkTg" target="_wuCXMUrcEemr9sBDNiEkTg"/>
                <transition xmi:id="_wuFagErcEemr9sBDNiEkTg" name="Debug__Ac__PassiveMode" source="_wuCXMUrcEemr9sBDNiEkTg" target="_wuEMYErcEemr9sBDNiEkTg">
                  <trigger xmi:id="_wuFagUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wuGBkErcEemr9sBDNiEkTg" name="Debug__end__trans__PassiveMode" source="_wuEMYErcEemr9sBDNiEkTg" target="_wtvcQUrcEemr9sBDNiEkTg">
                  <trigger xmi:id="_wuGBkUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wuCXMUrcEemr9sBDNiEkTg" name="Debug__B__Ac__PassiveMode">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wuC-QErcEemr9sBDNiEkTg" name="Debug__B__Ac__PassiveMode">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;PassiveMode&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wuEMYErcEemr9sBDNiEkTg" name="Debug__A__Ac__PassiveMode">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wuEMYUrcEemr9sBDNiEkTg" name="Debug__A__Ac__PassiveMode">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;PassiveMode&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wuN9YErcEemr9sBDNiEkTg" name="Debug__Path__Init__StandBy__3" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wuPLgUrcEemr9sBDNiEkTg" name="Debug__C__Init__StandBy__3">
              <connectionPoint xmi:id="_wuQZoUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wuRAsUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wuPLgkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wuo0IErcEemr9sBDNiEkTg" name="Debug__init__trans__Init__StandBy__3" source="_wuQZoUrcEemr9sBDNiEkTg" target="_wulw0UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wuxXAErcEemr9sBDNiEkTg" name="Debug__init__trans__Init__StandBy__3__499">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Init__StandBy__3::Region1::Debug__init__trans__Init__StandBy__3&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Init__StandBy__3&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wuo0IUrcEemr9sBDNiEkTg" name="Debug__Ac__Init__StandBy__3" source="_wulw0UrcEemr9sBDNiEkTg" target="_wumX4ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wupbMErcEemr9sBDNiEkTg" name="InitLog" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: Intialization\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Init__StandBy__3::Region1::Debug__Ac__Init__StandBy__3&quot;,(char *)&quot;Debug__B__Ac__Init__StandBy__3&quot;,(char *)&quot;Debug__A__Ac__Init__StandBy__3&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wuo0IkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wuqCQErcEemr9sBDNiEkTg" name="Debug__En__StandBy" source="_wumX4ErcEemr9sBDNiEkTg" target="_wunmAErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wuzzQErcEemr9sBDNiEkTg" name="Debug__En__StandBy__502">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Init__StandBy__3::Region1::Debug__En__StandBy&quot;,(char *)&quot;Debug__A__Ac__Init__StandBy__3&quot;,(char *)&quot;Debug__A__En__Init__StandBy__3&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wuqCQUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wuqCQkrcEemr9sBDNiEkTg" name="Debug__end__trans__Init__StandBy__3" source="_wunmAErcEemr9sBDNiEkTg" target="_wuRAsUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wu1BYErcEemr9sBDNiEkTg" name="Debug__end__trans__Init__StandBy__3__504">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Init__StandBy__3::Region1::Debug__end__trans__Init__StandBy__3&quot;,(char *)&quot;Debug__A__En__Init__StandBy__3&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wuqpUErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wulw0UrcEemr9sBDNiEkTg" name="Debug__B__Ac__Init__StandBy__3">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wulw0krcEemr9sBDNiEkTg" name="Debug__B__Ac__Init__StandBy__3">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Init__StandBy__3&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Init__StandBy__3::Region1::Debug__B__Ac__Init__StandBy__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wurQYUrcEemr9sBDNiEkTg" name="Debug__B__Ac__Init__StandBy__3__495">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Init__StandBy__3::Region1::Debug__B__Ac__Init__StandBy__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wumX4ErcEemr9sBDNiEkTg" name="Debug__A__Ac__Init__StandBy__3">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wum-8ErcEemr9sBDNiEkTg" name="Debug__A__Ac__Init__StandBy__3">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Init__StandBy__3&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;StandBy&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Init__StandBy__3::Region1::Debug__A__Ac__Init__StandBy__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wutsoUrcEemr9sBDNiEkTg" name="Debug__A__Ac__Init__StandBy__3__496">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Init__StandBy__3::Region1::Debug__A__Ac__Init__StandBy__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wunmAErcEemr9sBDNiEkTg" name="Debug__A__En__Init__StandBy__3">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wunmAUrcEemr9sBDNiEkTg" name="Debug__A__En__Init__StandBy__3">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;StandBy&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Init__StandBy__3::Region1::Debug__A__En__Init__StandBy__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wuwI4UrcEemr9sBDNiEkTg" name="Debug__A__En__Init__StandBy__3__497">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__Init__StandBy__3::Region1::Debug__A__En__Init__StandBy__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wvZCEErcEemr9sBDNiEkTg" name="Debug__Path__MasterAnnounce" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wvZpIUrcEemr9sBDNiEkTg" name="Debug__C__MasterAnnounce">
              <connectionPoint xmi:id="_wvbeUErcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wvcFYUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wvZpIkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wvyDoErcEemr9sBDNiEkTg" name="Debug__init__trans__MasterAnnounce" source="_wvbeUErcEemr9sBDNiEkTg" target="_wvtLIUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwAtIErcEemr9sBDNiEkTg" name="Debug__init__trans__MasterAnnounce__537">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__init__trans__MasterAnnounce&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wvyDoUrcEemr9sBDNiEkTg" name="Debug__Ex__RunAsMaster" source="_wvtLIUrcEemr9sBDNiEkTg" target="_wvuZQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvyqsErcEemr9sBDNiEkTg" name="startTransition" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    ts.getclock(ts);
    messageID=messageID+1;
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,TranstionStart,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
     //logfile.flush();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__Ex__RunAsMaster&quot;,(char *)&quot;Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;Debug__B__Ac__MasterAnnounce&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wvyDokrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wvyqsUrcEemr9sBDNiEkTg" name="Debug__AC__MasterAnnounce" source="_wvuZQErcEemr9sBDNiEkTg" target="_wvvnYErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvzRwUrcEemr9sBDNiEkTg" name="MasterAnnounce" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    //messageID=messageID+1;
    ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;&quot;keepAliveStart,&quot;&lt;&lt;messageID&lt;&lt;&quot;,,&quot;&lt;&lt;&quot;\n&quot;;
    if (AnnouncementTimerId.isValid())
    MasterAnnounceTimer.cancelTimer(AnnouncementTimerId);
    AnnouncementTimerId=MasterAnnounceTimer.informEvery(UMLRTTimespec(AnnouncementTimeOut,0),4);
    int j=1;
    for (int i=0;i&lt;=1000000;i++)
	j=j+1;
    j=j+1;
    std::cout&lt;&lt;j&lt;&lt;&quot;\n&quot;;


Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__AC__MasterAnnounce&quot;,(char *)&quot;Debug__B__Ac__MasterAnnounce&quot;,(char *)&quot;Debug__A__Ac__MasterAnnounce&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wvzRwErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wvz40ErcEemr9sBDNiEkTg" name="Debug__En__RunAsMaster" source="_wvvnYErcEemr9sBDNiEkTg" target="_wvw1gErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wvz40krcEemr9sBDNiEkTg" name="RunAsMasterEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Run as Master now\n&quot;;
    ConfigComm.IAMMaster((char *)this->getName()).send();
    ts.getclock(ts);
    //messageID=messageID+1;
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,TranstionEnd,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
     logfile.flush();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__En__RunAsMaster&quot;,(char *)&quot;Debug__A__Ac__MasterAnnounce&quot;,(char *)&quot;Debug__A__En__RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wvz40UrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wv0f4ErcEemr9sBDNiEkTg" name="Debug__end__trans__MasterAnnounce" source="_wvw1gErcEemr9sBDNiEkTg" target="_wvcFYUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wwGMsErcEemr9sBDNiEkTg" name="Debug__end__trans__MasterAnnounce__542">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__end__trans__MasterAnnounce&quot;,(char *)&quot;Debug__A__En__RunAsMaster&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wv0f4UrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wvtLIUrcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wvtLIkrcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wv2VEErcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsMaster__532">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wvuZQErcEemr9sBDNiEkTg" name="Debug__B__Ac__MasterAnnounce">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wvuZQUrcEemr9sBDNiEkTg" name="Debug__B__Ac__MasterAnnounce">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;MasterAnnounce&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__B__Ac__MasterAnnounce&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wv4xUErcEemr9sBDNiEkTg" name="Debug__B__Ac__MasterAnnounce__533">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__B__Ac__MasterAnnounce&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wvvnYErcEemr9sBDNiEkTg" name="Debug__A__Ac__MasterAnnounce">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wvvnYUrcEemr9sBDNiEkTg" name="Debug__A__Ac__MasterAnnounce">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;MasterAnnounce&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__A__Ac__MasterAnnounce&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wv70oErcEemr9sBDNiEkTg" name="Debug__A__Ac__MasterAnnounce__534">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__A__Ac__MasterAnnounce&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wvw1gErcEemr9sBDNiEkTg" name="Debug__A__En__RunAsMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wvw1gUrcEemr9sBDNiEkTg" name="Debug__A__En__RunAsMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__A__En__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wv9p0ErcEemr9sBDNiEkTg" name="Debug__A__En__RunAsMaster__535">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__MasterAnnounce::Region1::Debug__A__En__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wwKeIErcEemr9sBDNiEkTg" name="Debug__Path__ExitPoint1__BeMaster__4" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wwLFMUrcEemr9sBDNiEkTg" name="Debug__C__ExitPoint1__BeMaster__4">
              <connectionPoint xmi:id="_wwMTUUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wwM6YUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wwLFMkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wwfOQErcEemr9sBDNiEkTg" name="Debug__init__trans__ExitPoint1__BeMaster__4" source="_wwMTUUrcEemr9sBDNiEkTg" target="_wweAIUrcEemr9sBDNiEkTg"/>
                <transition xmi:id="_wwfOQUrcEemr9sBDNiEkTg" name="Debug__Ac__ExitPoint1__BeMaster__4" source="_wweAIUrcEemr9sBDNiEkTg" target="_wwenMErcEemr9sBDNiEkTg">
                  <trigger xmi:id="_wwf1UErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wwf1UUrcEemr9sBDNiEkTg" name="Debug__end__trans__ExitPoint1__BeMaster__4" source="_wwenMErcEemr9sBDNiEkTg" target="_wwM6YUrcEemr9sBDNiEkTg">
                  <trigger xmi:id="_wwf1UkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wweAIUrcEemr9sBDNiEkTg" name="Debug__B__Ac__ExitPoint1__BeMaster__4">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wweAIkrcEemr9sBDNiEkTg" name="Debug__B__Ac__ExitPoint1__BeMaster__4">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ExitPoint1__BeMaster__4&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wwenMErcEemr9sBDNiEkTg" name="Debug__A__Ac__ExitPoint1__BeMaster__4">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wwenMUrcEemr9sBDNiEkTg" name="Debug__A__Ac__ExitPoint1__BeMaster__4">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ExitPoint1__BeMaster__4&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wwkt0ErcEemr9sBDNiEkTg" name="Debug__Path__BeSlave" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wwl78UrcEemr9sBDNiEkTg" name="Debug__C__BeSlave">
              <connectionPoint xmi:id="_wwnKEUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wwoYMUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wwl78krcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wxALoErcEemr9sBDNiEkTg" name="Debug__init__trans__BeSlave" source="_wwnKEUrcEemr9sBDNiEkTg" target="_ww9IUUrcEemr9sBDNiEkTg"/>
                <transition xmi:id="_wxAysErcEemr9sBDNiEkTg" name="Debug__Ac__BeSlave" source="_ww9IUUrcEemr9sBDNiEkTg" target="_ww-9gErcEemr9sBDNiEkTg">
                  <trigger xmi:id="_wxAysUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wxBZwErcEemr9sBDNiEkTg" name="Debug__end__trans__BeSlave" source="_ww-9gErcEemr9sBDNiEkTg" target="_wwoYMUrcEemr9sBDNiEkTg">
                  <trigger xmi:id="_wxBZwUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_ww9IUUrcEemr9sBDNiEkTg" name="Debug__B__Ac__BeSlave">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ww9IUkrcEemr9sBDNiEkTg" name="Debug__B__Ac__BeSlave">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;BeSlave&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}
</body>
                  </entry>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_ww-9gErcEemr9sBDNiEkTg" name="Debug__A__Ac__BeSlave">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ww-9gUrcEemr9sBDNiEkTg" name="Debug__A__Ac__BeSlave">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;BeSlave&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}
</body>
                  </entry>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wx908ErcEemr9sBDNiEkTg" name="Debug__Path__ServiceRequest" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wx_DEUrcEemr9sBDNiEkTg" name="Debug__C__ServiceRequest">
              <connectionPoint xmi:id="_wyA4QErcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wyCGYErcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wx_DEkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wy0wkErcEemr9sBDNiEkTg" name="Debug__init__trans__ServiceRequest" source="_wyA4QErcEemr9sBDNiEkTg" target="_wyq_kUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wzMkAErcEemr9sBDNiEkTg" name="Debug__init__trans__ServiceRequest__603">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__init__trans__ServiceRequest&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_wy0wkUrcEemr9sBDNiEkTg" name="Debug__Ex__RunAsMaster" source="_wyq_kUrcEemr9sBDNiEkTg" target="_wyuC4ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wy1XoUrcEemr9sBDNiEkTg" name="startTransition" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    ts.getclock(ts);
    messageID=messageID+1;
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,TranstionStart,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
     //logfile.flush();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__Ex__RunAsMaster&quot;,(char *)&quot;Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;Debug__B__Ac__ServiceRequest&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wy1XoErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wy1-sErcEemr9sBDNiEkTg" name="Debug__AC__ServiceRequest" source="_wyuC4ErcEemr9sBDNiEkTg" target="_wyv4EErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wy3z4ErcEemr9sBDNiEkTg" name="ReplyRequest" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>   //messageID=messageID+1;
    ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,ClientRequest,&quot;&lt;&lt;messageID&lt;&lt;&quot;,,&quot;&lt;&lt;&quot;\n&quot;;
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Message from client replied at index &quot;&lt;&lt;msg->sapIndex0_&lt;&lt;&quot;\n&quot;;
    int tempid=msg->sapIndex0_;
    ServerComm.Reply(0).sendAt(tempid);
    int j=1;
    for (int i=0;i&lt;=1000000;i++)
	j=j+1;
    j=j+1;
    std::cout&lt;&lt;j&lt;&lt;&quot;\n&quot;;
    //ts.getclock(ts);
    //if (logfile.is_open())
    //logfile&lt;&lt;&quot;CleintReply,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
    //logfile.flush();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__AC__ServiceRequest&quot;,(char *)&quot;Debug__B__Ac__ServiceRequest&quot;,(char *)&quot;Debug__A__Ac__ServiceRequest&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wy2lwErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wy3z4UrcEemr9sBDNiEkTg" name="Debug__En__RunAsMaster" source="_wyv4EErcEemr9sBDNiEkTg" target="_wyzicErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wy4a8UrcEemr9sBDNiEkTg" name="RunAsMasterEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Run as Master now\n&quot;;
    ConfigComm.IAMMaster((char *)this->getName()).send();
    ts.getclock(ts);
    //messageID=messageID+1;
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,TranstionEnd,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
     logfile.flush();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__En__RunAsMaster&quot;,(char *)&quot;Debug__A__Ac__ServiceRequest&quot;,(char *)&quot;Debug__A__En__RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wy4a8ErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wy5CAErcEemr9sBDNiEkTg" name="Debug__end__trans__ServiceRequest" source="_wyzicErcEemr9sBDNiEkTg" target="_wyCGYErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wzSqoErcEemr9sBDNiEkTg" name="Debug__end__trans__ServiceRequest__608">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__end__trans__ServiceRequest&quot;,(char *)&quot;Debug__A__En__RunAsMaster&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wy5pEErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wyq_kUrcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wyq_kkrcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wy63MErcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsMaster__598">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wyuC4ErcEemr9sBDNiEkTg" name="Debug__B__Ac__ServiceRequest">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wyuC4UrcEemr9sBDNiEkTg" name="Debug__B__Ac__ServiceRequest">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;ServiceRequest&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__B__Ac__ServiceRequest&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wzCzAUrcEemr9sBDNiEkTg" name="Debug__B__Ac__ServiceRequest__599">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__B__Ac__ServiceRequest&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wyv4EErcEemr9sBDNiEkTg" name="Debug__A__Ac__ServiceRequest">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wyv4EUrcEemr9sBDNiEkTg" name="Debug__A__Ac__ServiceRequest">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ServiceRequest&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__A__Ac__ServiceRequest&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wzFPQUrcEemr9sBDNiEkTg" name="Debug__A__Ac__ServiceRequest__600">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__A__Ac__ServiceRequest&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wyzicErcEemr9sBDNiEkTg" name="Debug__A__En__RunAsMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wyzicUrcEemr9sBDNiEkTg" name="Debug__A__En__RunAsMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__A__En__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wzI5oErcEemr9sBDNiEkTg" name="Debug__A__En__RunAsMaster__601">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__ServiceRequest::Region1::Debug__A__En__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_wzW8EErcEemr9sBDNiEkTg" name="Debug__Path__StandBy__CheckConfig__6" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_wzYKMUrcEemr9sBDNiEkTg" name="Debug__C__StandBy__CheckConfig__6">
              <connectionPoint xmi:id="_wzZYUUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_wzZ_YUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_wzYKMkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_wzuvgErcEemr9sBDNiEkTg" name="Debug__init__trans__StandBy__CheckConfig__6" source="_wzZYUUrcEemr9sBDNiEkTg" target="_wzrFIUrcEemr9sBDNiEkTg"/>
                <transition xmi:id="_wzuvgUrcEemr9sBDNiEkTg" name="Debug__Ex__StandBy" source="_wzrFIUrcEemr9sBDNiEkTg" target="_wzsTQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wz6VsErcEemr9sBDNiEkTg" name="Debug__Ex__StandBy__626">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__StandBy__CheckConfig__6::Region1::Debug__Ex__StandBy&quot;,(char *)&quot;Debug__B__Ex__StandBy&quot;,(char *)&quot;Debug__B__Ac__StandBy__CheckConfig__6&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wzuvgkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wzvWkErcEemr9sBDNiEkTg" name="Debug__AC__StandBy__CheckConfig__6" source="_wzsTQErcEemr9sBDNiEkTg" target="_wzthYErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wzvWkkrcEemr9sBDNiEkTg" name="StartupServer" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: StartingUp\n&quot;;
    this->hostConfig=config;
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Configuration is:&quot;&lt;&lt; config.RunningMode&lt;&lt;&quot;\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__StandBy__CheckConfig__6::Region1::Debug__AC__StandBy__CheckConfig__6&quot;,(char *)&quot;Debug__B__Ac__StandBy__CheckConfig__6&quot;,(char *)&quot;Debug__A__Ac__StandBy__CheckConfig__6&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wzvWkUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_wzv9oErcEemr9sBDNiEkTg" name="Debug__end__trans__StandBy__CheckConfig__6" source="_wzthYErcEemr9sBDNiEkTg" target="_wzZ_YUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wz9ZAErcEemr9sBDNiEkTg" name="Debug__end__trans__StandBy__CheckConfig__6__629">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__StandBy__CheckConfig__6::Region1::Debug__end__trans__StandBy__CheckConfig__6&quot;,(char *)&quot;Debug__A__Ac__StandBy__CheckConfig__6&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_wzv9oUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_wzrFIUrcEemr9sBDNiEkTg" name="Debug__B__Ex__StandBy">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wzrsMErcEemr9sBDNiEkTg" name="Debug__B__Ex__StandBy">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;StandBy&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__StandBy__CheckConfig__6::Region1::Debug__B__Ex__StandBy&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wzxLwUrcEemr9sBDNiEkTg" name="Debug__B__Ex__StandBy__622">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__StandBy__CheckConfig__6::Region1::Debug__B__Ex__StandBy&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wzsTQErcEemr9sBDNiEkTg" name="Debug__B__Ac__StandBy__CheckConfig__6">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wzsTQUrcEemr9sBDNiEkTg" name="Debug__B__Ac__StandBy__CheckConfig__6">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;StandBy&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;StandBy__CheckConfig__6&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__StandBy__CheckConfig__6::Region1::Debug__B__Ac__StandBy__CheckConfig__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wz0PEUrcEemr9sBDNiEkTg" name="Debug__B__Ac__StandBy__CheckConfig__6__623">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__StandBy__CheckConfig__6::Region1::Debug__B__Ac__StandBy__CheckConfig__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_wzthYErcEemr9sBDNiEkTg" name="Debug__A__Ac__StandBy__CheckConfig__6">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wzthYUrcEemr9sBDNiEkTg" name="Debug__A__Ac__StandBy__CheckConfig__6">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;StandBy__CheckConfig__6&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__StandBy__CheckConfig__6::Region1::Debug__A__Ac__StandBy__CheckConfig__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_wz35cUrcEemr9sBDNiEkTg" name="Debug__A__Ac__StandBy__CheckConfig__6__624">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__StandBy__CheckConfig__6::Region1::Debug__A__Ac__StandBy__CheckConfig__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w0BDYErcEemr9sBDNiEkTg" name="Debug__Path__KeepAlive" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w0BqcUrcEemr9sBDNiEkTg" name="Debug__C__KeepAlive">
              <connectionPoint xmi:id="_w0CRgUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w0C4kUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w0BqckrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_w0VMcErcEemr9sBDNiEkTg" name="Debug__init__trans__KeepAlive" source="_w0CRgUrcEemr9sBDNiEkTg" target="_w0RiEUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0j18ErcEemr9sBDNiEkTg" name="Debug__init__trans__KeepAlive__648">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__init__trans__KeepAlive&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w0VMcUrcEemr9sBDNiEkTg" name="Debug__Ex__RunAsMaster" source="_w0RiEUrcEemr9sBDNiEkTg" target="_w0SwMErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0VzgErcEemr9sBDNiEkTg" name="startTransition" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    ts.getclock(ts);
    messageID=messageID+1;
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,TranstionStart,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
     //logfile.flush();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__Ex__RunAsMaster&quot;,(char *)&quot;Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;Debug__B__Ac__KeepAlive&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w0VMckrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w0VzgUrcEemr9sBDNiEkTg" name="Debug__AC__KeepAlive" source="_w0SwMErcEemr9sBDNiEkTg" target="_w0TXQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0WakErcEemr9sBDNiEkTg" name="SendKeepAlive" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    if (KeepAliveTimerId.isValid())
    KeepAliveTimer.cancelTimer(KeepAliveTimerId);
    KeepAliveTimerId=KeepAliveTimer.informEvery(UMLRTTimespec(KeepAliveTimeOut,0),4);
    if (hostConfig.RunningMode==1)
    Master.IAmAlive((char *)this->getName()).send();
    std::cout&lt;&lt;&quot;Master: Keep Alive is sent\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__AC__KeepAlive&quot;,(char *)&quot;Debug__B__Ac__KeepAlive&quot;,(char *)&quot;Debug__A__Ac__KeepAlive&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w0VzgkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w0WakUrcEemr9sBDNiEkTg" name="Debug__En__RunAsMaster" source="_w0TXQErcEemr9sBDNiEkTg" target="_w0UlYErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0XBoErcEemr9sBDNiEkTg" name="RunAsMasterEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    
    std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Run as Master now\n&quot;;
    ConfigComm.IAMMaster((char *)this->getName()).send();
    ts.getclock(ts);
    //messageID=messageID+1;
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,TranstionEnd,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
     logfile.flush();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__En__RunAsMaster&quot;,(char *)&quot;Debug__A__Ac__KeepAlive&quot;,(char *)&quot;Debug__A__En__RunAsMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w0WakkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w0XBoUrcEemr9sBDNiEkTg" name="Debug__end__trans__KeepAlive" source="_w0UlYErcEemr9sBDNiEkTg" target="_w0C4kUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w0rKsErcEemr9sBDNiEkTg" name="Debug__end__trans__KeepAlive__653">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__end__trans__KeepAlive&quot;,(char *)&quot;Debug__A__En__RunAsMaster&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w0XBokrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wYTXwErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w0RiEUrcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w0RiEkrcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w0Y20ErcEemr9sBDNiEkTg" name="Debug__B__Ex__RunAsMaster__643">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__B__Ex__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w0SwMErcEemr9sBDNiEkTg" name="Debug__B__Ac__KeepAlive">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w0SwMUrcEemr9sBDNiEkTg" name="Debug__B__Ac__KeepAlive">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;KeepAlive&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__B__Ac__KeepAlive&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w0bTEErcEemr9sBDNiEkTg" name="Debug__B__Ac__KeepAlive__644">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__B__Ac__KeepAlive&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w0TXQErcEemr9sBDNiEkTg" name="Debug__A__Ac__KeepAlive">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w0TXQUrcEemr9sBDNiEkTg" name="Debug__A__Ac__KeepAlive">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;KeepAlive&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__A__Ac__KeepAlive&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w0dvUErcEemr9sBDNiEkTg" name="Debug__A__Ac__KeepAlive__645">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__A__Ac__KeepAlive&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w0UlYErcEemr9sBDNiEkTg" name="Debug__A__En__RunAsMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w0UlYUrcEemr9sBDNiEkTg" name="Debug__A__En__RunAsMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__A__En__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w0gLkErcEemr9sBDNiEkTg" name="Debug__A__En__RunAsMaster__646">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Server::ServerStateMachine::Region1::Debug__C__KeepAlive::Region1::Debug__A__En__RunAsMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_w1vhsErcEemr9sBDNiEkTg" name="Debug__InitState"/>
          </region>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wYSJoErcEemr9sBDNiEkTg" name="Debug__recallAllMsg" specification="_wYRikErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>Slave.recallAll();
ConfigComm.recallAll();
Master.recallAll();
ServerComm.recallAll();
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wYqkIUrcEemr9sBDNiEkTg" name="Debug__variablesViewMethod" specification="_wYqkIErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;KeepAliveTimeOut,&quot;);
tempS.append(&quot;Integer,&quot;);
if(KeepAliveTimeOut!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,KeepAliveTimeOut);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;AnnouncementTimeOut,&quot;);
tempS.append(&quot;Integer,&quot;);
if(AnnouncementTimeOut!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,AnnouncementTimeOut);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wYx44ErcEemr9sBDNiEkTg" name="Debug__variablesChange" specification="_wYvcoErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;KeepAliveTimeOut&quot;==tempVarName){
    KeepAliveTimeOut=atoi(varValue);
    return true;
}else if (&quot;AnnouncementTimeOut&quot;==tempVarName){
    AnnouncementTimeOut=atoi(varValue);
    return true;
}else 
    return false;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wZHQEErcEemr9sBDNiEkTg" name="Debug__sendEvent" specification="_wY6bwErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_wYRikErcEemr9sBDNiEkTg" name="Debug__recallAllMsg" visibility="private" method="_wYSJoErcEemr9sBDNiEkTg"/>
        <ownedOperation xmi:id="_wYqkIErcEemr9sBDNiEkTg" name="Debug__variablesView" visibility="private" method="_wYqkIUrcEemr9sBDNiEkTg"/>
        <ownedOperation xmi:id="_wYvcoErcEemr9sBDNiEkTg" name="Debug__variablesChange" visibility="private" method="_wYx44ErcEemr9sBDNiEkTg">
          <ownedParameter xmi:id="_wYwDsErcEemr9sBDNiEkTg" name="methodReturn" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wYwDsUrcEemr9sBDNiEkTg" name="varName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wYxR0ErcEemr9sBDNiEkTg" name="varValue">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_wY6bwErcEemr9sBDNiEkTg" name="Debug__sendEvent" visibility="private" method="_wZHQEErcEemr9sBDNiEkTg">
          <ownedParameter xmi:id="_wY7p4ErcEemr9sBDNiEkTg" name="eventSourceKind">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wY84AUrcEemr9sBDNiEkTg" name="eventType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wY-tMErcEemr9sBDNiEkTg" name="instanceName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wY_7UUrcEemr9sBDNiEkTg" name="capsuleIndex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wZAiYErcEemr9sBDNiEkTg" name="signalName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wZC-oErcEemr9sBDNiEkTg" name="capsuleName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wZEz0ErcEemr9sBDNiEkTg" name="sourceName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wZFa4ErcEemr9sBDNiEkTg" name="reserve1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wZGB8ErcEemr9sBDNiEkTg" name="reserve2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wZGpAErcEemr9sBDNiEkTg" name="reserve3">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_zpdLYAgmEea_md0mpENoqg" name="Client" classifierBehavior="_BKT8EAlKEea_md0mpENoqg" isActive="true">
        <generalization xmi:id="_5utSYAgmEea_md0mpENoqg" general="_4_oYIAghEea_md0mpENoqg"/>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_g3nG4AgvEea_md0mpENoqg" name="ConfigComm" visibility="protected" type="_v000cAgsEea_md0mpENoqg" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_kSO0IAliEea_md0mpENoqg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_kSfS0AliEea_md0mpENoqg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_iLeRcAmuEea_md0mpENoqg" name="RequestTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_oWg3YAmuEea_md0mpENoqg" name="ConfigTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_tP9SkAmuEea_md0mpENoqg" name="ResponseTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_fL3OQAnFEeaGqPUk-4V4qQ" name="Server1Comm" visibility="public" type="_4--ccAnEEeaGqPUk-4V4qQ" isOrdered="true" aggregation="composite" isBehavior="true">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_jNC1oAnOEeaGqPUk-4V4qQ" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_jNNNsAnOEeaGqPUk-4V4qQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_lRZpIAnFEeaGqPUk-4V4qQ" name="Server2Comm" visibility="public" type="_4--ccAnEEeaGqPUk-4V4qQ" isOrdered="true" aggregation="composite" isBehavior="true">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_pIHs8AnOEeaGqPUk-4V4qQ" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_pIOaoAnOEeaGqPUk-4V4qQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_8sGy4AovEeaGqPUk-4V4qQ" name="Timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
          <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_wXXjoErcEemr9sBDNiEkTg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
          <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wXYxwUrcEemr9sBDNiEkTg" value="1"/>
          <upperValue xmi:type="uml:LiteralInteger" xmi:id="_wXYxwkrcEemr9sBDNiEkTg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wXvXEErcEemr9sBDNiEkTg" name="Debug__flag">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wXv-IErcEemr9sBDNiEkTg" name="Debug__variablesData">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wXwlMErcEemr9sBDNiEkTg" name="Debug__event">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wXyaYErcEemr9sBDNiEkTg" name="Debug__SRO">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_BKT8EAlKEea_md0mpENoqg" name="ClientStateMachine">
          <region xmi:id="_Bk0GwAlKEea_md0mpENoqg" name="Region1">
            <transition xmi:id="_UScqkAlKEea_md0mpENoqg" name="inittrans" source="_w80aEErcEemr9sBDNiEkTg" target="_Q5-S4AlKEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ptLt0AlKEea_md0mpENoqg" name="InitLog">
                <language>C++</language>
                <body>      std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: Intialization\n&quot;;
     char  fileName[30];
     char  clientIndex[5];
     //itoa(clientIndex,this->getIndex(),10);

	sprintf(clientIndex, &quot;%d&quot;, this->getIndex());
     strcpy(fileName,this->getName());
     strcat(fileName, clientIndex);
     logfile.open(fileName);
     logfile&lt;&lt;&quot;capsuleName&quot;&lt;&lt;&quot;,messageType,&quot;&lt;&lt;&quot;messageID&quot;&lt;&lt;&quot;,&quot;&lt;&lt;&quot;second&quot;&lt;&lt;&quot;,&quot;&lt;&lt;&quot;nano&quot;&lt;&lt;&quot;\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::inittrans&quot;,(char *)&quot;Debug__Path__inittrans&quot;,(char *)&quot;StandBY&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_LR5_sAlhEea_md0mpENoqg" name="StarupTransition" source="_w-UO4ErcEemr9sBDNiEkTg" target="_IjppsAlhEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_h7nXgAlhEea_md0mpENoqg" name="StartUPClient">
                <language>C++</language>
                <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot; Client is startingUP \n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::StarupTransition&quot;,(char *)&quot;Debug__Path__StarupTransition&quot;,(char *)&quot;Ready&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_7y_ToAmtEea_md0mpENoqg" name="reqFlowInit" source="_w_FD4ErcEemr9sBDNiEkTg" target="_aVMuMAmtEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_su8ErcEemr9sBDNiEkTg" name="reqFlowInit__956">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::reqFlowInit&quot;,(char *)&quot;Debug__Path__reqFlowInit&quot;,(char *)&quot;getMasterName&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_9CvEQAmtEea_md0mpENoqg" name="getMasterName__checkConfig__9" source="_w8GoYErcEemr9sBDNiEkTg" target="_qr_J4AnCEeaGqPUk-4V4qQ">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8tsYErcEemr9sBDNiEkTg" name="getMasterName__checkConfig__9__856">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::getMasterName__checkConfig__9&quot;,(char *)&quot;Debug__Path__getMasterName__checkConfig__9&quot;,(char *)&quot;checkConfig&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_BanqgAmuEea_md0mpENoqg" name="ServiceResult" source="_w6amUErcEemr9sBDNiEkTg" target="_uScfwAmtEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CC7jEAovEeaGqPUk-4V4qQ" name="getResponse">
                <language>C++</language>
                <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: got reponse from server, go to process response state\n&quot;;
    int j=0;
    for (int i=0;i&lt;=100000;i++)
	j=j+1;
    std::cout&lt;&lt;j;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::ServiceResult&quot;,(char *)&quot;Debug__Path__ServiceResult&quot;,(char *)&quot;ProcessResponse&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_Cf20QAmuEea_md0mpENoqg" name="ReqFlowDone" source="_w9gWkErcEemr9sBDNiEkTg" target="_IjppsAlhEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_PDYPsAoxEeaGqPUk-4V4qQ" name="AllIsDone">
                <language>C++</language>
                <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: The service Request has been done sucessfully\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::ReqFlowDone&quot;,(char *)&quot;Debug__Path__ReqFlowDone&quot;,(char *)&quot;Ready&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_xsxFAAnCEeaGqPUk-4V4qQ" name="NoMaster" source="_w4kMMErcEemr9sBDNiEkTg" target="_KwFHIAo0EeaGqPUk-4V4qQ">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5VoQErcEemr9sBDNiEkTg" name="NoMaster__760">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::NoMaster&quot;,(char *)&quot;Debug__Path__NoMaster&quot;,(char *)&quot;Retry&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_6NrWIAnCEeaGqPUk-4V4qQ" name="reqService" source="_w7SwEErcEemr9sBDNiEkTg" target="_fO-gkAmtEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xvuAcAnEEeaGqPUk-4V4qQ" name="requestserive">
                <language>C++</language>
                <body>    
    messageID=messageID+1;
    ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,SendingMessage,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
    if (hostConfig.MasterList[0] &amp;&amp; hostConfig.MasterList[1])
    {
    int r=rand()%2;
    if (r==0)
    {
    Server1Comm.Request(0).send();
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: sending Request to Server1\n&quot;;
    }
    else{
    Server2Comm.Request(0).send();
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: sending Request to Server2\n&quot;;
    }
    }
    else if (hostConfig.MasterList[0]){
    Server1Comm.Request(0).send();
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: sending Request to Server1\n&quot;;
    }
    else
    {
    Server2Comm.Request(0).send();
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: sending Request to Server2\n&quot;;
    }

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::reqService&quot;,(char *)&quot;Debug__Path__reqService&quot;,(char *)&quot;WaitingForReply&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_QnYuMAozEeaGqPUk-4V4qQ" name="NoResponseFromServer" source="_w_vLMErcEemr9sBDNiEkTg" target="_IjppsAlhEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_WkrVwApkEeaGqPUk-4V4qQ" name="ServiceFailure">
                <language>C++</language>
                <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: Service Failur.....\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::NoResponseFromServer&quot;,(char *)&quot;Debug__Path__NoResponseFromServer&quot;,(char *)&quot;Ready&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_KpN_QAo2EeaGqPUk-4V4qQ" name="Retry" source="_w5YrkErcEemr9sBDNiEkTg" target="_aVMuMAmtEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6WU4ErcEemr9sBDNiEkTg" name="Retry__787">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Retry&quot;,(char *)&quot;Debug__Path__Retry&quot;,(char *)&quot;getMasterName&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w4odoErcEemr9sBDNiEkTg" name="Debug__NoMaster" source="_qr_J4AnCEeaGqPUk-4V4qQ" target="_w4kMMErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w4pEsErcEemr9sBDNiEkTg" name="Debug__NoMaster__738">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__NoMaster&quot;,(char *)&quot;checkConfig&quot;,(char *)&quot;Debug__Path__NoMaster&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w4qS0ErcEemr9sBDNiEkTg" name="Debug__NoMaster__S" guard="_w4q54UrcEemr9sBDNiEkTg" source="_w4kMMErcEemr9sBDNiEkTg" target="_w4mocErcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w4q54UrcEemr9sBDNiEkTg" name="Debug__GuardNoMaster">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w4q54ErcEemr9sBDNiEkTg" name="Debug__GuardNoMaster">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;checkConfig&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w4sIAErcEemr9sBDNiEkTg" name="Debug__NoMaster__S__740">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__NoMaster__S&quot;,(char *)&quot;Debug__Path__NoMaster&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w4tWIErcEemr9sBDNiEkTg" name="Debug__NoMaster__E" source="_w4nPgUrcEemr9sBDNiEkTg" target="_KwFHIAo0EeaGqPUk-4V4qQ">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w4t9MErcEemr9sBDNiEkTg" name="Debug__NoMaster__E__741">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__NoMaster__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Retry&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w4vLUErcEemr9sBDNiEkTg" name="Debug__NoMaster__dbg__varChange" source="_w4laUErcEemr9sBDNiEkTg" target="_w4laUErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w4vyYUrcEemr9sBDNiEkTg" name="Debug__NoMaster__dbg__varChange__743">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w4vyYErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w4wZcErcEemr9sBDNiEkTg" name="Debug__NoMaster__dbg__setBreakPoint" source="_w4laUErcEemr9sBDNiEkTg" target="_w4laUErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w4xAgUrcEemr9sBDNiEkTg" name="Debug__NoMaster__dbg__setBreakPoint__744">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w4xAgErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w4xnkErcEemr9sBDNiEkTg" name="Debug__NoMaster__dbg__remBreakPoint" source="_w4laUErcEemr9sBDNiEkTg" target="_w4laUErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w4yOoUrcEemr9sBDNiEkTg" name="Debug__NoMaster__dbg__remBreakPoint__745">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w4yOoErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w4zcwErcEemr9sBDNiEkTg" name="Debug__NoMaster__dbg__viewBreakPoints" source="_w4laUErcEemr9sBDNiEkTg" target="_w4laUErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w4zcwkrcEemr9sBDNiEkTg" name="Debug__NoMaster__dbg__viewBreakPoints__746">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w4zcwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w40q4ErcEemr9sBDNiEkTg" name="Debug__NoMaster__dbg__dbgSetExecMode" source="_w4laUErcEemr9sBDNiEkTg" target="_w4laUErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w40q4krcEemr9sBDNiEkTg" name="Debug__NoMaster__dbg__dbgSetExecMode__747">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w40q4UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w43HIErcEemr9sBDNiEkTg" name="Debug__NoMaster__dbg__dbgDeferMsg" source="_w4laUErcEemr9sBDNiEkTg" target="_w4laUErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w44VQErcEemr9sBDNiEkTg" name="Debug__NoMaster__dbg__dbgDeferMsg__748">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w43HIUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_fL3OQAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w43uMErcEemr9sBDNiEkTg" name="Debug__MSG" port="_g3nG4AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w43uMUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_lRZpIAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w5dkEErcEemr9sBDNiEkTg" name="Debug__Retry" source="_KwFHIAo0EeaGqPUk-4V4qQ" target="_w5YrkErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5eLIErcEemr9sBDNiEkTg" name="Debug__Retry__762">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__Retry&quot;,(char *)&quot;Retry&quot;,(char *)&quot;Debug__Path__Retry&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_2jDQUAo3EeaGqPUk-4V4qQ" name="Retry" port="_8sGy4AovEeaGqPUk-4V4qQ">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w5hOcErcEemr9sBDNiEkTg" name="Debug__Retry__S" guard="_w5ickUrcEemr9sBDNiEkTg" source="_w5YrkErcEemr9sBDNiEkTg" target="_w5bH0UrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w5ickUrcEemr9sBDNiEkTg" name="Debug__GuardRetry">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w5ickErcEemr9sBDNiEkTg" name="Debug__GuardRetry">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Retry&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5jqsErcEemr9sBDNiEkTg" name="Debug__Retry__S__764">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__Retry__S&quot;,(char *)&quot;Debug__Path__Retry&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w5lf4ErcEemr9sBDNiEkTg" name="Debug__Retry__E" source="_w5cV8UrcEemr9sBDNiEkTg" target="_aVMuMAmtEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5lf4UrcEemr9sBDNiEkTg" name="Debug__Retry__E__765">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__Retry__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;getMasterName&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w5nVEErcEemr9sBDNiEkTg" name="Debug__Retry__dbg__varChange" source="_w5Z5sUrcEemr9sBDNiEkTg" target="_w5Z5sUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5n8IErcEemr9sBDNiEkTg" name="Debug__Retry__dbg__varChange__767">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w5nVEUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w5pKQErcEemr9sBDNiEkTg" name="Debug__Retry__dbg__setBreakPoint" source="_w5Z5sUrcEemr9sBDNiEkTg" target="_w5Z5sUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5pxUErcEemr9sBDNiEkTg" name="Debug__Retry__dbg__setBreakPoint__768">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w5pKQUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w5qYYErcEemr9sBDNiEkTg" name="Debug__Retry__dbg__remBreakPoint" source="_w5Z5sUrcEemr9sBDNiEkTg" target="_w5Z5sUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5rmgErcEemr9sBDNiEkTg" name="Debug__Retry__dbg__remBreakPoint__769">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w5q_cErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w5uCwErcEemr9sBDNiEkTg" name="Debug__Retry__dbg__viewBreakPoints" source="_w5Z5sUrcEemr9sBDNiEkTg" target="_w5Z5sUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5up0UrcEemr9sBDNiEkTg" name="Debug__Retry__dbg__viewBreakPoints__770">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w5up0ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w5vQ4ErcEemr9sBDNiEkTg" name="Debug__Retry__dbg__dbgSetExecMode" source="_w5Z5sUrcEemr9sBDNiEkTg" target="_w5Z5sUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5vQ4krcEemr9sBDNiEkTg" name="Debug__Retry__dbg__dbgSetExecMode__771">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w5vQ4UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w5v38ErcEemr9sBDNiEkTg" name="Debug__Retry__dbg__dbgDeferMsg" source="_w5Z5sUrcEemr9sBDNiEkTg" target="_w5Z5sUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5wfAUrcEemr9sBDNiEkTg" name="Debug__Retry__dbg__dbgDeferMsg__772">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w5v38UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_fL3OQAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w5v38krcEemr9sBDNiEkTg" name="Debug__MSG" port="_g3nG4AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w5wfAErcEemr9sBDNiEkTg" name="Debug__MSG" port="_lRZpIAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w6gs8UrcEemr9sBDNiEkTg" name="Debug__ServiceResult" source="_fO-gkAmtEea_md0mpENoqg" target="_w6amUErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6gs8krcEemr9sBDNiEkTg" name="Debug__ServiceResult__789">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__ServiceResult&quot;,(char *)&quot;WaitingForReply&quot;,(char *)&quot;Debug__Path__ServiceResult&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_DEh6sAnGEeaGqPUk-4V4qQ" name="Result" event="_P4-6EAnFEeaGqPUk-4V4qQ" port="_fL3OQAnFEeaGqPUk-4V4qQ _lRZpIAnFEeaGqPUk-4V4qQ"/>
            </transition>
            <transition xmi:id="_w6jJMErcEemr9sBDNiEkTg" name="Debug__ServiceResult__S" guard="_w6jwQUrcEemr9sBDNiEkTg" source="_w6amUErcEemr9sBDNiEkTg" target="_w6cbgUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w6jwQUrcEemr9sBDNiEkTg" name="Debug__GuardServiceResult">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w6jwQErcEemr9sBDNiEkTg" name="Debug__GuardServiceResult">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;WaitingForReply&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6k-YErcEemr9sBDNiEkTg" name="Debug__ServiceResult__S__791">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__ServiceResult__S&quot;,(char *)&quot;Debug__Path__ServiceResult&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w6mMgErcEemr9sBDNiEkTg" name="Debug__ServiceResult__E" source="_w6dpoUrcEemr9sBDNiEkTg" target="_uScfwAmtEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6mMgUrcEemr9sBDNiEkTg" name="Debug__ServiceResult__E__792">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__ServiceResult__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;ProcessResponse&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w6naoErcEemr9sBDNiEkTg" name="Debug__ServiceResult__dbg__varChange" source="_w6bNYUrcEemr9sBDNiEkTg" target="_w6bNYUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6oowErcEemr9sBDNiEkTg" name="Debug__ServiceResult__dbg__varChange__794">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w6oBsErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w6pP0ErcEemr9sBDNiEkTg" name="Debug__ServiceResult__dbg__setBreakPoint" source="_w6bNYUrcEemr9sBDNiEkTg" target="_w6bNYUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6p24ErcEemr9sBDNiEkTg" name="Debug__ServiceResult__dbg__setBreakPoint__795">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w6pP0UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w6qd8ErcEemr9sBDNiEkTg" name="Debug__ServiceResult__dbg__remBreakPoint" source="_w6bNYUrcEemr9sBDNiEkTg" target="_w6bNYUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6qd8krcEemr9sBDNiEkTg" name="Debug__ServiceResult__dbg__remBreakPoint__796">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w6qd8UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w6rFAErcEemr9sBDNiEkTg" name="Debug__ServiceResult__dbg__viewBreakPoints" source="_w6bNYUrcEemr9sBDNiEkTg" target="_w6bNYUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6rFAkrcEemr9sBDNiEkTg" name="Debug__ServiceResult__dbg__viewBreakPoints__797">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w6rFAUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w6rFA0rcEemr9sBDNiEkTg" name="Debug__ServiceResult__dbg__dbgSetExecMode" source="_w6bNYUrcEemr9sBDNiEkTg" target="_w6bNYUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6rsEUrcEemr9sBDNiEkTg" name="Debug__ServiceResult__dbg__dbgSetExecMode__798">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w6rsEErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w6s6MErcEemr9sBDNiEkTg" name="Debug__ServiceResult__dbg__dbgDeferMsg" source="_w6bNYUrcEemr9sBDNiEkTg" target="_w6bNYUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6uIUErcEemr9sBDNiEkTg" name="Debug__ServiceResult__dbg__dbgDeferMsg__799">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w6s6MUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_fL3OQAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w6s6MkrcEemr9sBDNiEkTg" name="Debug__MSG" port="_g3nG4AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w6thQErcEemr9sBDNiEkTg" name="Debug__MSG" port="_lRZpIAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w7XokUrcEemr9sBDNiEkTg" name="Debug__reqService" guard="_BkmgYAnDEeaGqPUk-4V4qQ" source="_qr_J4AnCEeaGqPUk-4V4qQ" target="_w7SwEErcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_BkmgYAnDEeaGqPUk-4V4qQ" name="MasterIsAvailable">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ro31QAnDEeaGqPUk-4V4qQ" name="checkMaster">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
                  <language>C++</language>
                  <body>    hostConfig=config;
    if (hostConfig.MasterList[0] || hostConfig.MasterList[1])
    return true;
    else 
    return false;
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7YPoErcEemr9sBDNiEkTg" name="Debug__reqService__813">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__reqService&quot;,(char *)&quot;checkConfig&quot;,(char *)&quot;Debug__Path__reqService&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w7aE0ErcEemr9sBDNiEkTg" name="Debug__reqService__S" guard="_w7ar4UrcEemr9sBDNiEkTg" source="_w7SwEErcEemr9sBDNiEkTg" target="_w7VMUUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w7ar4UrcEemr9sBDNiEkTg" name="Debug__GuardreqService">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w7ar4ErcEemr9sBDNiEkTg" name="Debug__GuardreqService">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;checkConfig&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7b6AErcEemr9sBDNiEkTg" name="Debug__reqService__S__815">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__reqService__S&quot;,(char *)&quot;Debug__Path__reqService&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w7dvMErcEemr9sBDNiEkTg" name="Debug__reqService__E" source="_w7WacUrcEemr9sBDNiEkTg" target="_fO-gkAmtEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7eWQErcEemr9sBDNiEkTg" name="Debug__reqService__E__816">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__reqService__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WaitingForReply&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w7gLcErcEemr9sBDNiEkTg" name="Debug__reqService__dbg__varChange" source="_w7T-MUrcEemr9sBDNiEkTg" target="_w7T-MUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7gygErcEemr9sBDNiEkTg" name="Debug__reqService__dbg__varChange__818">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w7gLcUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w7hZkErcEemr9sBDNiEkTg" name="Debug__reqService__dbg__setBreakPoint" source="_w7T-MUrcEemr9sBDNiEkTg" target="_w7T-MUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7hZkkrcEemr9sBDNiEkTg" name="Debug__reqService__dbg__setBreakPoint__819">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w7hZkUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w7iAoErcEemr9sBDNiEkTg" name="Debug__reqService__dbg__remBreakPoint" source="_w7T-MUrcEemr9sBDNiEkTg" target="_w7T-MUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7iAokrcEemr9sBDNiEkTg" name="Debug__reqService__dbg__remBreakPoint__820">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w7iAoUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w7jOwErcEemr9sBDNiEkTg" name="Debug__reqService__dbg__viewBreakPoints" source="_w7T-MUrcEemr9sBDNiEkTg" target="_w7T-MUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7j10ErcEemr9sBDNiEkTg" name="Debug__reqService__dbg__viewBreakPoints__821">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w7jOwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w7j10UrcEemr9sBDNiEkTg" name="Debug__reqService__dbg__dbgSetExecMode" source="_w7T-MUrcEemr9sBDNiEkTg" target="_w7T-MUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7kc4ErcEemr9sBDNiEkTg" name="Debug__reqService__dbg__dbgSetExecMode__822">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w7j10krcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w7kc4UrcEemr9sBDNiEkTg" name="Debug__reqService__dbg__dbgDeferMsg" source="_w7T-MUrcEemr9sBDNiEkTg" target="_w7T-MUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7mSEErcEemr9sBDNiEkTg" name="Debug__reqService__dbg__dbgDeferMsg__823">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w7lD8ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_fL3OQAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w7lD8UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_g3nG4AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w7lD8krcEemr9sBDNiEkTg" name="Debug__MSG" port="_lRZpIAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w8K50UrcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9" source="_aVMuMAmtEea_md0mpENoqg" target="_w8GoYErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8Lg4ErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__835">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__getMasterName__checkConfig__9&quot;,(char *)&quot;getMasterName&quot;,(char *)&quot;Debug__Path__getMasterName__checkConfig__9&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_fW6vEAnCEeaGqPUk-4V4qQ" name="ConfigReply" event="_Iv3CQAl4Eea_md0mpENoqg" port="_g3nG4AgvEea_md0mpENoqg"/>
            </transition>
            <transition xmi:id="_w8MvAErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__S" guard="_w8NWEUrcEemr9sBDNiEkTg" source="_w8GoYErcEemr9sBDNiEkTg" target="_w8JEoErcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w8NWEUrcEemr9sBDNiEkTg" name="Debug__GuardgetMasterName__checkConfig__9">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w8NWEErcEemr9sBDNiEkTg" name="Debug__GuardgetMasterName__checkConfig__9">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;getMasterName&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8N9IErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__S__837">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__getMasterName__checkConfig__9__S&quot;,(char *)&quot;Debug__Path__getMasterName__checkConfig__9&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w8PLQErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__E" source="_w8JrsUrcEemr9sBDNiEkTg" target="_qr_J4AnCEeaGqPUk-4V4qQ">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8PyUErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__E__838">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__getMasterName__checkConfig__9__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;checkConfig&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w8RngErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__dbg__varChange" source="_w8HPcUrcEemr9sBDNiEkTg" target="_w8HPcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8RngkrcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__dbg__varChange__840">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w8RngUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w8SOkErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__dbg__setBreakPoint" source="_w8HPcUrcEemr9sBDNiEkTg" target="_w8HPcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8S1oErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__dbg__setBreakPoint__841">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w8SOkUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w8TcsErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__dbg__remBreakPoint" source="_w8HPcUrcEemr9sBDNiEkTg" target="_w8HPcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8TcskrcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__dbg__remBreakPoint__842">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w8TcsUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w8UDwErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__dbg__viewBreakPoints" source="_w8HPcUrcEemr9sBDNiEkTg" target="_w8HPcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8Uq0ErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__dbg__viewBreakPoints__843">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w8UDwUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w8VR4ErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__dbg__dbgSetExecMode" source="_w8HPcUrcEemr9sBDNiEkTg" target="_w8HPcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8VR4krcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__dbg__dbgSetExecMode__844">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w8VR4UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w8V48ErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__dbg__dbgDeferMsg" source="_w8HPcUrcEemr9sBDNiEkTg" target="_w8HPcUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8XHEErcEemr9sBDNiEkTg" name="Debug__getMasterName__checkConfig__9__dbg__dbgDeferMsg__845">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w8V48UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_fL3OQAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w8V48krcEemr9sBDNiEkTg" name="Debug__MSG" port="_g3nG4AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w8WgAErcEemr9sBDNiEkTg" name="Debug__MSG" port="_lRZpIAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w85SkUrcEemr9sBDNiEkTg" name="Debug__inittrans" source="_xAxF8ErcEemr9sBDNiEkTg" target="_w80aEErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w855oErcEemr9sBDNiEkTg" name="Debug__inittrans__858">
                <language>C++</language>
                <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;CheckConfig&quot;,&quot;BeSlave&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsSlave&quot;,&quot;NokeepAlive&quot;,&quot;TryBeMaster&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsMaster&quot;,&quot;KeepAlive&quot;,&quot;RunAsMaster&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;WaitingForReply&quot;,&quot;ServiceResult&quot;,&quot;ProcessResponse&quot;,&quot;Reply&quot;,&quot;Services&quot;);
Debug__SRO.addTransitionsFromState(&quot;Slave&quot;,&quot;backtoslave&quot;,&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsMaster&quot;,&quot;ServerFaliure&quot;,&quot;Failure&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;BeMaster&quot;,&quot;BeingMaster&quot;,&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Init&quot;,&quot;&quot;,&quot;StandBy&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;checkConfig&quot;,&quot;NoMaster&quot;,&quot;Retry&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;init&quot;,&quot;&quot;,&quot;WaitForEcho&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Ready&quot;,&quot;reqFlowInit&quot;,&quot;getMasterName&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;server2Failure&quot;,&quot;Running&quot;,&quot;IAmAlive&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;Server1Failure&quot;,&quot;Running&quot;,&quot;IAmAlive&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;init&quot;,&quot;inittrans&quot;,&quot;StandBY&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Initial1&quot;,&quot;&quot;,&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;ReadConfig&quot;,&quot;configLoaded&quot;,&quot;Config&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;MasterAnnouncment&quot;,&quot;Running&quot;,&quot;IAMMaster&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;WaitingForReply&quot;,&quot;NoResponseFromServer&quot;,&quot;Ready&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Retry&quot;,&quot;Retry&quot;,&quot;getMasterName&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;StandBY&quot;,&quot;StarupTransition&quot;,&quot;Ready&quot;,&quot;StartUp&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice1&quot;,&quot;ActiveMode&quot;,&quot;BeMaster&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;getMasterName&quot;,&quot;&quot;,&quot;checkConfig&quot;,&quot;ReplyConfig&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsSlave&quot;,&quot;KeepAliveMsg&quot;,&quot;RunAsSlave&quot;,&quot;IAmAlive&quot;,&quot;FailOver&quot;);
Debug__SRO.addTransitionsFromState(&quot;ExitPoint1&quot;,&quot;&quot;,&quot;BeMaster&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;StandBy&quot;,&quot;&quot;,&quot;CheckConfig&quot;,&quot;StartUp&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;QueryConfig&quot;,&quot;Running&quot;,&quot;QueryConfig&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Config&quot;,&quot;ConfigNOK&quot;,&quot;ConfigFailure&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Failure&quot;,&quot;purgeotherMessage&quot;,&quot;Failure&quot;,&quot;*&quot;,&quot;Services&quot;);
Debug__SRO.addTransitionsFromState(&quot;Failure&quot;,&quot;purgeotherMessage&quot;,&quot;Failure&quot;,&quot;*&quot;,&quot;FailOver&quot;);
Debug__SRO.addTransitionsFromState(&quot;CheckConfig&quot;,&quot;initTimer&quot;,&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Failure&quot;,&quot;Recover&quot;,&quot;Choice1&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsMaster&quot;,&quot;MasterAnnounce&quot;,&quot;RunAsMaster&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;ConfigFailure&quot;,&quot;RetryConfig&quot;,&quot;ReadConfig&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice2&quot;,&quot;CheckNoMaster&quot;,&quot;ExitPoint1&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;checkConfig&quot;,&quot;reqService&quot;,&quot;WaitingForReply&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Config&quot;,&quot;configOK&quot;,&quot;Running&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WaitForEcho&quot;,&quot;DoEcho&quot;,&quot;WaitForEcho&quot;,&quot;Echo&quot;,&quot;Echo&quot;);
Debug__SRO.addTransitionsFromState(&quot;Init&quot;,&quot;&quot;,&quot;ReadConfig&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;TryBeMaster&quot;,&quot;ReplyConfig&quot;,&quot;Choice2&quot;,&quot;ReplyConfig&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice2&quot;,&quot;backtoslave1&quot;,&quot;Slave&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsMaster&quot;,&quot;ServiceRequest&quot;,&quot;RunAsMaster&quot;,&quot;Request&quot;,&quot;Services&quot;);
Debug__SRO.addTransitionsFromState(&quot;ProcessResponse&quot;,&quot;ReqFlowDone&quot;,&quot;Ready&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice1&quot;,&quot;PassiveMode&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
              </effect>
              <trigger xmi:id="_xAy7IErcEemr9sBDNiEkTg" name="ConnectionEstablished" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
              </trigger>
            </transition>
            <transition xmi:id="_w87HwErcEemr9sBDNiEkTg" name="Debug__inittrans__S" guard="_w87u0UrcEemr9sBDNiEkTg" source="_w80aEErcEemr9sBDNiEkTg" target="_w82PQUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w87u0UrcEemr9sBDNiEkTg" name="Debug__Guardinittrans">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w87u0ErcEemr9sBDNiEkTg" name="Debug__Guardinittrans">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;init&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8888ErcEemr9sBDNiEkTg" name="Debug__inittrans__S__860">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__inittrans__S&quot;,(char *)&quot;Debug__Path__inittrans&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w8-LEErcEemr9sBDNiEkTg" name="Debug__inittrans__E" source="_w84EcUrcEemr9sBDNiEkTg" target="_Q5-S4AlKEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8-yIErcEemr9sBDNiEkTg" name="Debug__inittrans__E__861">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__inittrans__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;StandBY&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w9AAQErcEemr9sBDNiEkTg" name="Debug__inittrans__dbg__varChange" source="_w81BIUrcEemr9sBDNiEkTg" target="_w81BIUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9AnUErcEemr9sBDNiEkTg" name="Debug__inittrans__dbg__varChange__863">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w9AAQUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w9BOYErcEemr9sBDNiEkTg" name="Debug__inittrans__dbg__setBreakPoint" source="_w81BIUrcEemr9sBDNiEkTg" target="_w81BIUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9B1cErcEemr9sBDNiEkTg" name="Debug__inittrans__dbg__setBreakPoint__864">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w9BOYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w9CcgErcEemr9sBDNiEkTg" name="Debug__inittrans__dbg__remBreakPoint" source="_w81BIUrcEemr9sBDNiEkTg" target="_w81BIUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9CcgkrcEemr9sBDNiEkTg" name="Debug__inittrans__dbg__remBreakPoint__865">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w9CcgUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w9DDkErcEemr9sBDNiEkTg" name="Debug__inittrans__dbg__viewBreakPoints" source="_w81BIUrcEemr9sBDNiEkTg" target="_w81BIUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9DqoUrcEemr9sBDNiEkTg" name="Debug__inittrans__dbg__viewBreakPoints__866">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w9DqoErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w9ERsErcEemr9sBDNiEkTg" name="Debug__inittrans__dbg__dbgSetExecMode" source="_w81BIUrcEemr9sBDNiEkTg" target="_w81BIUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9ERskrcEemr9sBDNiEkTg" name="Debug__inittrans__dbg__dbgSetExecMode__867">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w9ERsUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w9E4wErcEemr9sBDNiEkTg" name="Debug__inittrans__dbg__dbgDeferMsg" source="_w81BIUrcEemr9sBDNiEkTg" target="_w81BIUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9GG4ErcEemr9sBDNiEkTg" name="Debug__inittrans__dbg__dbgDeferMsg__868">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w9E4wUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_fL3OQAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w9Ff0ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_g3nG4AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w9Ff0UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_lRZpIAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w9kA8UrcEemr9sBDNiEkTg" name="Debug__ReqFlowDone" source="_uScfwAmtEea_md0mpENoqg" target="_w9gWkErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9koAErcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__881">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__ReqFlowDone&quot;,(char *)&quot;ProcessResponse&quot;,(char *)&quot;Debug__Path__ReqFlowDone&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_rVlzAAovEeaGqPUk-4V4qQ" port="_8sGy4AovEeaGqPUk-4V4qQ">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w9l2IErcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__S" guard="_w9mdMUrcEemr9sBDNiEkTg" source="_w9gWkErcEemr9sBDNiEkTg" target="_w9iLwUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w9mdMUrcEemr9sBDNiEkTg" name="Debug__GuardReqFlowDone">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w9mdMErcEemr9sBDNiEkTg" name="Debug__GuardReqFlowDone">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;ProcessResponse&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9nrUErcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__S__883">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__ReqFlowDone__S&quot;,(char *)&quot;Debug__Path__ReqFlowDone&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w9pggErcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__E" source="_w9iy0UrcEemr9sBDNiEkTg" target="_IjppsAlhEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9pggUrcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__E__884">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__ReqFlowDone__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Ready&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w9rVsErcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__dbg__varChange" source="_w9g9oUrcEemr9sBDNiEkTg" target="_w9g9oUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9r8wErcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__dbg__varChange__886">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w9rVsUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w9sj0ErcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__dbg__setBreakPoint" source="_w9g9oUrcEemr9sBDNiEkTg" target="_w9g9oUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9sj0krcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__dbg__setBreakPoint__887">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w9sj0UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w9tK4ErcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__dbg__remBreakPoint" source="_w9g9oUrcEemr9sBDNiEkTg" target="_w9g9oUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9tx8UrcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__dbg__remBreakPoint__888">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w9tx8ErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w9uZAErcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__dbg__viewBreakPoints" source="_w9g9oUrcEemr9sBDNiEkTg" target="_w9g9oUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9vAEErcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__dbg__viewBreakPoints__889">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w9uZAUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w9vAEUrcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__dbg__dbgSetExecMode" source="_w9g9oUrcEemr9sBDNiEkTg" target="_w9g9oUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9vnIUrcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__dbg__dbgSetExecMode__890">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w9vnIErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w9yDYErcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__dbg__dbgDeferMsg" source="_w9g9oUrcEemr9sBDNiEkTg" target="_w9g9oUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9zRgUrcEemr9sBDNiEkTg" name="Debug__ReqFlowDone__dbg__dbgDeferMsg__891">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w9yqcErcEemr9sBDNiEkTg" name="Debug__MSG" port="_fL3OQAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w9yqcUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_g3nG4AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w9zRgErcEemr9sBDNiEkTg" name="Debug__MSG" port="_lRZpIAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w-YgUUrcEemr9sBDNiEkTg" name="Debug__StarupTransition" source="_Q5-S4AlKEea_md0mpENoqg" target="_w-UO4ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-ZHYErcEemr9sBDNiEkTg" name="Debug__StarupTransition__906">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__StarupTransition&quot;,(char *)&quot;StandBY&quot;,(char *)&quot;Debug__Path__StarupTransition&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_TP2tsAlhEea_md0mpENoqg" name="startUp" event="_MloQ4AguEea_md0mpENoqg" port="_g3nG4AgvEea_md0mpENoqg"/>
            </transition>
            <transition xmi:id="_w-a8kErcEemr9sBDNiEkTg" name="Debug__StarupTransition__S" guard="_w-bjoUrcEemr9sBDNiEkTg" source="_w-UO4ErcEemr9sBDNiEkTg" target="_w-WrIErcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w-bjoUrcEemr9sBDNiEkTg" name="Debug__GuardStarupTransition">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w-bjoErcEemr9sBDNiEkTg" name="Debug__GuardStarupTransition">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;StandBY&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-cKsErcEemr9sBDNiEkTg" name="Debug__StarupTransition__S__908">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__StarupTransition__S&quot;,(char *)&quot;Debug__Path__StarupTransition&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w-dY0ErcEemr9sBDNiEkTg" name="Debug__StarupTransition__E" source="_w-XSMUrcEemr9sBDNiEkTg" target="_IjppsAlhEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-d_4ErcEemr9sBDNiEkTg" name="Debug__StarupTransition__E__909">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__StarupTransition__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Ready&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w-fOAErcEemr9sBDNiEkTg" name="Debug__StarupTransition__dbg__varChange" source="_w-VdAErcEemr9sBDNiEkTg" target="_w-VdAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-f1EUrcEemr9sBDNiEkTg" name="Debug__StarupTransition__dbg__varChange__911">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w-f1EErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w-gcIErcEemr9sBDNiEkTg" name="Debug__StarupTransition__dbg__setBreakPoint" source="_w-VdAErcEemr9sBDNiEkTg" target="_w-VdAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-hDMErcEemr9sBDNiEkTg" name="Debug__StarupTransition__dbg__setBreakPoint__912">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w-gcIUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w-hDMUrcEemr9sBDNiEkTg" name="Debug__StarupTransition__dbg__remBreakPoint" source="_w-VdAErcEemr9sBDNiEkTg" target="_w-VdAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-hqQUrcEemr9sBDNiEkTg" name="Debug__StarupTransition__dbg__remBreakPoint__913">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w-hqQErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w-iRUErcEemr9sBDNiEkTg" name="Debug__StarupTransition__dbg__viewBreakPoints" source="_w-VdAErcEemr9sBDNiEkTg" target="_w-VdAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-i4YErcEemr9sBDNiEkTg" name="Debug__StarupTransition__dbg__viewBreakPoints__914">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w-iRUUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w-jfcErcEemr9sBDNiEkTg" name="Debug__StarupTransition__dbg__dbgSetExecMode" source="_w-VdAErcEemr9sBDNiEkTg" target="_w-VdAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-kGgErcEemr9sBDNiEkTg" name="Debug__StarupTransition__dbg__dbgSetExecMode__915">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w-jfcUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w-ktkErcEemr9sBDNiEkTg" name="Debug__StarupTransition__dbg__dbgDeferMsg" source="_w-VdAErcEemr9sBDNiEkTg" target="_w-VdAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-lUoUrcEemr9sBDNiEkTg" name="Debug__StarupTransition__dbg__dbgDeferMsg__916">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w-ktkUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_fL3OQAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w-ktkkrcEemr9sBDNiEkTg" name="Debug__MSG" port="_g3nG4AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w-lUoErcEemr9sBDNiEkTg" name="Debug__MSG" port="_lRZpIAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_IuQUrcEemr9sBDNiEkTg" name="Debug__reqFlowInit" source="_IjppsAlhEea_md0mpENoqg" target="_w_FD4ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_JVUErcEemr9sBDNiEkTg" name="Debug__reqFlowInit__931">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__reqFlowInit&quot;,(char *)&quot;Ready&quot;,(char *)&quot;Debug__Path__reqFlowInit&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_JtvGgAnKEeaGqPUk-4V4qQ" name="RequestTimer" port="_iLeRcAmuEea_md0mpENoqg">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_LKgErcEemr9sBDNiEkTg" name="Debug__reqFlowInit__S" guard="_w_LxkUrcEemr9sBDNiEkTg" source="_w_FD4ErcEemr9sBDNiEkTg" target="_w_HgIUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w_LxkUrcEemr9sBDNiEkTg" name="Debug__GuardreqFlowInit">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w_LxkErcEemr9sBDNiEkTg" name="Debug__GuardreqFlowInit">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;Ready&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_M_sErcEemr9sBDNiEkTg" name="Debug__reqFlowInit__S__933">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__reqFlowInit__S&quot;,(char *)&quot;Debug__Path__reqFlowInit&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w_ON0ErcEemr9sBDNiEkTg" name="Debug__reqFlowInit__E" source="_w_IHMUrcEemr9sBDNiEkTg" target="_aVMuMAmtEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_ON0UrcEemr9sBDNiEkTg" name="Debug__reqFlowInit__E__934">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__reqFlowInit__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;getMasterName&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w_RRIErcEemr9sBDNiEkTg" name="Debug__reqFlowInit__dbg__varChange" source="_w_GSAErcEemr9sBDNiEkTg" target="_w_GSAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_R4MUrcEemr9sBDNiEkTg" name="Debug__reqFlowInit__dbg__varChange__936">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w_R4MErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_SfQErcEemr9sBDNiEkTg" name="Debug__reqFlowInit__dbg__setBreakPoint" source="_w_GSAErcEemr9sBDNiEkTg" target="_w_GSAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_SfQkrcEemr9sBDNiEkTg" name="Debug__reqFlowInit__dbg__setBreakPoint__937">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w_SfQUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_TGUErcEemr9sBDNiEkTg" name="Debug__reqFlowInit__dbg__remBreakPoint" source="_w_GSAErcEemr9sBDNiEkTg" target="_w_GSAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_TGUkrcEemr9sBDNiEkTg" name="Debug__reqFlowInit__dbg__remBreakPoint__938">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w_TGUUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_TtYErcEemr9sBDNiEkTg" name="Debug__reqFlowInit__dbg__viewBreakPoints" source="_w_GSAErcEemr9sBDNiEkTg" target="_w_GSAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_TtYkrcEemr9sBDNiEkTg" name="Debug__reqFlowInit__dbg__viewBreakPoints__939">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w_TtYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_UUcErcEemr9sBDNiEkTg" name="Debug__reqFlowInit__dbg__dbgSetExecMode" source="_w_GSAErcEemr9sBDNiEkTg" target="_w_GSAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_U7gErcEemr9sBDNiEkTg" name="Debug__reqFlowInit__dbg__dbgSetExecMode__940">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w_UUcUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_VikErcEemr9sBDNiEkTg" name="Debug__reqFlowInit__dbg__dbgDeferMsg" source="_w_GSAErcEemr9sBDNiEkTg" target="_w_GSAErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_WJoErcEemr9sBDNiEkTg" name="Debug__reqFlowInit__dbg__dbgDeferMsg__941">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w_VikUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_fL3OQAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w_VikkrcEemr9sBDNiEkTg" name="Debug__MSG" port="_g3nG4AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w_Vik0rcEemr9sBDNiEkTg" name="Debug__MSG" port="_lRZpIAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_y1kErcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer" source="_fO-gkAmtEea_md0mpENoqg" target="_w_vLMErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_zcoErcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__958">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__NoResponseFromServer&quot;,(char *)&quot;WaitingForReply&quot;,(char *)&quot;Debug__Path__NoResponseFromServer&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_ZV1SwAo4EeaGqPUk-4V4qQ" port="_tP9SkAmuEea_md0mpENoqg">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_0qwErcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__S" guard="_w_1R0UrcEemr9sBDNiEkTg" source="_w_vLMErcEemr9sBDNiEkTg" target="_w_xAYUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w_1R0UrcEemr9sBDNiEkTg" name="Debug__GuardNoResponseFromServer">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w_1R0ErcEemr9sBDNiEkTg" name="Debug__GuardNoResponseFromServer">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;WaitingForReply&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_144ErcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__S__960">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__NoResponseFromServer__S&quot;,(char *)&quot;Debug__Path__NoResponseFromServer&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w_3HAErcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__E" source="_w_xncUrcEemr9sBDNiEkTg" target="_IjppsAlhEea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_3uEErcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__E__961">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__NoResponseFromServer__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Ready&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w_48MErcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__dbg__varChange" source="_w_vyQUrcEemr9sBDNiEkTg" target="_w_vyQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_5jQErcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__dbg__varChange__963">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w_48MUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_5jQUrcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__dbg__setBreakPoint" source="_w_vyQUrcEemr9sBDNiEkTg" target="_w_vyQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_6KUUrcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__dbg__setBreakPoint__964">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w_6KUErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_6xYErcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__dbg__remBreakPoint" source="_w_vyQUrcEemr9sBDNiEkTg" target="_w_vyQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_6xYkrcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__dbg__remBreakPoint__965">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w_6xYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_7YcErcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__dbg__viewBreakPoints" source="_w_vyQUrcEemr9sBDNiEkTg" target="_w_vyQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_7_gErcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__dbg__viewBreakPoints__966">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w_7YcUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_7_gUrcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__dbg__dbgSetExecMode" source="_w_vyQUrcEemr9sBDNiEkTg" target="_w_vyQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_8mkErcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__dbg__dbgSetExecMode__967">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w_7_gkrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wXXjoErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w_8mkUrcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__dbg__dbgDeferMsg" source="_w_vyQUrcEemr9sBDNiEkTg" target="_w_vyQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_9NokrcEemr9sBDNiEkTg" name="Debug__NoResponseFromServer__dbg__dbgDeferMsg__968">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w_8mkkrcEemr9sBDNiEkTg" name="Debug__MSG" port="_fL3OQAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w_9NoErcEemr9sBDNiEkTg" name="Debug__MSG" port="_g3nG4AgvEea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
              <trigger xmi:id="_w_9NoUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_lRZpIAnFEeaGqPUk-4V4qQ">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_xAxtAUrcEemr9sBDNiEkTg" name="Debug__InitDebug" source="_Oll1cAlKEea_md0mpENoqg" target="_xAxF8ErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xAyUEErcEemr9sBDNiEkTg" name="DebugCheck">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
              </effect>
            </transition>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_Oll1cAlKEea_md0mpENoqg" name="init"/>
            <subvertex xmi:type="uml:State" xmi:id="_Q5-S4AlKEea_md0mpENoqg" name="StandBY">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xBgFwErcEemr9sBDNiEkTg" name="StandBY__984">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::StandBY&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xBgs0ErcEemr9sBDNiEkTg" name="StandBY__985">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::StandBY&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_IjppsAlhEea_md0mpENoqg" name="Ready">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_fmLpMAm5Eea_md0mpENoqg" name="ReadyEntry">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;Ready&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: is in Ready State\n&quot;;
    //int r=rand()%11;
    int r=1;
    RequestTimer.informIn(UMLRTTimespec(0,1000),4);
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: will try to request service after &quot;&lt;&lt; r&lt;&lt;&quot; second \n&quot;;

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Ready&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xBh68ErcEemr9sBDNiEkTg" name="Ready__986">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Ready&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_aVMuMAmtEea_md0mpENoqg" name="getMasterName">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_nvRWkAnBEea_md0mpENoqg" name="GetMasterNameEntry">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;getMasterName&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;:  Request Master Information from ENV\n&quot;;
    ConfigComm.QueryConfig().send();

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::getMasterName&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xBe3oErcEemr9sBDNiEkTg" name="getMasterName__983">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::getMasterName&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_fO-gkAmtEea_md0mpENoqg" name="WaitingForReply">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_SJEfMAo6EeaGqPUk-4V4qQ" name="WaitForReply">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;WaitingForReply&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: Waiting for Response, The timeout is 60 Second\n&quot;;
    TimerId=ResponseTimer.informIn(UMLRTTimespec(60,0),4);
    ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,MessageSent,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::WaitingForReply&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_r05c0Ao9EeaGqPUk-4V4qQ" name="CancellTimer">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;WaitingForReply&quot;,msg->destPort->role()->protocol,msg->getSignalName(),0,StateExitBreakPoint,0)) {
ResponseTimer.cancelTimer(TimerId);
messageID=messageID+1; 
ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,ProcessingMessage,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;   


}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::WaitingForReply&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_uScfwAmtEea_md0mpENoqg" name="ProcessResponse">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_u-x1UAoxEeaGqPUk-4V4qQ" name="ProcessMessage">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;ProcessResponse&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot; : Processing Response .....\n&quot;;
    //int r=rand()%10;
    
    Timer.informIn(UMLRTTimespec(0,500),4);
    //messageID=messageID+1; 
    ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,MessageProcessed,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::ProcessResponse&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xBYxAErcEemr9sBDNiEkTg" name="ProcessResponse__981">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::ProcessResponse&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_qr_J4AnCEeaGqPUk-4V4qQ" name="checkConfig" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_KwFHIAo0EeaGqPUk-4V4qQ" name="Retry">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_1CJTsAo2EeaGqPUk-4V4qQ" name="RetryConfig">
                <language>C++</language>
                <body>if( not Debug__SRO.checkDebug(&quot;Retry&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    int r=rand()%5;
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: The master is not available, retry in &quot;&lt;&lt;r&lt;&lt; &quot; second\n&quot;;
    Timer.informIn(UMLRTTimespec(r,0),4);

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Retry&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xBbNQErcEemr9sBDNiEkTg" name="Retry__982">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Retry&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w4kMMErcEemr9sBDNiEkTg" name="Debug__Path__NoMaster" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w4laUErcEemr9sBDNiEkTg" name="Debug__C__NoMaster">
              <connectionPoint xmi:id="_w4mocErcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w4nPgUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w4laUUrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_w4_qAErcEemr9sBDNiEkTg" name="Debug__init__trans__NoMaster" source="_w4mocErcEemr9sBDNiEkTg" target="_w47_oErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5O6kErcEemr9sBDNiEkTg" name="Debug__init__trans__NoMaster__753">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoMaster::Region1::Debug__init__trans__NoMaster&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__NoMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w4_qAUrcEemr9sBDNiEkTg" name="Debug__Ac__NoMaster" source="_w47_oErcEemr9sBDNiEkTg" target="_w48msErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5QvwErcEemr9sBDNiEkTg" name="Debug__Ac__NoMaster__755">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoMaster::Region1::Debug__Ac__NoMaster&quot;,(char *)&quot;Debug__B__Ac__NoMaster&quot;,(char *)&quot;Debug__A__Ac__NoMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w4_qAkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w5AREErcEemr9sBDNiEkTg" name="Debug__En__Retry" source="_w48msErcEemr9sBDNiEkTg" target="_w4-b4ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5CGQErcEemr9sBDNiEkTg" name="RetryConfig" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    int r=rand()%5;
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: The master is not available, retry in &quot;&lt;&lt;r&lt;&lt; &quot; second\n&quot;;
    Timer.informIn(UMLRTTimespec(r,0),4);

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoMaster::Region1::Debug__En__Retry&quot;,(char *)&quot;Debug__A__Ac__NoMaster&quot;,(char *)&quot;Debug__A__En__NoMaster&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w5AREUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w5DUYErcEemr9sBDNiEkTg" name="Debug__end__trans__NoMaster" source="_w4-b4ErcEemr9sBDNiEkTg" target="_w4nPgUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w5TzEErcEemr9sBDNiEkTg" name="Debug__end__trans__NoMaster__758">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoMaster::Region1::Debug__end__trans__NoMaster&quot;,(char *)&quot;Debug__A__En__NoMaster&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w5DUYUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w47_oErcEemr9sBDNiEkTg" name="Debug__B__Ac__NoMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w47_oUrcEemr9sBDNiEkTg" name="Debug__B__Ac__NoMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;NoMaster&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoMaster::Region1::Debug__B__Ac__NoMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w5EigUrcEemr9sBDNiEkTg" name="Debug__B__Ac__NoMaster__749">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoMaster::Region1::Debug__B__Ac__NoMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w48msErcEemr9sBDNiEkTg" name="Debug__A__Ac__NoMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w49NwErcEemr9sBDNiEkTg" name="Debug__A__Ac__NoMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;NoMaster&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Retry&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoMaster::Region1::Debug__A__Ac__NoMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w5JbAErcEemr9sBDNiEkTg" name="Debug__A__Ac__NoMaster__750">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoMaster::Region1::Debug__A__Ac__NoMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w4-b4ErcEemr9sBDNiEkTg" name="Debug__A__En__NoMaster">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w4-b4UrcEemr9sBDNiEkTg" name="Debug__A__En__NoMaster">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Retry&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoMaster::Region1::Debug__A__En__NoMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w5MeUUrcEemr9sBDNiEkTg" name="Debug__A__En__NoMaster__751">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoMaster::Region1::Debug__A__En__NoMaster&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w5YrkErcEemr9sBDNiEkTg" name="Debug__Path__Retry" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w5Z5sUrcEemr9sBDNiEkTg" name="Debug__C__Retry">
              <connectionPoint xmi:id="_w5bH0UrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w5cV8UrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w5Z5skrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_w56QAErcEemr9sBDNiEkTg" name="Debug__init__trans__Retry" source="_w5bH0UrcEemr9sBDNiEkTg" target="_w50JYUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6NK8ErcEemr9sBDNiEkTg" name="Debug__init__trans__Retry__778">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__init__trans__Retry&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Retry&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w56QAUrcEemr9sBDNiEkTg" name="Debug__Ex__Retry" source="_w50JYUrcEemr9sBDNiEkTg" target="_w51-kErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6PAIErcEemr9sBDNiEkTg" name="Debug__Ex__Retry__780">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__Ex__Retry&quot;,(char *)&quot;Debug__B__Ex__Retry&quot;,(char *)&quot;Debug__B__Ac__Retry&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w56QAkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w563EErcEemr9sBDNiEkTg" name="Debug__AC__Retry" source="_w51-kErcEemr9sBDNiEkTg" target="_w54a0ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6RcYErcEemr9sBDNiEkTg" name="Debug__AC__Retry__782">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__AC__Retry&quot;,(char *)&quot;Debug__B__Ac__Retry&quot;,(char *)&quot;Debug__A__Ac__Retry&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w563EUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w57eIErcEemr9sBDNiEkTg" name="Debug__En__getMasterName" source="_w54a0ErcEemr9sBDNiEkTg" target="_w55o8ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w58FMErcEemr9sBDNiEkTg" name="GetMasterNameEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;:  Request Master Information from ENV\n&quot;;
    ConfigComm.QueryConfig().send();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__En__getMasterName&quot;,(char *)&quot;Debug__A__Ac__Retry&quot;,(char *)&quot;Debug__A__En__getMasterName&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w57eIUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w58sQErcEemr9sBDNiEkTg" name="Debug__end__trans__Retry" source="_w55o8ErcEemr9sBDNiEkTg" target="_w5cV8UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w6UfsErcEemr9sBDNiEkTg" name="Debug__end__trans__Retry__785">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__end__trans__Retry&quot;,(char *)&quot;Debug__A__En__getMasterName&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w58sQUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w50JYUrcEemr9sBDNiEkTg" name="Debug__B__Ex__Retry">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w50wcErcEemr9sBDNiEkTg" name="Debug__B__Ex__Retry">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Retry&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__B__Ex__Retry&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w5-hcErcEemr9sBDNiEkTg" name="Debug__B__Ex__Retry__773">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__B__Ex__Retry&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w51-kErcEemr9sBDNiEkTg" name="Debug__B__Ac__Retry">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w51-kUrcEemr9sBDNiEkTg" name="Debug__B__Ac__Retry">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Retry&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;Retry&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__B__Ac__Retry&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w6EBAErcEemr9sBDNiEkTg" name="Debug__B__Ac__Retry__774">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__B__Ac__Retry&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w54a0ErcEemr9sBDNiEkTg" name="Debug__A__Ac__Retry">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w54a0UrcEemr9sBDNiEkTg" name="Debug__A__Ac__Retry">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Retry&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;getMasterName&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__A__Ac__Retry&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w6HrYErcEemr9sBDNiEkTg" name="Debug__A__Ac__Retry__775">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__A__Ac__Retry&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w55o8ErcEemr9sBDNiEkTg" name="Debug__A__En__getMasterName">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w55o8UrcEemr9sBDNiEkTg" name="Debug__A__En__getMasterName">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;getMasterName&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__A__En__getMasterName&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w6KusErcEemr9sBDNiEkTg" name="Debug__A__En__getMasterName__776">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__Retry::Region1::Debug__A__En__getMasterName&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w6amUErcEemr9sBDNiEkTg" name="Debug__Path__ServiceResult" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w6bNYUrcEemr9sBDNiEkTg" name="Debug__C__ServiceResult">
              <connectionPoint xmi:id="_w6cbgUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w6dpoUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w6bNYkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_w63SQErcEemr9sBDNiEkTg" name="Debug__init__trans__ServiceResult" source="_w6cbgUrcEemr9sBDNiEkTg" target="_w6xLoUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7IYAErcEemr9sBDNiEkTg" name="Debug__init__trans__ServiceResult__805">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__init__trans__ServiceResult&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__WaitingForReply&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w63SQUrcEemr9sBDNiEkTg" name="Debug__Ex__WaitingForReply" source="_w6xLoUrcEemr9sBDNiEkTg" target="_w6zA0ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w635UErcEemr9sBDNiEkTg" name="CancellTimer" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>ResponseTimer.cancelTimer(TimerId);
messageID=messageID+1; 
ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,ProcessingMessage,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;   


Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__Ex__WaitingForReply&quot;,(char *)&quot;Debug__B__Ex__WaitingForReply&quot;,(char *)&quot;Debug__B__Ac__ServiceResult&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w63SQkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w635UUrcEemr9sBDNiEkTg" name="Debug__AC__ServiceResult" source="_w6zA0ErcEemr9sBDNiEkTg" target="_w602AErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w64gYUrcEemr9sBDNiEkTg" name="getResponse" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: got reponse from server, go to process response state\n&quot;;
    int j=0;
    for (int i=0;i&lt;=100000;i++)
	j=j+1;
    std::cout&lt;&lt;j;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__AC__ServiceResult&quot;,(char *)&quot;Debug__B__Ac__ServiceResult&quot;,(char *)&quot;Debug__A__Ac__ServiceResult&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w64gYErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w65HcErcEemr9sBDNiEkTg" name="Debug__En__ProcessResponse" source="_w602AErcEemr9sBDNiEkTg" target="_w62EIErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w65ugErcEemr9sBDNiEkTg" name="ProcessMessage" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot; : Processing Response .....\n&quot;;
    //int r=rand()%10;
    
    Timer.informIn(UMLRTTimespec(0,500),4);
    //messageID=messageID+1; 
    ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,MessageProcessed,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__En__ProcessResponse&quot;,(char *)&quot;Debug__A__Ac__ServiceResult&quot;,(char *)&quot;Debug__A__En__ProcessResponse&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w65HcUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w65ugUrcEemr9sBDNiEkTg" name="Debug__end__trans__ServiceResult" source="_w62EIErcEemr9sBDNiEkTg" target="_w6dpoUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7OeoErcEemr9sBDNiEkTg" name="Debug__end__trans__ServiceResult__810">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__end__trans__ServiceResult&quot;,(char *)&quot;Debug__A__En__ProcessResponse&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w65ugkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w6xLoUrcEemr9sBDNiEkTg" name="Debug__B__Ex__WaitingForReply">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w6xLokrcEemr9sBDNiEkTg" name="Debug__B__Ex__WaitingForReply">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;WaitingForReply&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__B__Ex__WaitingForReply&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w668oUrcEemr9sBDNiEkTg" name="Debug__B__Ex__WaitingForReply__800">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__B__Ex__WaitingForReply&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w6zA0ErcEemr9sBDNiEkTg" name="Debug__B__Ac__ServiceResult">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w6zA0UrcEemr9sBDNiEkTg" name="Debug__B__Ac__ServiceResult">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;WaitingForReply&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;ServiceResult&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__B__Ac__ServiceResult&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w69_8UrcEemr9sBDNiEkTg" name="Debug__B__Ac__ServiceResult__801">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__B__Ac__ServiceResult&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w602AErcEemr9sBDNiEkTg" name="Debug__A__Ac__ServiceResult">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w602AUrcEemr9sBDNiEkTg" name="Debug__A__Ac__ServiceResult">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ServiceResult&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;ProcessResponse&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__A__Ac__ServiceResult&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w7BDQErcEemr9sBDNiEkTg" name="Debug__A__Ac__ServiceResult__802">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__A__Ac__ServiceResult&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w62EIErcEemr9sBDNiEkTg" name="Debug__A__En__ProcessResponse">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w62EIUrcEemr9sBDNiEkTg" name="Debug__A__En__ProcessResponse">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ProcessResponse&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__A__En__ProcessResponse&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w7DfgErcEemr9sBDNiEkTg" name="Debug__A__En__ProcessResponse__803">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ServiceResult::Region1::Debug__A__En__ProcessResponse&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w7SwEErcEemr9sBDNiEkTg" name="Debug__Path__reqService" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w7T-MUrcEemr9sBDNiEkTg" name="Debug__C__reqService">
              <connectionPoint xmi:id="_w7VMUUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w7WacUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w7T-MkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_w7wDEErcEemr9sBDNiEkTg" name="Debug__init__trans__reqService" source="_w7VMUUrcEemr9sBDNiEkTg" target="_w7pVYUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w77pQErcEemr9sBDNiEkTg" name="Debug__init__trans__reqService__828">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqService::Region1::Debug__init__trans__reqService&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__reqService&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w7wDEUrcEemr9sBDNiEkTg" name="Debug__Ac__reqService" source="_w7pVYUrcEemr9sBDNiEkTg" target="_w7rxoErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7xRMErcEemr9sBDNiEkTg" name="requestserive" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    
    messageID=messageID+1;
    ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,SendingMessage,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;
    if (hostConfig.MasterList[0] &amp;&amp; hostConfig.MasterList[1])
    {
    int r=rand()%2;
    if (r==0)
    {
    Server1Comm.Request(0).send();
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: sending Request to Server1\n&quot;;
    }
    else{
    Server2Comm.Request(0).send();
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: sending Request to Server2\n&quot;;
    }
    }
    else if (hostConfig.MasterList[0]){
    Server1Comm.Request(0).send();
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: sending Request to Server1\n&quot;;
    }
    else
    {
    Server2Comm.Request(0).send();
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: sending Request to Server2\n&quot;;
    }

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqService::Region1::Debug__Ac__reqService&quot;,(char *)&quot;Debug__B__Ac__reqService&quot;,(char *)&quot;Debug__A__Ac__reqService&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w7wqIErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w7x4QErcEemr9sBDNiEkTg" name="Debug__En__WaitingForReply" source="_w7rxoErcEemr9sBDNiEkTg" target="_w7uN4ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w7yfUErcEemr9sBDNiEkTg" name="WaitForReply" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: Waiting for Response, The timeout is 60 Second\n&quot;;
    TimerId=ResponseTimer.informIn(UMLRTTimespec(60,0),4);
    ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,MessageSent,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqService::Region1::Debug__En__WaitingForReply&quot;,(char *)&quot;Debug__A__Ac__reqService&quot;,(char *)&quot;Debug__A__En__reqService&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w7x4QUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w7zGYErcEemr9sBDNiEkTg" name="Debug__end__trans__reqService" source="_w7uN4ErcEemr9sBDNiEkTg" target="_w7WacUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8BI0ErcEemr9sBDNiEkTg" name="Debug__end__trans__reqService__832">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqService::Region1::Debug__end__trans__reqService&quot;,(char *)&quot;Debug__A__En__reqService&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w7zGYUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w7pVYUrcEemr9sBDNiEkTg" name="Debug__B__Ac__reqService">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w7pVYkrcEemr9sBDNiEkTg" name="Debug__B__Ac__reqService">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;reqService&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqService::Region1::Debug__B__Ac__reqService&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w70UgErcEemr9sBDNiEkTg" name="Debug__B__Ac__reqService__824">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqService::Region1::Debug__B__Ac__reqService&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w7rxoErcEemr9sBDNiEkTg" name="Debug__A__Ac__reqService">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w7rxoUrcEemr9sBDNiEkTg" name="Debug__A__Ac__reqService">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;reqService&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WaitingForReply&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqService::Region1::Debug__A__Ac__reqService&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w72wwErcEemr9sBDNiEkTg" name="Debug__A__Ac__reqService__825">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqService::Region1::Debug__A__Ac__reqService&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w7uN4ErcEemr9sBDNiEkTg" name="Debug__A__En__reqService">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w7uN4UrcEemr9sBDNiEkTg" name="Debug__A__En__reqService">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;WaitingForReply&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqService::Region1::Debug__A__En__reqService&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w750EErcEemr9sBDNiEkTg" name="Debug__A__En__reqService__826">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqService::Region1::Debug__A__En__reqService&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w8GoYErcEemr9sBDNiEkTg" name="Debug__Path__getMasterName__checkConfig__9" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w8HPcUrcEemr9sBDNiEkTg" name="Debug__C__getMasterName__checkConfig__9">
              <connectionPoint xmi:id="_w8JEoErcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w8JrsUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w8HPckrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_w8eb0ErcEemr9sBDNiEkTg" name="Debug__init__trans__getMasterName__checkConfig__9" source="_w8JEoErcEemr9sBDNiEkTg" target="_w8bYgErcEemr9sBDNiEkTg"/>
                <transition xmi:id="_w8eb0UrcEemr9sBDNiEkTg" name="Debug__Ex__getMasterName" source="_w8bYgErcEemr9sBDNiEkTg" target="_w8b_kErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8pa8ErcEemr9sBDNiEkTg" name="Debug__Ex__getMasterName__850">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__getMasterName__checkConfig__9::Region1::Debug__Ex__getMasterName&quot;,(char *)&quot;Debug__B__Ex__getMasterName&quot;,(char *)&quot;Debug__B__Ac__getMasterName__checkConfig__9&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w8eb0krcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w8fC4ErcEemr9sBDNiEkTg" name="Debug__AC__getMasterName__checkConfig__9" source="_w8b_kErcEemr9sBDNiEkTg" target="_w8dNsErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8qpEErcEemr9sBDNiEkTg" name="Debug__AC__getMasterName__checkConfig__9__852">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__getMasterName__checkConfig__9::Region1::Debug__AC__getMasterName__checkConfig__9&quot;,(char *)&quot;Debug__B__Ac__getMasterName__checkConfig__9&quot;,(char *)&quot;Debug__A__Ac__getMasterName__checkConfig__9&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w8fC4UrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w8fC4krcEemr9sBDNiEkTg" name="Debug__end__trans__getMasterName__checkConfig__9" source="_w8dNsErcEemr9sBDNiEkTg" target="_w8JrsUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w8seQErcEemr9sBDNiEkTg" name="Debug__end__trans__getMasterName__checkConfig__9__854">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__getMasterName__checkConfig__9::Region1::Debug__end__trans__getMasterName__checkConfig__9&quot;,(char *)&quot;Debug__A__Ac__getMasterName__checkConfig__9&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w8fp8ErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w8bYgErcEemr9sBDNiEkTg" name="Debug__B__Ex__getMasterName">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w8bYgUrcEemr9sBDNiEkTg" name="Debug__B__Ex__getMasterName">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;getMasterName&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__getMasterName__checkConfig__9::Region1::Debug__B__Ex__getMasterName&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w8gRAUrcEemr9sBDNiEkTg" name="Debug__B__Ex__getMasterName__846">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__getMasterName__checkConfig__9::Region1::Debug__B__Ex__getMasterName&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w8b_kErcEemr9sBDNiEkTg" name="Debug__B__Ac__getMasterName__checkConfig__9">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w8b_kUrcEemr9sBDNiEkTg" name="Debug__B__Ac__getMasterName__checkConfig__9">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;getMasterName&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;getMasterName__checkConfig__9&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__getMasterName__checkConfig__9::Region1::Debug__B__Ac__getMasterName__checkConfig__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w8j7YUrcEemr9sBDNiEkTg" name="Debug__B__Ac__getMasterName__checkConfig__9__847">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__getMasterName__checkConfig__9::Region1::Debug__B__Ac__getMasterName__checkConfig__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w8dNsErcEemr9sBDNiEkTg" name="Debug__A__Ac__getMasterName__checkConfig__9">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w8dNsUrcEemr9sBDNiEkTg" name="Debug__A__Ac__getMasterName__checkConfig__9">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;getMasterName__checkConfig__9&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__getMasterName__checkConfig__9::Region1::Debug__A__Ac__getMasterName__checkConfig__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w8mXoErcEemr9sBDNiEkTg" name="Debug__A__Ac__getMasterName__checkConfig__9__848">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__getMasterName__checkConfig__9::Region1::Debug__A__Ac__getMasterName__checkConfig__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w80aEErcEemr9sBDNiEkTg" name="Debug__Path__inittrans" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w81BIUrcEemr9sBDNiEkTg" name="Debug__C__inittrans">
              <connectionPoint xmi:id="_w82PQUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w84EcUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w81BIkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_w9K_YErcEemr9sBDNiEkTg" name="Debug__init__trans__inittrans" source="_w82PQUrcEemr9sBDNiEkTg" target="_w9IjIUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9XMoErcEemr9sBDNiEkTg" name="Debug__init__trans__inittrans__873">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__inittrans::Region1::Debug__init__trans__inittrans&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__inittrans&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w9LmcErcEemr9sBDNiEkTg" name="Debug__Ac__inittrans" source="_w9IjIUrcEemr9sBDNiEkTg" target="_w9JKMErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9MNgErcEemr9sBDNiEkTg" name="InitLog" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>      std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: Intialization\n&quot;;
     char  fileName[30];
     char  clientIndex[5];
     //itoa(clientIndex,this->getIndex(),10);

	sprintf(clientIndex, &quot;%d&quot;, this->getIndex());
     strcpy(fileName,this->getName());
     strcat(fileName, clientIndex);
     logfile.open(fileName);
     logfile&lt;&lt;&quot;capsuleName&quot;&lt;&lt;&quot;,messageType,&quot;&lt;&lt;&quot;messageID&quot;&lt;&lt;&quot;,&quot;&lt;&lt;&quot;second&quot;&lt;&lt;&quot;,&quot;&lt;&lt;&quot;nano&quot;&lt;&lt;&quot;\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__inittrans::Region1::Debug__Ac__inittrans&quot;,(char *)&quot;Debug__B__Ac__inittrans&quot;,(char *)&quot;Debug__A__Ac__inittrans&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w9LmcUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w9M0kErcEemr9sBDNiEkTg" name="Debug__En__StandBY" source="_w9JKMErcEemr9sBDNiEkTg" target="_w9JxQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9aP8ErcEemr9sBDNiEkTg" name="Debug__En__StandBY__876">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__inittrans::Region1::Debug__En__StandBY&quot;,(char *)&quot;Debug__A__Ac__inittrans&quot;,(char *)&quot;Debug__A__En__inittrans&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w9M0kUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w9NboErcEemr9sBDNiEkTg" name="Debug__end__trans__inittrans" source="_w9JxQErcEemr9sBDNiEkTg" target="_w84EcUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9cFIErcEemr9sBDNiEkTg" name="Debug__end__trans__inittrans__878">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__inittrans::Region1::Debug__end__trans__inittrans&quot;,(char *)&quot;Debug__A__En__inittrans&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w9NboUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w9IjIUrcEemr9sBDNiEkTg" name="Debug__B__Ac__inittrans">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w9IjIkrcEemr9sBDNiEkTg" name="Debug__B__Ac__inittrans">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;inittrans&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__inittrans::Region1::Debug__B__Ac__inittrans&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w9OpwErcEemr9sBDNiEkTg" name="Debug__B__Ac__inittrans__869">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__inittrans::Region1::Debug__B__Ac__inittrans&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w9JKMErcEemr9sBDNiEkTg" name="Debug__A__Ac__inittrans">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w9JKMUrcEemr9sBDNiEkTg" name="Debug__A__Ac__inittrans">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;inittrans&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;StandBY&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__inittrans::Region1::Debug__A__Ac__inittrans&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w9RtEUrcEemr9sBDNiEkTg" name="Debug__A__Ac__inittrans__870">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__inittrans::Region1::Debug__A__Ac__inittrans&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w9JxQErcEemr9sBDNiEkTg" name="Debug__A__En__inittrans">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w9KYUErcEemr9sBDNiEkTg" name="Debug__A__En__inittrans">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;StandBY&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__inittrans::Region1::Debug__A__En__inittrans&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w9VXcErcEemr9sBDNiEkTg" name="Debug__A__En__inittrans__871">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__inittrans::Region1::Debug__A__En__inittrans&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w9gWkErcEemr9sBDNiEkTg" name="Debug__Path__ReqFlowDone" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w9g9oUrcEemr9sBDNiEkTg" name="Debug__C__ReqFlowDone">
              <connectionPoint xmi:id="_w9iLwUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w9iy0UrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w9g9okrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_w98bcErcEemr9sBDNiEkTg" name="Debug__init__trans__ReqFlowDone" source="_w9iLwUrcEemr9sBDNiEkTg" target="_w94KAErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-LE8ErcEemr9sBDNiEkTg" name="Debug__init__trans__ReqFlowDone__897">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__init__trans__ReqFlowDone&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__ProcessResponse&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w98bcUrcEemr9sBDNiEkTg" name="Debug__Ex__ProcessResponse" source="_w94KAErcEemr9sBDNiEkTg" target="_w94xEErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-MTEErcEemr9sBDNiEkTg" name="Debug__Ex__ProcessResponse__899">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__Ex__ProcessResponse&quot;,(char *)&quot;Debug__B__Ex__ProcessResponse&quot;,(char *)&quot;Debug__B__Ac__ReqFlowDone&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w99CgErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w99CgUrcEemr9sBDNiEkTg" name="Debug__AC__ReqFlowDone" source="_w94xEErcEemr9sBDNiEkTg" target="_w95_MErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w99pkErcEemr9sBDNiEkTg" name="AllIsDone" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: The service Request has been done sucessfully\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__AC__ReqFlowDone&quot;,(char *)&quot;Debug__B__Ac__ReqFlowDone&quot;,(char *)&quot;Debug__A__Ac__ReqFlowDone&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w99CgkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w99pkUrcEemr9sBDNiEkTg" name="Debug__En__Ready" source="_w95_MErcEemr9sBDNiEkTg" target="_w97NUErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w9-QoUrcEemr9sBDNiEkTg" name="ReadyEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: is in Ready State\n&quot;;
    //int r=rand()%11;
    int r=1;
    RequestTimer.informIn(UMLRTTimespec(0,1000),4);
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: will try to request service after &quot;&lt;&lt; r&lt;&lt;&quot; second \n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__En__Ready&quot;,(char *)&quot;Debug__A__Ac__ReqFlowDone&quot;,(char *)&quot;Debug__A__En__Ready&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w9-QoErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w9-3sErcEemr9sBDNiEkTg" name="Debug__end__trans__ReqFlowDone" source="_w97NUErcEemr9sBDNiEkTg" target="_w9iy0UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-QkgErcEemr9sBDNiEkTg" name="Debug__end__trans__ReqFlowDone__903">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__end__trans__ReqFlowDone&quot;,(char *)&quot;Debug__A__En__Ready&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w9-3sUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w94KAErcEemr9sBDNiEkTg" name="Debug__B__Ex__ProcessResponse">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w94KAUrcEemr9sBDNiEkTg" name="Debug__B__Ex__ProcessResponse">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ProcessResponse&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__B__Ex__ProcessResponse&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w-AF0UrcEemr9sBDNiEkTg" name="Debug__B__Ex__ProcessResponse__892">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__B__Ex__ProcessResponse&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w94xEErcEemr9sBDNiEkTg" name="Debug__B__Ac__ReqFlowDone">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w94xEUrcEemr9sBDNiEkTg" name="Debug__B__Ac__ReqFlowDone">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ProcessResponse&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;ReqFlowDone&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__B__Ac__ReqFlowDone&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w-DJIUrcEemr9sBDNiEkTg" name="Debug__B__Ac__ReqFlowDone__893">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__B__Ac__ReqFlowDone&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w95_MErcEemr9sBDNiEkTg" name="Debug__A__Ac__ReqFlowDone">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w95_MUrcEemr9sBDNiEkTg" name="Debug__A__Ac__ReqFlowDone">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;ReqFlowDone&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Ready&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__A__Ac__ReqFlowDone&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w-GMcUrcEemr9sBDNiEkTg" name="Debug__A__Ac__ReqFlowDone__894">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__A__Ac__ReqFlowDone&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w97NUErcEemr9sBDNiEkTg" name="Debug__A__En__Ready">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w97NUUrcEemr9sBDNiEkTg" name="Debug__A__En__Ready">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Ready&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__A__En__Ready&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w-IBoErcEemr9sBDNiEkTg" name="Debug__A__En__Ready__895">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__ReqFlowDone::Region1::Debug__A__En__Ready&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w-UO4ErcEemr9sBDNiEkTg" name="Debug__Path__StarupTransition" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w-VdAErcEemr9sBDNiEkTg" name="Debug__C__StarupTransition">
              <connectionPoint xmi:id="_w-WrIErcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w-XSMUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w-VdAUrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_w-spYErcEemr9sBDNiEkTg" name="Debug__init__trans__StarupTransition" source="_w-WrIErcEemr9sBDNiEkTg" target="_w-nw4UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-6r0ErcEemr9sBDNiEkTg" name="Debug__init__trans__StarupTransition__922">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__init__trans__StarupTransition&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__StandBY&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w-spYUrcEemr9sBDNiEkTg" name="Debug__Ex__StandBY" source="_w-nw4UrcEemr9sBDNiEkTg" target="_w-o_AErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-8hAErcEemr9sBDNiEkTg" name="Debug__Ex__StandBY__924">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__Ex__StandBY&quot;,(char *)&quot;Debug__B__Ex__StandBY&quot;,(char *)&quot;Debug__B__Ac__StarupTransition&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w-tQcErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w-t3gErcEemr9sBDNiEkTg" name="Debug__AC__StarupTransition" source="_w-o_AErcEemr9sBDNiEkTg" target="_w-qNIErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-t3gkrcEemr9sBDNiEkTg" name="StartUPClient" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot; Client is startingUP \n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__AC__StarupTransition&quot;,(char *)&quot;Debug__B__Ac__StarupTransition&quot;,(char *)&quot;Debug__A__Ac__StarupTransition&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w-t3gUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w-uekErcEemr9sBDNiEkTg" name="Debug__En__Ready" source="_w-qNIErcEemr9sBDNiEkTg" target="_w-sCUErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w-uekkrcEemr9sBDNiEkTg" name="ReadyEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: is in Ready State\n&quot;;
    //int r=rand()%11;
    int r=1;
    RequestTimer.informIn(UMLRTTimespec(0,1000),4);
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: will try to request service after &quot;&lt;&lt; r&lt;&lt;&quot; second \n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__En__Ready&quot;,(char *)&quot;Debug__A__Ac__StarupTransition&quot;,(char *)&quot;Debug__A__En__Ready&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w-uekUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w-uek0rcEemr9sBDNiEkTg" name="Debug__end__trans__StarupTransition" source="_w-sCUErcEemr9sBDNiEkTg" target="_w-XSMUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_ALYErcEemr9sBDNiEkTg" name="Debug__end__trans__StarupTransition__928">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__end__trans__StarupTransition&quot;,(char *)&quot;Debug__A__En__Ready&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w-vFoErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w-nw4UrcEemr9sBDNiEkTg" name="Debug__B__Ex__StandBY">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w-nw4krcEemr9sBDNiEkTg" name="Debug__B__Ex__StandBY">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;StandBY&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__B__Ex__StandBY&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w-vssUrcEemr9sBDNiEkTg" name="Debug__B__Ex__StandBY__917">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__B__Ex__StandBY&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w-o_AErcEemr9sBDNiEkTg" name="Debug__B__Ac__StarupTransition">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w-o_AUrcEemr9sBDNiEkTg" name="Debug__B__Ac__StarupTransition">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;StandBY&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;StarupTransition&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__B__Ac__StarupTransition&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w-zXEErcEemr9sBDNiEkTg" name="Debug__B__Ac__StarupTransition__918">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__B__Ac__StarupTransition&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w-qNIErcEemr9sBDNiEkTg" name="Debug__A__Ac__StarupTransition">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w-q0MErcEemr9sBDNiEkTg" name="Debug__A__Ac__StarupTransition">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;StarupTransition&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Ready&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__A__Ac__StarupTransition&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w-1zUErcEemr9sBDNiEkTg" name="Debug__A__Ac__StarupTransition__919">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__A__Ac__StarupTransition&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w-sCUErcEemr9sBDNiEkTg" name="Debug__A__En__Ready">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w-sCUUrcEemr9sBDNiEkTg" name="Debug__A__En__Ready">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Ready&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__A__En__Ready&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w-4PkErcEemr9sBDNiEkTg" name="Debug__A__En__Ready__920">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__StarupTransition::Region1::Debug__A__En__Ready&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w_FD4ErcEemr9sBDNiEkTg" name="Debug__Path__reqFlowInit" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w_GSAErcEemr9sBDNiEkTg" name="Debug__C__reqFlowInit">
              <connectionPoint xmi:id="_w_HgIUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w_IHMUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w_GSAUrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_w_bpMErcEemr9sBDNiEkTg" name="Debug__init__trans__reqFlowInit" source="_w_HgIUrcEemr9sBDNiEkTg" target="_w_X-0UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_n2cUrcEemr9sBDNiEkTg" name="Debug__init__trans__reqFlowInit__947">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__init__trans__reqFlowInit&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__Ready&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w_bpMUrcEemr9sBDNiEkTg" name="Debug__Ex__Ready" source="_w_X-0UrcEemr9sBDNiEkTg" target="_w_Yl4ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_pEkErcEemr9sBDNiEkTg" name="Debug__Ex__Ready__949">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__Ex__Ready&quot;,(char *)&quot;Debug__B__Ex__Ready&quot;,(char *)&quot;Debug__B__Ac__reqFlowInit&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w_bpMkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w_bpM0rcEemr9sBDNiEkTg" name="Debug__AC__reqFlowInit" source="_w_Yl4ErcEemr9sBDNiEkTg" target="_w_Z0AErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_qSsErcEemr9sBDNiEkTg" name="Debug__AC__reqFlowInit__951">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__AC__reqFlowInit&quot;,(char *)&quot;Debug__B__Ac__reqFlowInit&quot;,(char *)&quot;Debug__A__Ac__reqFlowInit&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w_cQQErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w_cQQUrcEemr9sBDNiEkTg" name="Debug__En__getMasterName" source="_w_Z0AErcEemr9sBDNiEkTg" target="_w_bCIErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_c3UErcEemr9sBDNiEkTg" name="GetMasterNameEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;:  Request Master Information from ENV\n&quot;;
    ConfigComm.QueryConfig().send();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__En__getMasterName&quot;,(char *)&quot;Debug__A__Ac__reqFlowInit&quot;,(char *)&quot;Debug__A__En__getMasterName&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w_cQQkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w_deYErcEemr9sBDNiEkTg" name="Debug__end__trans__reqFlowInit" source="_w_bCIErcEemr9sBDNiEkTg" target="_w_IHMUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w_sH4ErcEemr9sBDNiEkTg" name="Debug__end__trans__reqFlowInit__954">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__end__trans__reqFlowInit&quot;,(char *)&quot;Debug__A__En__getMasterName&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w_deYUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w_X-0UrcEemr9sBDNiEkTg" name="Debug__B__Ex__Ready">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w_X-0krcEemr9sBDNiEkTg" name="Debug__B__Ex__Ready">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Ready&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__B__Ex__Ready&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w_fTkErcEemr9sBDNiEkTg" name="Debug__B__Ex__Ready__942">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__B__Ex__Ready&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w_Yl4ErcEemr9sBDNiEkTg" name="Debug__B__Ac__reqFlowInit">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w_Yl4UrcEemr9sBDNiEkTg" name="Debug__B__Ac__reqFlowInit">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Ready&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;reqFlowInit&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__B__Ac__reqFlowInit&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w_hIwUrcEemr9sBDNiEkTg" name="Debug__B__Ac__reqFlowInit__943">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__B__Ac__reqFlowInit&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w_Z0AErcEemr9sBDNiEkTg" name="Debug__A__Ac__reqFlowInit">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w_Z0AUrcEemr9sBDNiEkTg" name="Debug__A__Ac__reqFlowInit">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;reqFlowInit&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;getMasterName&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__A__Ac__reqFlowInit&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w_kMEErcEemr9sBDNiEkTg" name="Debug__A__Ac__reqFlowInit__944">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__A__Ac__reqFlowInit&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w_bCIErcEemr9sBDNiEkTg" name="Debug__A__En__getMasterName">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w_bCIUrcEemr9sBDNiEkTg" name="Debug__A__En__getMasterName">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;getMasterName&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__A__En__getMasterName&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w_mBQErcEemr9sBDNiEkTg" name="Debug__A__En__getMasterName__945">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__reqFlowInit::Region1::Debug__A__En__getMasterName&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w_vLMErcEemr9sBDNiEkTg" name="Debug__Path__NoResponseFromServer" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w_vyQUrcEemr9sBDNiEkTg" name="Debug__C__NoResponseFromServer">
              <connectionPoint xmi:id="_w_xAYUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w_xncUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w_vyQkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_xAD7UErcEemr9sBDNiEkTg" name="Debug__init__trans__NoResponseFromServer" source="_w_xAYUrcEemr9sBDNiEkTg" target="_w__p4ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xAUaAErcEemr9sBDNiEkTg" name="Debug__init__trans__NoResponseFromServer__974">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__init__trans__NoResponseFromServer&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__WaitingForReply&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_xAD7UUrcEemr9sBDNiEkTg" name="Debug__Ex__WaitingForReply" source="_w__p4ErcEemr9sBDNiEkTg" target="_xAAQ8ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xAEiYUrcEemr9sBDNiEkTg" name="CancellTimer" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>ResponseTimer.cancelTimer(TimerId);
messageID=messageID+1; 
ts.getclock(ts);
    if (logfile.is_open())
	logfile&lt;&lt;this->getName()&lt;&lt;&quot;,ProcessingMessage,&quot;&lt;&lt;messageID&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_sec&lt;&lt;&quot;,&quot;&lt;&lt;ts.tv_nsec&lt;&lt;&quot;\n&quot;;   


Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__Ex__WaitingForReply&quot;,(char *)&quot;Debug__B__Ex__WaitingForReply&quot;,(char *)&quot;Debug__B__Ac__NoResponseFromServer&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_xAEiYErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_xAFJcErcEemr9sBDNiEkTg" name="Debug__AC__NoResponseFromServer" source="_xAAQ8ErcEemr9sBDNiEkTg" target="_xABfEErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xAFJckrcEemr9sBDNiEkTg" name="ServiceFailure" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: Service Failur.....\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__AC__NoResponseFromServer&quot;,(char *)&quot;Debug__B__Ac__NoResponseFromServer&quot;,(char *)&quot;Debug__A__Ac__NoResponseFromServer&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_xAFJcUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_xAFwgErcEemr9sBDNiEkTg" name="Debug__En__Ready" source="_xABfEErcEemr9sBDNiEkTg" target="_xADUQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xAG-oErcEemr9sBDNiEkTg" name="ReadyEntry" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: is in Ready State\n&quot;;
    //int r=rand()%11;
    int r=1;
    RequestTimer.informIn(UMLRTTimespec(0,1000),4);
    std::cout&lt;&lt;this->getName()&lt;&lt;this->getIndex()&lt;&lt;&quot;: will try to request service after &quot;&lt;&lt; r&lt;&lt;&quot; second \n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__En__Ready&quot;,(char *)&quot;Debug__A__Ac__NoResponseFromServer&quot;,(char *)&quot;Debug__A__En__Ready&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_xAGXkErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_xAG-oUrcEemr9sBDNiEkTg" name="Debug__end__trans__NoResponseFromServer" source="_xADUQErcEemr9sBDNiEkTg" target="_w_xncUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_xAcV0ErcEemr9sBDNiEkTg" name="Debug__end__trans__NoResponseFromServer__979">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__end__trans__NoResponseFromServer&quot;,(char *)&quot;Debug__A__En__Ready&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_xAG-okrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wXXjoErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w__p4ErcEemr9sBDNiEkTg" name="Debug__B__Ex__WaitingForReply">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w__p4UrcEemr9sBDNiEkTg" name="Debug__B__Ex__WaitingForReply">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;WaitingForReply&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__B__Ex__WaitingForReply&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xAJa4ErcEemr9sBDNiEkTg" name="Debug__B__Ex__WaitingForReply__969">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__B__Ex__WaitingForReply&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_xAAQ8ErcEemr9sBDNiEkTg" name="Debug__B__Ac__NoResponseFromServer">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xAAQ8UrcEemr9sBDNiEkTg" name="Debug__B__Ac__NoResponseFromServer">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;WaitingForReply&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;NoResponseFromServer&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__B__Ac__NoResponseFromServer&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xAMeMErcEemr9sBDNiEkTg" name="Debug__B__Ac__NoResponseFromServer__970">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__B__Ac__NoResponseFromServer&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_xABfEErcEemr9sBDNiEkTg" name="Debug__A__Ac__NoResponseFromServer">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xABfEUrcEemr9sBDNiEkTg" name="Debug__A__Ac__NoResponseFromServer">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;NoResponseFromServer&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;Ready&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__A__Ac__NoResponseFromServer&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xAO6cUrcEemr9sBDNiEkTg" name="Debug__A__Ac__NoResponseFromServer__971">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__A__Ac__NoResponseFromServer&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_xADUQErcEemr9sBDNiEkTg" name="Debug__A__En__Ready">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xADUQUrcEemr9sBDNiEkTg" name="Debug__A__En__Ready">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;Ready&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__A__En__Ready&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_xARWsErcEemr9sBDNiEkTg" name="Debug__A__En__Ready__972">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Hosts::Client::ClientStateMachine::Region1::Debug__C__NoResponseFromServer::Region1::Debug__A__En__Ready&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_xAxF8ErcEemr9sBDNiEkTg" name="Debug__InitState"/>
          </region>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wXUgUUrcEemr9sBDNiEkTg" name="Debug__recallAllMsg" specification="_wXUgUErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>Server1Comm.recallAll();
ConfigComm.recallAll();
Server2Comm.recallAll();
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wXkX8ErcEemr9sBDNiEkTg" name="Debug__variablesViewMethod" specification="_wXjw4ErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>std::string tempS=&quot;&quot;;
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wXsTwUrcEemr9sBDNiEkTg" name="Debug__variablesChange" specification="_wXopYErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);

    return false;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wYFVUUrcEemr9sBDNiEkTg" name="Debug__sendEvent" specification="_wX358ErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_wXUgUErcEemr9sBDNiEkTg" name="Debug__recallAllMsg" visibility="private" method="_wXUgUUrcEemr9sBDNiEkTg"/>
        <ownedOperation xmi:id="_wXjw4ErcEemr9sBDNiEkTg" name="Debug__variablesView" visibility="private" method="_wXkX8ErcEemr9sBDNiEkTg"/>
        <ownedOperation xmi:id="_wXopYErcEemr9sBDNiEkTg" name="Debug__variablesChange" visibility="private" method="_wXsTwUrcEemr9sBDNiEkTg">
          <ownedParameter xmi:id="_wXpQcErcEemr9sBDNiEkTg" name="methodReturn" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wXrFoErcEemr9sBDNiEkTg" name="varName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wXsTwErcEemr9sBDNiEkTg" name="varValue">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_wX358ErcEemr9sBDNiEkTg" name="Debug__sendEvent" visibility="private" method="_wYFVUUrcEemr9sBDNiEkTg">
          <ownedParameter xmi:id="_wX4hAErcEemr9sBDNiEkTg" name="eventSourceKind">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wX6WMUrcEemr9sBDNiEkTg" name="eventType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wX8LYUrcEemr9sBDNiEkTg" name="instanceName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wX-noErcEemr9sBDNiEkTg" name="capsuleIndex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wX_OsErcEemr9sBDNiEkTg" name="signalName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wYBD4ErcEemr9sBDNiEkTg" name="capsuleName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wYCSAErcEemr9sBDNiEkTg" name="sourceName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wYDgIErcEemr9sBDNiEkTg" name="reserve1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wYEuQErcEemr9sBDNiEkTg" name="reserve2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wYFVUErcEemr9sBDNiEkTg" name="reserve3">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_yqOfEAxwEeaB2MeL96fedA" memberEnd="_yqPtMgxwEeaB2MeL96fedA _yqQUQAxwEeaB2MeL96fedA">
        <eAnnotations xmi:id="_yqPtMAxwEeaB2MeL96fedA" source="org.eclipse.papyrus">
          <details xmi:id="_yqPtMQxwEeaB2MeL96fedA" key="nature" value="UML_Nature"/>
        </eAnnotations>
        <ownedEnd xmi:id="_yqQUQAxwEeaB2MeL96fedA" name="host" type="_4_oYIAghEea_md0mpENoqg" association="_yqOfEAxwEeaB2MeL96fedA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_z8f_QAxwEeaB2MeL96fedA" memberEnd="_z8hNYQxwEeaB2MeL96fedA _z8hNYgxwEeaB2MeL96fedA">
        <eAnnotations xmi:id="_z8gmUAxwEeaB2MeL96fedA" source="org.eclipse.papyrus">
          <details xmi:id="_z8hNYAxwEeaB2MeL96fedA" key="nature" value="UML_Nature"/>
        </eAnnotations>
        <ownedEnd xmi:id="_z8hNYgxwEeaB2MeL96fedA" name="host" type="_4_oYIAghEea_md0mpENoqg" association="_z8f_QAxwEeaB2MeL96fedA"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_OiTE0AghEea_md0mpENoqg" name="Utility">
      <packagedElement xmi:type="uml:Class" xmi:id="_JesyoAgiEea_md0mpENoqg" name="HostInfo" visibility="public">
        <ownedAttribute xmi:id="_l4sHAAgiEea_md0mpENoqg" name="hostType" type="_TE8UIAgiEea_md0mpENoqg"/>
        <ownedAttribute xmi:id="_6EOE0AglEea_md0mpENoqg" name="status" type="_gf1EkAglEea_md0mpENoqg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_TE8UIAgiEea_md0mpENoqg" name="HostType">
        <ownedLiteral xmi:id="_Y-NNkAgiEea_md0mpENoqg" name="CLI"/>
        <ownedLiteral xmi:id="_aJOPMAgiEea_md0mpENoqg" name="SRV"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_gf1EkAglEea_md0mpENoqg" name="HostStatus" visibility="public">
        <ownedLiteral xmi:id="_ygyIkAglEea_md0mpENoqg" name="Active"/>
        <ownedLiteral xmi:id="_0Co84AglEea_md0mpENoqg" name="Deactive"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_-VDn4AglEea_md0mpENoqg" name="ServerRole">
        <ownedLiteral xmi:id="_GJYf0AgmEea_md0mpENoqg" name="Master"/>
        <ownedLiteral xmi:id="_HZTPkAgmEea_md0mpENoqg" name="Slave"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_T635wAgmEea_md0mpENoqg" name="ServerInfo">
        <generalization xmi:id="_jCuQYAgrEea_md0mpENoqg" general="_JesyoAgiEea_md0mpENoqg"/>
        <ownedAttribute xmi:id="_Y5vngAgmEea_md0mpENoqg" name="role" type="_-VDn4AglEea_md0mpENoqg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_v04e0AgsEea_md0mpENoqg" name="ConfigProtocol">
        <packagedElement xmi:type="uml:Collaboration" xmi:id="_v000cAgsEea_md0mpENoqg" name="ConfigProtocol">
          <interfaceRealization xmi:id="_v0_zkAgsEea_md0mpENoqg" client="_v000cAgsEea_md0mpENoqg" supplier="_v09XUAgsEea_md0mpENoqg" contract="_v09XUAgsEea_md0mpENoqg">
            <name xsi:nil="true"/>
          </interfaceRealization>
          <interfaceRealization xmi:id="_v1SHcAgsEea_md0mpENoqg" client="_v000cAgsEea_md0mpENoqg" supplier="_v1PrMAgsEea_md0mpENoqg" contract="_v1PrMAgsEea_md0mpENoqg">
            <name xsi:nil="true"/>
          </interfaceRealization>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_v09XUAgsEea_md0mpENoqg" name="ConfigProtocol">
          <ownedOperation xmi:id="_Mnix4AgtEea_md0mpENoqg" name="ReplyReplicationMode">
            <ownedParameter xmi:id="_Mnix4QgtEea_md0mpENoqg" name="RunningMode">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_GvEtMAguEea_md0mpENoqg" name="ReplyServerRole">
            <ownedParameter xmi:id="_GvEtMQguEea_md0mpENoqg" name="ServerRole">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_MlnCwAguEea_md0mpENoqg" name="StartUp">
            <ownedParameter xmi:id="_oGfrwAlpEea_md0mpENoqg" name="config" type="_Y1UDYAg6Eea_md0mpENoqg"/>
          </ownedOperation>
          <ownedOperation xmi:id="_OMA_4AguEea_md0mpENoqg" name="Shutdown"/>
          <ownedOperation xmi:id="_QoJEEAguEea_md0mpENoqg" name="BIT"/>
          <ownedOperation xmi:id="_mLtTMAguEea_md0mpENoqg" name="ReplyMasterId">
            <ownedParameter xmi:id="_s-1M0AguEea_md0mpENoqg" name="MasterId">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Iv10IAl4Eea_md0mpENoqg" name="ReplyConfig">
            <ownedParameter xmi:id="_Iv10IQl4Eea_md0mpENoqg" name="config" type="_Y1UDYAg6Eea_md0mpENoqg"/>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_v1I9gAgsEea_md0mpENoqg" name="ConfigProtocol~">
          <ownedOperation xmi:id="_AW3DYAgtEea_md0mpENoqg" name="QueryReplicationMode"/>
          <ownedOperation xmi:id="_yDGNYAgtEea_md0mpENoqg" name="QueryServerRole">
            <ownedParameter xmi:id="_yDGNYQgtEea_md0mpENoqg" name="ServerName">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_hZgIcAguEea_md0mpENoqg" name="QueryMasterId"/>
          <ownedOperation xmi:id="_BB20wAl4Eea_md0mpENoqg" name="QueryConfig"/>
          <ownedOperation xmi:id="_xu1hMAl4Eea_md0mpENoqg" name="IAMMaster">
            <ownedParameter xmi:id="_xu1hMQl4Eea_md0mpENoqg" name="MasterName">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Usage" xmi:id="_v1MA0AgsEea_md0mpENoqg" client="_v000cAgsEea_md0mpENoqg" supplier="_v1I9gAgsEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_v1N2AAgsEea_md0mpENoqg" name="*"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_v1PrMAgsEea_md0mpENoqg" name="ConfigProtocolIO"/>
        <packagedElement xmi:type="uml:Usage" xmi:id="_v1SugAgsEea_md0mpENoqg" client="_v000cAgsEea_md0mpENoqg" supplier="_v1PrMAgsEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_AW3qcAgtEea_md0mpENoqg" operation="_AW3DYAgtEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_MnkAAAgtEea_md0mpENoqg" operation="_Mnix4AgtEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_yDG0cAgtEea_md0mpENoqg" operation="_yDGNYAgtEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_GvF7UAguEea_md0mpENoqg" operation="_GvEtMAguEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_MloQ4AguEea_md0mpENoqg" operation="_MlnCwAguEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_OMBm8AguEea_md0mpENoqg" operation="_OMA_4AguEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_QoLgUAguEea_md0mpENoqg" operation="_QoJEEAguEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_hZh9oAguEea_md0mpENoqg" operation="_hZgIcAguEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_mLvIYAguEea_md0mpENoqg" operation="_mLtTMAguEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_BB3b0Al4Eea_md0mpENoqg" operation="_BB20wAl4Eea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_Iv3CQAl4Eea_md0mpENoqg" operation="_Iv10IAl4Eea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_xu1hMgl4Eea_md0mpENoqg" operation="_xu1hMAl4Eea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_RLyKYAgzEea_md0mpENoqg" name="EchoCapsule" classifierBehavior="_WlNQsAg0Eea_md0mpENoqg" isActive="true">
        <ownedAttribute xmi:type="uml:Port" xmi:id="_PdYSYAg0Eea_md0mpENoqg" name="Echo" visibility="public" type="_nk_BAAgzEea_md0mpENoqg" isOrdered="true" aggregation="composite" isBehavior="true">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_WNSukAm2Eea_md0mpENoqg" value="8"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_WOSNEAm2Eea_md0mpENoqg" value="8"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_wWLQ0ErcEemr9sBDNiEkTg" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
          <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wWNGAUrcEemr9sBDNiEkTg" value="1"/>
          <upperValue xmi:type="uml:LiteralInteger" xmi:id="_wWO7MErcEemr9sBDNiEkTg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wWkSYErcEemr9sBDNiEkTg" name="Debug__flag">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wWlggErcEemr9sBDNiEkTg" name="Debug__variablesData">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wWmHkErcEemr9sBDNiEkTg" name="Debug__event">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_wWoj0ErcEemr9sBDNiEkTg" name="Debug__SRO">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_WlNQsAg0Eea_md0mpENoqg" name="StateMachine1">
          <region xmi:id="_abLcsAg0Eea_md0mpENoqg" name="Region1">
            <transition xmi:id="_ftWg8Ag0Eea_md0mpENoqg" name="init__WaitForEcho__8" source="_w3WEMErcEemr9sBDNiEkTg" target="_cfbzcAg0Eea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Izo0QAiiEea_md0mpENoqg" name="init">
                <language>C++</language>
                <body>    std::cout&lt;&lt;&quot;EchoCapsule: Intializing\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::init__WaitForEcho__8&quot;,(char *)&quot;Debug__Path__init__WaitForEcho__8&quot;,(char *)&quot;WaitForEcho&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_kUUFAAg0Eea_md0mpENoqg" name="DoEcho" source="_w2nEYErcEemr9sBDNiEkTg" target="_cfbzcAg0Eea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_L4RXcAg1Eea_md0mpENoqg" name="DoEcho">
                <language>C++</language>
                <body>    std::cout&lt;&lt;&quot;EchoCapsule: The Echo message was recieved\n&quot;;
    int tempid=msg->sapIndex0_;
    Echo.Echo().sendAt(tempid);
    std::cout&lt;&lt;&quot;EchoCapsule: The Echo message was replied\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::DoEcho&quot;,(char *)&quot;Debug__Path__DoEcho&quot;,(char *)&quot;WaitForEcho&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w2r84ErcEemr9sBDNiEkTg" name="Debug__DoEcho" source="_cfbzcAg0Eea_md0mpENoqg" target="_w2nEYErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w2r84UrcEemr9sBDNiEkTg" name="Debug__DoEcho__687">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__DoEcho&quot;,(char *)&quot;WaitForEcho&quot;,(char *)&quot;Debug__Path__DoEcho&quot;,(char *)&quot;&quot;);
</body>
              </effect>
              <trigger xmi:id="_2CMcAAg0Eea_md0mpENoqg" name="Echo" event="_7w0oMAgzEea_md0mpENoqg" port="_PdYSYAg0Eea_md0mpENoqg"/>
            </transition>
            <transition xmi:id="_w2tLAErcEemr9sBDNiEkTg" name="Debug__DoEcho__S" guard="_w2tLAkrcEemr9sBDNiEkTg" source="_w2nEYErcEemr9sBDNiEkTg" target="_w2qHsUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w2tLAkrcEemr9sBDNiEkTg" name="Debug__GuardDoEcho">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w2tLAUrcEemr9sBDNiEkTg" name="Debug__GuardDoEcho">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;WaitForEcho&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w2tyEErcEemr9sBDNiEkTg" name="Debug__DoEcho__S__689">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__DoEcho__S&quot;,(char *)&quot;Debug__Path__DoEcho&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w2vAMErcEemr9sBDNiEkTg" name="Debug__DoEcho__E" source="_w2rV0ErcEemr9sBDNiEkTg" target="_cfbzcAg0Eea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w2vnQErcEemr9sBDNiEkTg" name="Debug__DoEcho__E__690">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__DoEcho__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WaitForEcho&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w2wOUErcEemr9sBDNiEkTg" name="Debug__DoEcho__dbg__varChange" source="_w2o5kErcEemr9sBDNiEkTg" target="_w2o5kErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w2w1YUrcEemr9sBDNiEkTg" name="Debug__DoEcho__dbg__varChange__692">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w2w1YErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wWLQ0ErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w2xccErcEemr9sBDNiEkTg" name="Debug__DoEcho__dbg__setBreakPoint" source="_w2o5kErcEemr9sBDNiEkTg" target="_w2o5kErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w2xcckrcEemr9sBDNiEkTg" name="Debug__DoEcho__dbg__setBreakPoint__693">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w2xccUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wWLQ0ErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w2yDgErcEemr9sBDNiEkTg" name="Debug__DoEcho__dbg__remBreakPoint" source="_w2o5kErcEemr9sBDNiEkTg" target="_w2o5kErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w2yqkErcEemr9sBDNiEkTg" name="Debug__DoEcho__dbg__remBreakPoint__694">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w2yDgUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wWLQ0ErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w2zRoErcEemr9sBDNiEkTg" name="Debug__DoEcho__dbg__viewBreakPoints" source="_w2o5kErcEemr9sBDNiEkTg" target="_w2o5kErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w2zRokrcEemr9sBDNiEkTg" name="Debug__DoEcho__dbg__viewBreakPoints__695">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w2zRoUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wWLQ0ErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w2z4sErcEemr9sBDNiEkTg" name="Debug__DoEcho__dbg__dbgSetExecMode" source="_w2o5kErcEemr9sBDNiEkTg" target="_w2o5kErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w20fwErcEemr9sBDNiEkTg" name="Debug__DoEcho__dbg__dbgSetExecMode__696">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w2z4sUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wWLQ0ErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w21G0ErcEemr9sBDNiEkTg" name="Debug__DoEcho__dbg__dbgDeferMsg" source="_w2o5kErcEemr9sBDNiEkTg" target="_w2o5kErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w21G0krcEemr9sBDNiEkTg" name="Debug__DoEcho__dbg__dbgDeferMsg__697">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w21G0UrcEemr9sBDNiEkTg" name="Debug__MSG" port="_PdYSYAg0Eea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w3ZHgUrcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8" source="_w39IMErcEemr9sBDNiEkTg" target="_w3WEMErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3ZukErcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__713">
                <language>C++</language>
                <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;CheckConfig&quot;,&quot;BeSlave&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsSlave&quot;,&quot;NokeepAlive&quot;,&quot;TryBeMaster&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsMaster&quot;,&quot;KeepAlive&quot;,&quot;RunAsMaster&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Slave&quot;,&quot;backtoslave&quot;,&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsMaster&quot;,&quot;ServerFaliure&quot;,&quot;Failure&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;BeMaster&quot;,&quot;BeingMaster&quot;,&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Init&quot;,&quot;&quot;,&quot;StandBy&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;init&quot;,&quot;&quot;,&quot;WaitForEcho&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;server2Failure&quot;,&quot;Running&quot;,&quot;IAmAlive&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;Server1Failure&quot;,&quot;Running&quot;,&quot;IAmAlive&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Initial1&quot;,&quot;&quot;,&quot;RunAsSlave&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;ReadConfig&quot;,&quot;configLoaded&quot;,&quot;Config&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;MasterAnnouncment&quot;,&quot;Running&quot;,&quot;IAMMaster&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice1&quot;,&quot;ActiveMode&quot;,&quot;BeMaster&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsSlave&quot;,&quot;KeepAliveMsg&quot;,&quot;RunAsSlave&quot;,&quot;IAmAlive&quot;,&quot;FailOver&quot;);
Debug__SRO.addTransitionsFromState(&quot;ExitPoint1&quot;,&quot;&quot;,&quot;BeMaster&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;StandBy&quot;,&quot;&quot;,&quot;CheckConfig&quot;,&quot;StartUp&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Running&quot;,&quot;QueryConfig&quot;,&quot;Running&quot;,&quot;QueryConfig&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Config&quot;,&quot;ConfigNOK&quot;,&quot;ConfigFailure&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Failure&quot;,&quot;purgeotherMessage&quot;,&quot;Failure&quot;,&quot;*&quot;,&quot;Services&quot;);
Debug__SRO.addTransitionsFromState(&quot;Failure&quot;,&quot;purgeotherMessage&quot;,&quot;Failure&quot;,&quot;*&quot;,&quot;FailOver&quot;);
Debug__SRO.addTransitionsFromState(&quot;CheckConfig&quot;,&quot;initTimer&quot;,&quot;RunAsMaster&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Failure&quot;,&quot;Recover&quot;,&quot;Choice1&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsMaster&quot;,&quot;MasterAnnounce&quot;,&quot;RunAsMaster&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;ConfigFailure&quot;,&quot;RetryConfig&quot;,&quot;ReadConfig&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice2&quot;,&quot;CheckNoMaster&quot;,&quot;ExitPoint1&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Config&quot;,&quot;configOK&quot;,&quot;Running&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WaitForEcho&quot;,&quot;DoEcho&quot;,&quot;WaitForEcho&quot;,&quot;Echo&quot;,&quot;Echo&quot;);
Debug__SRO.addTransitionsFromState(&quot;Init&quot;,&quot;&quot;,&quot;ReadConfig&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;TryBeMaster&quot;,&quot;ReplyConfig&quot;,&quot;Choice2&quot;,&quot;ReplyConfig&quot;,&quot;ConfigProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice2&quot;,&quot;backtoslave1&quot;,&quot;Slave&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;RunAsMaster&quot;,&quot;ServiceRequest&quot;,&quot;RunAsMaster&quot;,&quot;Request&quot;,&quot;Services&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice1&quot;,&quot;PassiveMode&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
              </effect>
              <trigger xmi:id="_w3-9YErcEemr9sBDNiEkTg" name="ConnectionEstablished" port="_wWLQ0ErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
              </trigger>
            </transition>
            <transition xmi:id="_w3aVoErcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__S" guard="_w3a8sUrcEemr9sBDNiEkTg" source="_w3WEMErcEemr9sBDNiEkTg" target="_w3X5YUrcEemr9sBDNiEkTg">
              <ownedRule xmi:id="_w3a8sUrcEemr9sBDNiEkTg" name="Debug__Guardinit__WaitForEcho__8">
                <specification xmi:type="uml:OpaqueExpression" xmi:id="_w3a8sErcEemr9sBDNiEkTg" name="Debug__Guardinit__WaitForEcho__8">
                  <language>C++</language>
                  <body>return Debug__SRO.checkDebug(&quot;init&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
                </specification>
              </ownedRule>
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3bjwErcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__S__715">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__init__WaitForEcho__8__S&quot;,(char *)&quot;Debug__Path__init__WaitForEcho__8&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w3dY8ErcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__E" source="_w3YgcUrcEemr9sBDNiEkTg" target="_cfbzcAg0Eea_md0mpENoqg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3dY8UrcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__E__716">
                <language>C++</language>
                <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__init__WaitForEcho__8__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WaitForEcho&quot;,(char *)&quot;&quot;);
</body>
              </effect>
            </transition>
            <transition xmi:id="_w3enEErcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__dbg__varChange" source="_w3WrQUrcEemr9sBDNiEkTg" target="_w3WrQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3fOIUrcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__dbg__varChange__718">
                <language>C++</language>
                <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
              </effect>
              <trigger xmi:id="_w3fOIErcEemr9sBDNiEkTg" name="Debug__MSG" port="_wWLQ0ErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
              </trigger>
            </transition>
            <transition xmi:id="_w3gcQErcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__dbg__setBreakPoint" source="_w3WrQUrcEemr9sBDNiEkTg" target="_w3WrQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3hDUErcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__dbg__setBreakPoint__719">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w3gcQUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wWLQ0ErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w3hqYErcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__dbg__remBreakPoint" source="_w3WrQUrcEemr9sBDNiEkTg" target="_w3WrQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3hqYkrcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__dbg__remBreakPoint__720">
                <language>C++</language>
                <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w3hqYUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wWLQ0ErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w3iRcErcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__dbg__viewBreakPoints" source="_w3WrQUrcEemr9sBDNiEkTg" target="_w3WrQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3i4gErcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__dbg__viewBreakPoints__721">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w3iRcUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wWLQ0ErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w3jfkErcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__dbg__dbgSetExecMode" source="_w3WrQUrcEemr9sBDNiEkTg" target="_w3WrQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3jfkkrcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__dbg__dbgSetExecMode__722">
                <language>C++</language>
                <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
              </effect>
              <trigger xmi:id="_w3jfkUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_wWLQ0ErcEemr9sBDNiEkTg">
                <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
              </trigger>
            </transition>
            <transition xmi:id="_w3kGoErcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__dbg__dbgDeferMsg" source="_w3WrQUrcEemr9sBDNiEkTg" target="_w3WrQUrcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3kGokrcEemr9sBDNiEkTg" name="Debug__init__WaitForEcho__8__dbg__dbgDeferMsg__723">
                <language>C++</language>
                <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
              </effect>
              <trigger xmi:id="_w3kGoUrcEemr9sBDNiEkTg" name="Debug__MSG" port="_PdYSYAg0Eea_md0mpENoqg">
                <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
              </trigger>
            </transition>
            <transition xmi:id="_w3-WUUrcEemr9sBDNiEkTg" name="Debug__InitDebug" source="_bHyrEAg0Eea_md0mpENoqg" target="_w39IMErcEemr9sBDNiEkTg">
              <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3-WUkrcEemr9sBDNiEkTg" name="DebugCheck">
                <language>C++</language>
                <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
              </effect>
            </transition>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_bHyrEAg0Eea_md0mpENoqg" name="init"/>
            <subvertex xmi:type="uml:State" xmi:id="_cfbzcAg0Eea_md0mpENoqg" name="WaitForEcho">
              <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w4X-8ErcEemr9sBDNiEkTg" name="WaitForEcho__735">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::WaitForEcho&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </entry>
              <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w4YmAErcEemr9sBDNiEkTg" name="WaitForEcho__736">
                <language>C++</language>
                <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::WaitForEcho&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
              </exit>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w2nEYErcEemr9sBDNiEkTg" name="Debug__Path__DoEcho" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w2o5kErcEemr9sBDNiEkTg" name="Debug__C__DoEcho">
              <connectionPoint xmi:id="_w2qHsUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w2rV0ErcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w2o5kUrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_w270gErcEemr9sBDNiEkTg" name="Debug__init__trans__DoEcho" source="_w2qHsUrcEemr9sBDNiEkTg" target="_w24KIErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3LsIErcEemr9sBDNiEkTg" name="Debug__init__trans__DoEcho__703">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__init__trans__DoEcho&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__WaitForEcho&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w270gUrcEemr9sBDNiEkTg" name="Debug__Ex__WaitForEcho" source="_w24KIErcEemr9sBDNiEkTg" target="_w24xMErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3NhUErcEemr9sBDNiEkTg" name="Debug__Ex__WaitForEcho__705">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__Ex__WaitForEcho&quot;,(char *)&quot;Debug__B__Ex__WaitForEcho&quot;,(char *)&quot;Debug__B__Ac__DoEcho&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w270gkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wWLQ0ErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w270g0rcEemr9sBDNiEkTg" name="Debug__AC__DoEcho" source="_w24xMErcEemr9sBDNiEkTg" target="_w25YQErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w28bkErcEemr9sBDNiEkTg" name="DoEcho" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;EchoCapsule: The Echo message was recieved\n&quot;;
    int tempid=msg->sapIndex0_;
    Echo.Echo().sendAt(tempid);
    std::cout&lt;&lt;&quot;EchoCapsule: The Echo message was replied\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__AC__DoEcho&quot;,(char *)&quot;Debug__B__Ac__DoEcho&quot;,(char *)&quot;Debug__A__Ac__DoEcho&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w270hErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wWLQ0ErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w28bkUrcEemr9sBDNiEkTg" name="Debug__En__WaitForEcho" source="_w25YQErcEemr9sBDNiEkTg" target="_w26mYErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3QkoErcEemr9sBDNiEkTg" name="Debug__En__WaitForEcho__708">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__En__WaitForEcho&quot;,(char *)&quot;Debug__A__Ac__DoEcho&quot;,(char *)&quot;Debug__A__En__WaitForEcho&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w28bkkrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wWLQ0ErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w28bk0rcEemr9sBDNiEkTg" name="Debug__end__trans__DoEcho" source="_w26mYErcEemr9sBDNiEkTg" target="_w2rV0ErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3RywErcEemr9sBDNiEkTg" name="Debug__end__trans__DoEcho__710">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__end__trans__DoEcho&quot;,(char *)&quot;Debug__A__En__WaitForEcho&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w28blErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wWLQ0ErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w24KIErcEemr9sBDNiEkTg" name="Debug__B__Ex__WaitForEcho">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w24KIUrcEemr9sBDNiEkTg" name="Debug__B__Ex__WaitForEcho">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;WaitForEcho&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__B__Ex__WaitForEcho&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w29psUrcEemr9sBDNiEkTg" name="Debug__B__Ex__WaitForEcho__698">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__B__Ex__WaitForEcho&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w24xMErcEemr9sBDNiEkTg" name="Debug__B__Ac__DoEcho">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w24xMUrcEemr9sBDNiEkTg" name="Debug__B__Ac__DoEcho">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;WaitForEcho&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;DoEcho&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__B__Ac__DoEcho&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w3AtAErcEemr9sBDNiEkTg" name="Debug__B__Ac__DoEcho__699">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__B__Ac__DoEcho&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w25YQErcEemr9sBDNiEkTg" name="Debug__A__Ac__DoEcho">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w25YQUrcEemr9sBDNiEkTg" name="Debug__A__Ac__DoEcho">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;DoEcho&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WaitForEcho&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__A__Ac__DoEcho&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w3CiMUrcEemr9sBDNiEkTg" name="Debug__A__Ac__DoEcho__700">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__A__Ac__DoEcho&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w26mYErcEemr9sBDNiEkTg" name="Debug__A__En__WaitForEcho">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w26mYUrcEemr9sBDNiEkTg" name="Debug__A__En__WaitForEcho">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;WaitForEcho&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__A__En__WaitForEcho&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w3EXYErcEemr9sBDNiEkTg" name="Debug__A__En__WaitForEcho__701">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__DoEcho::Region1::Debug__A__En__WaitForEcho&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:Pseudostate" xmi:id="_w3WEMErcEemr9sBDNiEkTg" name="Debug__Path__init__WaitForEcho__8" kind="choice"/>
            <subvertex xmi:type="uml:State" xmi:id="_w3WrQUrcEemr9sBDNiEkTg" name="Debug__C__init__WaitForEcho__8">
              <connectionPoint xmi:id="_w3X5YUrcEemr9sBDNiEkTg" name="en" kind="entryPoint"/>
              <connectionPoint xmi:id="_w3YgcUrcEemr9sBDNiEkTg" name="ex" kind="exitPoint"/>
              <region xmi:id="_w3WrQkrcEemr9sBDNiEkTg" name="Region1">
                <transition xmi:id="_w3q0UErcEemr9sBDNiEkTg" name="Debug__init__trans__init__WaitForEcho__8" source="_w3X5YUrcEemr9sBDNiEkTg" target="_w3nJ8UrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3z-QErcEemr9sBDNiEkTg" name="Debug__init__trans__init__WaitForEcho__8__728">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__init__WaitForEcho__8::Region1::Debug__init__trans__init__WaitForEcho__8&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__init__WaitForEcho__8&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                </transition>
                <transition xmi:id="_w3q0UUrcEemr9sBDNiEkTg" name="Debug__Ac__init__WaitForEcho__8" source="_w3nJ8UrcEemr9sBDNiEkTg" target="_w3oYEErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w3rbYUrcEemr9sBDNiEkTg" name="init" visibility="public" isReentrant="true">
                    <language>C++</language>
                    <body>    std::cout&lt;&lt;&quot;EchoCapsule: Intializing\n&quot;;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__init__WaitForEcho__8::Region1::Debug__Ac__init__WaitForEcho__8&quot;,(char *)&quot;Debug__B__Ac__init__WaitForEcho__8&quot;,(char *)&quot;Debug__A__Ac__init__WaitForEcho__8&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w3rbYErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wWLQ0ErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w3sCcErcEemr9sBDNiEkTg" name="Debug__En__WaitForEcho" source="_w3oYEErcEemr9sBDNiEkTg" target="_w3pmMErcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w33BkErcEemr9sBDNiEkTg" name="Debug__En__WaitForEcho__731">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__init__WaitForEcho__8::Region1::Debug__En__WaitForEcho&quot;,(char *)&quot;Debug__A__Ac__init__WaitForEcho__8&quot;,(char *)&quot;Debug__A__En__init__WaitForEcho__8&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w3sCcUrcEemr9sBDNiEkTg" name="Debug__Exec" port="_wWLQ0ErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <transition xmi:id="_w3sCckrcEemr9sBDNiEkTg" name="Debug__end__trans__init__WaitForEcho__8" source="_w3pmMErcEemr9sBDNiEkTg" target="_w3YgcUrcEemr9sBDNiEkTg">
                  <effect xmi:type="uml:OpaqueBehavior" xmi:id="_w34PsErcEemr9sBDNiEkTg" name="Debug__end__trans__init__WaitForEcho__8__733">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__init__WaitForEcho__8::Region1::Debug__end__trans__init__WaitForEcho__8&quot;,(char *)&quot;Debug__A__En__init__WaitForEcho__8&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                  </effect>
                  <trigger xmi:id="_w3spgErcEemr9sBDNiEkTg" name="Debug__Exec" port="_wWLQ0ErcEemr9sBDNiEkTg">
                    <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                  </trigger>
                </transition>
                <subvertex xmi:type="uml:State" xmi:id="_w3nJ8UrcEemr9sBDNiEkTg" name="Debug__B__Ac__init__WaitForEcho__8">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w3nxAErcEemr9sBDNiEkTg" name="Debug__B__Ac__init__WaitForEcho__8">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;init__WaitForEcho__8&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__init__WaitForEcho__8::Region1::Debug__B__Ac__init__WaitForEcho__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w3tQkUrcEemr9sBDNiEkTg" name="Debug__B__Ac__init__WaitForEcho__8__724">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__init__WaitForEcho__8::Region1::Debug__B__Ac__init__WaitForEcho__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w3oYEErcEemr9sBDNiEkTg" name="Debug__A__Ac__init__WaitForEcho__8">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w3oYEUrcEemr9sBDNiEkTg" name="Debug__A__Ac__init__WaitForEcho__8">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;init__WaitForEcho__8&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WaitForEcho&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__init__WaitForEcho__8::Region1::Debug__A__Ac__init__WaitForEcho__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w3vFwUrcEemr9sBDNiEkTg" name="Debug__A__Ac__init__WaitForEcho__8__725">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__init__WaitForEcho__8::Region1::Debug__A__Ac__init__WaitForEcho__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
                <subvertex xmi:type="uml:State" xmi:id="_w3pmMErcEemr9sBDNiEkTg" name="Debug__A__En__init__WaitForEcho__8">
                  <entry xmi:type="uml:OpaqueBehavior" xmi:id="_w3qNQErcEemr9sBDNiEkTg" name="Debug__A__En__init__WaitForEcho__8">
                    <language>C++</language>
                    <body>if (not(Debug__SRO.checkDebug(&quot;WaitForEcho&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__init__WaitForEcho__8::Region1::Debug__A__En__init__WaitForEcho__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </entry>
                  <exit xmi:type="uml:OpaqueBehavior" xmi:id="_w3yJEErcEemr9sBDNiEkTg" name="Debug__A__En__init__WaitForEcho__8__726">
                    <language>C++</language>
                    <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;Replication::Utility::EchoCapsule::StateMachine1::Region1::Debug__C__init__WaitForEcho__8::Region1::Debug__A__En__init__WaitForEcho__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                  </exit>
                </subvertex>
              </region>
            </subvertex>
            <subvertex xmi:type="uml:State" xmi:id="_w39IMErcEemr9sBDNiEkTg" name="Debug__InitState"/>
          </region>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wWJboUrcEemr9sBDNiEkTg" name="Debug__recallAllMsg" specification="_wWJboErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>Echo.recallAll();
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wWeLwUrcEemr9sBDNiEkTg" name="Debug__variablesViewMethod" specification="_wWeLwErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>std::string tempS=&quot;&quot;;
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wWjrUErcEemr9sBDNiEkTg" name="Debug__variablesChange" specification="_wWh2IErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);

    return false;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wXHE8ErcEemr9sBDNiEkTg" name="Debug__sendEvent" specification="_wWwfoErcEemr9sBDNiEkTg">
          <language>C++</language>
          <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_wWJboErcEemr9sBDNiEkTg" name="Debug__recallAllMsg" visibility="private" method="_wWJboUrcEemr9sBDNiEkTg"/>
        <ownedOperation xmi:id="_wWeLwErcEemr9sBDNiEkTg" name="Debug__variablesView" visibility="private" method="_wWeLwUrcEemr9sBDNiEkTg"/>
        <ownedOperation xmi:id="_wWh2IErcEemr9sBDNiEkTg" name="Debug__variablesChange" visibility="private" method="_wWjrUErcEemr9sBDNiEkTg">
          <ownedParameter xmi:id="_wWh2IUrcEemr9sBDNiEkTg" name="methodReturn" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wWidMErcEemr9sBDNiEkTg" name="varName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wWjEQErcEemr9sBDNiEkTg" name="varValue">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_wWwfoErcEemr9sBDNiEkTg" name="Debug__sendEvent" visibility="private" method="_wXHE8ErcEemr9sBDNiEkTg">
          <ownedParameter xmi:id="_wWxGsErcEemr9sBDNiEkTg" name="eventSourceKind">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wWy74ErcEemr9sBDNiEkTg" name="eventType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wW0xEErcEemr9sBDNiEkTg" name="instanceName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wW2mQErcEemr9sBDNiEkTg" name="capsuleIndex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wW3NUErcEemr9sBDNiEkTg" name="signalName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wXAXQErcEemr9sBDNiEkTg" name="capsuleName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wXEosErcEemr9sBDNiEkTg" name="sourceName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wXFPwErcEemr9sBDNiEkTg" name="reserve1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wXF20ErcEemr9sBDNiEkTg" name="reserve2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_wXGd4ErcEemr9sBDNiEkTg" name="reserve3">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_nlBdQAgzEea_md0mpENoqg" name="Echo">
        <packagedElement xmi:type="uml:Collaboration" xmi:id="_nk_BAAgzEea_md0mpENoqg" name="Echo">
          <interfaceRealization xmi:id="_nlGVwAgzEea_md0mpENoqg" client="_nk_BAAgzEea_md0mpENoqg" supplier="_nlD5gAgzEea_md0mpENoqg" contract="_nlD5gAgzEea_md0mpENoqg">
            <name xsi:nil="true"/>
          </interfaceRealization>
          <interfaceRealization xmi:id="_nlZQsAgzEea_md0mpENoqg" client="_nk_BAAgzEea_md0mpENoqg" supplier="_nlTKEAgzEea_md0mpENoqg" contract="_nlTKEAgzEea_md0mpENoqg">
            <name xsi:nil="true"/>
          </interfaceRealization>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_nlD5gAgzEea_md0mpENoqg" name="Echo"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_nlL1UAgzEea_md0mpENoqg" name="Echo~"/>
        <packagedElement xmi:type="uml:Usage" xmi:id="_nlQGwAgzEea_md0mpENoqg" client="_nk_BAAgzEea_md0mpENoqg" supplier="_nlL1UAgzEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_nlR78AgzEea_md0mpENoqg" name="*"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_nlTKEAgzEea_md0mpENoqg" name="EchoIO">
          <ownedOperation xmi:id="_7w0BIAgzEea_md0mpENoqg" name="Echo"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Usage" xmi:id="_nlae0AgzEea_md0mpENoqg" client="_nk_BAAgzEea_md0mpENoqg" supplier="_nlTKEAgzEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_7w0oMAgzEea_md0mpENoqg" operation="_7w0BIAgzEea_md0mpENoqg">
          <name xsi:nil="true"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Y1UDYAg6Eea_md0mpENoqg" name="SystemConfig">
        <ownedAttribute xmi:id="_lX6oUAg6Eea_md0mpENoqg" name="ConfigOK">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_lX6oUQg6Eea_md0mpENoqg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_rA4b8Ag6Eea_md0mpENoqg" name="RunningMode">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_xR7jQAg6Eea_md0mpENoqg" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_4Gg1cAg6Eea_md0mpENoqg" name="MasterId">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_7FhkQAg6Eea_md0mpENoqg" name="MasterName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_6tXsMAmpEea_md0mpENoqg" name="MasterList">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Hzi4QAmqEea_md0mpENoqg" value="2"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_HzxhwAmqEea_md0mpENoqg" value="2"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_JwlzwAmqEea_md0mpENoqg"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_cYIKwAimEea_md0mpENoqg" name="loadConfig" specification="_QF0roAimEea_md0mpENoqg">
          <language>C++</language>
          <body>{
    /* UMLRTGEN-USERREGION-BEGIN platform:/resource/Replication/Replication.uml Replication::Configuration operation loadConfig */
    std::cout&lt;&lt;&quot;Config Class: load configuration from file\n&quot;;
    char result[PATH_MAX];
    readlink( &quot;/proc/self/exe&quot;, result, PATH_MAX );
    string temps=string(result);
    size_t tempP=temps.rfind('/');
    if (tempP>0)
    {
    temps=temps.substr(0,tempP);
    }
    else
    temps=&quot;&quot;;
    string MasterConfigFileName=&quot;./Master.config&quot;;
    string RunningModeConfigFileName=&quot;./RunningMode.config&quot;;
    string MasterConfigPath=temps+MasterConfigFileName;
    string RunningModeConfigPath=temps+RunningModeConfigFileName;
    cout &lt;&lt; RunningModeConfigPath &lt;&lt; endl;
    //ifstream RunningModeConfigFile(RunningModeConfigPath.c_str());
    ifstream RunningModeConfigFile(&quot;./RunningMode.config&quot;);
    string line;
    if (RunningModeConfigFile.is_open())
    {
    (getline(RunningModeConfigFile,line));
    {
    if (atoi(line.c_str())==0)
    {
    this->RunningMode=0;
    this->ConfigOK=true;
    RunningModeConfigFile.close();
    cout&lt;&lt;&quot;Configuration Loaded successfully, the running mode is active\n&quot;;
    //            			return true;
    }
    else if (atoi(line.c_str())==1)
    {
    this->RunningMode=1;
    //ifstream MasterConfigFile(MasterConfigPath.c_str());
    ifstream MasterConfigFile(&quot;Master.config&quot;);

    if (MasterConfigFile.is_open() &amp;&amp; (getline(MasterConfigFile,line)))
    if (line==&quot;server1&quot; || line==&quot;server2&quot;)
    {
    this->MasterName= new char[line.size()+1];
    strcpy(this->MasterName,line.c_str());
    cout &lt;&lt;&quot;Master Name is:&quot;&lt;&lt; this->MasterName&lt;&lt;endl;
    this->ConfigOK=true;
    cout &lt;&lt; &quot;configuration Loaded successfully, the running mode is passive|&quot;
    &lt;&lt;&quot; Master name is : &quot;&lt;&lt;this->MasterName&lt;&lt;endl;
    RunningModeConfigFile.close();
    MasterConfigFile.close();
    //           					return true;
    }
    else
    {
    cout&lt;&lt;&quot;Master Name is wrong, please fix it\n&quot;;
    this->ConfigOK=false;
    //           					return false;
    }
    else
    {
    cout&lt;&lt;&quot;Master config file(Master.config) cann't be loaded, please fix it\n&quot;;
    this->ConfigOK=false;
    //         				return false;
    }
    }
    else
    {
    cout&lt;&lt; &quot;The running mode value is incorrect, please fix that\n&quot;;
    this->ConfigOK=false;
    //       			return false;
    }
    }
    }
    else
    {
    cout&lt;&lt;&quot;The Running Mode config(RunningMode.config) file can't be loaded, please fix it\n&quot;;
    this->ConfigOK=false;
    //     	return false;
    }/* UMLRTGEN-USERREGION-END */
}
</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_QF0roAimEea_md0mpENoqg" name="loadConfig" method="_cYIKwAimEea_md0mpENoqg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_4_QwUAnEEeaGqPUk-4V4qQ" name="Services">
        <packagedElement xmi:type="uml:Collaboration" xmi:id="_4--ccAnEEeaGqPUk-4V4qQ" name="Services">
          <interfaceRealization xmi:id="_5AwlIAnEEeaGqPUk-4V4qQ" client="_4--ccAnEEeaGqPUk-4V4qQ" supplier="_5AqegAnEEeaGqPUk-4V4qQ" contract="_5AqegAnEEeaGqPUk-4V4qQ">
            <name xsi:nil="true"/>
          </interfaceRealization>
          <interfaceRealization xmi:id="_5A8LUAnEEeaGqPUk-4V4qQ" client="_4--ccAnEEeaGqPUk-4V4qQ" supplier="_5A5IAAnEEeaGqPUk-4V4qQ" contract="_5A5IAAnEEeaGqPUk-4V4qQ">
            <name xsi:nil="true"/>
          </interfaceRealization>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_5AqegAnEEeaGqPUk-4V4qQ" name="Services">
          <ownedOperation xmi:id="_P49E4AnFEeaGqPUk-4V4qQ" name="Reply">
            <ownedParameter xmi:id="_P49E4QnFEeaGqPUk-4V4qQ" name="Result">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
              <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_P49E4gnFEeaGqPUk-4V4qQ" value="0"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_5AzBYAnEEeaGqPUk-4V4qQ" name="Services~">
          <ownedOperation xmi:id="_G3ENoAnFEeaGqPUk-4V4qQ" name="Request">
            <ownedParameter xmi:id="_G3ENoQnFEeaGqPUk-4V4qQ" name="ServiceID">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
              <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_G3ENognFEeaGqPUk-4V4qQ" value="0"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Usage" xmi:id="_5A3S0AnEEeaGqPUk-4V4qQ" client="_4--ccAnEEeaGqPUk-4V4qQ" supplier="_5AzBYAnEEeaGqPUk-4V4qQ">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_5A354AnEEeaGqPUk-4V4qQ" name="*"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_5A5IAAnEEeaGqPUk-4V4qQ" name="ServicesIO"/>
        <packagedElement xmi:type="uml:Usage" xmi:id="_5A_1sAnEEeaGqPUk-4V4qQ" client="_4--ccAnEEeaGqPUk-4V4qQ" supplier="_5A5IAAnEEeaGqPUk-4V4qQ">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_G3K7UAnFEeaGqPUk-4V4qQ" operation="_G3ENoAnFEeaGqPUk-4V4qQ">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_P4-6EAnFEeaGqPUk-4V4qQ" operation="_P49E4AnFEeaGqPUk-4V4qQ">
          <name xsi:nil="true"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_f2zWUApBEeaGqPUk-4V4qQ" name="FailOver">
        <packagedElement xmi:type="uml:Collaboration" xmi:id="_f2ud0ApBEeaGqPUk-4V4qQ" name="FailOver">
          <interfaceRealization xmi:id="_f4EhoApBEeaGqPUk-4V4qQ" client="_f2ud0ApBEeaGqPUk-4V4qQ" supplier="_f39z8ApBEeaGqPUk-4V4qQ" contract="_f39z8ApBEeaGqPUk-4V4qQ">
            <name xsi:nil="true"/>
          </interfaceRealization>
          <interfaceRealization xmi:id="_f4O5sApBEeaGqPUk-4V4qQ" client="_f2ud0ApBEeaGqPUk-4V4qQ" supplier="_f4L2YApBEeaGqPUk-4V4qQ" contract="_f4L2YApBEeaGqPUk-4V4qQ">
            <name xsi:nil="true"/>
          </interfaceRealization>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_f39z8ApBEeaGqPUk-4V4qQ" name="FailOver"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_f4FvwApBEeaGqPUk-4V4qQ" name="FailOver~"/>
        <packagedElement xmi:type="uml:Usage" xmi:id="_f4KoQApBEeaGqPUk-4V4qQ" client="_f2ud0ApBEeaGqPUk-4V4qQ" supplier="_f4FvwApBEeaGqPUk-4V4qQ">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_f4LPUApBEeaGqPUk-4V4qQ" name="*"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_f4L2YApBEeaGqPUk-4V4qQ" name="FailOverIO">
          <ownedOperation xmi:id="_xM6GgApBEeaGqPUk-4V4qQ" name="IAmAlive">
            <ownedParameter xmi:id="_xM6GgQpBEeaGqPUk-4V4qQ" name="ServerName">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
        <packagedElement xmi:type="uml:Usage" xmi:id="_f4Qu4ApBEeaGqPUk-4V4qQ" client="_f2ud0ApBEeaGqPUk-4V4qQ" supplier="_f4L2YApBEeaGqPUk-4V4qQ">
          <name xsi:nil="true"/>
        </packagedElement>
        <packagedElement xmi:type="uml:CallEvent" xmi:id="_xM6tkApBEeaGqPUk-4V4qQ" operation="_xM6GgApBEeaGqPUk-4V4qQ">
          <name xsi:nil="true"/>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_gDfqsAghEea_md0mpENoqg" name="Simulator">
      <packagedElement xmi:type="uml:Dependency" xmi:id="_m1qiEAghEea_md0mpENoqg" client="_lYTBoAggEea_md0mpENoqg" supplier="_rPgFkAggEea_md0mpENoqg"/>
      <packagedElement xmi:type="uml:Dependency" xmi:id="_nyBcoAghEea_md0mpENoqg" client="_gDfqsAghEea_md0mpENoqg" supplier="_z1vioAggEea_md0mpENoqg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_d9MBUAgoEea_md0mpENoqg" name="Simulator" isActive="true">
        <ownedAttribute xmi:id="_ljfrYAgoEea_md0mpENoqg" name="server1" visibility="protected" type="_xCGHkAgmEea_md0mpENoqg" isOrdered="true" aggregation="composite">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ljjVwAgoEea_md0mpENoqg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ljjVwQgoEea_md0mpENoqg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_odv2AAgoEea_md0mpENoqg" name="client" visibility="protected" type="_zpdLYAgmEea_md0mpENoqg" isOrdered="true" aggregation="composite">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_odySQQgoEea_md0mpENoqg" value="5"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ody5UAgoEea_md0mpENoqg" value="5"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_trcC4AgoEea_md0mpENoqg" name="ENV" visibility="protected" type="_sMZ5EAgoEea_md0mpENoqg" isOrdered="true" aggregation="composite">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_trfGMAgoEea_md0mpENoqg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_trfGMQgoEea_md0mpENoqg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_6qCFoAg7Eea_md0mpENoqg" name="server2" visibility="protected" type="_xCGHkAgmEea_md0mpENoqg" isOrdered="true" aggregation="composite">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_6qGXEAg7Eea_md0mpENoqg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6qGXEQg7Eea_md0mpENoqg" value="1"/>
        </ownedAttribute>
        <ownedConnector xmi:id="_O1v3cOM6EeaTpaLNj-zYpw" name="RTConnector6">
          <end xmi:id="_O1xsoOM6EeaTpaLNj-zYpw" partWithPort="_odv2AAgoEea_md0mpENoqg" role="_fL3OQAnFEeaGqPUk-4V4qQ"/>
          <end xmi:id="_O1xsoeM6EeaTpaLNj-zYpw" partWithPort="_ljfrYAgoEea_md0mpENoqg" role="_pQ6HcAnMEeaGqPUk-4V4qQ"/>
        </ownedConnector>
        <ownedConnector xmi:id="_P9Q5IOM6EeaTpaLNj-zYpw" name="RTConnector7">
          <end xmi:id="_P9SHQOM6EeaTpaLNj-zYpw" partWithPort="_odv2AAgoEea_md0mpENoqg" role="_lRZpIAnFEeaGqPUk-4V4qQ"/>
          <end xmi:id="_P9SHQeM6EeaTpaLNj-zYpw" partWithPort="_6qCFoAg7Eea_md0mpENoqg" role="_pQ6HcAnMEeaGqPUk-4V4qQ"/>
        </ownedConnector>
        <ownedConnector xmi:id="_zuXWQONAEeaTpaLNj-zYpw" name="RTConnector8">
          <end xmi:id="_zuZygONAEeaTpaLNj-zYpw" partWithPort="_ljfrYAgoEea_md0mpENoqg" role="_HIvrsApCEeaGqPUk-4V4qQ"/>
          <end xmi:id="_zuZygeNAEeaTpaLNj-zYpw" partWithPort="_6qCFoAg7Eea_md0mpENoqg" role="_rmnI0OM8EeaTpaLNj-zYpw"/>
        </ownedConnector>
        <ownedConnector xmi:id="_0bs9YONAEeaTpaLNj-zYpw" name="RTConnector9">
          <end xmi:id="_0buLgONAEeaTpaLNj-zYpw" partWithPort="_6qCFoAg7Eea_md0mpENoqg" role="_HIvrsApCEeaGqPUk-4V4qQ"/>
          <end xmi:id="_0buLgeNAEeaTpaLNj-zYpw" partWithPort="_ljfrYAgoEea_md0mpENoqg" role="_rmnI0OM8EeaTpaLNj-zYpw"/>
        </ownedConnector>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_wRxR8ErcEemr9sBDNiEkTg" name="Debug__Top">
      <ownedAttribute xmi:id="_wSlxUErcEemr9sBDNiEkTg" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wSu7QErcEemr9sBDNiEkTg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_wSwJYErcEemr9sBDNiEkTg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_wTrWcErcEemr9sBDNiEkTg" name="Debug__Simulator" type="_d9MBUAgoEea_md0mpENoqg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wTtLoUrcEemr9sBDNiEkTg" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_wTtysErcEemr9sBDNiEkTg" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_lcu1sAggEea_md0mpENoqg">
      <eAnnotations xmi:id="_lcwq4AggEea_md0mpENoqg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.profile_1.0.0.201707181432.jar!/umlProfile/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_0p1pUAgxEea_md0mpENoqg">
      <eAnnotations xmi:id="_0p1pUQgxEea_md0mpENoqg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://PAPYRUS_ACTIONLANGUAGE_PROFILE/ActionLanguage-Profile.profile.uml#_Kv8EIKFXEeS_KNX0nfvIVQ"/>
      </eAnnotations>
      <appliedProfile href="pathmap://PAPYRUS_ACTIONLANGUAGE_PROFILE/ActionLanguage-Profile.profile.uml#ActionLanguage"/>
    </profileApplication>
    <profileApplication xmi:id="_iMahwAifEea_md0mpENoqg">
      <eAnnotations xmi:id="_iMbv4AifEea_md0mpENoqg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_iMeMIAifEea_md0mpENoqg">
      <eAnnotations xmi:id="_iMgBUAifEea_md0mpENoqg" source="PapyrusVersion">
        <details xmi:id="_iMgBUQifEea_md0mpENoqg" key="Version" value="0.0.11"/>
        <details xmi:id="_iMgBUgifEea_md0mpENoqg" key="Comment" value=""/>
        <details xmi:id="_iMgBUwifEea_md0mpENoqg" key="Copyright" value=""/>
        <details xmi:id="_iMgBVAifEea_md0mpENoqg" key="Date" value="2015-12-10"/>
        <details xmi:id="_iMgBVQifEea_md0mpENoqg" key="Author" value=""/>
      </eAnnotations>
      <eAnnotations xmi:id="_iMeMIQifEea_md0mpENoqg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.codegen.cpp.profile_1.0.0.201707181457.jar!/profiles/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_5AGSMAghEea_md0mpENoqg" base_Class="_4_oYIAghEea_md0mpENoqg"/>
  <UMLRealTime:Capsule xmi:id="_xCrWYAgmEea_md0mpENoqg" base_Class="_xCGHkAgmEea_md0mpENoqg"/>
  <UMLRealTime:Capsule xmi:id="_zp7FcAgmEea_md0mpENoqg" base_Class="_zpdLYAgmEea_md0mpENoqg"/>
  <UMLRealTime:Capsule xmi:id="_d9rwkAgoEea_md0mpENoqg" base_Class="_d9MBUAgoEea_md0mpENoqg"/>
  <UMLRealTime:CapsulePart xmi:id="_ljiusAgoEea_md0mpENoqg" base_Property="_ljfrYAgoEea_md0mpENoqg"/>
  <UMLRealTime:CapsulePart xmi:id="_odySQAgoEea_md0mpENoqg" base_Property="_odv2AAgoEea_md0mpENoqg"/>
  <UMLRealTime:Capsule xmi:id="_sM-g0AgoEea_md0mpENoqg" base_Class="_sMZ5EAgoEea_md0mpENoqg"/>
  <UMLRealTime:CapsulePart xmi:id="_trefIAgoEea_md0mpENoqg" base_Property="_trcC4AgoEea_md0mpENoqg"/>
  <UMLRealTime:ProtocolContainer xmi:id="_v05s8AgsEea_md0mpENoqg" base_Package="_v04e0AgsEea_md0mpENoqg"/>
  <UMLRealTime:RTMessageSet xmi:id="_v09-YAgsEea_md0mpENoqg" base_Interface="_v09XUAgsEea_md0mpENoqg"/>
  <UMLRealTime:RTMessageSet xmi:id="_v1KLoAgsEea_md0mpENoqg" base_Interface="_v1I9gAgsEea_md0mpENoqg" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_v1Q5UAgsEea_md0mpENoqg" base_Interface="_v1PrMAgsEea_md0mpENoqg" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_v1T8oAgsEea_md0mpENoqg" base_Collaboration="_v000cAgsEea_md0mpENoqg"/>
  <UMLRealTime:RTPort xmi:id="_GXxLAAgvEea_md0mpENoqg" isPublish="true" isWired="false" base_Port="_GXsSgAgvEea_md0mpENoqg"/>
  <UMLRealTime:RTPort xmi:id="_g3oVAAgvEea_md0mpENoqg" isWired="false" base_Port="_g3nG4AgvEea_md0mpENoqg"/>
  <UMLRealTime:RTPort xmi:id="_-3NuMAgvEea_md0mpENoqg" isWired="false" base_Port="_-3KD0AgvEea_md0mpENoqg"/>
  <UMLRealTime:Capsule xmi:id="_RMf8EAgzEea_md0mpENoqg" base_Class="_RLyKYAgzEea_md0mpENoqg"/>
  <UMLRealTime:ProtocolContainer xmi:id="_nlCrYAgzEea_md0mpENoqg" base_Package="_nlBdQAgzEea_md0mpENoqg"/>
  <UMLRealTime:RTMessageSet xmi:id="_nlFHoAgzEea_md0mpENoqg" base_Interface="_nlD5gAgzEea_md0mpENoqg"/>
  <UMLRealTime:RTMessageSet xmi:id="_nlO4oAgzEea_md0mpENoqg" base_Interface="_nlL1UAgzEea_md0mpENoqg" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_nlW0cAgzEea_md0mpENoqg" base_Interface="_nlTKEAgzEea_md0mpENoqg" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_nlbF4AgzEea_md0mpENoqg" base_Collaboration="_nk_BAAgzEea_md0mpENoqg"/>
  <UMLRealTime:RTPort xmi:id="_PdauoAg0Eea_md0mpENoqg" isPublish="true" isWired="false" base_Port="_PdYSYAg0Eea_md0mpENoqg"/>
  <UMLRealTime:CapsulePart xmi:id="_6qFwAAg7Eea_md0mpENoqg" base_Property="_6qCFoAg7Eea_md0mpENoqg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_l72A4AifEea_md0mpENoqg" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" implementationPreface="#include&lt;iostream>" base_Class="_sMZ5EAgoEea_md0mpENoqg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_ZYVLEAihEea_md0mpENoqg" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" implementationPreface="#include &lt;iostream>" base_Class="_RLyKYAgzEea_md0mpENoqg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_qp8qkAimEea_md0mpENoqg" implementationPreface="#include &lt;iostream>&#xA;#include &lt;fstream>&#xA;#include &lt;limits.h>&#xA;#include &lt;unistd.h>&#xA;using namespace std;" base_Class="_Y1UDYAg6Eea_md0mpENoqg"/>
  <UMLRealTime:RTPort xmi:id="_b2D_sAjLEea_md0mpENoqg" isWired="false" base_Port="_b1NrIAjLEea_md0mpENoqg"/>
  <UMLRealTime:RTPort xmi:id="_wQWSkAjLEea_md0mpENoqg" isWired="false" base_Port="_wQHCAAjLEea_md0mpENoqg"/>
  <UMLRealTime:RTPort xmi:id="_X4gvkAjMEea_md0mpENoqg" isWired="false" base_Port="_X4ceIAjMEea_md0mpENoqg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_6nxNAAkFEea_md0mpENoqg" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" implementationPreface="#include &lt;iostream>&#xA;#include &lt;cstdlib>" implementationEnding="" base_Class="_xCGHkAgmEea_md0mpENoqg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_skTr8AlKEea_md0mpENoqg" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" implementationPreface="#include &lt;iostream>&#xA;#include &lt;cstdlib>" base_Class="_zpdLYAgmEea_md0mpENoqg"/>
  <UMLRealTime:RTPort xmi:id="_iLgtsAmuEea_md0mpENoqg" isWired="false" base_Port="_iLeRcAmuEea_md0mpENoqg"/>
  <UMLRealTime:RTPort xmi:id="_oWjToAmuEea_md0mpENoqg" isWired="false" base_Port="_oWg3YAmuEea_md0mpENoqg"/>
  <UMLRealTime:RTPort xmi:id="_tQAV4AmuEea_md0mpENoqg" isWired="false" base_Port="_tP9SkAmuEea_md0mpENoqg"/>
  <UMLRealTime:ProtocolContainer xmi:id="_5AbN8AnEEeaGqPUk-4V4qQ" base_Package="_4_QwUAnEEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_5AuI4AnEEeaGqPUk-4V4qQ" base_Interface="_5AqegAnEEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_5A1doAnEEeaGqPUk-4V4qQ" base_Interface="_5AzBYAnEEeaGqPUk-4V4qQ" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_5A69MAnEEeaGqPUk-4V4qQ" base_Interface="_5A5IAAnEEeaGqPUk-4V4qQ" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_5BBq4AnEEeaGqPUk-4V4qQ" base_Collaboration="_4--ccAnEEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTPort xmi:id="_fMA_QAnFEeaGqPUk-4V4qQ" base_Port="_fL3OQAnFEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTPort xmi:id="_lRkBMAnFEeaGqPUk-4V4qQ" base_Port="_lRZpIAnFEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTPort xmi:id="_pQ9x0AnMEeaGqPUk-4V4qQ" base_Port="_pQ6HcAnMEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTPort xmi:id="_8sLrYAovEeaGqPUk-4V4qQ" isWired="false" base_Port="_8sGy4AovEeaGqPUk-4V4qQ"/>
  <UMLRealTime:ProtocolContainer xmi:id="_f22ZoApBEeaGqPUk-4V4qQ" base_Package="_f2zWUApBEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_f4CscApBEeaGqPUk-4V4qQ" base_Interface="_f39z8ApBEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_f4IMAApBEeaGqPUk-4V4qQ" base_Interface="_f4FvwApBEeaGqPUk-4V4qQ" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_f4NrkApBEeaGqPUk-4V4qQ" base_Interface="_f4L2YApBEeaGqPUk-4V4qQ" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_f4R9AApBEeaGqPUk-4V4qQ" base_Collaboration="_f2ud0ApBEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTPort xmi:id="_HIz9IApCEeaGqPUk-4V4qQ" base_Port="_HIvrsApCEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTPort xmi:id="_ZDu1IApDEeaGqPUk-4V4qQ" isWired="false" base_Port="_ZDrx0ApDEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTPort xmi:id="_Vj4_QApFEeaGqPUk-4V4qQ" isWired="false" base_Port="_Vj1U4ApFEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTPort xmi:id="_lxxyEApkEeaGqPUk-4V4qQ" isWired="false" base_Port="_lxs5kApkEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTPort xmi:id="_rXbzAApkEeaGqPUk-4V4qQ" isWired="false" base_Port="_rXZWwApkEeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTPort xmi:id="_8587kAs1EeaGqPUk-4V4qQ" isWired="false" base_Port="_855RMAs1EeaGqPUk-4V4qQ"/>
  <UMLRealTime:RTPort xmi:id="_mKiJYOM2EeaTpaLNj-zYpw" isWired="false" base_Port="_mKfGEOM2EeaTpaLNj-zYpw"/>
  <UMLRealTime:RTConnector xmi:id="_O1yTsOM6EeaTpaLNj-zYpw" base_Connector="_O1v3cOM6EeaTpaLNj-zYpw"/>
  <UMLRealTime:RTConnector xmi:id="_P9SuUOM6EeaTpaLNj-zYpw" base_Connector="_P9Q5IOM6EeaTpaLNj-zYpw"/>
  <UMLRealTime:RTPort xmi:id="_rmqMIOM8EeaTpaLNj-zYpw" base_Port="_rmnI0OM8EeaTpaLNj-zYpw"/>
  <UMLRealTime:RTConnector xmi:id="_zuZyguNAEeaTpaLNj-zYpw" base_Connector="_zuXWQONAEeaTpaLNj-zYpw"/>
  <UMLRealTime:RTConnector xmi:id="_0bvZoONAEeaTpaLNj-zYpw" base_Connector="_0bs9YONAEeaTpaLNj-zYpw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_71nSEPMWEeauO5SNGpOV7w" headerPreface="#include &lt;fstream>" base_Class="_4_oYIAghEea_md0mpENoqg"/>
  <RTCppProperties:AttributeProperties xmi:id="_gvmcIPMYEeauO5SNGpOV7w" type="std::ofstream" base_Property="_dCa_wPMYEeauO5SNGpOV7w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_b45wYKozEeiNHY6qjNhZ4w" base_Region="_lvCAwAlLEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_fAFjwKozEeiNHY6qjNhZ4w" base_Pseudostate="_hY-7oAlNEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTState xmi:id="_gOt6EKozEeiNHY6qjNhZ4w" base_State="_jLPjcAlNEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTState xmi:id="_hsv-UKozEeiNHY6qjNhZ4w" base_State="_UrcckAlOEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTState xmi:id="_i6NP8KozEeiNHY6qjNhZ4w" base_State="_hgSoEAlOEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_kA2H4KozEeiNHY6qjNhZ4w" base_Pseudostate="_Rrrc0AlvEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lJDGEKozEeiNHY6qjNhZ4w" base_Pseudostate="_Pyhf8Ap5EeaGqPUk-4V4qQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_mRbDYKozEeiNHY6qjNhZ4w" base_Pseudostate="_kLngAAp5EeaGqPUk-4V4qQ"/>
  <UMLRTStateMachines:RTState xmi:id="_nsAyEKozEeiNHY6qjNhZ4w" base_State="_2g5S0ONBEeaTpaLNj-zYpw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_o4vD4KozEeiNHY6qjNhZ4w" base_Pseudostate="_M8iZcONCEeaTpaLNj-zYpw"/>
  <UMLRTStateMachines:RTRegion xmi:id="_rpSf8KozEeiNHY6qjNhZ4w" base_Region="_ThAzEONCEeaTpaLNj-zYpw"/>
  <UMLRTStateMachines:RTState xmi:id="_tdqAkKozEeiNHY6qjNhZ4w" base_State="_Px2BIAqSEeaGqPUk-4V4qQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ud1rMKozEeiNHY6qjNhZ4w" base_Pseudostate="_NU8OsAszEeaGqPUk-4V4qQ"/>
  <UMLRTStateMachines:RTState xmi:id="_veq2EKozEeiNHY6qjNhZ4w" base_State="_ZaK1gAlOEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wg0PkKozEeiNHY6qjNhZ4w" base_Pseudostate="_5yefMAszEeaGqPUk-4V4qQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_xiP3YKozEeiNHY6qjNhZ4w" base_Pseudostate="_8WMAUONDEeaTpaLNj-zYpw"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_0dGe8KozEeiNHY6qjNhZ4w" base_StateMachine="_lT4V0AlLEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_880dQKozEeiNHY6qjNhZ4w" base_Pseudostate="_88oQAKozEeiNHY6qjNhZ4w"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_88_cYKozEeiNHY6qjNhZ4w" base_Pseudostate="_887yAKozEeiNHY6qjNhZ4w"/>
  <UMLRTStateMachines:RTRegion xmi:id="_Y4mLoKo0EeiNHY6qjNhZ4w" base_Region="_Bk0GwAlKEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_bQ-_UKo0EeiNHY6qjNhZ4w" base_Pseudostate="_Oll1cAlKEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTState xmi:id="_cpwwIKo0EeiNHY6qjNhZ4w" base_State="_Q5-S4AlKEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTState xmi:id="_du4lIKo0EeiNHY6qjNhZ4w" base_State="_IjppsAlhEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTState xmi:id="_eug2IKo0EeiNHY6qjNhZ4w" base_State="_aVMuMAmtEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTState xmi:id="_f8K8EKo0EeiNHY6qjNhZ4w" base_State="_fO-gkAmtEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTState xmi:id="_g871gKo0EeiNHY6qjNhZ4w" base_State="_uScfwAmtEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_h7dTQKo0EeiNHY6qjNhZ4w" base_Pseudostate="_qr_J4AnCEeaGqPUk-4V4qQ"/>
  <UMLRTStateMachines:RTState xmi:id="_jFMigKo0EeiNHY6qjNhZ4w" base_State="_KwFHIAo0EeaGqPUk-4V4qQ"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_k5P6EKo0EeiNHY6qjNhZ4w" base_StateMachine="_BKT8EAlKEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTState xmi:id="_Rg85wKpiEeiNHY6qjNhZ4w" base_State="_cfbzcAg0Eea_md0mpENoqg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_SuGpYKpiEeiNHY6qjNhZ4w" base_Pseudostate="_bHyrEAg0Eea_md0mpENoqg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_ZzTxgKpiEeiNHY6qjNhZ4w" base_Region="_abLcsAg0Eea_md0mpENoqg"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_bJC1YKpiEeiNHY6qjNhZ4w" base_StateMachine="_WlNQsAg0Eea_md0mpENoqg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_1LnmcKpiEeiNHY6qjNhZ4w" base_Pseudostate="_npsCMAgwEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTState xmi:id="_2O6PcKpiEeiNHY6qjNhZ4w" base_State="_sdehUAgwEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTState xmi:id="_3WYN0KpiEeiNHY6qjNhZ4w" base_State="__kywcAgwEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTState xmi:id="_4kr0AKpiEeiNHY6qjNhZ4w" base_State="_NvBagAgxEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5uXY4KpiEeiNHY6qjNhZ4w" base_Pseudostate="_dWznsAgxEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_8Lil8KpiEeiNHY6qjNhZ4w" base_Region="_jSIzIAgwEea_md0mpENoqg"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_BsmawKpjEeiNHY6qjNhZ4w" base_StateMachine="_gU8CMAgwEea_md0mpENoqg"/>
  <UMLRealTime:Capsule xmi:id="_wSGpIErcEemr9sBDNiEkTg" base_Class="_wRxR8ErcEemr9sBDNiEkTg"/>
  <UMLRealTime:CapsulePart xmi:id="_wSuUMErcEemr9sBDNiEkTg" base_Property="_wSlxUErcEemr9sBDNiEkTg"/>
  <UMLRealTime:CapsulePart xmi:id="_wTtLoErcEemr9sBDNiEkTg" base_Property="_wTrWcErcEemr9sBDNiEkTg"/>
  <UMLRealTime:RTPort xmi:id="_wUeAoErcEemr9sBDNiEkTg" isNotification="true" isWired="false" base_Port="_wUZIIErcEemr9sBDNiEkTg"/>
  <UMLRealTime:RTPort xmi:id="_wUhD8ErcEemr9sBDNiEkTg" base_Port="_wUZIIErcEemr9sBDNiEkTg"/>
  <RTCppProperties:AttributeProperties xmi:id="_wVWKYErcEemr9sBDNiEkTg" type="debugEvents::Event" base_Property="_wVTuIErcEemr9sBDNiEkTg"/>
  <RTCppProperties:AttributeProperties xmi:id="_wVbp8ErcEemr9sBDNiEkTg" type="SROManager" base_Property="_wVX_kErcEemr9sBDNiEkTg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_wVeGMErcEemr9sBDNiEkTg" base_Class="_sMZ5EAgoEea_md0mpENoqg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wVpsYErcEemr9sBDNiEkTg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_wVla8ErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wVsvsErcEemr9sBDNiEkTg" type="debugEvents::EVENTTYPE" base_Parameter="_wVrhkErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wVvzAErcEemr9sBDNiEkTg" type="const char *" base_Parameter="_wVt90ErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wVxoMErcEemr9sBDNiEkTg" type="const char *" base_Parameter="_wVwaEErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wV1SkErcEemr9sBDNiEkTg" type="const char *" base_Parameter="_wVyPQErcEemr9sBDNiEkTg"/>
  <UMLRealTime:RTPort xmi:id="_wWNGAErcEemr9sBDNiEkTg" isNotification="true" isWired="false" base_Port="_wWLQ0ErcEemr9sBDNiEkTg"/>
  <UMLRealTime:RTPort xmi:id="_wWSlkErcEemr9sBDNiEkTg" base_Port="_wWLQ0ErcEemr9sBDNiEkTg"/>
  <RTCppProperties:AttributeProperties xmi:id="_wWn8wErcEemr9sBDNiEkTg" type="debugEvents::Event" base_Property="_wWmHkErcEemr9sBDNiEkTg"/>
  <RTCppProperties:AttributeProperties xmi:id="_wWqZAErcEemr9sBDNiEkTg" type="SROManager" base_Property="_wWoj0ErcEemr9sBDNiEkTg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_wWuqcErcEemr9sBDNiEkTg" base_Class="_RLyKYAgzEea_md0mpENoqg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wWyU0ErcEemr9sBDNiEkTg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_wWxGsErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wW0KAErcEemr9sBDNiEkTg" type="debugEvents::EVENTTYPE" base_Parameter="_wWy74ErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wW1_MErcEemr9sBDNiEkTg" type="const char *" base_Parameter="_wW0xEErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wW_wMErcEemr9sBDNiEkTg" type="const char *" base_Parameter="_wW3NUErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wXEBoErcEemr9sBDNiEkTg" type="const char *" base_Parameter="_wXAXQErcEemr9sBDNiEkTg"/>
  <UMLRealTime:RTPort xmi:id="_wXYxwErcEemr9sBDNiEkTg" isNotification="true" isWired="false" base_Port="_wXXjoErcEemr9sBDNiEkTg"/>
  <UMLRealTime:RTPort xmi:id="_wXam8ErcEemr9sBDNiEkTg" base_Port="_wXXjoErcEemr9sBDNiEkTg"/>
  <RTCppProperties:AttributeProperties xmi:id="_wXxzUErcEemr9sBDNiEkTg" type="debugEvents::Event" base_Property="_wXwlMErcEemr9sBDNiEkTg"/>
  <RTCppProperties:AttributeProperties xmi:id="_wXzogErcEemr9sBDNiEkTg" type="SROManager" base_Property="_wXyaYErcEemr9sBDNiEkTg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_wX2EwErcEemr9sBDNiEkTg" base_Class="_zpdLYAgmEea_md0mpENoqg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wX6WMErcEemr9sBDNiEkTg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_wX4hAErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wX8LYErcEemr9sBDNiEkTg" type="debugEvents::EVENTTYPE" base_Parameter="_wX6WMUrcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wX-AkErcEemr9sBDNiEkTg" type="const char *" base_Parameter="_wX8LYUrcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wYAc0ErcEemr9sBDNiEkTg" type="const char *" base_Parameter="_wX_OsErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wYBq8ErcEemr9sBDNiEkTg" type="const char *" base_Parameter="_wYBD4ErcEemr9sBDNiEkTg"/>
  <UMLRealTime:RTPort xmi:id="_wYUl4ErcEemr9sBDNiEkTg" isNotification="true" isWired="false" base_Port="_wYTXwErcEemr9sBDNiEkTg"/>
  <UMLRealTime:RTPort xmi:id="_wYXCIErcEemr9sBDNiEkTg" base_Port="_wYTXwErcEemr9sBDNiEkTg"/>
  <RTCppProperties:AttributeProperties xmi:id="_wY1jQErcEemr9sBDNiEkTg" type="debugEvents::Event" base_Property="_wY0VIUrcEemr9sBDNiEkTg"/>
  <RTCppProperties:AttributeProperties xmi:id="_wY3YcErcEemr9sBDNiEkTg" type="SROManager" base_Property="_wY1jQUrcEemr9sBDNiEkTg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_wY5NoErcEemr9sBDNiEkTg" base_Class="_xCGHkAgmEea_md0mpENoqg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wY84AErcEemr9sBDNiEkTg" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_wY7p4ErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wY-GIErcEemr9sBDNiEkTg" type="debugEvents::EVENTTYPE" base_Parameter="_wY84AUrcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wY_7UErcEemr9sBDNiEkTg" type="const char *" base_Parameter="_wY-tMErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wZBwgErcEemr9sBDNiEkTg" type="const char *" base_Parameter="_wZAiYErcEemr9sBDNiEkTg"/>
  <RTCppProperties:ParameterProperties xmi:id="_wZEMwErcEemr9sBDNiEkTg" type="const char *" base_Parameter="_wZC-oErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wZaLAErcEemr9sBDNiEkTg" base_Pseudostate="_wZYV0ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wZcAMErcEemr9sBDNiEkTg" base_State="_wZaLAUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wZdOUErcEemr9sBDNiEkTg" base_Pseudostate="_wZcAMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wZd1YErcEemr9sBDNiEkTg" base_Pseudostate="_wZdOUUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_waNcQErcEemr9sBDNiEkTg" base_Region="_wZaLAkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_waPRcErcEemr9sBDNiEkTg" base_State="_wZaLAUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wacFwErcEemr9sBDNiEkTg" base_State="_waPRcUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wajagErcEemr9sBDNiEkTg" base_State="_waRtsErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_waqvQErcEemr9sBDNiEkTg" base_State="_waVYEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wbNh0ErcEemr9sBDNiEkTg" base_Pseudostate="_wbMTsErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wbPXAErcEemr9sBDNiEkTg" base_State="_wbOI4ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wbRMMErcEemr9sBDNiEkTg" base_Pseudostate="_wbP-EErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wbTBYErcEemr9sBDNiEkTg" base_Pseudostate="_wbRMMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wbw7cErcEemr9sBDNiEkTg" base_Region="_wbOI4UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wb8hoErcEemr9sBDNiEkTg" base_State="_wbxigErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wcAzEErcEemr9sBDNiEkTg" base_State="_wbywoErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wcEdcErcEemr9sBDNiEkTg" base_State="_wb0l0ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wcLLIErcEemr9sBDNiEkTg" base_State="_wb1z8ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wcZ0oErcEemr9sBDNiEkTg" base_Pseudostate="_wcX_cErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wcdfAErcEemr9sBDNiEkTg" base_State="_wcabsErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wcgiUErcEemr9sBDNiEkTg" base_Pseudostate="_wceGEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wchwcErcEemr9sBDNiEkTg" base_Pseudostate="_wcgiUUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wc7ZEErcEemr9sBDNiEkTg" base_Region="_wcabsUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wdG_QErcEemr9sBDNiEkTg" base_State="_wc8AIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wdJbgErcEemr9sBDNiEkTg" base_State="_wc91UErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wdNF4ErcEemr9sBDNiEkTg" base_State="_wc_qgErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wdUaoErcEemr9sBDNiEkTg" base_State="_wdBfsErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wdkSQErcEemr9sBDNiEkTg" base_Pseudostate="_wdjEIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wdlgYErcEemr9sBDNiEkTg" base_State="_wdkSQUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wdmugErcEemr9sBDNiEkTg" base_Pseudostate="_wdlgYUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wdnVkErcEemr9sBDNiEkTg" base_Pseudostate="_wdmugUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wd5pcErcEemr9sBDNiEkTg" base_Region="_wdkSQkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_weCMUErcEemr9sBDNiEkTg" base_State="_wd6QgErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_weEokErcEemr9sBDNiEkTg" base_State="_wd7eoErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_weHE0ErcEemr9sBDNiEkTg" base_State="_wd9T0ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_weSrAErcEemr9sBDNiEkTg" base_Pseudostate="_weRc4ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_weUgMErcEemr9sBDNiEkTg" base_State="_weSrAUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_weVuUErcEemr9sBDNiEkTg" base_Pseudostate="_weUgMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_weW8cErcEemr9sBDNiEkTg" base_Pseudostate="_weWVYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wenbIErcEemr9sBDNiEkTg" base_Region="_weSrAkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_weyaQErcEemr9sBDNiEkTg" base_State="_wenbIUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_we2EoErcEemr9sBDNiEkTg" base_State="_weopQErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_we5H8ErcEemr9sBDNiEkTg" base_State="_weqecErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_we_OkErcEemr9sBDNiEkTg" base_State="_werskErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wfN4EErcEemr9sBDNiEkTg" base_Pseudostate="_wfMp8ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wfPGMErcEemr9sBDNiEkTg" base_State="_wfN4EUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wfQ7YErcEemr9sBDNiEkTg" base_Pseudostate="_wfPtQErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wfSJgErcEemr9sBDNiEkTg" base_Pseudostate="_wfQ7YUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wfkdYErcEemr9sBDNiEkTg" base_Region="_wfN4EkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wftAQErcEemr9sBDNiEkTg" base_State="_wfkdYUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wfwqoErcEemr9sBDNiEkTg" base_State="_wflrgErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wf0VAErcEemr9sBDNiEkTg" base_State="_wfou0ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wgCXcErcEemr9sBDNiEkTg" base_Pseudostate="_wgBJUErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wgDlkErcEemr9sBDNiEkTg" base_State="_wgCXcUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wgFawErcEemr9sBDNiEkTg" base_Pseudostate="_wgDlkUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wgGo4ErcEemr9sBDNiEkTg" base_Pseudostate="_wgFawUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wgax8ErcEemr9sBDNiEkTg" base_Region="_wgCXckrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wghfoErcEemr9sBDNiEkTg" base_State="_wgax8UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wgki8ErcEemr9sBDNiEkTg" base_State="_wgcAEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wgnmQErcEemr9sBDNiEkTg" base_State="_wgdOMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wg4E8ErcEemr9sBDNiEkTg" base_Pseudostate="_wg220ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wg5TEErcEemr9sBDNiEkTg" base_State="_wg4E8UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wg6hMErcEemr9sBDNiEkTg" base_Pseudostate="_wg5TEUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wg7IQErcEemr9sBDNiEkTg" base_Pseudostate="_wg6hMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_whRtkErcEemr9sBDNiEkTg" base_Region="_wg4E8krcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_whcFoErcEemr9sBDNiEkTg" base_State="_whRtkUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_whfwAErcEemr9sBDNiEkTg" base_State="_whS7sErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_whkBcErcEemr9sBDNiEkTg" base_State="_whUw4ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_whqIEErcEemr9sBDNiEkTg" base_State="_whWmEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wh6mwErcEemr9sBDNiEkTg" base_Pseudostate="_wh5YoErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wh704ErcEemr9sBDNiEkTg" base_State="_wh6mwUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wh8b8ErcEemr9sBDNiEkTg" base_Pseudostate="_wh704UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wh9qEErcEemr9sBDNiEkTg" base_Pseudostate="_wh8b8UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wiRzIErcEemr9sBDNiEkTg" base_Region="_wh6mwkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wihDsErcEemr9sBDNiEkTg" base_State="_wiSaMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wikHAErcEemr9sBDNiEkTg" base_State="_wiUPYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wioYcErcEemr9sBDNiEkTg" base_State="_wiWEkErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_witQ8ErcEemr9sBDNiEkTg" base_State="_wiX5wErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wjNAMErcEemr9sBDNiEkTg" base_State="_wjMZIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wjxA4ErcEemr9sBDNiEkTg" base_Pseudostate="_wjvywErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wjyPAErcEemr9sBDNiEkTg" base_State="_wjxA4UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wjzdIErcEemr9sBDNiEkTg" base_Pseudostate="_wjy2EErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wj0rQErcEemr9sBDNiEkTg" base_Pseudostate="_wjzdIUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wkL3oErcEemr9sBDNiEkTg" base_Region="_wjxA4krcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wkOT4ErcEemr9sBDNiEkTg" base_State="_wjxA4UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wkVooErcEemr9sBDNiEkTg" base_State="_wkOT4UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wkZ6EErcEemr9sBDNiEkTg" base_State="_wkPiAErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wkdkcErcEemr9sBDNiEkTg" base_State="_wkRXMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wkrm4ErcEemr9sBDNiEkTg" base_Pseudostate="_wkq_0ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wkuqMErcEemr9sBDNiEkTg" base_State="_wks1AErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wkv4UErcEemr9sBDNiEkTg" base_Pseudostate="_wkuqMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wkxGcErcEemr9sBDNiEkTg" base_Pseudostate="_wkv4UUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wlLWIErcEemr9sBDNiEkTg" base_Region="_wks1AUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wlTR8ErcEemr9sBDNiEkTg" base_State="_wlLWIUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wlZYkErcEemr9sBDNiEkTg" base_State="_wlMkQErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wlcb4ErcEemr9sBDNiEkTg" base_State="_wlOZcErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wlll0ErcEemr9sBDNiEkTg" base_State="_wlPnkErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wlzBMErcEemr9sBDNiEkTg" base_Pseudostate="_wlyaIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wl2EgErcEemr9sBDNiEkTg" base_State="_wlzoQErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wl3SoErcEemr9sBDNiEkTg" base_Pseudostate="_wl2rkErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wl4gwErcEemr9sBDNiEkTg" base_Pseudostate="_wl35sErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wmQ7QErcEemr9sBDNiEkTg" base_Region="_wlzoQUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wmdIgErcEemr9sBDNiEkTg" base_State="_wmQ7QUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wmhZ8ErcEemr9sBDNiEkTg" base_State="_wmSwcErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wmkdQErcEemr9sBDNiEkTg" base_State="_wmT-kErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wmp80ErcEemr9sBDNiEkTg" base_State="_wmVzwErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wm7poErcEemr9sBDNiEkTg" base_Pseudostate="_wm5NYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wm83wErcEemr9sBDNiEkTg" base_State="_wm7poUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wm9e0ErcEemr9sBDNiEkTg" base_Pseudostate="_wm83wUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wm_UAErcEemr9sBDNiEkTg" base_Pseudostate="_wm9e0UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wnm_EErcEemr9sBDNiEkTg" base_Region="_wm7pokrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wnxXIErcEemr9sBDNiEkTg" base_State="_wnnmIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wn1okErcEemr9sBDNiEkTg" base_State="_wnoNMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wn7IIErcEemr9sBDNiEkTg" base_State="_wnpbUErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_woIjgErcEemr9sBDNiEkTg" base_State="_wnqpcErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wod6sErcEemr9sBDNiEkTg" base_Pseudostate="_wocFgErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_woiMIErcEemr9sBDNiEkTg" base_State="_woehwErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wojaQErcEemr9sBDNiEkTg" base_Pseudostate="_woiMIUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wokoYErcEemr9sBDNiEkTg" base_Pseudostate="_wokBUErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wpB7YErcEemr9sBDNiEkTg" base_Region="_woehwUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wpIpEErcEemr9sBDNiEkTg" base_State="_wpCicErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wpM6gErcEemr9sBDNiEkTg" base_State="_wpEXoErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wpPWwErcEemr9sBDNiEkTg" base_State="_wpE-sErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wpdZMErcEemr9sBDNiEkTg" base_Pseudostate="_wpcyIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wpenUErcEemr9sBDNiEkTg" base_State="_wpeAQErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wpf1cErcEemr9sBDNiEkTg" base_Pseudostate="_wpenUUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wpgcgErcEemr9sBDNiEkTg" base_Pseudostate="_wpf1cUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wpvGAErcEemr9sBDNiEkTg" base_Region="_wpeAQUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wp3B0ErcEemr9sBDNiEkTg" base_State="_wpvGAUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wp5eEErcEemr9sBDNiEkTg" base_State="_wpvtEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wp8hYErcEemr9sBDNiEkTg" base_State="_wpywYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wqAy0ErcEemr9sBDNiEkTg" base_State="_wpz-gErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wqNAEErcEemr9sBDNiEkTg" base_Pseudostate="_wqLx8ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wqNnIErcEemr9sBDNiEkTg" base_State="_wqNAEUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wqO1QErcEemr9sBDNiEkTg" base_Pseudostate="_wqOOMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wqQDYErcEemr9sBDNiEkTg" base_Pseudostate="_wqO1QUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wqpE8ErcEemr9sBDNiEkTg" base_Region="_wqNAEkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wqvyoErcEemr9sBDNiEkTg" base_State="_wqpE8UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wqy18ErcEemr9sBDNiEkTg" base_State="_wqqTEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wq15QErcEemr9sBDNiEkTg" base_State="_wqsIQErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wrCGgErcEemr9sBDNiEkTg" base_Pseudostate="_wrA4YErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wrCtkErcEemr9sBDNiEkTg" base_State="_wrCGgUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wrDUoErcEemr9sBDNiEkTg" base_Pseudostate="_wrCtkUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wrD7sErcEemr9sBDNiEkTg" base_Pseudostate="_wrDUoUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wrVogErcEemr9sBDNiEkTg" base_Region="_wrCGgkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wrbvIErcEemr9sBDNiEkTg" base_State="_wrWPkErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wrc9QErcEemr9sBDNiEkTg" base_State="_wrXdsErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wrh1wErcEemr9sBDNiEkTg" base_Pseudostate="_wrgnoErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wrkSAErcEemr9sBDNiEkTg" base_State="_wrh1wUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wrlgIErcEemr9sBDNiEkTg" base_Pseudostate="_wrkSAUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wrmuQErcEemr9sBDNiEkTg" base_Pseudostate="_wrlgIUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wr4bEErcEemr9sBDNiEkTg" base_Region="_wrh1wkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wr5pMErcEemr9sBDNiEkTg" base_State="_wrh1wUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wsAW4ErcEemr9sBDNiEkTg" base_State="_wr5pMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wsEBQErcEemr9sBDNiEkTg" base_State="_wr63UErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wsHEkErcEemr9sBDNiEkTg" base_State="_wr8sgErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wsVHAErcEemr9sBDNiEkTg" base_Pseudostate="_wsT44ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wsVuEErcEemr9sBDNiEkTg" base_State="_wsVHAUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wsW8MErcEemr9sBDNiEkTg" base_Pseudostate="_wsVuEUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wsXjQErcEemr9sBDNiEkTg" base_Pseudostate="_wsW8MUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wsmz0ErcEemr9sBDNiEkTg" base_Region="_wsVHAkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wsuIkErcEemr9sBDNiEkTg" base_State="_wsmz0UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wsxL4ErcEemr9sBDNiEkTg" base_State="_wsoB8ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_ws0PMErcEemr9sBDNiEkTg" base_State="_wspQEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ws-nQErcEemr9sBDNiEkTg" base_Pseudostate="_ws-AMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_ws_OUErcEemr9sBDNiEkTg" base_State="_ws-nQUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ws_1YErcEemr9sBDNiEkTg" base_Pseudostate="_ws_OUUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wtAccErcEemr9sBDNiEkTg" base_Pseudostate="_ws_1YUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wtPtAErcEemr9sBDNiEkTg" base_Region="_ws-nQkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wtYP4ErcEemr9sBDNiEkTg" base_State="_wtQUEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wtasIErcEemr9sBDNiEkTg" base_State="_wtQ7IErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wtdvcErcEemr9sBDNiEkTg" base_State="_wtSwUErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wtiA4ErcEemr9sBDNiEkTg" base_State="_wtT-cErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wttnEErcEemr9sBDNiEkTg" base_Pseudostate="_wttAAErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wtu1MErcEemr9sBDNiEkTg" base_State="_wttnEUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wtvcQErcEemr9sBDNiEkTg" base_Pseudostate="_wtu1MUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wtwDUErcEemr9sBDNiEkTg" base_Pseudostate="_wtvcQUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wuCXMErcEemr9sBDNiEkTg" base_Region="_wttnEkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wuHPsErcEemr9sBDNiEkTg" base_State="_wuCXMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wuJE4ErcEemr9sBDNiEkTg" base_State="_wuEMYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wuPLgErcEemr9sBDNiEkTg" base_Pseudostate="_wuN9YErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wuQZoErcEemr9sBDNiEkTg" base_State="_wuPLgUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wuRAsErcEemr9sBDNiEkTg" base_Pseudostate="_wuQZoUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wuRnwErcEemr9sBDNiEkTg" base_Pseudostate="_wuRAsUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wulw0ErcEemr9sBDNiEkTg" base_Region="_wuPLgkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wurQYErcEemr9sBDNiEkTg" base_State="_wulw0UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wutsoErcEemr9sBDNiEkTg" base_State="_wumX4ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wuwI4ErcEemr9sBDNiEkTg" base_State="_wunmAErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wu4rwErcEemr9sBDNiEkTg" base_Pseudostate="_wu4EsErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wu554ErcEemr9sBDNiEkTg" base_State="_wu4rwUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wu7IAErcEemr9sBDNiEkTg" base_Pseudostate="_wu554UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wu8WIErcEemr9sBDNiEkTg" base_Pseudostate="_wu7IAUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wvNb4ErcEemr9sBDNiEkTg" base_Region="_wu4rwkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wvSUYErcEemr9sBDNiEkTg" base_State="_wvOC8ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wvTigErcEemr9sBDNiEkTg" base_State="_wvPREErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wvZpIErcEemr9sBDNiEkTg" base_Pseudostate="_wvZCEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wva3QErcEemr9sBDNiEkTg" base_State="_wvZpIUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wvcFYErcEemr9sBDNiEkTg" base_Pseudostate="_wvbeUErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wvcscErcEemr9sBDNiEkTg" base_Pseudostate="_wvcFYUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wvtLIErcEemr9sBDNiEkTg" base_Region="_wvZpIkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wv1uAErcEemr9sBDNiEkTg" base_State="_wvtLIUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wv4KQErcEemr9sBDNiEkTg" base_State="_wvuZQErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wv7NkErcEemr9sBDNiEkTg" base_State="_wvvnYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wv_fAErcEemr9sBDNiEkTg" base_State="_wvw1gErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wwLFMErcEemr9sBDNiEkTg" base_Pseudostate="_wwKeIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wwMTUErcEemr9sBDNiEkTg" base_State="_wwLFMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wwM6YErcEemr9sBDNiEkTg" base_Pseudostate="_wwMTUUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wwNhcErcEemr9sBDNiEkTg" base_Pseudostate="_wwM6YUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wweAIErcEemr9sBDNiEkTg" base_Region="_wwLFMkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wwhDcErcEemr9sBDNiEkTg" base_State="_wweAIUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wwhqgErcEemr9sBDNiEkTg" base_State="_wwenMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wwl78ErcEemr9sBDNiEkTg" base_Pseudostate="_wwkt0ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wwnKEErcEemr9sBDNiEkTg" base_State="_wwl78UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wwoYMErcEemr9sBDNiEkTg" base_Pseudostate="_wwnKEUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wwo_QErcEemr9sBDNiEkTg" base_Pseudostate="_wwoYMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_ww9IUErcEemr9sBDNiEkTg" base_Region="_wwl78krcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wxCn4ErcEemr9sBDNiEkTg" base_State="_ww9IUUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wxGSQErcEemr9sBDNiEkTg" base_State="_ww-9gErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wxM_8ErcEemr9sBDNiEkTg" base_Pseudostate="_wxLx0ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wxOOEErcEemr9sBDNiEkTg" base_State="_wxM_8UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wxTtoErcEemr9sBDNiEkTg" base_Pseudostate="_wxOOEUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wxWJ4ErcEemr9sBDNiEkTg" base_Pseudostate="_wxTtoUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wxrhEErcEemr9sBDNiEkTg" base_Region="_wxM_8krcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wx2gMErcEemr9sBDNiEkTg" base_State="_wxsIIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wx3HQErcEemr9sBDNiEkTg" base_State="_wxt9UErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wx_DEErcEemr9sBDNiEkTg" base_Pseudostate="_wx908ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wyARMErcEemr9sBDNiEkTg" base_State="_wx_DEUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wyBfUErcEemr9sBDNiEkTg" base_Pseudostate="_wyA4QErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wyFJsErcEemr9sBDNiEkTg" base_Pseudostate="_wyCGYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wyq_kErcEemr9sBDNiEkTg" base_Region="_wx_DEkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wy6QIErcEemr9sBDNiEkTg" base_State="_wyq_kUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wzCzAErcEemr9sBDNiEkTg" base_State="_wyuC4ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wzFPQErcEemr9sBDNiEkTg" base_State="_wyv4EErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wzL88ErcEemr9sBDNiEkTg" base_State="_wyzicErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzYKMErcEemr9sBDNiEkTg" base_Pseudostate="_wzW8EErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wzZYUErcEemr9sBDNiEkTg" base_State="_wzYKMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzZ_YErcEemr9sBDNiEkTg" base_Pseudostate="_wzZYUUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzamcErcEemr9sBDNiEkTg" base_Pseudostate="_wzZ_YUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_wzp3AErcEemr9sBDNiEkTg" base_Region="_wzYKMkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wzrFIErcEemr9sBDNiEkTg" base_State="_wzYKMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wzxLwErcEemr9sBDNiEkTg" base_State="_wzrFIUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wz0PEErcEemr9sBDNiEkTg" base_State="_wzsTQErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_wz35cErcEemr9sBDNiEkTg" base_State="_wzthYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w0BqcErcEemr9sBDNiEkTg" base_Pseudostate="_w0BDYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w0CRgErcEemr9sBDNiEkTg" base_State="_w0BqcUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w0C4kErcEemr9sBDNiEkTg" base_Pseudostate="_w0CRgUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w0DfoErcEemr9sBDNiEkTg" base_Pseudostate="_w0C4kUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w0RiEErcEemr9sBDNiEkTg" base_Region="_w0BqckrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w0YPwErcEemr9sBDNiEkTg" base_State="_w0RiEUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w0asAErcEemr9sBDNiEkTg" base_State="_w0SwMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w0dIQErcEemr9sBDNiEkTg" base_State="_w0TXQErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w0in0ErcEemr9sBDNiEkTg" base_State="_w0UlYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w0wqQErcEemr9sBDNiEkTg" base_Pseudostate="_w0wDMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w0x4YErcEemr9sBDNiEkTg" base_State="_w0xRUErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w0zGgErcEemr9sBDNiEkTg" base_Pseudostate="_w0x4YUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w0ztkErcEemr9sBDNiEkTg" base_Pseudostate="_w0zGgUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w1CXEErcEemr9sBDNiEkTg" base_Region="_w0xRUUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w1H2oErcEemr9sBDNiEkTg" base_State="_w1CXEUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w1KS4ErcEemr9sBDNiEkTg" base_State="_w1C-IErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w1NWMErcEemr9sBDNiEkTg" base_State="_w1EzUErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w1wIwErcEemr9sBDNiEkTg" base_State="_w1vhsErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w2oSgErcEemr9sBDNiEkTg" base_Pseudostate="_w2nEYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w2qHsErcEemr9sBDNiEkTg" base_State="_w2o5kErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w2quwErcEemr9sBDNiEkTg" base_Pseudostate="_w2qHsUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w2rV0UrcEemr9sBDNiEkTg" base_Pseudostate="_w2rV0ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w23jEErcEemr9sBDNiEkTg" base_Region="_w2o5kUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w29psErcEemr9sBDNiEkTg" base_State="_w24KIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w3AF8ErcEemr9sBDNiEkTg" base_State="_w24xMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w3CiMErcEemr9sBDNiEkTg" base_State="_w25YQErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w3JP4ErcEemr9sBDNiEkTg" base_State="_w26mYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w3WrQErcEemr9sBDNiEkTg" base_Pseudostate="_w3WEMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w3X5YErcEemr9sBDNiEkTg" base_State="_w3WrQUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w3YgcErcEemr9sBDNiEkTg" base_Pseudostate="_w3X5YUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w3ZHgErcEemr9sBDNiEkTg" base_Pseudostate="_w3YgcUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w3nJ8ErcEemr9sBDNiEkTg" base_Region="_w3WrQkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w3tQkErcEemr9sBDNiEkTg" base_State="_w3nJ8UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w3vFwErcEemr9sBDNiEkTg" base_State="_w3oYEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w3xiAErcEemr9sBDNiEkTg" base_State="_w3pmMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w3-WUErcEemr9sBDNiEkTg" base_State="_w39IMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w4kzQErcEemr9sBDNiEkTg" base_Pseudostate="_w4kMMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w4mBYErcEemr9sBDNiEkTg" base_State="_w4laUErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w4nPgErcEemr9sBDNiEkTg" base_Pseudostate="_w4mocErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w4n2kErcEemr9sBDNiEkTg" base_Pseudostate="_w4nPgUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w47YkErcEemr9sBDNiEkTg" base_Region="_w4laUUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w5EigErcEemr9sBDNiEkTg" base_State="_w47_oErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w5Iz8ErcEemr9sBDNiEkTg" base_State="_w48msErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w5MeUErcEemr9sBDNiEkTg" base_State="_w4-b4ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w5Z5sErcEemr9sBDNiEkTg" base_Pseudostate="_w5YrkErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w5bH0ErcEemr9sBDNiEkTg" base_State="_w5Z5sUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w5cV8ErcEemr9sBDNiEkTg" base_Pseudostate="_w5bH0UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w5c9AErcEemr9sBDNiEkTg" base_Pseudostate="_w5cV8UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w50JYErcEemr9sBDNiEkTg" base_Region="_w5Z5skrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w596YErcEemr9sBDNiEkTg" base_State="_w50JYUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w6DZ8ErcEemr9sBDNiEkTg" base_State="_w51-kErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w6HEUErcEemr9sBDNiEkTg" base_State="_w54a0ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w6Mj4ErcEemr9sBDNiEkTg" base_State="_w55o8ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w6bNYErcEemr9sBDNiEkTg" base_Pseudostate="_w6amUErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w6cbgErcEemr9sBDNiEkTg" base_State="_w6bNYUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w6dpoErcEemr9sBDNiEkTg" base_Pseudostate="_w6cbgUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w6gs8ErcEemr9sBDNiEkTg" base_Pseudostate="_w6dpoUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w6xLoErcEemr9sBDNiEkTg" base_Region="_w6bNYkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w668oErcEemr9sBDNiEkTg" base_State="_w6xLoUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w69_8ErcEemr9sBDNiEkTg" base_State="_w6zA0ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w7AcMErcEemr9sBDNiEkTg" base_State="_w602AErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w7F7wErcEemr9sBDNiEkTg" base_State="_w62EIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w7T-MErcEemr9sBDNiEkTg" base_Pseudostate="_w7SwEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w7VMUErcEemr9sBDNiEkTg" base_State="_w7T-MUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w7WacErcEemr9sBDNiEkTg" base_Pseudostate="_w7VMUUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w7XokErcEemr9sBDNiEkTg" base_Pseudostate="_w7WacUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w7pVYErcEemr9sBDNiEkTg" base_Region="_w7T-MkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w7ztcErcEemr9sBDNiEkTg" base_State="_w7pVYUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w72JsErcEemr9sBDNiEkTg" base_State="_w7rxoErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w75NAErcEemr9sBDNiEkTg" base_State="_w7uN4ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w8HPcErcEemr9sBDNiEkTg" base_Pseudostate="_w8GoYErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w8IdkErcEemr9sBDNiEkTg" base_State="_w8HPcUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w8JrsErcEemr9sBDNiEkTg" base_Pseudostate="_w8JEoErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w8K50ErcEemr9sBDNiEkTg" base_Pseudostate="_w8JrsUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w8aKYErcEemr9sBDNiEkTg" base_Region="_w8HPckrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w8axcErcEemr9sBDNiEkTg" base_State="_w8HPcUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w8gRAErcEemr9sBDNiEkTg" base_State="_w8bYgErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w8j7YErcEemr9sBDNiEkTg" base_State="_w8b_kErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w8lwkErcEemr9sBDNiEkTg" base_State="_w8dNsErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w81BIErcEemr9sBDNiEkTg" base_Pseudostate="_w80aEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w82PQErcEemr9sBDNiEkTg" base_State="_w81BIUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w84EcErcEemr9sBDNiEkTg" base_Pseudostate="_w82PQUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w85SkErcEemr9sBDNiEkTg" base_Pseudostate="_w84EcUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w9IjIErcEemr9sBDNiEkTg" base_Region="_w81BIkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w9OCsErcEemr9sBDNiEkTg" base_State="_w9IjIUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w9RtEErcEemr9sBDNiEkTg" base_State="_w9JKMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w9UwYErcEemr9sBDNiEkTg" base_State="_w9JxQErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w9g9oErcEemr9sBDNiEkTg" base_Pseudostate="_w9gWkErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w9iLwErcEemr9sBDNiEkTg" base_State="_w9g9oUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w9iy0ErcEemr9sBDNiEkTg" base_Pseudostate="_w9iLwUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w9kA8ErcEemr9sBDNiEkTg" base_Pseudostate="_w9iy0UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w93i8ErcEemr9sBDNiEkTg" base_Region="_w9g9okrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w-AF0ErcEemr9sBDNiEkTg" base_State="_w94KAErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w-DJIErcEemr9sBDNiEkTg" base_State="_w94xEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w-GMcErcEemr9sBDNiEkTg" base_State="_w95_MErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w-Kd4ErcEemr9sBDNiEkTg" base_State="_w97NUErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w-U18ErcEemr9sBDNiEkTg" base_Pseudostate="_w-UO4ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w-WEEErcEemr9sBDNiEkTg" base_State="_w-VdAErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w-XSMErcEemr9sBDNiEkTg" base_Pseudostate="_w-WrIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w-YgUErcEemr9sBDNiEkTg" base_Pseudostate="_w-XSMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w-nw4ErcEemr9sBDNiEkTg" base_Region="_w-VdAUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w-vssErcEemr9sBDNiEkTg" base_State="_w-nw4UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w-ywAErcEemr9sBDNiEkTg" base_State="_w-o_AErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w-1MQErcEemr9sBDNiEkTg" base_State="_w-qNIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w-6EwErcEemr9sBDNiEkTg" base_State="_w-sCUErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w_Fq8ErcEemr9sBDNiEkTg" base_Pseudostate="_w_FD4ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w_HgIErcEemr9sBDNiEkTg" base_State="_w_GSAErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w_IHMErcEemr9sBDNiEkTg" base_Pseudostate="_w_HgIUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w_IuQErcEemr9sBDNiEkTg" base_Pseudostate="_w_IHMUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w_X-0ErcEemr9sBDNiEkTg" base_Region="_w_GSAUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w_esgErcEemr9sBDNiEkTg" base_State="_w_X-0UrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w_hIwErcEemr9sBDNiEkTg" base_State="_w_Yl4ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w_jlAErcEemr9sBDNiEkTg" base_State="_w_Z0AErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w_n2cErcEemr9sBDNiEkTg" base_State="_w_bCIErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w_vyQErcEemr9sBDNiEkTg" base_Pseudostate="_w_vLMErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_w_xAYErcEemr9sBDNiEkTg" base_State="_w_vyQUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w_xncErcEemr9sBDNiEkTg" base_Pseudostate="_w_xAYUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_w_yOgErcEemr9sBDNiEkTg" base_Pseudostate="_w_xncUrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_w__C0ErcEemr9sBDNiEkTg" base_Region="_w_vyQkrcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_xAIz0ErcEemr9sBDNiEkTg" base_State="_w__p4ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_xAL3IErcEemr9sBDNiEkTg" base_State="_xAAQ8ErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_xAO6cErcEemr9sBDNiEkTg" base_State="_xABfEErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_xATy8ErcEemr9sBDNiEkTg" base_State="_xADUQErcEemr9sBDNiEkTg"/>
  <UMLRTStateMachines:RTState xmi:id="_xAxtAErcEemr9sBDNiEkTg" base_State="_xAxF8ErcEemr9sBDNiEkTg"/>
</xmi:XMI>
