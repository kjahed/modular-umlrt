<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_0vhJYNq9EeahI77Vg4Dl9Q" name="CarDoorLock">
    <eAnnotations xmi:id="_R8398NrKEeahI77Vg4Dl9Q" source="UMLRT_Default_top">
      <details xmi:id="_R84lANrKEeahI77Vg4Dl9Q" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <eAnnotations xmi:id="_S0JfsErDEemG5ZtmQS1p2g" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_S0KGwErDEemG5ZtmQS1p2g" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_yZ69IErPEemzq6Mb_l3tKQ" source="dummy"/>
    <eAnnotations xmi:id="_98MoUErhEemsi6aNQffY4g" source="dummy"/>
    <eAnnotations xmi:id="_rUtOUEsZEemRUop51e-plg" source="dummy"/>
    <eAnnotations xmi:id="_v6_XsEvvEemfwoiSEMVoOA" source="dummy"/>
    <eAnnotations xmi:id="_jg0dkEwREemgv8s538SPng" source="dummy"/>
    <eAnnotations xmi:id="_KYYeEExUEemcy6MktTIe0w" source="dummy"/>
    <eAnnotations xmi:id="_oIIyEEyBEemn4Jj5XhegWA" source="dummy"/>
    <packageImport xmi:id="_S0L78ErDEemG5ZtmQS1p2g">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Class" xmi:id="_iSbRENq_EeahI77Vg4Dl9Q" name="Car" isActive="true">
      <ownedAttribute xmi:id="_GVbv0NrBEeahI77Vg4Dl9Q" name="door1" visibility="protected" type="_ls0UUNq_EeahI77Vg4Dl9Q" isOrdered="true" aggregation="composite">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SnJA8NrgEeal5dJZNvUqew" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Sm8zsNrgEeal5dJZNvUqew" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_LNSPkNrBEeahI77Vg4Dl9Q" name="centralLock" visibility="protected" type="_s7aB8Nq_EeahI77Vg4Dl9Q" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_V8mg4NrgEeal5dJZNvUqew" name="door2" visibility="protected" type="_ls0UUNq_EeahI77Vg4Dl9Q" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_5AKKQNrgEeal5dJZNvUqew" name="door3" visibility="protected" type="_ls0UUNq_EeahI77Vg4Dl9Q" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_AVcVwNrhEeal5dJZNvUqew" name="door4" visibility="protected" type="_ls0UUNq_EeahI77Vg4Dl9Q" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:id="_U4X_YNrCEeahI77Vg4Dl9Q" name="RTConnector1">
        <end xmi:id="_U4YmcNrCEeahI77Vg4Dl9Q" partWithPort="_LNSPkNrBEeahI77Vg4Dl9Q" role="_k3gyENrBEeahI77Vg4Dl9Q"/>
        <end xmi:id="_U4ZNgNrCEeahI77Vg4Dl9Q" partWithPort="_GVbv0NrBEeahI77Vg4Dl9Q" role="_-jLfANrBEeahI77Vg4Dl9Q"/>
      </ownedConnector>
      <ownedConnector xmi:id="_bwP6gNrgEeal5dJZNvUqew" name="RTConnector2">
        <end xmi:id="_bwRvsNrgEeal5dJZNvUqew" partWithPort="_LNSPkNrBEeahI77Vg4Dl9Q" role="_k3gyENrBEeahI77Vg4Dl9Q"/>
        <end xmi:id="_bwRvsdrgEeal5dJZNvUqew" partWithPort="_V8mg4NrgEeal5dJZNvUqew" role="_-jLfANrBEeahI77Vg4Dl9Q"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-3w20NrgEeal5dJZNvUqew" name="RTConnector3">
        <end xmi:id="_-3ysANrgEeal5dJZNvUqew" partWithPort="_LNSPkNrBEeahI77Vg4Dl9Q" role="_k3gyENrBEeahI77Vg4Dl9Q"/>
        <end xmi:id="_-3zTENrgEeal5dJZNvUqew" partWithPort="_5AKKQNrgEeal5dJZNvUqew" role="_-jLfANrBEeahI77Vg4Dl9Q"/>
      </ownedConnector>
      <ownedConnector xmi:id="_EUhacNrhEeal5dJZNvUqew" name="RTConnector4">
        <end xmi:id="_EUjPoNrhEeal5dJZNvUqew" partWithPort="_LNSPkNrBEeahI77Vg4Dl9Q" role="_k3gyENrBEeahI77Vg4Dl9Q"/>
        <end xmi:id="_EUjPodrhEeal5dJZNvUqew" partWithPort="_AVcVwNrhEeal5dJZNvUqew" role="_-jLfANrBEeahI77Vg4Dl9Q"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_ls0UUNq_EeahI77Vg4Dl9Q" name="Door" isActive="true">
      <ownedAttribute xmi:id="_yAJcQNrBEeahI77Vg4Dl9Q" name="lock" visibility="protected" type="_xS9RANq_EeahI77Vg4Dl9Q" isOrdered="true" aggregation="composite">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_zv8SANrZEeal5dJZNvUqew" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_zvPucNrZEeal5dJZNvUqew" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_-jLfANrBEeahI77Vg4Dl9Q" name="lockPort" visibility="public" type="_LXKZwNrAEeahI77Vg4Dl9Q" isOrdered="true" aggregation="composite">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3zGENrdEeal5dJZNvUqew" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3ouANrdEeal5dJZNvUqew" value="1"/>
      </ownedAttribute>
      <ownedConnector xmi:id="_-n9H8NraEeal5dJZNvUqew" name="RTConnector1">
        <end xmi:id="_-oCngNraEeal5dJZNvUqew" role="_-jLfANrBEeahI77Vg4Dl9Q"/>
        <end xmi:id="_-oCngdraEeal5dJZNvUqew" partWithPort="_yAJcQNrBEeahI77Vg4Dl9Q" role="_WvH7ENrBEeahI77Vg4Dl9Q"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_xS9RANq_EeahI77Vg4Dl9Q" name="Lock" classifierBehavior="__KYzgNrCEeahI77Vg4Dl9Q" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_WvH7ENrBEeahI77Vg4Dl9Q" name="lockPort" visibility="public" type="_LXKZwNrAEeahI77Vg4Dl9Q" isOrdered="true" aggregation="composite" isBehavior="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_-JnYYNrVEeaBAosuR3tfxw" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_-JjG8NrVEeaBAosuR3tfxw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_S2bXoErDEemG5ZtmQS1p2g" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S2fCAUrDEemG5ZtmQS1p2g" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_S2fpEErDEemG5ZtmQS1p2g" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_S22OYErDEemG5ZtmQS1p2g" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_S23cgErDEemG5ZtmQS1p2g" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_S25RsErDEemG5ZtmQS1p2g" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_S2-KMUrDEemG5ZtmQS1p2g" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="__KYzgNrCEeahI77Vg4Dl9Q" name="lockSM">
        <region xmi:id="_BAOTwNrDEeahI77Vg4Dl9Q" name="Region1">
          <transition xmi:id="_J75OQNrDEeahI77Vg4Dl9Q" name="lock" source="_TJAVYErDEemG5ZtmQS1p2g" target="_FLMfYNrDEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Io77INrPEeay9vzLxQrrvQ" name="replyLock">
              <language>C++</language>
              <body>    std::cout&lt;&lt;&quot;The Lock &quot;&lt;&lt;this->borderPorts[0]->slotName()&lt;&lt;&quot;  is locked&quot;&lt;&lt;std::endl;
    lockPort.lockStatus(true).send();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::lock&quot;,(char *)&quot;Debug__Path__lock&quot;,(char *)&quot;locked&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_WQqykNrDEeahI77Vg4Dl9Q" name="init" source="_TFDCcErDEemG5ZtmQS1p2g" target="_D7MQENrDEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_XjCGcNrQEeaBAosuR3tfxw" name="init">
              <language>C++</language>
              <body>    std::cout&lt;&lt;&quot;The Lock &quot;&lt;&lt;this->borderPorts[0]->slotName()&lt;&lt;&quot;  is unlocked&quot;&lt;&lt;std::endl;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::init&quot;,(char *)&quot;Debug__Path__init&quot;,(char *)&quot;unlocked&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_hi8_INrDEeahI77Vg4Dl9Q" name="unlock" source="_THU6YErDEemG5ZtmQS1p2g" target="_D7MQENrDEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_bx_0sNrlEeal5dJZNvUqew" name="replyUnlock">
              <language>C++</language>
              <body>    std::cout&lt;&lt;&quot;The Lock &quot;&lt;&lt;this->borderPorts[0]->slotName()&lt;&lt;&quot;  is unlocked&quot;&lt;&lt;std::endl;
    lockPort.lockStatus(false).send();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::unlock&quot;,(char *)&quot;Debug__Path__unlock&quot;,(char *)&quot;unlocked&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_v7FiUNrDEeahI77Vg4Dl9Q" name="twiceLock" source="_TGJ1sErDEemG5ZtmQS1p2g" target="_FLMfYNrDEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_D3ixQNrmEeal5dJZNvUqew" name="replyTwiceUnlock">
              <language>C++</language>
              <body>    std::cout&lt;&lt;&quot;The Lock   &quot;&lt;&lt;this->borderPorts[0]->slotName()&lt;&lt;&quot;  is already unlocked&quot;&lt;&lt;std::endl;
    lockPort.lockStatus(false).send();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::twiceLock&quot;,(char *)&quot;Debug__Path__twiceLock&quot;,(char *)&quot;locked&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5iMmgNrDEeahI77Vg4Dl9Q" name="twiceUnlock" source="_TIKA0ErDEemG5ZtmQS1p2g" target="_D7MQENrDEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_-X__YNrlEeal5dJZNvUqew" name="replyTwiceLock">
              <language>C++</language>
              <body>    std::cout&lt;&lt;&quot;The Lock   &quot;&lt;&lt;this->borderPorts[0]->slotName()&lt;&lt;&quot;  is already unlocked&quot;&lt;&lt;std::endl;
    lockPort.lockStatus(true).send();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::twiceUnlock&quot;,(char *)&quot;Debug__Path__twiceUnlock&quot;,(char *)&quot;unlocked&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TFIiAUrDEemG5ZtmQS1p2g" name="Debug__init" source="_TKIWwErDEemG5ZtmQS1p2g" target="_TFDCcErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TFJJEErDEemG5ZtmQS1p2g" name="Debug__init__255">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;locked&quot;,&quot;twiceLock&quot;,&quot;locked&quot;,&quot;lock&quot;,&quot;Locking&quot;);
Debug__SRO.addTransitionsFromState(&quot;WaitAllDoorBeClosed&quot;,&quot;&quot;,&quot;AllDoorClosed&quot;,&quot;lockStatus&quot;,&quot;Locking&quot;);
Debug__SRO.addTransitionsFromState(&quot;unlocked&quot;,&quot;lock&quot;,&quot;locked&quot;,&quot;lock&quot;,&quot;Locking&quot;);
Debug__SRO.addTransitionsFromState(&quot;StartingUp&quot;,&quot;&quot;,&quot;doorsOpen&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice1&quot;,&quot;&quot;,&quot;WaitAllDoorBeOpened&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WaitAllDoorBeOpened&quot;,&quot;&quot;,&quot;Choice1&quot;,&quot;lockStatus&quot;,&quot;Locking&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice1&quot;,&quot;&quot;,&quot;doorsOpen&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;AllDoorClosed&quot;,&quot;&quot;,&quot;WaitAllDoorBeClosed&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;unlocked&quot;,&quot;twiceUnlock&quot;,&quot;unlocked&quot;,&quot;unlock&quot;,&quot;Locking&quot;);
Debug__SRO.addTransitionsFromState(&quot;AllDoorClosed&quot;,&quot;&quot;,&quot;doorsClosed&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;doorsOpen&quot;,&quot;&quot;,&quot;WaitAllDoorBeClosed&quot;,&quot;lockStatus&quot;,&quot;Locking&quot;);
Debug__SRO.addTransitionsFromState(&quot;Initial1&quot;,&quot;&quot;,&quot;StartingUp&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Initial1&quot;,&quot;init&quot;,&quot;unlocked&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;locked&quot;,&quot;unlock&quot;,&quot;unlocked&quot;,&quot;unlock&quot;,&quot;Locking&quot;);
Debug__SRO.addTransitionsFromState(&quot;doorsClosed&quot;,&quot;&quot;,&quot;WaitAllDoorBeOpened&quot;,&quot;lockStatus&quot;,&quot;Locking&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_TKMBIErDEemG5ZtmQS1p2g" name="ConnectionEstablished" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_TFK-QErDEemG5ZtmQS1p2g" name="Debug__init__S" guard="_TFLlUUrDEemG5ZtmQS1p2g" source="_TFDCcErDEemG5ZtmQS1p2g" target="_TFGs0ErDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_TFLlUUrDEemG5ZtmQS1p2g" name="Debug__Guardinit">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_TFLlUErDEemG5ZtmQS1p2g" name="Debug__Guardinit">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Initial1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TFNagErDEemG5ZtmQS1p2g" name="Debug__init__S__257">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__init__S&quot;,(char *)&quot;Debug__Path__init&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TFPPsErDEemG5ZtmQS1p2g" name="Debug__init__E" source="_TFHT4UrDEemG5ZtmQS1p2g" target="_D7MQENrDEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TFP2wErDEemG5ZtmQS1p2g" name="Debug__init__E__258">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__init__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;unlocked&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TFThIErDEemG5ZtmQS1p2g" name="Debug__init__dbg__varChange" source="_TFE3oUrDEemG5ZtmQS1p2g" target="_TFE3oUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TFUIMUrDEemG5ZtmQS1p2g" name="Debug__init__dbg__varChange__260">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_TFUIMErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_TFVWUErDEemG5ZtmQS1p2g" name="Debug__init__dbg__setBreakPoint" source="_TFE3oUrDEemG5ZtmQS1p2g" target="_TFE3oUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TFVWUkrDEemG5ZtmQS1p2g" name="Debug__init__dbg__setBreakPoint__261">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TFVWUUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TFXLgErDEemG5ZtmQS1p2g" name="Debug__init__dbg__remBreakPoint" source="_TFE3oUrDEemG5ZtmQS1p2g" target="_TFE3oUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TFYZoErDEemG5ZtmQS1p2g" name="Debug__init__dbg__remBreakPoint__262">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TFXykErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TFZAsErDEemG5ZtmQS1p2g" name="Debug__init__dbg__viewBreakPoints" source="_TFE3oUrDEemG5ZtmQS1p2g" target="_TFE3oUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TFZnwErDEemG5ZtmQS1p2g" name="Debug__init__dbg__viewBreakPoints__263">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TFZAsUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TFa14ErDEemG5ZtmQS1p2g" name="Debug__init__dbg__dbgSetExecMode" source="_TFE3oUrDEemG5ZtmQS1p2g" target="_TFE3oUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TFbc8ErDEemG5ZtmQS1p2g" name="Debug__init__dbg__dbgSetExecMode__264">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_TFa14UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TFcEAErDEemG5ZtmQS1p2g" name="Debug__init__dbg__dbgDeferMsg" source="_TFE3oUrDEemG5ZtmQS1p2g" target="_TFE3oUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TFcrEErDEemG5ZtmQS1p2g" name="Debug__init__dbg__dbgDeferMsg__265">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TFcEAUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_WvH7ENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_TGPVQUrDEemG5ZtmQS1p2g" name="Debug__twiceLock" source="_FLMfYNrDEeahI77Vg4Dl9Q" target="_TGJ1sErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TGP8UErDEemG5ZtmQS1p2g" name="Debug__twiceLock__278">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__twiceLock&quot;,(char *)&quot;locked&quot;,(char *)&quot;Debug__Path__twiceLock&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_GTLJMNrFEeahI77Vg4Dl9Q" name="twiceLock" event="_XN1s0NrAEeahI77Vg4Dl9Q" port="_WvH7ENrBEeahI77Vg4Dl9Q"/>
          </transition>
          <transition xmi:id="_TGTmsErDEemG5ZtmQS1p2g" name="Debug__twiceLock__S" guard="_TGU00UrDEemG5ZtmQS1p2g" source="_TGJ1sErDEemG5ZtmQS1p2g" target="_TGM5AUrDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_TGU00UrDEemG5ZtmQS1p2g" name="Debug__GuardtwiceLock">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_TGU00ErDEemG5ZtmQS1p2g" name="Debug__GuardtwiceLock">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;locked&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TGWC8ErDEemG5ZtmQS1p2g" name="Debug__twiceLock__S__280">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__twiceLock__S&quot;,(char *)&quot;Debug__Path__twiceLock&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TGXREErDEemG5ZtmQS1p2g" name="Debug__twiceLock__E" source="_TGOHIUrDEemG5ZtmQS1p2g" target="_FLMfYNrDEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TGX4IErDEemG5ZtmQS1p2g" name="Debug__twiceLock__E__281">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__twiceLock__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;locked&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TGaUYErDEemG5ZtmQS1p2g" name="Debug__twiceLock__dbg__varChange" source="_TGLq4ErDEemG5ZtmQS1p2g" target="_TGLq4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TGa7cErDEemG5ZtmQS1p2g" name="Debug__twiceLock__dbg__varChange__283">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_TGaUYUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_TGcJkErDEemG5ZtmQS1p2g" name="Debug__twiceLock__dbg__setBreakPoint" source="_TGLq4ErDEemG5ZtmQS1p2g" target="_TGLq4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TGcwoErDEemG5ZtmQS1p2g" name="Debug__twiceLock__dbg__setBreakPoint__284">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TGcJkUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TGel0ErDEemG5ZtmQS1p2g" name="Debug__twiceLock__dbg__remBreakPoint" source="_TGLq4ErDEemG5ZtmQS1p2g" target="_TGLq4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TGfM4ErDEemG5ZtmQS1p2g" name="Debug__twiceLock__dbg__remBreakPoint__285">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TGel0UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TGgbAErDEemG5ZtmQS1p2g" name="Debug__twiceLock__dbg__viewBreakPoints" source="_TGLq4ErDEemG5ZtmQS1p2g" target="_TGLq4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TGhCEErDEemG5ZtmQS1p2g" name="Debug__twiceLock__dbg__viewBreakPoints__286">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TGgbAUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TGhpIErDEemG5ZtmQS1p2g" name="Debug__twiceLock__dbg__dbgSetExecMode" source="_TGLq4ErDEemG5ZtmQS1p2g" target="_TGLq4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TGjeUErDEemG5ZtmQS1p2g" name="Debug__twiceLock__dbg__dbgSetExecMode__287">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_TGi3QErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TGkFYErDEemG5ZtmQS1p2g" name="Debug__twiceLock__dbg__dbgDeferMsg" source="_TGLq4ErDEemG5ZtmQS1p2g" target="_TGLq4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TGkFYkrDEemG5ZtmQS1p2g" name="Debug__twiceLock__dbg__dbgDeferMsg__288">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TGkFYUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_WvH7ENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_THaZ8UrDEemG5ZtmQS1p2g" name="Debug__unlock" source="_FLMfYNrDEeahI77Vg4Dl9Q" target="_THU6YErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THbBAErDEemG5ZtmQS1p2g" name="Debug__unlock__304">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__unlock&quot;,(char *)&quot;locked&quot;,(char *)&quot;Debug__Path__unlock&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_ggdK4NrEEeahI77Vg4Dl9Q" name="unlock" event="_Zlrt8NrAEeahI77Vg4Dl9Q" port="_WvH7ENrBEeahI77Vg4Dl9Q"/>
          </transition>
          <transition xmi:id="_THcPIErDEemG5ZtmQS1p2g" name="Debug__unlock__S" guard="_THddQUrDEemG5ZtmQS1p2g" source="_THU6YErDEemG5ZtmQS1p2g" target="_THYkwUrDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_THddQUrDEemG5ZtmQS1p2g" name="Debug__Guardunlock">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_THddQErDEemG5ZtmQS1p2g" name="Debug__Guardunlock">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;locked&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THeEUErDEemG5ZtmQS1p2g" name="Debug__unlock__S__306">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__unlock__S&quot;,(char *)&quot;Debug__Path__unlock&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_THggkErDEemG5ZtmQS1p2g" name="Debug__unlock__E" source="_THZy4UrDEemG5ZtmQS1p2g" target="_D7MQENrDEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THhHoErDEemG5ZtmQS1p2g" name="Debug__unlock__E__307">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__unlock__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;unlocked&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_THi80ErDEemG5ZtmQS1p2g" name="Debug__unlock__dbg__varChange" source="_THWIgErDEemG5ZtmQS1p2g" target="_THWIgErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THjj4ErDEemG5ZtmQS1p2g" name="Debug__unlock__dbg__varChange__309">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_THi80UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_THkK8ErDEemG5ZtmQS1p2g" name="Debug__unlock__dbg__setBreakPoint" source="_THWIgErDEemG5ZtmQS1p2g" target="_THWIgErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THkK8krDEemG5ZtmQS1p2g" name="Debug__unlock__dbg__setBreakPoint__310">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_THkK8UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_THkyAErDEemG5ZtmQS1p2g" name="Debug__unlock__dbg__remBreakPoint" source="_THWIgErDEemG5ZtmQS1p2g" target="_THWIgErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THlZEUrDEemG5ZtmQS1p2g" name="Debug__unlock__dbg__remBreakPoint__311">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_THlZEErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_THmAIErDEemG5ZtmQS1p2g" name="Debug__unlock__dbg__viewBreakPoints" source="_THWIgErDEemG5ZtmQS1p2g" target="_THWIgErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THmnMErDEemG5ZtmQS1p2g" name="Debug__unlock__dbg__viewBreakPoints__312">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_THmAIUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_THnOQErDEemG5ZtmQS1p2g" name="Debug__unlock__dbg__dbgSetExecMode" source="_THWIgErDEemG5ZtmQS1p2g" target="_THWIgErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THnOQkrDEemG5ZtmQS1p2g" name="Debug__unlock__dbg__dbgSetExecMode__313">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_THnOQUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_THn1UErDEemG5ZtmQS1p2g" name="Debug__unlock__dbg__dbgDeferMsg" source="_THWIgErDEemG5ZtmQS1p2g" target="_THWIgErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THocYErDEemG5ZtmQS1p2g" name="Debug__unlock__dbg__dbgDeferMsg__314">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_THn1UUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_WvH7ENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_TIO5UUrDEemG5ZtmQS1p2g" name="Debug__twiceUnlock" source="_D7MQENrDEeahI77Vg4Dl9Q" target="_TIKA0ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TIPgYErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__330">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__twiceUnlock&quot;,(char *)&quot;unlocked&quot;,(char *)&quot;Debug__Path__twiceUnlock&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_Wjd-gNreEeal5dJZNvUqew" event="_Zlrt8NrAEeahI77Vg4Dl9Q" port="_WvH7ENrBEeahI77Vg4Dl9Q"/>
          </transition>
          <transition xmi:id="_TIRVkErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__S" guard="_TITKwUrDEemG5ZtmQS1p2g" source="_TIKA0ErDEemG5ZtmQS1p2g" target="_TIMdEUrDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_TITKwUrDEemG5ZtmQS1p2g" name="Debug__GuardtwiceUnlock">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_TITKwErDEemG5ZtmQS1p2g" name="Debug__GuardtwiceUnlock">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;unlocked&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TIUY4ErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__S__332">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__twiceUnlock__S&quot;,(char *)&quot;Debug__Path__twiceUnlock&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TIWOEErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__E" source="_TINrMErDEemG5ZtmQS1p2g" target="_D7MQENrDEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TIW1IErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__E__333">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__twiceUnlock__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;unlocked&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TIYDQErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__dbg__varChange" source="_TILO8UrDEemG5ZtmQS1p2g" target="_TILO8UrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TIZRYErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__dbg__varChange__335">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_TIYqUErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_TIZ4cErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__dbg__setBreakPoint" source="_TILO8UrDEemG5ZtmQS1p2g" target="_TILO8UrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TIafgErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__dbg__setBreakPoint__336">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TIZ4cUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TIbGkErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__dbg__remBreakPoint" source="_TILO8UrDEemG5ZtmQS1p2g" target="_TILO8UrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TIbtoErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__dbg__remBreakPoint__337">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TIbGkUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TIcUsErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__dbg__viewBreakPoints" source="_TILO8UrDEemG5ZtmQS1p2g" target="_TILO8UrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TIc7wErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__dbg__viewBreakPoints__338">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TIcUsUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TIc7wUrDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__dbg__dbgSetExecMode" source="_TILO8UrDEemG5ZtmQS1p2g" target="_TILO8UrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TIdi0UrDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__dbg__dbgSetExecMode__339">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_TIdi0ErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TIeJ4ErDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__dbg__dbgDeferMsg" source="_TILO8UrDEemG5ZtmQS1p2g" target="_TILO8UrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TIeJ4krDEemG5ZtmQS1p2g" name="Debug__twiceUnlock__dbg__dbgDeferMsg__340">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TIeJ4UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_WvH7ENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_TJF08UrDEemG5ZtmQS1p2g" name="Debug__lock" source="_D7MQENrDEeahI77Vg4Dl9Q" target="_TJAVYErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJGcAErDEemG5ZtmQS1p2g" name="Debug__lock__356">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__lock&quot;,(char *)&quot;unlocked&quot;,(char *)&quot;Debug__Path__lock&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="__mJ4wNreEeal5dJZNvUqew" name="lock" event="_XN1s0NrAEeahI77Vg4Dl9Q" port="_WvH7ENrBEeahI77Vg4Dl9Q"/>
          </transition>
          <transition xmi:id="_TJIRMErDEemG5ZtmQS1p2g" name="Debug__lock__S" guard="_TJI4QUrDEemG5ZtmQS1p2g" source="_TJAVYErDEemG5ZtmQS1p2g" target="_TJCxoUrDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_TJI4QUrDEemG5ZtmQS1p2g" name="Debug__Guardlock">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_TJI4QErDEemG5ZtmQS1p2g" name="Debug__Guardlock">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;unlocked&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJKGYErDEemG5ZtmQS1p2g" name="Debug__lock__S__358">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__lock__S&quot;,(char *)&quot;Debug__Path__lock&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TJL7kErDEemG5ZtmQS1p2g" name="Debug__lock__E" source="_TJEm0UrDEemG5ZtmQS1p2g" target="_FLMfYNrDEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJL7kUrDEemG5ZtmQS1p2g" name="Debug__lock__E__359">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__lock__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;locked&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TJNJsErDEemG5ZtmQS1p2g" name="Debug__lock__dbg__varChange" source="_TJBjgUrDEemG5ZtmQS1p2g" target="_TJBjgUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJNwwUrDEemG5ZtmQS1p2g" name="Debug__lock__dbg__varChange__361">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_TJNwwErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_TJOX0ErDEemG5ZtmQS1p2g" name="Debug__lock__dbg__setBreakPoint" source="_TJBjgUrDEemG5ZtmQS1p2g" target="_TJBjgUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJO-4UrDEemG5ZtmQS1p2g" name="Debug__lock__dbg__setBreakPoint__362">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TJO-4ErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TJPl8ErDEemG5ZtmQS1p2g" name="Debug__lock__dbg__remBreakPoint" source="_TJBjgUrDEemG5ZtmQS1p2g" target="_TJBjgUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJQNAErDEemG5ZtmQS1p2g" name="Debug__lock__dbg__remBreakPoint__363">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TJPl8UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TJQ0EErDEemG5ZtmQS1p2g" name="Debug__lock__dbg__viewBreakPoints" source="_TJBjgUrDEemG5ZtmQS1p2g" target="_TJBjgUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJQ0EkrDEemG5ZtmQS1p2g" name="Debug__lock__dbg__viewBreakPoints__364">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TJQ0EUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TJRbIErDEemG5ZtmQS1p2g" name="Debug__lock__dbg__dbgSetExecMode" source="_TJBjgUrDEemG5ZtmQS1p2g" target="_TJBjgUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJSCMErDEemG5ZtmQS1p2g" name="Debug__lock__dbg__dbgSetExecMode__365">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_TJRbIUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S2bXoErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TJSCMUrDEemG5ZtmQS1p2g" name="Debug__lock__dbg__dbgDeferMsg" source="_TJBjgUrDEemG5ZtmQS1p2g" target="_TJBjgUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJSpQUrDEemG5ZtmQS1p2g" name="Debug__lock__dbg__dbgDeferMsg__366">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TJSpQErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_WvH7ENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_TKJk4UrDEemG5ZtmQS1p2g" name="Debug__InitDebug" source="_Cz87MNrDEeahI77Vg4Dl9Q" target="_TKIWwErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TKJk4krDEemG5ZtmQS1p2g" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Cz87MNrDEeahI77Vg4Dl9Q" name="Initial1"/>
          <subvertex xmi:type="uml:State" xmi:id="_D7MQENrDEeahI77Vg4Dl9Q" name="unlocked">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TKdG4ErDEemG5ZtmQS1p2g" name="unlocked__381">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::unlocked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TKdt8ErDEemG5ZtmQS1p2g" name="unlocked__382">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::unlocked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_FLMfYNrDEeahI77Vg4Dl9Q" name="locked">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TKgKMErDEemG5ZtmQS1p2g" name="locked__383">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::locked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TKgxQErDEemG5ZtmQS1p2g" name="locked__384">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::locked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_TFDCcErDEemG5ZtmQS1p2g" name="Debug__Path__init" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_TFE3oUrDEemG5ZtmQS1p2g" name="Debug__C__init">
            <connectionPoint xmi:id="_TFGs0ErDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_TFHT4UrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_TFE3okrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_TFlN8ErDEemG5ZtmQS1p2g" name="Debug__init__trans__init" source="_TFGs0ErDEemG5ZtmQS1p2g" target="_TFg8gUrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TF1soErDEemG5ZtmQS1p2g" name="Debug__init__trans__init__270">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__init::Region1::Debug__init__trans__init&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__init&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_TFl1AErDEemG5ZtmQS1p2g" name="Debug__Ac__init" source="_TFg8gUrDEemG5ZtmQS1p2g" target="_TFixsErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TFmcEErDEemG5ZtmQS1p2g" name="init" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>    std::cout&lt;&lt;&quot;The Lock &quot;&lt;&lt;this->borderPorts[0]->slotName()&lt;&lt;&quot;  is unlocked&quot;&lt;&lt;std::endl;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__init::Region1::Debug__Ac__init&quot;,(char *)&quot;Debug__B__Ac__init&quot;,(char *)&quot;Debug__A__Ac__init&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TFl1AUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TFmcEUrDEemG5ZtmQS1p2g" name="Debug__En__unlocked" source="_TFixsErDEemG5ZtmQS1p2g" target="_TFj_0ErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TGAEsErDEemG5ZtmQS1p2g" name="Debug__En__unlocked__273">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__init::Region1::Debug__En__unlocked&quot;,(char *)&quot;Debug__A__Ac__init&quot;,(char *)&quot;Debug__A__En__init&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TFnDIErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TFnqMErDEemG5ZtmQS1p2g" name="Debug__end__trans__init" source="_TFj_0ErDEemG5ZtmQS1p2g" target="_TFHT4UrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TGCg8ErDEemG5ZtmQS1p2g" name="Debug__end__trans__init__275">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__init::Region1::Debug__end__trans__init&quot;,(char *)&quot;Debug__A__En__init&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TFnqMUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_TFg8gUrDEemG5ZtmQS1p2g" name="Debug__B__Ac__init">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TFg8gkrDEemG5ZtmQS1p2g" name="Debug__B__Ac__init">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;init&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__init::Region1::Debug__B__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TFpfYErDEemG5ZtmQS1p2g" name="Debug__B__Ac__init__266">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__init::Region1::Debug__B__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TFixsErDEemG5ZtmQS1p2g" name="Debug__A__Ac__init">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TFixsUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__init">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;init&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;unlocked&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__init::Region1::Debug__A__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TFuX4ErDEemG5ZtmQS1p2g" name="Debug__A__Ac__init__267">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__init::Region1::Debug__A__Ac__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TFj_0ErDEemG5ZtmQS1p2g" name="Debug__A__En__init">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TFj_0UrDEemG5ZtmQS1p2g" name="Debug__A__En__init">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;unlocked&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__init::Region1::Debug__A__En__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TFyCQErDEemG5ZtmQS1p2g" name="Debug__A__En__init__268">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__init::Region1::Debug__A__En__init&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_TGJ1sErDEemG5ZtmQS1p2g" name="Debug__Path__twiceLock" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_TGLq4ErDEemG5ZtmQS1p2g" name="Debug__C__twiceLock">
            <connectionPoint xmi:id="_TGM5AUrDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_TGOHIUrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_TGLq4UrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_TGt2YErDEemG5ZtmQS1p2g" name="Debug__init__trans__twiceLock" source="_TGM5AUrDEemG5ZtmQS1p2g" target="_TGoW0ErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THFp0ErDEemG5ZtmQS1p2g" name="Debug__init__trans__twiceLock__294">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__init__trans__twiceLock&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__locked&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_TGudcErDEemG5ZtmQS1p2g" name="Debug__Ex__locked" source="_TGoW0ErDEemG5ZtmQS1p2g" target="_TGpk8ErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THIGEErDEemG5ZtmQS1p2g" name="Debug__Ex__locked__296">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__Ex__locked&quot;,(char *)&quot;Debug__B__Ex__locked&quot;,(char *)&quot;Debug__B__Ac__twiceLock&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TGudcUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TGudckrDEemG5ZtmQS1p2g" name="Debug__AC__twiceLock" source="_TGpk8ErDEemG5ZtmQS1p2g" target="_TGraIErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TGvEgUrDEemG5ZtmQS1p2g" name="replyTwiceUnlock" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>    std::cout&lt;&lt;&quot;The Lock   &quot;&lt;&lt;this->borderPorts[0]->slotName()&lt;&lt;&quot;  is already unlocked&quot;&lt;&lt;std::endl;
    lockPort.lockStatus(false).send();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__AC__twiceLock&quot;,(char *)&quot;Debug__B__Ac__twiceLock&quot;,(char *)&quot;Debug__A__Ac__twiceLock&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TGvEgErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TGvrkErDEemG5ZtmQS1p2g" name="Debug__En__locked" source="_TGraIErDEemG5ZtmQS1p2g" target="_TGsoQErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THM-kErDEemG5ZtmQS1p2g" name="Debug__En__locked__299">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__En__locked&quot;,(char *)&quot;Debug__A__Ac__twiceLock&quot;,(char *)&quot;Debug__A__En__locked&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TGvrkUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TGwSoErDEemG5ZtmQS1p2g" name="Debug__end__trans__twiceLock" source="_TGsoQErDEemG5ZtmQS1p2g" target="_TGOHIUrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THOzwErDEemG5ZtmQS1p2g" name="Debug__end__trans__twiceLock__301">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__end__trans__twiceLock&quot;,(char *)&quot;Debug__A__En__locked&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TGwSoUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_TGoW0ErDEemG5ZtmQS1p2g" name="Debug__B__Ex__locked">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TGoW0UrDEemG5ZtmQS1p2g" name="Debug__B__Ex__locked">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;locked&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__B__Ex__locked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TGz9AErDEemG5ZtmQS1p2g" name="Debug__B__Ex__locked__289">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__B__Ex__locked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TGpk8ErDEemG5ZtmQS1p2g" name="Debug__B__Ac__twiceLock">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TGpk8UrDEemG5ZtmQS1p2g" name="Debug__B__Ac__twiceLock">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;locked&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;twiceLock&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__B__Ac__twiceLock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TG3nYErDEemG5ZtmQS1p2g" name="Debug__B__Ac__twiceLock__290">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__B__Ac__twiceLock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TGraIErDEemG5ZtmQS1p2g" name="Debug__A__Ac__twiceLock">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TGraIUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__twiceLock">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;twiceLock&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;locked&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__A__Ac__twiceLock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TG7RwErDEemG5ZtmQS1p2g" name="Debug__A__Ac__twiceLock__291">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__A__Ac__twiceLock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TGsoQErDEemG5ZtmQS1p2g" name="Debug__A__En__locked">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TGtPUErDEemG5ZtmQS1p2g" name="Debug__A__En__locked">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;locked&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__A__En__locked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TG-8IErDEemG5ZtmQS1p2g" name="Debug__A__En__locked__292">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceLock::Region1::Debug__A__En__locked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_THU6YErDEemG5ZtmQS1p2g" name="Debug__Path__unlock" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_THWIgErDEemG5ZtmQS1p2g" name="Debug__C__unlock">
            <connectionPoint xmi:id="_THYkwUrDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_THZy4UrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_THWIgUrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_THxmUErDEemG5ZtmQS1p2g" name="Debug__init__trans__unlock" source="_THYkwUrDEemG5ZtmQS1p2g" target="_THsGwErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TH-aoErDEemG5ZtmQS1p2g" name="Debug__init__trans__unlock__320">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__init__trans__unlock&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__locked&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_THxmUUrDEemG5ZtmQS1p2g" name="Debug__Ex__locked" source="_THsGwErDEemG5ZtmQS1p2g" target="_THtU4ErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TH_owErDEemG5ZtmQS1p2g" name="Debug__Ex__locked__322">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__Ex__locked&quot;,(char *)&quot;Debug__B__Ex__locked&quot;,(char *)&quot;Debug__B__Ac__unlock&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_THxmUkrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_THyNYErDEemG5ZtmQS1p2g" name="Debug__AC__unlock" source="_THtU4ErDEemG5ZtmQS1p2g" target="_THujAErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_THyNYkrDEemG5ZtmQS1p2g" name="replyUnlock" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>    std::cout&lt;&lt;&quot;The Lock &quot;&lt;&lt;this->borderPorts[0]->slotName()&lt;&lt;&quot;  is unlocked&quot;&lt;&lt;std::endl;
    lockPort.lockStatus(false).send();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__AC__unlock&quot;,(char *)&quot;Debug__B__Ac__unlock&quot;,(char *)&quot;Debug__A__Ac__unlock&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_THyNYUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_THy0cErDEemG5ZtmQS1p2g" name="Debug__En__unlocked" source="_THujAErDEemG5ZtmQS1p2g" target="_THwYMErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TIDTIErDEemG5ZtmQS1p2g" name="Debug__En__unlocked__325">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__En__unlocked&quot;,(char *)&quot;Debug__A__Ac__unlock&quot;,(char *)&quot;Debug__A__En__unlocked&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_THy0cUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_THy0ckrDEemG5ZtmQS1p2g" name="Debug__end__trans__unlock" source="_THwYMErDEemG5ZtmQS1p2g" target="_THZy4UrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TIFIUErDEemG5ZtmQS1p2g" name="Debug__end__trans__unlock__327">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__end__trans__unlock&quot;,(char *)&quot;Debug__A__En__unlocked&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_THy0c0rDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_THsGwErDEemG5ZtmQS1p2g" name="Debug__B__Ex__locked">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_THsGwUrDEemG5ZtmQS1p2g" name="Debug__B__Ex__locked">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;locked&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__B__Ex__locked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TH0poErDEemG5ZtmQS1p2g" name="Debug__B__Ex__locked__315">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__B__Ex__locked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_THtU4ErDEemG5ZtmQS1p2g" name="Debug__B__Ac__unlock">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_THtU4UrDEemG5ZtmQS1p2g" name="Debug__B__Ac__unlock">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;locked&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;unlock&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__B__Ac__unlock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TH3F4UrDEemG5ZtmQS1p2g" name="Debug__B__Ac__unlock__316">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__B__Ac__unlock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_THujAErDEemG5ZtmQS1p2g" name="Debug__A__Ac__unlock">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_THujAUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__unlock">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;unlock&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;unlocked&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__A__Ac__unlock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TH5iIErDEemG5ZtmQS1p2g" name="Debug__A__Ac__unlock__317">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__A__Ac__unlock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_THwYMErDEemG5ZtmQS1p2g" name="Debug__A__En__unlocked">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_THwYMUrDEemG5ZtmQS1p2g" name="Debug__A__En__unlocked">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;unlocked&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__A__En__unlocked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TH7XUErDEemG5ZtmQS1p2g" name="Debug__A__En__unlocked__318">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__unlock::Region1::Debug__A__En__unlocked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_TIKA0ErDEemG5ZtmQS1p2g" name="Debug__Path__twiceUnlock" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_TILO8UrDEemG5ZtmQS1p2g" name="Debug__C__twiceUnlock">
            <connectionPoint xmi:id="_TIMdEUrDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_TINrMErDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_TILO8krDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_TImswErDEemG5ZtmQS1p2g" name="Debug__init__trans__twiceUnlock" source="_TIMdEUrDEemG5ZtmQS1p2g" target="_TIhNMErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TI19UErDEemG5ZtmQS1p2g" name="Debug__init__trans__twiceUnlock__346">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__init__trans__twiceUnlock&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__unlocked&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_TInT0ErDEemG5ZtmQS1p2g" name="Debug__Ex__unlocked" source="_TIhNMErDEemG5ZtmQS1p2g" target="_TIh0QErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TI3LcErDEemG5ZtmQS1p2g" name="Debug__Ex__unlocked__348">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__Ex__unlocked&quot;,(char *)&quot;Debug__B__Ex__unlocked&quot;,(char *)&quot;Debug__B__Ac__twiceUnlock&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TIn64ErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TIn64UrDEemG5ZtmQS1p2g" name="Debug__AC__twiceUnlock" source="_TIh0QErDEemG5ZtmQS1p2g" target="_TIjpcErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TIoh8ErDEemG5ZtmQS1p2g" name="replyTwiceLock" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>    std::cout&lt;&lt;&quot;The Lock   &quot;&lt;&lt;this->borderPorts[0]->slotName()&lt;&lt;&quot;  is already unlocked&quot;&lt;&lt;std::endl;
    lockPort.lockStatus(true).send();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__AC__twiceUnlock&quot;,(char *)&quot;Debug__B__Ac__twiceUnlock&quot;,(char *)&quot;Debug__A__Ac__twiceUnlock&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TIn64krDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TIpJAErDEemG5ZtmQS1p2g" name="Debug__En__unlocked" source="_TIjpcErDEemG5ZtmQS1p2g" target="_TIleoErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TI6OwErDEemG5ZtmQS1p2g" name="Debug__En__unlocked__351">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__En__unlocked&quot;,(char *)&quot;Debug__A__Ac__twiceUnlock&quot;,(char *)&quot;Debug__A__En__unlocked&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TIpJAUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TIpwEErDEemG5ZtmQS1p2g" name="Debug__end__trans__twiceUnlock" source="_TIleoErDEemG5ZtmQS1p2g" target="_TINrMErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TI8D8ErDEemG5ZtmQS1p2g" name="Debug__end__trans__twiceUnlock__353">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__end__trans__twiceUnlock&quot;,(char *)&quot;Debug__A__En__unlocked&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TIqXIErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_TIhNMErDEemG5ZtmQS1p2g" name="Debug__B__Ex__unlocked">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TIhNMUrDEemG5ZtmQS1p2g" name="Debug__B__Ex__unlocked">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;unlocked&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__B__Ex__unlocked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TIrlQErDEemG5ZtmQS1p2g" name="Debug__B__Ex__unlocked__341">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__B__Ex__unlocked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TIh0QErDEemG5ZtmQS1p2g" name="Debug__B__Ac__twiceUnlock">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TIibUErDEemG5ZtmQS1p2g" name="Debug__B__Ac__twiceUnlock">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;unlocked&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;twiceUnlock&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__B__Ac__twiceUnlock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TIvPoErDEemG5ZtmQS1p2g" name="Debug__B__Ac__twiceUnlock__342">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__B__Ac__twiceUnlock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TIjpcErDEemG5ZtmQS1p2g" name="Debug__A__Ac__twiceUnlock">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TIjpcUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__twiceUnlock">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;twiceUnlock&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;unlocked&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__A__Ac__twiceUnlock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TIxr4ErDEemG5ZtmQS1p2g" name="Debug__A__Ac__twiceUnlock__343">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__A__Ac__twiceUnlock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TIleoErDEemG5ZtmQS1p2g" name="Debug__A__En__unlocked">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TIleoUrDEemG5ZtmQS1p2g" name="Debug__A__En__unlocked">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;unlocked&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__A__En__unlocked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TIy6AErDEemG5ZtmQS1p2g" name="Debug__A__En__unlocked__344">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__twiceUnlock::Region1::Debug__A__En__unlocked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_TJAVYErDEemG5ZtmQS1p2g" name="Debug__Path__lock" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_TJBjgUrDEemG5ZtmQS1p2g" name="Debug__C__lock">
            <connectionPoint xmi:id="_TJCxoUrDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_TJEm0UrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_TJBjgkrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_TJe2gErDEemG5ZtmQS1p2g" name="Debug__init__trans__lock" source="_TJCxoUrDEemG5ZtmQS1p2g" target="_TJXhwErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJ1b0ErDEemG5ZtmQS1p2g" name="Debug__init__trans__lock__372">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__init__trans__lock&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__unlocked&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_TJe2gUrDEemG5ZtmQS1p2g" name="Debug__Ex__unlocked" source="_TJXhwErDEemG5ZtmQS1p2g" target="_TJZ-AErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJ34EErDEemG5ZtmQS1p2g" name="Debug__Ex__unlocked__374">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__Ex__unlocked&quot;,(char *)&quot;Debug__B__Ex__unlocked&quot;,(char *)&quot;Debug__B__Ac__lock&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TJfdkErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TJgrsErDEemG5ZtmQS1p2g" name="Debug__AC__lock" source="_TJZ-AErDEemG5ZtmQS1p2g" target="_TJbzMErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJhSwErDEemG5ZtmQS1p2g" name="replyLock" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>    std::cout&lt;&lt;&quot;The Lock &quot;&lt;&lt;this->borderPorts[0]->slotName()&lt;&lt;&quot;  is locked&quot;&lt;&lt;std::endl;
    lockPort.lockStatus(true).send();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__AC__lock&quot;,(char *)&quot;Debug__B__Ac__lock&quot;,(char *)&quot;Debug__A__Ac__lock&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TJgrsUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TJh50ErDEemG5ZtmQS1p2g" name="Debug__En__locked" source="_TJbzMErDEemG5ZtmQS1p2g" target="_TJdoYErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TJ_M0ErDEemG5ZtmQS1p2g" name="Debug__En__locked__377">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__En__locked&quot;,(char *)&quot;Debug__A__Ac__lock&quot;,(char *)&quot;Debug__A__En__locked&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TJig4ErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TJjH8ErDEemG5ZtmQS1p2g" name="Debug__end__trans__lock" source="_TJdoYErDEemG5ZtmQS1p2g" target="_TJEm0UrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TKEFUErDEemG5ZtmQS1p2g" name="Debug__end__trans__lock__379">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__end__trans__lock&quot;,(char *)&quot;Debug__A__En__locked&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TJjvAErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S2bXoErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_TJXhwErDEemG5ZtmQS1p2g" name="Debug__B__Ex__unlocked">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TJXhwUrDEemG5ZtmQS1p2g" name="Debug__B__Ex__unlocked">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;unlocked&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__B__Ex__unlocked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TJmLQErDEemG5ZtmQS1p2g" name="Debug__B__Ex__unlocked__367">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__B__Ex__unlocked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TJZ-AErDEemG5ZtmQS1p2g" name="Debug__B__Ac__lock">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TJZ-AUrDEemG5ZtmQS1p2g" name="Debug__B__Ac__lock">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;unlocked&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;lock&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__B__Ac__lock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TJqcsUrDEemG5ZtmQS1p2g" name="Debug__B__Ac__lock__368">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__B__Ac__lock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TJbzMErDEemG5ZtmQS1p2g" name="Debug__A__Ac__lock">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TJbzMUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__lock">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;lock&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;locked&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__A__Ac__lock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TJuuIUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__lock__369">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__A__Ac__lock&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TJdoYErDEemG5ZtmQS1p2g" name="Debug__A__En__locked">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TJdoYUrDEemG5ZtmQS1p2g" name="Debug__A__En__locked">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;locked&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__A__En__locked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TJwjUErDEemG5ZtmQS1p2g" name="Debug__A__En__locked__370">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::Lock::lockSM::Region1::Debug__C__lock::Region1::Debug__A__En__locked&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_TKIWwErDEemG5ZtmQS1p2g" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_S2Y7YUrDEemG5ZtmQS1p2g" name="Debug__recallAllMsg" specification="_S2Y7YErDEemG5ZtmQS1p2g">
        <language>C++</language>
        <body>lockPort.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_S2qoMErDEemG5ZtmQS1p2g" name="Debug__variablesViewMethod" specification="_S2qBIErDEemG5ZtmQS1p2g">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_S20ZMErDEemG5ZtmQS1p2g" name="Debug__variablesChange" specification="_S2vgsErDEemG5ZtmQS1p2g">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);

    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_S3d5cErDEemG5ZtmQS1p2g" name="Debug__sendEvent" specification="_S3JwYErDEemG5ZtmQS1p2g">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_S2Y7YErDEemG5ZtmQS1p2g" name="Debug__recallAllMsg" visibility="private" method="_S2Y7YUrDEemG5ZtmQS1p2g"/>
      <ownedOperation xmi:id="_S2qBIErDEemG5ZtmQS1p2g" name="Debug__variablesView" visibility="private" method="_S2qoMErDEemG5ZtmQS1p2g"/>
      <ownedOperation xmi:id="_S2vgsErDEemG5ZtmQS1p2g" name="Debug__variablesChange" visibility="private" method="_S20ZMErDEemG5ZtmQS1p2g">
        <ownedParameter xmi:id="_S2wHwErDEemG5ZtmQS1p2g" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S2xV4ErDEemG5ZtmQS1p2g" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S2zyIErDEemG5ZtmQS1p2g" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_S3JwYErDEemG5ZtmQS1p2g" name="Debug__sendEvent" visibility="private" method="_S3d5cErDEemG5ZtmQS1p2g">
        <ownedParameter xmi:id="_S3K-gErDEemG5ZtmQS1p2g" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S3MzsErDEemG5ZtmQS1p2g" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S3P3AErDEemG5ZtmQS1p2g" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S3S6UErDEemG5ZtmQS1p2g" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S3UIcErDEemG5ZtmQS1p2g" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S3WksUrDEemG5ZtmQS1p2g" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S3ZA8ErDEemG5ZtmQS1p2g" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S3aPEErDEemG5ZtmQS1p2g" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S3crUErDEemG5ZtmQS1p2g" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S3dSYErDEemG5ZtmQS1p2g" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_s7aB8Nq_EeahI77Vg4Dl9Q" name="CentralLock" classifierBehavior="_mTK68NrFEeahI77Vg4Dl9Q" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_k3gyENrBEeahI77Vg4Dl9Q" name="lockPort" visibility="public" type="_LXKZwNrAEeahI77Vg4Dl9Q" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_fVbt8NrfEeal5dJZNvUqew" value="4"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_fVTyINrfEeal5dJZNvUqew" value="4"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Cey60NrUEeaBAosuR3tfxw" name="startupTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_pzTr8NroEeal5dJZNvUqew" name="tmpInt">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_t1vmoNroEeal5dJZNvUqew" value="0"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_u29zENroEeal5dJZNvUqew" name="locksCount">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_zKDY4NroEeal5dJZNvUqew" value="4"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_S1HJAErDEemG5ZtmQS1p2g" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S1MBgErDEemG5ZtmQS1p2g" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_S1MBgUrDEemG5ZtmQS1p2g" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_S1nfUErDEemG5ZtmQS1p2g" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_S1oGYErDEemG5ZtmQS1p2g" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_S1otcErDEemG5ZtmQS1p2g" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_S1rJsErDEemG5ZtmQS1p2g" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_mTK68NrFEeahI77Vg4Dl9Q" name="centralLockSM">
        <region xmi:id="_oPcaYNrFEeahI77Vg4Dl9Q" name="Region1">
          <transition xmi:id="_HV4RcNrHEeahI77Vg4Dl9Q" name="Initial1__StartingUp__2" source="_S6LPMErDEemG5ZtmQS1p2g" target="_0JLVkNrSEeaBAosuR3tfxw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S7y_0ErDEemG5ZtmQS1p2g" name="Initial1__StartingUp__2__52">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Initial1__StartingUp__2&quot;,(char *)&quot;Debug__Path__Initial1__StartingUp__2&quot;,(char *)&quot;StartingUp&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_mrtE0NrHEeahI77Vg4Dl9Q" name="doorsOpen__WaitAllDoorBeClosed__1" source="_S4In0ErDEemG5ZtmQS1p2g" target="_IcetINrHEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S5_pAErDEemG5ZtmQS1p2g" name="doorsOpen__WaitAllDoorBeClosed__1__28">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;Debug__Path__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;WaitAllDoorBeClosed&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_dJOzkNrIEeahI77Vg4Dl9Q" name="WaitAllDoorBeOpened__Choice1__8" source="_TAzboErDEemG5ZtmQS1p2g" target="_bRbzYNrnEeal5dJZNvUqew">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TBy6IErDEemG5ZtmQS1p2g" name="WaitAllDoorBeOpened__Choice1__8__197">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;Debug__Path__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;Choice1&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_5LhOENrSEeaBAosuR3tfxw" name="StartingUp__doorsOpen__7" source="_S_lToErDEemG5ZtmQS1p2g" target="_7a5GINrGEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TAsG4ErDEemG5ZtmQS1p2g" name="StartingUp__doorsOpen__7__174">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::StartingUp__doorsOpen__7&quot;,(char *)&quot;Debug__Path__StartingUp__doorsOpen__7&quot;,(char *)&quot;doorsOpen&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_EgRIsNrnEeal5dJZNvUqew" name="WaitAllDoorBeClosed__AllDoorClosed__5" source="_S95RkErDEemG5ZtmQS1p2g" target="_9fM5sNrmEeal5dJZNvUqew">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-nqUErDEemG5ZtmQS1p2g" name="WaitAllDoorBeClosed__AllDoorClosed__5__123">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;Debug__Path__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;AllDoorClosed&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KEVOMNrnEeal5dJZNvUqew" name="AllDoorClosed__doorsClosed__4" source="_S82vwErDEemG5ZtmQS1p2g" target="_BIWYMNrHEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S90ZEErDEemG5ZtmQS1p2g" name="AllDoorClosed__doorsClosed__4__100">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;Debug__Path__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;doorsClosed&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_MAD7ENrnEeal5dJZNvUqew" name="AllDoorClosed__WaitAllDoorBeClosed__6" source="_S-tJ4ErDEemG5ZtmQS1p2g" target="_IcetINrHEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_hpQErDEemG5ZtmQS1p2g" name="AllDoorClosed__WaitAllDoorBeClosed__6__147">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;Debug__Path__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;WaitAllDoorBeClosed&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ZcttcNrnEeal5dJZNvUqew" name="doorsClosed__WaitAllDoorBeOpened__9" source="_TB3yoErDEemG5ZtmQS1p2g" target="_cd7pQNrHEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TC9XwErDEemG5ZtmQS1p2g" name="doorsClosed__WaitAllDoorBeOpened__9__224">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;Debug__Path__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;WaitAllDoorBeOpened&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_jCt-YNrnEeal5dJZNvUqew" name="Choice1__doorsOpen__10" source="_TDBpMErDEemG5ZtmQS1p2g" target="_7a5GINrGEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TEJDgErDEemG5ZtmQS1p2g" name="Choice1__doorsOpen__10__248">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Choice1__doorsOpen__10&quot;,(char *)&quot;Debug__Path__Choice1__doorsOpen__10&quot;,(char *)&quot;doorsOpen&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_nKsgYNrnEeal5dJZNvUqew" name="Choice1__WaitAllDoorBeOpened__3" source="_S78JwErDEemG5ZtmQS1p2g" target="_cd7pQNrHEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8x3QErDEemG5ZtmQS1p2g" name="Choice1__WaitAllDoorBeOpened__3__76">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;Debug__Path__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;WaitAllDoorBeOpened&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S4Tm8ErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1" source="_7a5GINrGEeahI77Vg4Dl9Q" target="_S4In0ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S4UOAErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__3">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;doorsOpen&quot;,(char *)&quot;Debug__Path__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_ZbNNMNrJEeahI77Vg4Dl9Q" event="_NUfP0NrFEeahI77Vg4Dl9Q" port="_k3gyENrBEeahI77Vg4Dl9Q"/>
          </transition>
          <transition xmi:id="_S4aUoErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__S" guard="_S4cJ0UrDEemG5ZtmQS1p2g" source="_S4In0ErDEemG5ZtmQS1p2g" target="_S4PVgErDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_S4cJ0UrDEemG5ZtmQS1p2g" name="Debug__GuarddoorsOpen__WaitAllDoorBeClosed__1">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_S4cJ0ErDEemG5ZtmQS1p2g" name="Debug__GuarddoorsOpen__WaitAllDoorBeClosed__1">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;doorsOpen&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S4fNIErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__S__5">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__doorsOpen__WaitAllDoorBeClosed__1__S&quot;,(char *)&quot;Debug__Path__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S4nwAErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__E" source="_S4RKsUrDEemG5ZtmQS1p2g" target="_IcetINrHEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S4oXEErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__E__6">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__doorsOpen__WaitAllDoorBeClosed__1__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WaitAllDoorBeClosed&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S4wS4ErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__dbg__varChange" source="_S4LrIErDEemG5ZtmQS1p2g" target="_S4LrIErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S4yIEErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__dbg__varChange__8">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_S4w58ErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_S40kUErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__dbg__setBreakPoint" source="_S4LrIErDEemG5ZtmQS1p2g" target="_S4LrIErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S41ycErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__dbg__setBreakPoint__9">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S40kUUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S44OsErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__dbg__remBreakPoint" source="_S4LrIErDEemG5ZtmQS1p2g" target="_S4LrIErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S441wUrDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__dbg__remBreakPoint__10">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S441wErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S46D4ErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__dbg__viewBreakPoints" source="_S4LrIErDEemG5ZtmQS1p2g" target="_S4LrIErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S46q8ErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__dbg__viewBreakPoints__11">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S46D4UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S475EErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__dbg__dbgSetExecMode" source="_S4LrIErDEemG5ZtmQS1p2g" target="_S4LrIErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S48gIErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__dbg__dbgSetExecMode__12">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_S475EUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S4-VUErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__dbg__dbgDeferMsg" source="_S4LrIErDEemG5ZtmQS1p2g" target="_S4LrIErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S4-8YErDEemG5ZtmQS1p2g" name="Debug__doorsOpen__WaitAllDoorBeClosed__1__dbg__dbgDeferMsg__13">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S4-VUUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_k3gyENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_S6WOUUrDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2" source="_TERmYErDEemG5ZtmQS1p2g" target="_S6LPMErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S6XccErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__30">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;AllDoorClosed&quot;,&quot;&quot;,&quot;WaitAllDoorBeClosed&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WaitAllDoorBeClosed&quot;,&quot;&quot;,&quot;AllDoorClosed&quot;,&quot;lockStatus&quot;,&quot;Locking&quot;);
Debug__SRO.addTransitionsFromState(&quot;AllDoorClosed&quot;,&quot;&quot;,&quot;doorsClosed&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;doorsOpen&quot;,&quot;&quot;,&quot;WaitAllDoorBeClosed&quot;,&quot;lockStatus&quot;,&quot;Locking&quot;);
Debug__SRO.addTransitionsFromState(&quot;StartingUp&quot;,&quot;&quot;,&quot;doorsOpen&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;Initial1&quot;,&quot;&quot;,&quot;StartingUp&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice1&quot;,&quot;&quot;,&quot;WaitAllDoorBeOpened&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WaitAllDoorBeOpened&quot;,&quot;&quot;,&quot;Choice1&quot;,&quot;lockStatus&quot;,&quot;Locking&quot;);
Debug__SRO.addTransitionsFromState(&quot;Choice1&quot;,&quot;&quot;,&quot;doorsOpen&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;doorsClosed&quot;,&quot;&quot;,&quot;WaitAllDoorBeOpened&quot;,&quot;lockStatus&quot;,&quot;Locking&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *) &quot;&quot;,(char *) &quot;&quot;,(char *)&quot;&quot;,(char *) &quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_TEUpsErDEemG5ZtmQS1p2g" name="ConnectionEstablished" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_S6bt4ErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__S" guard="_S6eKIUrDEemG5ZtmQS1p2g" source="_S6LPMErDEemG5ZtmQS1p2g" target="_S6R84ErDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_S6eKIUrDEemG5ZtmQS1p2g" name="Debug__GuardInitial1__StartingUp__2">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_S6eKIErDEemG5ZtmQS1p2g" name="Debug__GuardInitial1__StartingUp__2">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Initial1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S6f_UErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__S__32">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__Initial1__StartingUp__2__S&quot;,(char *)&quot;Debug__Path__Initial1__StartingUp__2&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S6k30ErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__E" source="_S6UZIUrDEemG5ZtmQS1p2g" target="_0JLVkNrSEeaBAosuR3tfxw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S6k30UrDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__E__33">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__Initial1__StartingUp__2__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;StartingUp&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S6sMkErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__dbg__varChange" source="_S6NrcErDEemG5ZtmQS1p2g" target="_S6NrcErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S6uBwErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__dbg__varChange__35">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_S6szoErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_S6v28ErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__dbg__setBreakPoint" source="_S6NrcErDEemG5ZtmQS1p2g" target="_S6NrcErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S6xsIErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__dbg__setBreakPoint__36">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S6weAErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S6zhUErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__dbg__remBreakPoint" source="_S6NrcErDEemG5ZtmQS1p2g" target="_S6NrcErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S60vcErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__dbg__remBreakPoint__37">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S60IYErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S619kErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__dbg__viewBreakPoints" source="_S6NrcErDEemG5ZtmQS1p2g" target="_S6NrcErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S62koUrDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__dbg__viewBreakPoints__38">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S62koErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S65A4ErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__dbg__dbgSetExecMode" source="_S6NrcErDEemG5ZtmQS1p2g" target="_S6NrcErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S66PAErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__dbg__dbgSetExecMode__39">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_S65A4UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S68EMErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__dbg__dbgDeferMsg" source="_S6NrcErDEemG5ZtmQS1p2g" target="_S6NrcErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S69SUErDEemG5ZtmQS1p2g" name="Debug__Initial1__StartingUp__2__dbg__dbgDeferMsg__40">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S68rQErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_k3gyENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_S8CQYErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3" source="_bRbzYNrnEeal5dJZNvUqew" target="_S78JwErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8C3cErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__54">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;Choice1&quot;,(char *)&quot;Debug__Path__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S8FTsErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__S" guard="_S8HI4UrDEemG5ZtmQS1p2g" source="_S78JwErDEemG5ZtmQS1p2g" target="_S7-mAUrDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_S8HI4UrDEemG5ZtmQS1p2g" name="Debug__GuardChoice1__WaitAllDoorBeOpened__3">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_S8HI4ErDEemG5ZtmQS1p2g" name="Debug__GuardChoice1__WaitAllDoorBeOpened__3">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Choice1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8IXAErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__S__56">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__Choice1__WaitAllDoorBeOpened__3__S&quot;,(char *)&quot;Debug__Path__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S8KMMErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__E" source="_S8AbMUrDEemG5ZtmQS1p2g" target="_cd7pQNrHEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8KzQErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__E__57">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__Choice1__WaitAllDoorBeOpened__3__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WaitAllDoorBeOpened&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S8MBYErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__dbg__varChange" source="_S79X4ErDEemG5ZtmQS1p2g" target="_S79X4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8MocErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__dbg__varChange__59">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_S8MBYUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_S8N2kErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__dbg__setBreakPoint" source="_S79X4ErDEemG5ZtmQS1p2g" target="_S79X4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8OdoUrDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__dbg__setBreakPoint__60">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S8OdoErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S8PEsErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__dbg__remBreakPoint" source="_S79X4ErDEemG5ZtmQS1p2g" target="_S79X4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8PrwErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__dbg__remBreakPoint__61">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S8PEsUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S8QS0ErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__dbg__viewBreakPoints" source="_S79X4ErDEemG5ZtmQS1p2g" target="_S79X4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8Q54ErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__dbg__viewBreakPoints__62">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S8QS0UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S8Rg8ErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__dbg__dbgSetExecMode" source="_S79X4ErDEemG5ZtmQS1p2g" target="_S79X4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8SIAErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__dbg__dbgSetExecMode__63">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_S8Rg8UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S8TWIErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__dbg__dbgDeferMsg" source="_S79X4ErDEemG5ZtmQS1p2g" target="_S79X4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8UkQErDEemG5ZtmQS1p2g" name="Debug__Choice1__WaitAllDoorBeOpened__3__dbg__dbgDeferMsg__64">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S8T9MErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_k3gyENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_S89dcUrDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4" guard="_IUNCcNrpEeal5dJZNvUqew" source="_9fM5sNrmEeal5dJZNvUqew" target="_S82vwErDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_IUNCcNrpEeal5dJZNvUqew">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_IUNCcdrpEeal5dJZNvUqew">
                <language>C++</language>
                <body>    return tmpInt==locksCount;
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8-EgErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__78">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;AllDoorClosed&quot;,(char *)&quot;Debug__Path__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S9BH0ErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__S" guard="_S9Bu4UrDEemG5ZtmQS1p2g" source="_S82vwErDEemG5ZtmQS1p2g" target="_S86aIErDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_S9Bu4UrDEemG5ZtmQS1p2g" name="Debug__GuardAllDoorClosed__doorsClosed__4">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_S9Bu4ErDEemG5ZtmQS1p2g" name="Debug__GuardAllDoorClosed__doorsClosed__4">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;AllDoorClosed&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S9C9AErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__S__80">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__AllDoorClosed__doorsClosed__4__S&quot;,(char *)&quot;Debug__Path__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S9GnYErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__E" source="_S88PUUrDEemG5ZtmQS1p2g" target="_BIWYMNrHEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S9HOcErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__E__81">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__AllDoorClosed__doorsClosed__4__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;doorsClosed&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S9K40ErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__dbg__varChange" source="_S84k8UrDEemG5ZtmQS1p2g" target="_S84k8UrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S9MG8ErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__dbg__varChange__83">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_S9Lf4ErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_S9MuAErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__dbg__setBreakPoint" source="_S84k8UrDEemG5ZtmQS1p2g" target="_S84k8UrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S9NVEErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__dbg__setBreakPoint__84">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S9MuAUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S9OjMErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__dbg__remBreakPoint" source="_S84k8UrDEemG5ZtmQS1p2g" target="_S84k8UrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S9PKQErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__dbg__remBreakPoint__85">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S9OjMUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S9QYYErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__dbg__viewBreakPoints" source="_S84k8UrDEemG5ZtmQS1p2g" target="_S84k8UrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S9Q_cUrDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__dbg__viewBreakPoints__86">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S9Q_cErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S9RmgErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__dbg__dbgSetExecMode" source="_S84k8UrDEemG5ZtmQS1p2g" target="_S84k8UrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S9SNkErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__dbg__dbgSetExecMode__87">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_S9RmgUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S9S0oErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__dbg__dbgDeferMsg" source="_S84k8UrDEemG5ZtmQS1p2g" target="_S84k8UrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S9TbsErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__doorsClosed__4__dbg__dbgDeferMsg__88">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S9S0oUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_k3gyENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_S-AmUErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5" source="_IcetINrHEeahI77Vg4Dl9Q" target="_S95RkErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-AmUUrDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__102">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;WaitAllDoorBeClosed&quot;,(char *)&quot;Debug__Path__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_8nPPkNrpEeal5dJZNvUqew" event="_NUfP0NrFEeahI77Vg4Dl9Q" port="_k3gyENrBEeahI77Vg4Dl9Q"/>
          </transition>
          <transition xmi:id="_S-CbgErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__S" guard="_S-EQsUrDEemG5ZtmQS1p2g" source="_S95RkErDEemG5ZtmQS1p2g" target="_S9-KEUrDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_S-EQsUrDEemG5ZtmQS1p2g" name="Debug__GuardWaitAllDoorBeClosed__AllDoorClosed__5">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_S-EQsErDEemG5ZtmQS1p2g" name="Debug__GuardWaitAllDoorBeClosed__AllDoorClosed__5">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WaitAllDoorBeClosed&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-Fe0ErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__S__104">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__WaitAllDoorBeClosed__AllDoorClosed__5__S&quot;,(char *)&quot;Debug__Path__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S-Gs8ErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__E" source="_S9_YMUrDEemG5ZtmQS1p2g" target="_9fM5sNrmEeal5dJZNvUqew">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-HUAErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__E__105">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__WaitAllDoorBeClosed__AllDoorClosed__5__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;AllDoorClosed&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S-IiIErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__dbg__varChange" source="_S97GwErDEemG5ZtmQS1p2g" target="_S97GwErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-JJMErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__dbg__varChange__107">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_S-IiIUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_S-JwQErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__dbg__setBreakPoint" source="_S97GwErDEemG5ZtmQS1p2g" target="_S97GwErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-JwQkrDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__dbg__setBreakPoint__108">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S-JwQUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S-K-YErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__dbg__remBreakPoint" source="_S97GwErDEemG5ZtmQS1p2g" target="_S97GwErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-LlcErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__dbg__remBreakPoint__109">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S-K-YUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S-MMgErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__dbg__viewBreakPoints" source="_S97GwErDEemG5ZtmQS1p2g" target="_S97GwErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-MzkErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__dbg__viewBreakPoints__110">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S-MMgUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S-NaoErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__dbg__dbgSetExecMode" source="_S97GwErDEemG5ZtmQS1p2g" target="_S97GwErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-OBsUrDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__dbg__dbgSetExecMode__111">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_S-OBsErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S-OowErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__dbg__dbgDeferMsg" source="_S97GwErDEemG5ZtmQS1p2g" target="_S97GwErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-PP0ErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeClosed__AllDoorClosed__5__dbg__dbgDeferMsg__112">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S-OowUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_k3gyENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_S-zQgUrDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6" source="_9fM5sNrmEeal5dJZNvUqew" target="_S-tJ4ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-z3kErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__125">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;AllDoorClosed&quot;,(char *)&quot;Debug__Path__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S-1swErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__S" guard="_S-264UrDEemG5ZtmQS1p2g" source="_S-tJ4ErDEemG5ZtmQS1p2g" target="_S-wNMUrDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_S-264UrDEemG5ZtmQS1p2g" name="Debug__GuardAllDoorClosed__WaitAllDoorBeClosed__6">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_S-264ErDEemG5ZtmQS1p2g" name="Debug__GuardAllDoorClosed__WaitAllDoorBeClosed__6">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;AllDoorClosed&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-4JAErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__S__127">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__AllDoorClosed__WaitAllDoorBeClosed__6__S&quot;,(char *)&quot;Debug__Path__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S-5XIErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__E" source="_S-xbUErDEemG5ZtmQS1p2g" target="_IcetINrHEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-5-MErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__E__128">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__AllDoorClosed__WaitAllDoorBeClosed__6__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WaitAllDoorBeClosed&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S-7zYErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__dbg__varChange" source="_S-vmIErDEemG5ZtmQS1p2g" target="_S-vmIErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-8acUrDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__dbg__varChange__130">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_S-8acErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_S-9okErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__dbg__setBreakPoint" source="_S-vmIErDEemG5ZtmQS1p2g" target="_S-vmIErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S--PoErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__dbg__setBreakPoint__131">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S-9okUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S--2sErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__dbg__remBreakPoint" source="_S-vmIErDEemG5ZtmQS1p2g" target="_S-vmIErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S--2skrDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__dbg__remBreakPoint__132">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S--2sUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S_AE0ErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__dbg__viewBreakPoints" source="_S-vmIErDEemG5ZtmQS1p2g" target="_S-vmIErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_AE0krDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__dbg__viewBreakPoints__133">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S_AE0UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S_Ar4ErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__dbg__dbgSetExecMode" source="_S-vmIErDEemG5ZtmQS1p2g" target="_S-vmIErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_BS8ErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__dbg__dbgSetExecMode__134">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_S_Ar4UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S_B6AErDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__dbg__dbgDeferMsg" source="_S-vmIErDEemG5ZtmQS1p2g" target="_S-vmIErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_ChEUrDEemG5ZtmQS1p2g" name="Debug__AllDoorClosed__WaitAllDoorBeClosed__6__dbg__dbgDeferMsg__135">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S_ChEErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_k3gyENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_S_raQUrDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7" source="_0JLVkNrSEeaBAosuR3tfxw" target="_S_lToErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_sBUErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__149">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__StartingUp__doorsOpen__7&quot;,(char *)&quot;StartingUp&quot;,(char *)&quot;Debug__Path__StartingUp__doorsOpen__7&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_HlMpYNrTEeaBAosuR3tfxw" port="_Cey60NrUEeaBAosuR3tfxw">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S_vrsErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__S" guard="_S_w50UrDEemG5ZtmQS1p2g" source="_S_lToErDEemG5ZtmQS1p2g" target="_S_o-AUrDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_S_w50UrDEemG5ZtmQS1p2g" name="Debug__GuardStartingUp__doorsOpen__7">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_S_w50ErDEemG5ZtmQS1p2g" name="Debug__GuardStartingUp__doorsOpen__7">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;StartingUp&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_yH8ErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__S__151">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__StartingUp__doorsOpen__7__S&quot;,(char *)&quot;Debug__Path__StartingUp__doorsOpen__7&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S_1LQErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__E" source="_S_qMIUrDEemG5ZtmQS1p2g" target="_7a5GINrGEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_1LQUrDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__E__152">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__StartingUp__doorsOpen__7__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;doorsOpen&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_S_3ngErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__dbg__varChange" source="_S_mhwUrDEemG5ZtmQS1p2g" target="_S_mhwUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_4OkErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__dbg__varChange__154">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_S_3ngUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_S_41oErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__dbg__setBreakPoint" source="_S_mhwUrDEemG5ZtmQS1p2g" target="_S_mhwUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_5csErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__dbg__setBreakPoint__155">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S_41oUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S_6DwErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__dbg__remBreakPoint" source="_S_mhwUrDEemG5ZtmQS1p2g" target="_S_mhwUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_6q0UrDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__dbg__remBreakPoint__156">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S_6q0ErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S_7R4ErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__dbg__viewBreakPoints" source="_S_mhwUrDEemG5ZtmQS1p2g" target="_S_mhwUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_8gAErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__dbg__viewBreakPoints__157">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S_748ErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S_9HEErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__dbg__dbgSetExecMode" source="_S_mhwUrDEemG5ZtmQS1p2g" target="_S_mhwUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_9uIErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__dbg__dbgSetExecMode__158">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_S_9HEUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_S_-VMErDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__dbg__dbgDeferMsg" source="_S_mhwUrDEemG5ZtmQS1p2g" target="_S_mhwUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_-8QUrDEemG5ZtmQS1p2g" name="Debug__StartingUp__doorsOpen__7__dbg__dbgDeferMsg__159">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_S_-8QErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_k3gyENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_TA47MUrDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8" source="_cd7pQNrHEeahI77Vg4Dl9Q" target="_TAzboErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TA5iQErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__176">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;WaitAllDoorBeOpened&quot;,(char *)&quot;Debug__Path__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_v44UINrJEeahI77Vg4Dl9Q" event="_NUfP0NrFEeahI77Vg4Dl9Q" port="_k3gyENrBEeahI77Vg4Dl9Q"/>
          </transition>
          <transition xmi:id="_TA7XcErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__S" guard="_TA8lkUrDEemG5ZtmQS1p2g" source="_TAzboErDEemG5ZtmQS1p2g" target="_TA2e8UrDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_TA8lkUrDEemG5ZtmQS1p2g" name="Debug__GuardWaitAllDoorBeOpened__Choice1__8">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_TA8lkErDEemG5ZtmQS1p2g" name="Debug__GuardWaitAllDoorBeOpened__Choice1__8">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WaitAllDoorBeOpened&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TA9zsErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__S__178">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__WaitAllDoorBeOpened__Choice1__8__S&quot;,(char *)&quot;Debug__Path__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TA_o4ErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__E" source="_TA3tEUrDEemG5ZtmQS1p2g" target="_bRbzYNrnEeal5dJZNvUqew">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TBAP8ErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__E__179">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__WaitAllDoorBeOpened__Choice1__8__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;Choice1&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TBCFIErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__dbg__varChange" source="_TA1Q0ErDEemG5ZtmQS1p2g" target="_TA1Q0ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TBCsMErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__dbg__varChange__181">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_TBCFIUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_TBDTQErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__dbg__setBreakPoint" source="_TA1Q0ErDEemG5ZtmQS1p2g" target="_TA1Q0ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TBD6UUrDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__dbg__setBreakPoint__182">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TBD6UErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TBFIcErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__dbg__remBreakPoint" source="_TA1Q0ErDEemG5ZtmQS1p2g" target="_TA1Q0ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TBFvgErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__dbg__remBreakPoint__183">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TBFIcUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TBGWkErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__dbg__viewBreakPoints" source="_TA1Q0ErDEemG5ZtmQS1p2g" target="_TA1Q0ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TBG9oErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__dbg__viewBreakPoints__184">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TBGWkUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TBIy0ErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__dbg__dbgSetExecMode" source="_TA1Q0ErDEemG5ZtmQS1p2g" target="_TA1Q0ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TBJZ4ErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__dbg__dbgSetExecMode__185">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_TBIy0UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TBKA8ErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__dbg__dbgDeferMsg" source="_TA1Q0ErDEemG5ZtmQS1p2g" target="_TA1Q0ErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TBKoAErDEemG5ZtmQS1p2g" name="Debug__WaitAllDoorBeOpened__Choice1__8__dbg__dbgDeferMsg__186">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TBKA8UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_k3gyENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_TB8rIUrDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9" source="_BIWYMNrHEeahI77Vg4Dl9Q" target="_TB3yoErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TB9SMErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__199">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;doorsClosed&quot;,(char *)&quot;Debug__Path__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;&quot;);
</body>
            </effect>
            <trigger xmi:id="_31v2gNrpEeal5dJZNvUqew" event="_NUfP0NrFEeahI77Vg4Dl9Q" port="_k3gyENrBEeahI77Vg4Dl9Q"/>
          </transition>
          <transition xmi:id="_TB_ucErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__S" guard="_TCBjoUrDEemG5ZtmQS1p2g" source="_TB3yoErDEemG5ZtmQS1p2g" target="_TB6O4UrDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_TCBjoUrDEemG5ZtmQS1p2g" name="Debug__GuarddoorsClosed__WaitAllDoorBeOpened__9">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_TCBjoErDEemG5ZtmQS1p2g" name="Debug__GuarddoorsClosed__WaitAllDoorBeOpened__9">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;doorsClosed&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TCCxwErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__S__201">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__doorsClosed__WaitAllDoorBeOpened__9__S&quot;,(char *)&quot;Debug__Path__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TCEm8ErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__E" source="_TB7dAUrDEemG5ZtmQS1p2g" target="_cd7pQNrHEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TCFOAErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__E__202">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__doorsClosed__WaitAllDoorBeOpened__9__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WaitAllDoorBeOpened&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TCIRUErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__dbg__varChange" source="_TB5AwUrDEemG5ZtmQS1p2g" target="_TB5AwUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TCI4YErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__dbg__varChange__204">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_TCIRUUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_TCJfcErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__dbg__setBreakPoint" source="_TB5AwUrDEemG5ZtmQS1p2g" target="_TB5AwUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TCKGgErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__dbg__setBreakPoint__205">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TCJfcUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TCKtkErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__dbg__remBreakPoint" source="_TB5AwUrDEemG5ZtmQS1p2g" target="_TB5AwUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TCLUoErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__dbg__remBreakPoint__206">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TCKtkUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TCMiwErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__dbg__viewBreakPoints" source="_TB5AwUrDEemG5ZtmQS1p2g" target="_TB5AwUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TCNJ0UrDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__dbg__viewBreakPoints__207">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TCNJ0ErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TCNw4ErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__dbg__dbgSetExecMode" source="_TB5AwUrDEemG5ZtmQS1p2g" target="_TB5AwUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TCOX8UrDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__dbg__dbgSetExecMode__208">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_TCOX8ErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TCRbQErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__dbg__dbgDeferMsg" source="_TB5AwUrDEemG5ZtmQS1p2g" target="_TB5AwUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TCSCUErDEemG5ZtmQS1p2g" name="Debug__doorsClosed__WaitAllDoorBeOpened__9__dbg__dbgDeferMsg__209">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TCRbQUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_k3gyENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_TDGhsErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10" guard="_l54t4NrpEeal5dJZNvUqew" source="_bRbzYNrnEeal5dJZNvUqew" target="_TDBpMErDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_l54t4NrpEeal5dJZNvUqew">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_l54t4drpEeal5dJZNvUqew">
                <language>C++</language>
                <body>    return tmpInt==locksCount;
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TDHIwErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__226">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__Choice1__doorsOpen__10&quot;,(char *)&quot;Choice1&quot;,(char *)&quot;Debug__Path__Choice1__doorsOpen__10&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TDJlAErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__S" guard="_TDKMEUrDEemG5ZtmQS1p2g" source="_TDBpMErDEemG5ZtmQS1p2g" target="_TDEFcUrDEemG5ZtmQS1p2g">
            <ownedRule xmi:id="_TDKMEUrDEemG5ZtmQS1p2g" name="Debug__GuardChoice1__doorsOpen__10">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_TDKMEErDEemG5ZtmQS1p2g" name="Debug__GuardChoice1__doorsOpen__10">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Choice1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TDLaMErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__S__228">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__Choice1__doorsOpen__10__S&quot;,(char *)&quot;Debug__Path__Choice1__doorsOpen__10&quot;,(char *)&quot;en&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TDN2cErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__E" source="_TDFTkUrDEemG5ZtmQS1p2g" target="_7a5GINrGEeahI77Vg4Dl9Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TDOdgErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__E__229">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__Choice1__doorsOpen__10__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;doorsOpen&quot;,(char *)&quot;&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_TDUkIErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__dbg__varChange" source="_TDC3UUrDEemG5ZtmQS1p2g" target="_TDC3UUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TDVLMUrDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__dbg__varChange__231">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_TDVLMErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_TDXAYErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__dbg__setBreakPoint" source="_TDC3UUrDEemG5ZtmQS1p2g" target="_TDC3UUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TDXncErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__dbg__setBreakPoint__232">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TDXAYUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TDZcoErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__dbg__remBreakPoint" source="_TDC3UUrDEemG5ZtmQS1p2g" target="_TDC3UUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TDaDsErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__dbg__remBreakPoint__233">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TDZcoUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TDbR0ErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__dbg__viewBreakPoints" source="_TDC3UUrDEemG5ZtmQS1p2g" target="_TDC3UUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TDduEErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__dbg__viewBreakPoints__234">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TDbR0UrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TDe8MErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__dbg__dbgSetExecMode" source="_TDC3UUrDEemG5ZtmQS1p2g" target="_TDC3UUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TDe8MkrDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__dbg__dbgSetExecMode__235">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_TDe8MUrDEemG5ZtmQS1p2g" name="Debug__MSG" port="_S1HJAErDEemG5ZtmQS1p2g">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_TDfjQErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__dbg__dbgDeferMsg" source="_TDC3UUrDEemG5ZtmQS1p2g" target="_TDC3UUrDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TDimkErDEemG5ZtmQS1p2g" name="Debug__Choice1__doorsOpen__10__dbg__dbgDeferMsg__236">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_TDgxYErDEemG5ZtmQS1p2g" name="Debug__MSG" port="_k3gyENrBEeahI77Vg4Dl9Q">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_TETbkErDEemG5ZtmQS1p2g" name="Debug__InitDebug" source="_64F7ENrGEeahI77Vg4Dl9Q" target="_TERmYErDEemG5ZtmQS1p2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TETbkUrDEemG5ZtmQS1p2g" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_64F7ENrGEeahI77Vg4Dl9Q" name="Initial1"/>
          <subvertex xmi:type="uml:State" xmi:id="_7a5GINrGEeahI77Vg4Dl9Q" name="doorsOpen">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_2oNS4NrJEeahI77Vg4Dl9Q" name="getLockCommand">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;doorsOpen&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    std::cout&lt;&lt;&quot;Doors are open&quot;&lt;&lt;std::endl;
    std::cout&lt;&lt;&quot;Press any key to close doors&quot;&lt;&lt;std::endl;
    getchar();
    std::cout&lt;&lt;&quot;Sending Lock message to doors\n&quot;&lt;&lt;std::endl;
    /// send message to first door
    lockPort.lock().send(4);
    tmpInt=1;

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::doorsOpen&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TEjTMErDEemG5ZtmQS1p2g" name="doorsOpen__249">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::doorsOpen&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_BIWYMNrHEeahI77Vg4Dl9Q" name="doorsClosed">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_XyQE0NrpEeal5dJZNvUqew">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;doorsClosed&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    std::cout&lt;&lt;&quot;Doors are closed&quot;&lt;&lt;std::endl;
    std::cout&lt;&lt;&quot;Press any key to open doors&quot;&lt;&lt;std::endl;
    getchar();
    std::cout&lt;&lt;&quot;Sending UnLock message to doors\n&quot;&lt;&lt;std::endl;
    /// send message to first door
    lockPort.unlock().send(4);
    tmpInt=1;

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::doorsClosed&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TEr2EErDEemG5ZtmQS1p2g" name="doorsClosed__251">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::doorsClosed&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_IcetINrHEeahI77Vg4Dl9Q" name="WaitAllDoorBeClosed">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_VddNINroEeal5dJZNvUqew">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;WaitAllDoorBeClosed&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    tmpInt++;

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::WaitAllDoorBeClosed&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TExVoErDEemG5ZtmQS1p2g" name="WaitAllDoorBeClosed__252">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::WaitAllDoorBeClosed&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_cd7pQNrHEeahI77Vg4Dl9Q" name="WaitAllDoorBeOpened">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_gW1VANrpEeal5dJZNvUqew">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;WaitAllDoorBeOpened&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    tmpInt++;

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::WaitAllDoorBeOpened&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TEm9kErDEemG5ZtmQS1p2g" name="WaitAllDoorBeOpened__250">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::WaitAllDoorBeOpened&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_0JLVkNrSEeaBAosuR3tfxw" name="StartingUp">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_LssqQNrTEeaBAosuR3tfxw" name="startup">
              <language>C++</language>
              <body>if( not Debug__SRO.checkDebug(&quot;StartingUp&quot;,msg->destPort->role()->protocol,msg->getSignalName(),5,StateEntryBreakPoint,0)) {
    startupTimer.informIn(UMLRTTimespec(3,0));

}
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::StartingUp&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TE2OIErDEemG5ZtmQS1p2g" name="StartingUp__253">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::StartingUp&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_9fM5sNrmEeal5dJZNvUqew" name="AllDoorClosed" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_bRbzYNrnEeal5dJZNvUqew" name="Choice1" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_S4In0ErDEemG5ZtmQS1p2g" name="Debug__Path__doorsOpen__WaitAllDoorBeClosed__1" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_S4LrIErDEemG5ZtmQS1p2g" name="Debug__C__doorsOpen__WaitAllDoorBeClosed__1">
            <connectionPoint xmi:id="_S4PVgErDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_S4RKsUrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_S4LrIUrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_S5RQQErDEemG5ZtmQS1p2g" name="Debug__init__trans__doorsOpen__WaitAllDoorBeClosed__1" source="_S4PVgErDEemG5ZtmQS1p2g" target="_S5FDAErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S5t8MErDEemG5ZtmQS1p2g" name="Debug__init__trans__doorsOpen__WaitAllDoorBeClosed__1__19">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__init__trans__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__doorsOpen&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_S5R3UErDEemG5ZtmQS1p2g" name="Debug__Ex__doorsOpen" source="_S5FDAErDEemG5ZtmQS1p2g" target="_S5HfQErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S5xmkErDEemG5ZtmQS1p2g" name="Debug__Ex__doorsOpen__21">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__Ex__doorsOpen&quot;,(char *)&quot;Debug__B__Ex__doorsOpen&quot;,(char *)&quot;Debug__B__Ac__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S5R3UUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S5SeYErDEemG5ZtmQS1p2g" name="Debug__AC__doorsOpen__WaitAllDoorBeClosed__1" source="_S5HfQErDEemG5ZtmQS1p2g" target="_S5LwsErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S514AErDEemG5ZtmQS1p2g" name="Debug__AC__doorsOpen__WaitAllDoorBeClosed__1__23">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__AC__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;Debug__B__Ac__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;Debug__A__Ac__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S5SeYUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S5TFcErDEemG5ZtmQS1p2g" name="Debug__En__WaitAllDoorBeClosed" source="_S5LwsErDEemG5ZtmQS1p2g" target="_S5O0AErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S5UTkErDEemG5ZtmQS1p2g" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>    tmpInt++;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__En__WaitAllDoorBeClosed&quot;,(char *)&quot;Debug__A__Ac__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;Debug__A__En__WaitAllDoorBeClosed&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S5TsgErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S5U6oErDEemG5ZtmQS1p2g" name="Debug__end__trans__doorsOpen__WaitAllDoorBeClosed__1" source="_S5O0AErDEemG5ZtmQS1p2g" target="_S4RKsUrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S57-oErDEemG5ZtmQS1p2g" name="Debug__end__trans__doorsOpen__WaitAllDoorBeClosed__1__26">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__end__trans__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;Debug__A__En__WaitAllDoorBeClosed&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S5VhsErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_S5FDAErDEemG5ZtmQS1p2g" name="Debug__B__Ex__doorsOpen">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S5FqEErDEemG5ZtmQS1p2g" name="Debug__B__Ex__doorsOpen">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;doorsOpen&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__B__Ex__doorsOpen&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S5X98ErDEemG5ZtmQS1p2g" name="Debug__B__Ex__doorsOpen__14">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__B__Ex__doorsOpen&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S5HfQErDEemG5ZtmQS1p2g" name="Debug__B__Ac__doorsOpen__WaitAllDoorBeClosed__1">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S5IGUErDEemG5ZtmQS1p2g" name="Debug__B__Ac__doorsOpen__WaitAllDoorBeClosed__1">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;doorsOpen&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;doorsOpen__WaitAllDoorBeClosed__1&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__B__Ac__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S5eEkErDEemG5ZtmQS1p2g" name="Debug__B__Ac__doorsOpen__WaitAllDoorBeClosed__1__15">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__B__Ac__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S5LwsErDEemG5ZtmQS1p2g" name="Debug__A__Ac__doorsOpen__WaitAllDoorBeClosed__1">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S5LwsUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__doorsOpen__WaitAllDoorBeClosed__1">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;doorsOpen__WaitAllDoorBeClosed__1&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WaitAllDoorBeClosed&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__A__Ac__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S5jkIErDEemG5ZtmQS1p2g" name="Debug__A__Ac__doorsOpen__WaitAllDoorBeClosed__1__16">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__A__Ac__doorsOpen__WaitAllDoorBeClosed__1&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S5O0AErDEemG5ZtmQS1p2g" name="Debug__A__En__WaitAllDoorBeClosed">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S5PbEErDEemG5ZtmQS1p2g" name="Debug__A__En__WaitAllDoorBeClosed">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WaitAllDoorBeClosed&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__A__En__WaitAllDoorBeClosed&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S5ocoErDEemG5ZtmQS1p2g" name="Debug__A__En__WaitAllDoorBeClosed__17">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsOpen__WaitAllDoorBeClosed__1::Region1::Debug__A__En__WaitAllDoorBeClosed&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_S6LPMErDEemG5ZtmQS1p2g" name="Debug__Path__Initial1__StartingUp__2" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_S6NrcErDEemG5ZtmQS1p2g" name="Debug__C__Initial1__StartingUp__2">
            <connectionPoint xmi:id="_S6R84ErDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_S6UZIUrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_S6NrcUrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_S7LUwErDEemG5ZtmQS1p2g" name="Debug__init__trans__Initial1__StartingUp__2" source="_S6R84ErDEemG5ZtmQS1p2g" target="_S7Cx4ErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S7k9YErDEemG5ZtmQS1p2g" name="Debug__init__trans__Initial1__StartingUp__2__45">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Initial1__StartingUp__2::Region1::Debug__init__trans__Initial1__StartingUp__2&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial1__StartingUp__2&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_S7L70ErDEemG5ZtmQS1p2g" name="Debug__Ac__Initial1__StartingUp__2" source="_S7Cx4ErDEemG5ZtmQS1p2g" target="_S7EnEErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S7pO0ErDEemG5ZtmQS1p2g" name="Debug__Ac__Initial1__StartingUp__2__47">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Initial1__StartingUp__2::Region1::Debug__Ac__Initial1__StartingUp__2&quot;,(char *)&quot;Debug__B__Ac__Initial1__StartingUp__2&quot;,(char *)&quot;Debug__A__Ac__Initial1__StartingUp__2&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S7L70UrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S7NJ8ErDEemG5ZtmQS1p2g" name="Debug__En__StartingUp" source="_S7EnEErDEemG5ZtmQS1p2g" target="_S7I4gErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S7OYEErDEemG5ZtmQS1p2g" name="startup" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>    startupTimer.informIn(UMLRTTimespec(3,0));

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Initial1__StartingUp__2::Region1::Debug__En__StartingUp&quot;,(char *)&quot;Debug__A__Ac__Initial1__StartingUp__2&quot;,(char *)&quot;Debug__A__En__Initial1__StartingUp__2&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S7NJ8UrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S7PmMErDEemG5ZtmQS1p2g" name="Debug__end__trans__Initial1__StartingUp__2" source="_S7I4gErDEemG5ZtmQS1p2g" target="_S6UZIUrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S7v8gErDEemG5ZtmQS1p2g" name="Debug__end__trans__Initial1__StartingUp__2__50">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Initial1__StartingUp__2::Region1::Debug__end__trans__Initial1__StartingUp__2&quot;,(char *)&quot;Debug__A__En__Initial1__StartingUp__2&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S7QNQErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_S7Cx4ErDEemG5ZtmQS1p2g" name="Debug__B__Ac__Initial1__StartingUp__2">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S7Cx4UrDEemG5ZtmQS1p2g" name="Debug__B__Ac__Initial1__StartingUp__2">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial1__StartingUp__2&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Initial1__StartingUp__2::Region1::Debug__B__Ac__Initial1__StartingUp__2&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S7SpgErDEemG5ZtmQS1p2g" name="Debug__B__Ac__Initial1__StartingUp__2__41">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Initial1__StartingUp__2::Region1::Debug__B__Ac__Initial1__StartingUp__2&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S7EnEErDEemG5ZtmQS1p2g" name="Debug__A__Ac__Initial1__StartingUp__2">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S7FOIErDEemG5ZtmQS1p2g" name="Debug__A__Ac__Initial1__StartingUp__2">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial1__StartingUp__2&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;StartingUp&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Initial1__StartingUp__2::Region1::Debug__A__Ac__Initial1__StartingUp__2&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S7YwIErDEemG5ZtmQS1p2g" name="Debug__A__Ac__Initial1__StartingUp__2__42">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Initial1__StartingUp__2::Region1::Debug__A__Ac__Initial1__StartingUp__2&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S7I4gErDEemG5ZtmQS1p2g" name="Debug__A__En__Initial1__StartingUp__2">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S7I4gUrDEemG5ZtmQS1p2g" name="Debug__A__En__Initial1__StartingUp__2">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;StartingUp&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Initial1__StartingUp__2::Region1::Debug__A__En__Initial1__StartingUp__2&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S7fd0ErDEemG5ZtmQS1p2g" name="Debug__A__En__Initial1__StartingUp__2__43">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Initial1__StartingUp__2::Region1::Debug__A__En__Initial1__StartingUp__2&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_S78JwErDEemG5ZtmQS1p2g" name="Debug__Path__Choice1__WaitAllDoorBeOpened__3" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_S79X4ErDEemG5ZtmQS1p2g" name="Debug__C__Choice1__WaitAllDoorBeOpened__3">
            <connectionPoint xmi:id="_S7-mAUrDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_S8AbMUrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_S79X4UrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_S8dHIErDEemG5ZtmQS1p2g" name="Debug__init__trans__Choice1__WaitAllDoorBeOpened__3" source="_S7-mAUrDEemG5ZtmQS1p2g" target="_S8Y1sErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8p7cErDEemG5ZtmQS1p2g" name="Debug__init__trans__Choice1__WaitAllDoorBeOpened__3__69">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__WaitAllDoorBeOpened__3::Region1::Debug__init__trans__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_S8dHIUrDEemG5ZtmQS1p2g" name="Debug__Ac__Choice1__WaitAllDoorBeOpened__3" source="_S8Y1sErDEemG5ZtmQS1p2g" target="_S8aD0ErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8rwoErDEemG5ZtmQS1p2g" name="Debug__Ac__Choice1__WaitAllDoorBeOpened__3__71">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__WaitAllDoorBeOpened__3::Region1::Debug__Ac__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;Debug__B__Ac__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;Debug__A__Ac__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S8dHIkrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S8duMErDEemG5ZtmQS1p2g" name="Debug__En__WaitAllDoorBeOpened" source="_S8aD0ErDEemG5ZtmQS1p2g" target="_S8b5AErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8eVQErDEemG5ZtmQS1p2g" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>    tmpInt++;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__WaitAllDoorBeOpened__3::Region1::Debug__En__WaitAllDoorBeOpened&quot;,(char *)&quot;Debug__A__Ac__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;Debug__A__En__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S8duMUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S8eVQUrDEemG5ZtmQS1p2g" name="Debug__end__trans__Choice1__WaitAllDoorBeOpened__3" source="_S8b5AErDEemG5ZtmQS1p2g" target="_S8AbMUrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S8vbAErDEemG5ZtmQS1p2g" name="Debug__end__trans__Choice1__WaitAllDoorBeOpened__3__74">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__WaitAllDoorBeOpened__3::Region1::Debug__end__trans__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;Debug__A__En__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S8e8UErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_S8Y1sErDEemG5ZtmQS1p2g" name="Debug__B__Ac__Choice1__WaitAllDoorBeOpened__3">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S8Y1sUrDEemG5ZtmQS1p2g" name="Debug__B__Ac__Choice1__WaitAllDoorBeOpened__3">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Choice1__WaitAllDoorBeOpened__3&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__WaitAllDoorBeOpened__3::Region1::Debug__B__Ac__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S8hYkErDEemG5ZtmQS1p2g" name="Debug__B__Ac__Choice1__WaitAllDoorBeOpened__3__65">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__WaitAllDoorBeOpened__3::Region1::Debug__B__Ac__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S8aD0ErDEemG5ZtmQS1p2g" name="Debug__A__Ac__Choice1__WaitAllDoorBeOpened__3">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S8aD0UrDEemG5ZtmQS1p2g" name="Debug__A__Ac__Choice1__WaitAllDoorBeOpened__3">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Choice1__WaitAllDoorBeOpened__3&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WaitAllDoorBeOpened&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__WaitAllDoorBeOpened__3::Region1::Debug__A__Ac__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S8kb4ErDEemG5ZtmQS1p2g" name="Debug__A__Ac__Choice1__WaitAllDoorBeOpened__3__66">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__WaitAllDoorBeOpened__3::Region1::Debug__A__Ac__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S8b5AErDEemG5ZtmQS1p2g" name="Debug__A__En__Choice1__WaitAllDoorBeOpened__3">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S8b5AUrDEemG5ZtmQS1p2g" name="Debug__A__En__Choice1__WaitAllDoorBeOpened__3">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WaitAllDoorBeOpened&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__WaitAllDoorBeOpened__3::Region1::Debug__A__En__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S8nfMErDEemG5ZtmQS1p2g" name="Debug__A__En__Choice1__WaitAllDoorBeOpened__3__67">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__WaitAllDoorBeOpened__3::Region1::Debug__A__En__Choice1__WaitAllDoorBeOpened__3&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_S82vwErDEemG5ZtmQS1p2g" name="Debug__Path__AllDoorClosed__doorsClosed__4" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_S84k8UrDEemG5ZtmQS1p2g" name="Debug__C__AllDoorClosed__doorsClosed__4">
            <connectionPoint xmi:id="_S86aIErDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_S88PUUrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_S84k8krDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_S9isQErDEemG5ZtmQS1p2g" name="Debug__init__trans__AllDoorClosed__doorsClosed__4" source="_S86aIErDEemG5ZtmQS1p2g" target="_S9cloErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S9tEUErDEemG5ZtmQS1p2g" name="Debug__init__trans__AllDoorClosed__doorsClosed__4__93">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__doorsClosed__4::Region1::Debug__init__trans__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_S9isQUrDEemG5ZtmQS1p2g" name="Debug__Ac__AllDoorClosed__doorsClosed__4" source="_S9cloErDEemG5ZtmQS1p2g" target="_S9fo8ErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S9u5gErDEemG5ZtmQS1p2g" name="Debug__Ac__AllDoorClosed__doorsClosed__4__95">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__doorsClosed__4::Region1::Debug__Ac__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;Debug__B__Ac__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;Debug__A__Ac__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S9jTUErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S9jTUUrDEemG5ZtmQS1p2g" name="Debug__En__doorsClosed" source="_S9fo8ErDEemG5ZtmQS1p2g" target="_S9g3EErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S9j6YUrDEemG5ZtmQS1p2g" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>    std::cout&lt;&lt;&quot;Doors are closed&quot;&lt;&lt;std::endl;
    std::cout&lt;&lt;&quot;Press any key to open doors&quot;&lt;&lt;std::endl;
    getchar();
    std::cout&lt;&lt;&quot;Sending UnLock message to doors\n&quot;&lt;&lt;std::endl;
    /// send message to first door
    lockPort.unlock().send(4);
    tmpInt=1;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__doorsClosed__4::Region1::Debug__En__doorsClosed&quot;,(char *)&quot;Debug__A__Ac__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;Debug__A__En__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S9j6YErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S9khcErDEemG5ZtmQS1p2g" name="Debug__end__trans__AllDoorClosed__doorsClosed__4" source="_S9g3EErDEemG5ZtmQS1p2g" target="_S88PUUrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S9yj4ErDEemG5ZtmQS1p2g" name="Debug__end__trans__AllDoorClosed__doorsClosed__4__98">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__doorsClosed__4::Region1::Debug__end__trans__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;Debug__A__En__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S9khcUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_S9cloErDEemG5ZtmQS1p2g" name="Debug__B__Ac__AllDoorClosed__doorsClosed__4">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S9dMsErDEemG5ZtmQS1p2g" name="Debug__B__Ac__AllDoorClosed__doorsClosed__4">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;AllDoorClosed__doorsClosed__4&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__doorsClosed__4::Region1::Debug__B__Ac__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S9lvkUrDEemG5ZtmQS1p2g" name="Debug__B__Ac__AllDoorClosed__doorsClosed__4__89">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__doorsClosed__4::Region1::Debug__B__Ac__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S9fo8ErDEemG5ZtmQS1p2g" name="Debug__A__Ac__AllDoorClosed__doorsClosed__4">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S9fo8UrDEemG5ZtmQS1p2g" name="Debug__A__Ac__AllDoorClosed__doorsClosed__4">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;AllDoorClosed__doorsClosed__4&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;doorsClosed&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__doorsClosed__4::Region1::Debug__A__Ac__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S9oy4UrDEemG5ZtmQS1p2g" name="Debug__A__Ac__AllDoorClosed__doorsClosed__4__90">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__doorsClosed__4::Region1::Debug__A__Ac__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S9g3EErDEemG5ZtmQS1p2g" name="Debug__A__En__AllDoorClosed__doorsClosed__4">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S9g3EUrDEemG5ZtmQS1p2g" name="Debug__A__En__AllDoorClosed__doorsClosed__4">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;doorsClosed&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__doorsClosed__4::Region1::Debug__A__En__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S9r2MErDEemG5ZtmQS1p2g" name="Debug__A__En__AllDoorClosed__doorsClosed__4__91">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__doorsClosed__4::Region1::Debug__A__En__AllDoorClosed__doorsClosed__4&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_S95RkErDEemG5ZtmQS1p2g" name="Debug__Path__WaitAllDoorBeClosed__AllDoorClosed__5" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_S97GwErDEemG5ZtmQS1p2g" name="Debug__C__WaitAllDoorBeClosed__AllDoorClosed__5">
            <connectionPoint xmi:id="_S9-KEUrDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_S9_YMUrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_S97GwUrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_S-XLoErDEemG5ZtmQS1p2g" name="Debug__init__trans__WaitAllDoorBeClosed__AllDoorClosed__5" source="_S9-KEUrDEemG5ZtmQS1p2g" target="_S-S6MErDEemG5ZtmQS1p2g"/>
              <transition xmi:id="_S-XLoUrDEemG5ZtmQS1p2g" name="Debug__Ex__WaitAllDoorBeClosed" source="_S-S6MErDEemG5ZtmQS1p2g" target="_S-UIUErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-iKwErDEemG5ZtmQS1p2g" name="Debug__Ex__WaitAllDoorBeClosed__117">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeClosed__AllDoorClosed__5::Region1::Debug__Ex__WaitAllDoorBeClosed&quot;,(char *)&quot;Debug__B__Ex__WaitAllDoorBeClosed&quot;,(char *)&quot;Debug__B__Ac__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S-XLokrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S-XysErDEemG5ZtmQS1p2g" name="Debug__AC__WaitAllDoorBeClosed__AllDoorClosed__5" source="_S-UIUErDEemG5ZtmQS1p2g" target="_S-V9gErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-j_8ErDEemG5ZtmQS1p2g" name="Debug__AC__WaitAllDoorBeClosed__AllDoorClosed__5__119">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeClosed__AllDoorClosed__5::Region1::Debug__AC__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;Debug__B__Ac__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;Debug__A__Ac__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S-XysUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S-XyskrDEemG5ZtmQS1p2g" name="Debug__end__trans__WaitAllDoorBeClosed__AllDoorClosed__5" source="_S-V9gErDEemG5ZtmQS1p2g" target="_S9_YMUrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S-mcMErDEemG5ZtmQS1p2g" name="Debug__end__trans__WaitAllDoorBeClosed__AllDoorClosed__5__121">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeClosed__AllDoorClosed__5::Region1::Debug__end__trans__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;Debug__A__Ac__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S-Xys0rDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_S-S6MErDEemG5ZtmQS1p2g" name="Debug__B__Ex__WaitAllDoorBeClosed">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S-ThQErDEemG5ZtmQS1p2g" name="Debug__B__Ex__WaitAllDoorBeClosed">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WaitAllDoorBeClosed&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeClosed__AllDoorClosed__5::Region1::Debug__B__Ex__WaitAllDoorBeClosed&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S-ZA0UrDEemG5ZtmQS1p2g" name="Debug__B__Ex__WaitAllDoorBeClosed__113">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeClosed__AllDoorClosed__5::Region1::Debug__B__Ex__WaitAllDoorBeClosed&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S-UIUErDEemG5ZtmQS1p2g" name="Debug__B__Ac__WaitAllDoorBeClosed__AllDoorClosed__5">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S-UvYErDEemG5ZtmQS1p2g" name="Debug__B__Ac__WaitAllDoorBeClosed__AllDoorClosed__5">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WaitAllDoorBeClosed&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;WaitAllDoorBeClosed__AllDoorClosed__5&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeClosed__AllDoorClosed__5::Region1::Debug__B__Ac__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S-crMUrDEemG5ZtmQS1p2g" name="Debug__B__Ac__WaitAllDoorBeClosed__AllDoorClosed__5__114">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeClosed__AllDoorClosed__5::Region1::Debug__B__Ac__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S-V9gErDEemG5ZtmQS1p2g" name="Debug__A__Ac__WaitAllDoorBeClosed__AllDoorClosed__5">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S-V9gUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__WaitAllDoorBeClosed__AllDoorClosed__5">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WaitAllDoorBeClosed__AllDoorClosed__5&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeClosed__AllDoorClosed__5::Region1::Debug__A__Ac__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S-fHcUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__WaitAllDoorBeClosed__AllDoorClosed__5__115">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeClosed__AllDoorClosed__5::Region1::Debug__A__Ac__WaitAllDoorBeClosed__AllDoorClosed__5&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_S-tJ4ErDEemG5ZtmQS1p2g" name="Debug__Path__AllDoorClosed__WaitAllDoorBeClosed__6" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_S-vmIErDEemG5ZtmQS1p2g" name="Debug__C__AllDoorClosed__WaitAllDoorBeClosed__6">
            <connectionPoint xmi:id="_S-wNMUrDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_S-xbUErDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_S-vmIUrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_S_LD8ErDEemG5ZtmQS1p2g" name="Debug__init__trans__AllDoorClosed__WaitAllDoorBeClosed__6" source="_S-wNMUrDEemG5ZtmQS1p2g" target="_S_GLcErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_ZtcErDEemG5ZtmQS1p2g" name="Debug__init__trans__AllDoorClosed__WaitAllDoorBeClosed__6__140">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__WaitAllDoorBeClosed__6::Region1::Debug__init__trans__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_S_LD8UrDEemG5ZtmQS1p2g" name="Debug__Ac__AllDoorClosed__WaitAllDoorBeClosed__6" source="_S_GLcErDEemG5ZtmQS1p2g" target="_S_GygErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_bioErDEemG5ZtmQS1p2g" name="Debug__Ac__AllDoorClosed__WaitAllDoorBeClosed__6__142">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__WaitAllDoorBeClosed__6::Region1::Debug__Ac__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;Debug__B__Ac__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;Debug__A__Ac__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S_LD8krDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S_LrAErDEemG5ZtmQS1p2g" name="Debug__En__WaitAllDoorBeClosed" source="_S_GygErDEemG5ZtmQS1p2g" target="_S_J10ErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_M5IErDEemG5ZtmQS1p2g" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>    tmpInt++;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__WaitAllDoorBeClosed__6::Region1::Debug__En__WaitAllDoorBeClosed&quot;,(char *)&quot;Debug__A__Ac__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;Debug__A__En__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S_LrAUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_S_M5IUrDEemG5ZtmQS1p2g" name="Debug__end__trans__AllDoorClosed__WaitAllDoorBeClosed__6" source="_S_J10ErDEemG5ZtmQS1p2g" target="_S-xbUErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_S_f0EErDEemG5ZtmQS1p2g" name="Debug__end__trans__AllDoorClosed__WaitAllDoorBeClosed__6__145">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__WaitAllDoorBeClosed__6::Region1::Debug__end__trans__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;Debug__A__En__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_S_NgMErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_S_GLcErDEemG5ZtmQS1p2g" name="Debug__B__Ac__AllDoorClosed__WaitAllDoorBeClosed__6">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S_GLcUrDEemG5ZtmQS1p2g" name="Debug__B__Ac__AllDoorClosed__WaitAllDoorBeClosed__6">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;AllDoorClosed__WaitAllDoorBeClosed__6&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__WaitAllDoorBeClosed__6::Region1::Debug__B__Ac__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S_P8cErDEemG5ZtmQS1p2g" name="Debug__B__Ac__AllDoorClosed__WaitAllDoorBeClosed__6__136">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__WaitAllDoorBeClosed__6::Region1::Debug__B__Ac__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S_GygErDEemG5ZtmQS1p2g" name="Debug__A__Ac__AllDoorClosed__WaitAllDoorBeClosed__6">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S_HZkErDEemG5ZtmQS1p2g" name="Debug__A__Ac__AllDoorClosed__WaitAllDoorBeClosed__6">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;AllDoorClosed__WaitAllDoorBeClosed__6&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WaitAllDoorBeClosed&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__WaitAllDoorBeClosed__6::Region1::Debug__A__Ac__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S_UN4UrDEemG5ZtmQS1p2g" name="Debug__A__Ac__AllDoorClosed__WaitAllDoorBeClosed__6__137">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__WaitAllDoorBeClosed__6::Region1::Debug__A__Ac__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_S_J10ErDEemG5ZtmQS1p2g" name="Debug__A__En__AllDoorClosed__WaitAllDoorBeClosed__6">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S_J10UrDEemG5ZtmQS1p2g" name="Debug__A__En__AllDoorClosed__WaitAllDoorBeClosed__6">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WaitAllDoorBeClosed&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__WaitAllDoorBeClosed__6::Region1::Debug__A__En__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_S_XRMUrDEemG5ZtmQS1p2g" name="Debug__A__En__AllDoorClosed__WaitAllDoorBeClosed__6__138">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__AllDoorClosed__WaitAllDoorBeClosed__6::Region1::Debug__A__En__AllDoorClosed__WaitAllDoorBeClosed__6&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_S_lToErDEemG5ZtmQS1p2g" name="Debug__Path__StartingUp__doorsOpen__7" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_S_mhwUrDEemG5ZtmQS1p2g" name="Debug__C__StartingUp__doorsOpen__7">
            <connectionPoint xmi:id="_S_o-AUrDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_S_qMIUrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_S_mhwkrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_TALJgErDEemG5ZtmQS1p2g" name="Debug__init__trans__StartingUp__doorsOpen__7" source="_S_o-AUrDEemG5ZtmQS1p2g" target="_TAD0wErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TAf5oErDEemG5ZtmQS1p2g" name="Debug__init__trans__StartingUp__doorsOpen__7__165">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__init__trans__StartingUp__doorsOpen__7&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__StartingUp&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_TALJgUrDEemG5ZtmQS1p2g" name="Debug__Ex__StartingUp" source="_TAD0wErDEemG5ZtmQS1p2g" target="_TAFC4ErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TAhu0ErDEemG5ZtmQS1p2g" name="Debug__Ex__StartingUp__167">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__Ex__StartingUp&quot;,(char *)&quot;Debug__B__Ex__StartingUp&quot;,(char *)&quot;Debug__B__Ac__StartingUp__doorsOpen__7&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TALJgkrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TAMXoErDEemG5ZtmQS1p2g" name="Debug__AC__StartingUp__doorsOpen__7" source="_TAFC4ErDEemG5ZtmQS1p2g" target="_TAHfIErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TAkLEErDEemG5ZtmQS1p2g" name="Debug__AC__StartingUp__doorsOpen__7__169">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__AC__StartingUp__doorsOpen__7&quot;,(char *)&quot;Debug__B__Ac__StartingUp__doorsOpen__7&quot;,(char *)&quot;Debug__A__Ac__StartingUp__doorsOpen__7&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TAMXoUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TAM-sErDEemG5ZtmQS1p2g" name="Debug__En__doorsOpen" source="_TAHfIErDEemG5ZtmQS1p2g" target="_TAJUUErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TAOM0ErDEemG5ZtmQS1p2g" name="getLockCommand" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>    std::cout&lt;&lt;&quot;Doors are open&quot;&lt;&lt;std::endl;
    std::cout&lt;&lt;&quot;Press any key to close doors&quot;&lt;&lt;std::endl;
    getchar();
    std::cout&lt;&lt;&quot;Sending Lock message to doors\n&quot;&lt;&lt;std::endl;
    /// send message to first door
    lockPort.lock().send(4);
    tmpInt=1;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__En__doorsOpen&quot;,(char *)&quot;Debug__A__Ac__StartingUp__doorsOpen__7&quot;,(char *)&quot;Debug__A__En__doorsOpen&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TANlwErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TAOz4ErDEemG5ZtmQS1p2g" name="Debug__end__trans__StartingUp__doorsOpen__7" source="_TAJUUErDEemG5ZtmQS1p2g" target="_S_qMIUrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TAqRsErDEemG5ZtmQS1p2g" name="Debug__end__trans__StartingUp__doorsOpen__7__172">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__end__trans__StartingUp__doorsOpen__7&quot;,(char *)&quot;Debug__A__En__doorsOpen&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TAOz4UrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_TAD0wErDEemG5ZtmQS1p2g" name="Debug__B__Ex__StartingUp">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TAD0wUrDEemG5ZtmQS1p2g" name="Debug__B__Ex__StartingUp">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;StartingUp&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__B__Ex__StartingUp&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TAQpEErDEemG5ZtmQS1p2g" name="Debug__B__Ex__StartingUp__160">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__B__Ex__StartingUp&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TAFC4ErDEemG5ZtmQS1p2g" name="Debug__B__Ac__StartingUp__doorsOpen__7">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TAFp8ErDEemG5ZtmQS1p2g" name="Debug__B__Ac__StartingUp__doorsOpen__7">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;StartingUp&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;StartingUp__doorsOpen__7&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__B__Ac__StartingUp__doorsOpen__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TAUTcUrDEemG5ZtmQS1p2g" name="Debug__B__Ac__StartingUp__doorsOpen__7__161">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__B__Ac__StartingUp__doorsOpen__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TAHfIErDEemG5ZtmQS1p2g" name="Debug__A__Ac__StartingUp__doorsOpen__7">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TAHfIUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__StartingUp__doorsOpen__7">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;StartingUp__doorsOpen__7&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;doorsOpen&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__A__Ac__StartingUp__doorsOpen__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TAYk4ErDEemG5ZtmQS1p2g" name="Debug__A__Ac__StartingUp__doorsOpen__7__162">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__A__Ac__StartingUp__doorsOpen__7&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TAJUUErDEemG5ZtmQS1p2g" name="Debug__A__En__doorsOpen">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TAJ7YErDEemG5ZtmQS1p2g" name="Debug__A__En__doorsOpen">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;doorsOpen&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__A__En__doorsOpen&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TAcPQErDEemG5ZtmQS1p2g" name="Debug__A__En__doorsOpen__163">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__StartingUp__doorsOpen__7::Region1::Debug__A__En__doorsOpen&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_TAzboErDEemG5ZtmQS1p2g" name="Debug__Path__WaitAllDoorBeOpened__Choice1__8" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_TA1Q0ErDEemG5ZtmQS1p2g" name="Debug__C__WaitAllDoorBeOpened__Choice1__8">
            <connectionPoint xmi:id="_TA2e8UrDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_TA3tEUrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_TA1Q0UrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_TBYqcErDEemG5ZtmQS1p2g" name="Debug__init__trans__WaitAllDoorBeOpened__Choice1__8" source="_TA2e8UrDEemG5ZtmQS1p2g" target="_TBTx8UrDEemG5ZtmQS1p2g"/>
              <transition xmi:id="_TBZRgErDEemG5ZtmQS1p2g" name="Debug__Ex__WaitAllDoorBeOpened" source="_TBTx8UrDEemG5ZtmQS1p2g" target="_TBVAEErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TBpwMErDEemG5ZtmQS1p2g" name="Debug__Ex__WaitAllDoorBeOpened__191">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeOpened__Choice1__8::Region1::Debug__Ex__WaitAllDoorBeOpened&quot;,(char *)&quot;Debug__B__Ex__WaitAllDoorBeOpened&quot;,(char *)&quot;Debug__B__Ac__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TBZRgUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TBZ4kErDEemG5ZtmQS1p2g" name="Debug__AC__WaitAllDoorBeOpened__Choice1__8" source="_TBVAEErDEemG5ZtmQS1p2g" target="_TBXcUErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TBtakErDEemG5ZtmQS1p2g" name="Debug__AC__WaitAllDoorBeOpened__Choice1__8__193">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeOpened__Choice1__8::Region1::Debug__AC__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;Debug__B__Ac__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;Debug__A__Ac__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TBZ4kUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TBafoErDEemG5ZtmQS1p2g" name="Debug__end__trans__WaitAllDoorBeOpened__Choice1__8" source="_TBXcUErDEemG5ZtmQS1p2g" target="_TA3tEUrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TBwd4ErDEemG5ZtmQS1p2g" name="Debug__end__trans__WaitAllDoorBeOpened__Choice1__8__195">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeOpened__Choice1__8::Region1::Debug__end__trans__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;Debug__A__Ac__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TBbGsErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_TBTx8UrDEemG5ZtmQS1p2g" name="Debug__B__Ex__WaitAllDoorBeOpened">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TBTx8krDEemG5ZtmQS1p2g" name="Debug__B__Ex__WaitAllDoorBeOpened">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WaitAllDoorBeOpened&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeOpened__Choice1__8::Region1::Debug__B__Ex__WaitAllDoorBeOpened&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TBexEErDEemG5ZtmQS1p2g" name="Debug__B__Ex__WaitAllDoorBeOpened__187">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeOpened__Choice1__8::Region1::Debug__B__Ex__WaitAllDoorBeOpened&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TBVAEErDEemG5ZtmQS1p2g" name="Debug__B__Ac__WaitAllDoorBeOpened__Choice1__8">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TBVnIErDEemG5ZtmQS1p2g" name="Debug__B__Ac__WaitAllDoorBeOpened__Choice1__8">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WaitAllDoorBeOpened&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;WaitAllDoorBeOpened__Choice1__8&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeOpened__Choice1__8::Region1::Debug__B__Ac__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TBibcUrDEemG5ZtmQS1p2g" name="Debug__B__Ac__WaitAllDoorBeOpened__Choice1__8__188">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeOpened__Choice1__8::Region1::Debug__B__Ac__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TBXcUErDEemG5ZtmQS1p2g" name="Debug__A__Ac__WaitAllDoorBeOpened__Choice1__8">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TBXcUUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__WaitAllDoorBeOpened__Choice1__8">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WaitAllDoorBeOpened__Choice1__8&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeOpened__Choice1__8::Region1::Debug__A__Ac__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TBmF0ErDEemG5ZtmQS1p2g" name="Debug__A__Ac__WaitAllDoorBeOpened__Choice1__8__189">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__WaitAllDoorBeOpened__Choice1__8::Region1::Debug__A__Ac__WaitAllDoorBeOpened__Choice1__8&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_TB3yoErDEemG5ZtmQS1p2g" name="Debug__Path__doorsClosed__WaitAllDoorBeOpened__9" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_TB5AwUrDEemG5ZtmQS1p2g" name="Debug__C__doorsClosed__WaitAllDoorBeOpened__9">
            <connectionPoint xmi:id="_TB6O4UrDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_TB7dAUrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_TB5AwkrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_TCgEwErDEemG5ZtmQS1p2g" name="Debug__init__trans__doorsClosed__WaitAllDoorBeOpened__9" source="_TB6O4UrDEemG5ZtmQS1p2g" target="_TCW60ErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TCy_sErDEemG5ZtmQS1p2g" name="Debug__init__trans__doorsClosed__WaitAllDoorBeOpened__9__215">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__init__trans__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__doorsClosed&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_TCgr0ErDEemG5ZtmQS1p2g" name="Debug__Ex__doorsClosed" source="_TCW60ErDEemG5ZtmQS1p2g" target="_TCYI8ErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TC0N0ErDEemG5ZtmQS1p2g" name="Debug__Ex__doorsClosed__217">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__Ex__doorsClosed&quot;,(char *)&quot;Debug__B__Ex__doorsClosed&quot;,(char *)&quot;Debug__B__Ac__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TCgr0UrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TChS4ErDEemG5ZtmQS1p2g" name="Debug__AC__doorsClosed__WaitAllDoorBeOpened__9" source="_TCYI8ErDEemG5ZtmQS1p2g" target="_TCbzUErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TC2qEErDEemG5ZtmQS1p2g" name="Debug__AC__doorsClosed__WaitAllDoorBeOpened__9__219">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__AC__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;Debug__B__Ac__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;Debug__A__Ac__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TChS4UrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TChS4krDEemG5ZtmQS1p2g" name="Debug__En__WaitAllDoorBeOpened" source="_TCbzUErDEemG5ZtmQS1p2g" target="_TCePkErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TCh58UrDEemG5ZtmQS1p2g" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>    tmpInt++;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__En__WaitAllDoorBeOpened&quot;,(char *)&quot;Debug__A__Ac__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;Debug__A__En__WaitAllDoorBeOpened&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TCh58ErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TCihAErDEemG5ZtmQS1p2g" name="Debug__end__trans__doorsClosed__WaitAllDoorBeOpened__9" source="_TCePkErDEemG5ZtmQS1p2g" target="_TB7dAUrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TC7ikErDEemG5ZtmQS1p2g" name="Debug__end__trans__doorsClosed__WaitAllDoorBeOpened__9__222">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__end__trans__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;Debug__A__En__WaitAllDoorBeOpened&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TCihAUrDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_TCW60ErDEemG5ZtmQS1p2g" name="Debug__B__Ex__doorsClosed">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TCW60UrDEemG5ZtmQS1p2g" name="Debug__B__Ex__doorsClosed">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;doorsClosed&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__B__Ex__doorsClosed&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TCkWMErDEemG5ZtmQS1p2g" name="Debug__B__Ex__doorsClosed__210">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__B__Ex__doorsClosed&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TCYI8ErDEemG5ZtmQS1p2g" name="Debug__B__Ac__doorsClosed__WaitAllDoorBeOpened__9">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TCYwAErDEemG5ZtmQS1p2g" name="Debug__B__Ac__doorsClosed__WaitAllDoorBeOpened__9">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;doorsClosed&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;doorsClosed__WaitAllDoorBeOpened__9&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__B__Ac__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TConoErDEemG5ZtmQS1p2g" name="Debug__B__Ac__doorsClosed__WaitAllDoorBeOpened__9__211">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__B__Ac__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TCbzUErDEemG5ZtmQS1p2g" name="Debug__A__Ac__doorsClosed__WaitAllDoorBeOpened__9">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TCbzUUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__doorsClosed__WaitAllDoorBeOpened__9">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;doorsClosed__WaitAllDoorBeOpened__9&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WaitAllDoorBeOpened&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__A__Ac__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TCrq8UrDEemG5ZtmQS1p2g" name="Debug__A__Ac__doorsClosed__WaitAllDoorBeOpened__9__212">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__A__Ac__doorsClosed__WaitAllDoorBeOpened__9&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TCePkErDEemG5ZtmQS1p2g" name="Debug__A__En__WaitAllDoorBeOpened">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TCePkUrDEemG5ZtmQS1p2g" name="Debug__A__En__WaitAllDoorBeOpened">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WaitAllDoorBeOpened&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__A__En__WaitAllDoorBeOpened&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TCvVUErDEemG5ZtmQS1p2g" name="Debug__A__En__WaitAllDoorBeOpened__213">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__doorsClosed__WaitAllDoorBeOpened__9::Region1::Debug__A__En__WaitAllDoorBeOpened&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_TDBpMErDEemG5ZtmQS1p2g" name="Debug__Path__Choice1__doorsOpen__10" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_TDC3UUrDEemG5ZtmQS1p2g" name="Debug__C__Choice1__doorsOpen__10">
            <connectionPoint xmi:id="_TDEFcUrDEemG5ZtmQS1p2g" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_TDFTkUrDEemG5ZtmQS1p2g" name="ex" kind="exitPoint"/>
            <region xmi:id="_TDC3UkrDEemG5ZtmQS1p2g" name="Region1">
              <transition xmi:id="_TDuz0ErDEemG5ZtmQS1p2g" name="Debug__init__trans__Choice1__doorsOpen__10" source="_TDEFcUrDEemG5ZtmQS1p2g" target="_TDpUQErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TD-rcErDEemG5ZtmQS1p2g" name="Debug__init__trans__Choice1__doorsOpen__10__241">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__doorsOpen__10::Region1::Debug__init__trans__Choice1__doorsOpen__10&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Choice1__doorsOpen__10&quot;,(char *)&quot;&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_TDuz0UrDEemG5ZtmQS1p2g" name="Debug__Ac__Choice1__doorsOpen__10" source="_TDpUQErDEemG5ZtmQS1p2g" target="_TDrwgErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TEBuwErDEemG5ZtmQS1p2g" name="Debug__Ac__Choice1__doorsOpen__10__243">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__doorsOpen__10::Region1::Debug__Ac__Choice1__doorsOpen__10&quot;,(char *)&quot;Debug__B__Ac__Choice1__doorsOpen__10&quot;,(char *)&quot;Debug__A__Ac__Choice1__doorsOpen__10&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TDuz0krDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TDva4ErDEemG5ZtmQS1p2g" name="Debug__En__doorsOpen" source="_TDrwgErDEemG5ZtmQS1p2g" target="_TDtlsErDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TDwpAErDEemG5ZtmQS1p2g" name="getLockCommand" visibility="public" isReentrant="true">
                  <language>C++</language>
                  <body>    std::cout&lt;&lt;&quot;Doors are open&quot;&lt;&lt;std::endl;
    std::cout&lt;&lt;&quot;Press any key to close doors&quot;&lt;&lt;std::endl;
    getchar();
    std::cout&lt;&lt;&quot;Sending Lock message to doors\n&quot;&lt;&lt;std::endl;
    /// send message to first door
    lockPort.lock().send(4);
    tmpInt=1;

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__doorsOpen__10::Region1::Debug__En__doorsOpen&quot;,(char *)&quot;Debug__A__Ac__Choice1__doorsOpen__10&quot;,(char *)&quot;Debug__A__En__Choice1__doorsOpen__10&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TDwB8ErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_TDxQEErDEemG5ZtmQS1p2g" name="Debug__end__trans__Choice1__doorsOpen__10" source="_TDtlsErDEemG5ZtmQS1p2g" target="_TDFTkUrDEemG5ZtmQS1p2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TEGnQErDEemG5ZtmQS1p2g" name="Debug__end__trans__Choice1__doorsOpen__10__246">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__doorsOpen__10::Region1::Debug__end__trans__Choice1__doorsOpen__10&quot;,(char *)&quot;Debug__A__En__Choice1__doorsOpen__10&quot;,(char *)&quot;ex&quot;,(char *)&quot;&quot;);
</body>
                </effect>
                <trigger xmi:id="_TDx3IErDEemG5ZtmQS1p2g" name="Debug__Exec" port="_S1HJAErDEemG5ZtmQS1p2g">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_TDpUQErDEemG5ZtmQS1p2g" name="Debug__B__Ac__Choice1__doorsOpen__10">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TDqiYErDEemG5ZtmQS1p2g" name="Debug__B__Ac__Choice1__doorsOpen__10">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Choice1__doorsOpen__10&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__doorsOpen__10::Region1::Debug__B__Ac__Choice1__doorsOpen__10&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TDzsUErDEemG5ZtmQS1p2g" name="Debug__B__Ac__Choice1__doorsOpen__10__237">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__doorsOpen__10::Region1::Debug__B__Ac__Choice1__doorsOpen__10&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TDrwgErDEemG5ZtmQS1p2g" name="Debug__A__Ac__Choice1__doorsOpen__10">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TDrwgUrDEemG5ZtmQS1p2g" name="Debug__A__Ac__Choice1__doorsOpen__10">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Choice1__doorsOpen__10&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;doorsOpen&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__doorsOpen__10::Region1::Debug__A__Ac__Choice1__doorsOpen__10&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TD39wErDEemG5ZtmQS1p2g" name="Debug__A__Ac__Choice1__doorsOpen__10__238">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__doorsOpen__10::Region1::Debug__A__Ac__Choice1__doorsOpen__10&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_TDtlsErDEemG5ZtmQS1p2g" name="Debug__A__En__Choice1__doorsOpen__10">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TDtlsUrDEemG5ZtmQS1p2g" name="Debug__A__En__Choice1__doorsOpen__10">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;doorsOpen&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__doorsOpen__10::Region1::Debug__A__En__Choice1__doorsOpen__10&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_TD8PMErDEemG5ZtmQS1p2g" name="Debug__A__En__Choice1__doorsOpen__10__239">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;CarDoorLock::CentralLock::centralLockSM::Region1::Debug__C__Choice1__doorsOpen__10::Region1::Debug__A__En__Choice1__doorsOpen__10&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_TERmYErDEemG5ZtmQS1p2g" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_S1DeoErDEemG5ZtmQS1p2g" name="Debug__recallAllMsg" specification="_S1C3kErDEemG5ZtmQS1p2g">
        <language>C++</language>
        <body>lockPort.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_S1arAErDEemG5ZtmQS1p2g" name="Debug__variablesViewMethod" specification="_S1aD8ErDEemG5ZtmQS1p2g">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;tmpInt,&quot;);
tempS.append(&quot;Integer,&quot;);
if(tmpInt!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,tmpInt);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
tempS.append(&quot;locksCount,&quot;);
tempS.append(&quot;Integer,&quot;);
if(locksCount!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,locksCount);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_S1lqIErDEemG5ZtmQS1p2g" name="Debug__variablesChange" specification="_S1gKkErDEemG5ZtmQS1p2g">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;tmpInt&quot;==tempVarName){
    tmpInt=atoi(varValue);
    return true;
}else if (&quot;locksCount&quot;==tempVarName){
    locksCount=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_S2MuIErDEemG5ZtmQS1p2g" name="Debug__sendEvent" specification="_S11hwErDEemG5ZtmQS1p2g">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_S1C3kErDEemG5ZtmQS1p2g" name="Debug__recallAllMsg" visibility="private" method="_S1DeoErDEemG5ZtmQS1p2g"/>
      <ownedOperation xmi:id="_S1aD8ErDEemG5ZtmQS1p2g" name="Debug__variablesView" visibility="private" method="_S1arAErDEemG5ZtmQS1p2g"/>
      <ownedOperation xmi:id="_S1gKkErDEemG5ZtmQS1p2g" name="Debug__variablesChange" visibility="private" method="_S1lqIErDEemG5ZtmQS1p2g">
        <ownedParameter xmi:id="_S1jN4ErDEemG5ZtmQS1p2g" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S1kcAErDEemG5ZtmQS1p2g" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S1lDEErDEemG5ZtmQS1p2g" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_S11hwErDEemG5ZtmQS1p2g" name="Debug__sendEvent" visibility="private" method="_S2MuIErDEemG5ZtmQS1p2g">
        <ownedParameter xmi:id="_S12v4ErDEemG5ZtmQS1p2g" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S17oYErDEemG5ZtmQS1p2g" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S1-EoErDEemG5ZtmQS1p2g" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S2CWEErDEemG5ZtmQS1p2g" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S2C9IErDEemG5ZtmQS1p2g" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S2GAcErDEemG5ZtmQS1p2g" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S2JDwErDEemG5ZtmQS1p2g" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S2KR4ErDEemG5ZtmQS1p2g" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S2K48ErDEemG5ZtmQS1p2g" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_S2LgAErDEemG5ZtmQS1p2g" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_LXPSQNrAEeahI77Vg4Dl9Q" name="Locking">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_LXKZwNrAEeahI77Vg4Dl9Q" name="Locking">
        <interfaceRealization xmi:id="_LXV_8NrAEeahI77Vg4Dl9Q" client="_LXKZwNrAEeahI77Vg4Dl9Q" supplier="_LXSVkNrAEeahI77Vg4Dl9Q" contract="_LXSVkNrAEeahI77Vg4Dl9Q"/>
        <interfaceRealization xmi:id="_LXfJ4NrAEeahI77Vg4Dl9Q" client="_LXKZwNrAEeahI77Vg4Dl9Q" supplier="_LXcGkNrAEeahI77Vg4Dl9Q" contract="_LXcGkNrAEeahI77Vg4Dl9Q"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_LXSVkNrAEeahI77Vg4Dl9Q" name="Locking">
        <ownedOperation xmi:id="_WHBOsNrAEeahI77Vg4Dl9Q" name="lock"/>
        <ownedOperation xmi:id="_Y7LYYNrAEeahI77Vg4Dl9Q" name="unlock"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_LXX1INrAEeahI77Vg4Dl9Q" name="Locking~">
        <ownedOperation xmi:id="_MKPDMNrFEeahI77Vg4Dl9Q" name="lockStatus">
          <ownedParameter xmi:id="_P-KAwNrFEeahI77Vg4Dl9Q" name="locked">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_LXaRYNrAEeahI77Vg4Dl9Q" client="_LXKZwNrAEeahI77Vg4Dl9Q" supplier="_LXX1INrAEeahI77Vg4Dl9Q"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_LXa4cNrAEeahI77Vg4Dl9Q" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_LXcGkNrAEeahI77Vg4Dl9Q" name="LockingIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_LXgYANrAEeahI77Vg4Dl9Q" client="_LXKZwNrAEeahI77Vg4Dl9Q" supplier="_LXcGkNrAEeahI77Vg4Dl9Q"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_XN1s0NrAEeahI77Vg4Dl9Q" operation="_WHBOsNrAEeahI77Vg4Dl9Q"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Zlrt8NrAEeahI77Vg4Dl9Q" operation="_Y7LYYNrAEeahI77Vg4Dl9Q"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_NUfP0NrFEeahI77Vg4Dl9Q" operation="_MKPDMNrFEeahI77Vg4Dl9Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_SzzhcErDEemG5ZtmQS1p2g" name="Debug__Top">
      <ownedAttribute xmi:id="_S0bzkErDEemG5ZtmQS1p2g" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S0ihQErDEemG5ZtmQS1p2g" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_S0jIUErDEemG5ZtmQS1p2g" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_S0on4ErDEemG5ZtmQS1p2g" name="Debug__Car" type="_iSbRENq_EeahI77Vg4Dl9Q">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S0qdEErDEemG5ZtmQS1p2g" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_S0qdEUrDEemG5ZtmQS1p2g" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_0wPiINq9EeahI77Vg4Dl9Q">
      <eAnnotations xmi:id="_0wR-YNq9EeahI77Vg4Dl9Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.profile_1.0.0.201707181432.jar!/umlProfile/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_LVEcINrNEeahI77Vg4Dl9Q">
      <eAnnotations xmi:id="_LVFqQNrNEeahI77Vg4Dl9Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.codegen.cpp.profile_1.0.0.201707181457.jar!/profiles/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
    <profileApplication xmi:id="_yE6TYElDEemUxsIrz51xbw">
      <eAnnotations xmi:id="_yFErcElDEemUxsIrz51xbw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_iUqswNq_EeahI77Vg4Dl9Q" base_Class="_iSbRENq_EeahI77Vg4Dl9Q"/>
  <UMLRealTime:Capsule xmi:id="_ltJEcNq_EeahI77Vg4Dl9Q" base_Class="_ls0UUNq_EeahI77Vg4Dl9Q"/>
  <UMLRealTime:Capsule xmi:id="_s7p5kNq_EeahI77Vg4Dl9Q" base_Class="_s7aB8Nq_EeahI77Vg4Dl9Q"/>
  <UMLRealTime:Capsule xmi:id="_xTPk4Nq_EeahI77Vg4Dl9Q" base_Class="_xS9RANq_EeahI77Vg4Dl9Q"/>
  <UMLRealTime:ProtocolContainer xmi:id="_LXQgYNrAEeahI77Vg4Dl9Q" base_Package="_LXPSQNrAEeahI77Vg4Dl9Q"/>
  <UMLRealTime:RTMessageSet xmi:id="_LXUKwNrAEeahI77Vg4Dl9Q" base_Interface="_LXSVkNrAEeahI77Vg4Dl9Q"/>
  <UMLRealTime:RTMessageSet xmi:id="_LXZDQNrAEeahI77Vg4Dl9Q" base_Interface="_LXX1INrAEeahI77Vg4Dl9Q" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_LXdUsNrAEeahI77Vg4Dl9Q" base_Interface="_LXcGkNrAEeahI77Vg4Dl9Q" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_LXg_ENrAEeahI77Vg4Dl9Q" base_Collaboration="_LXKZwNrAEeahI77Vg4Dl9Q"/>
  <UMLRealTime:CapsulePart xmi:id="_GVgBQNrBEeahI77Vg4Dl9Q" base_Property="_GVbv0NrBEeahI77Vg4Dl9Q"/>
  <UMLRealTime:CapsulePart xmi:id="_LNWhANrBEeahI77Vg4Dl9Q" base_Property="_LNSPkNrBEeahI77Vg4Dl9Q"/>
  <UMLRealTime:RTPort xmi:id="_WvNaoNrBEeahI77Vg4Dl9Q" base_Port="_WvH7ENrBEeahI77Vg4Dl9Q"/>
  <UMLRealTime:RTPort xmi:id="_k3m4sNrBEeahI77Vg4Dl9Q" base_Port="_k3gyENrBEeahI77Vg4Dl9Q"/>
  <UMLRealTime:CapsulePart xmi:id="_yAPi4NrBEeahI77Vg4Dl9Q" base_Property="_yAJcQNrBEeahI77Vg4Dl9Q"/>
  <UMLRealTime:RTPort xmi:id="_-jPJYNrBEeahI77Vg4Dl9Q" base_Port="_-jLfANrBEeahI77Vg4Dl9Q"/>
  <UMLRealTime:RTConnector xmi:id="_U4ZNgdrCEeahI77Vg4Dl9Q" base_Connector="_U4X_YNrCEeahI77Vg4Dl9Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_QG5zcNrNEeahI77Vg4Dl9Q" headerPreface="#include&lt;stdio.h>&#xA;#include&lt;iostream>&#xA;&#xA;&#xA;#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_s7aB8Nq_EeahI77Vg4Dl9Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_qaE6YNrPEeay9vzLxQrrvQ" headerPreface="#include&lt;stdio.h>&#xA;#include&lt;iostream>&#xA;#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_xS9RANq_EeahI77Vg4Dl9Q"/>
  <UMLRealTime:RTPort xmi:id="_Ce3MQNrUEeaBAosuR3tfxw" isWired="false" base_Port="_Cey60NrUEeaBAosuR3tfxw"/>
  <UMLRealTime:RTConnector xmi:id="_-oDOkNraEeal5dJZNvUqew" base_Connector="_-n9H8NraEeal5dJZNvUqew"/>
  <UMLRealTime:CapsulePart xmi:id="_V8w48NrgEeal5dJZNvUqew" base_Property="_V8mg4NrgEeal5dJZNvUqew"/>
  <UMLRealTime:RTConnector xmi:id="_bwRvstrgEeal5dJZNvUqew" base_Connector="_bwP6gNrgEeal5dJZNvUqew"/>
  <UMLRealTime:CapsulePart xmi:id="_5AN0oNrgEeal5dJZNvUqew" base_Property="_5AKKQNrgEeal5dJZNvUqew"/>
  <UMLRealTime:RTConnector xmi:id="_-3zTEdrgEeal5dJZNvUqew" base_Connector="_-3w20NrgEeal5dJZNvUqew"/>
  <UMLRealTime:CapsulePart xmi:id="_AVeyANrhEeal5dJZNvUqew" base_Property="_AVcVwNrhEeal5dJZNvUqew"/>
  <UMLRealTime:RTConnector xmi:id="_EUj2sNrhEeal5dJZNvUqew" base_Connector="_EUhacNrhEeal5dJZNvUqew"/>
  <UMLRealTime:Capsule xmi:id="_S0HqgErDEemG5ZtmQS1p2g" base_Class="_SzzhcErDEemG5ZtmQS1p2g"/>
  <UMLRealTime:CapsulePart xmi:id="_S0h6MErDEemG5ZtmQS1p2g" base_Property="_S0bzkErDEemG5ZtmQS1p2g"/>
  <UMLRealTime:CapsulePart xmi:id="_S0p2AErDEemG5ZtmQS1p2g" base_Property="_S0on4ErDEemG5ZtmQS1p2g"/>
  <UMLRealTime:RTPort xmi:id="_S1LacErDEemG5ZtmQS1p2g" isNotification="true" isWired="false" base_Port="_S1HJAErDEemG5ZtmQS1p2g"/>
  <UMLRealTime:RTPort xmi:id="_S1OdwErDEemG5ZtmQS1p2g" base_Port="_S1HJAErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:AttributeProperties xmi:id="_S1p7kErDEemG5ZtmQS1p2g" type="debugEvents::Event" base_Property="_S1otcErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:AttributeProperties xmi:id="_S1s-4ErDEemG5ZtmQS1p2g" type="SROManager" base_Property="_S1rJsErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_S1wCMErDEemG5ZtmQS1p2g" base_Class="_s7aB8Nq_EeahI77Vg4Dl9Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_S15zMErDEemG5ZtmQS1p2g" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_S12v4ErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_S182gErDEemG5ZtmQS1p2g" type="debugEvents::EVENTTYPE" base_Parameter="_S17oYErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_S2BvAErDEemG5ZtmQS1p2g" type="const char *" base_Parameter="_S1-EoErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_S2FZYErDEemG5ZtmQS1p2g" type="const char *" base_Parameter="_S2C9IErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_S2IcsErDEemG5ZtmQS1p2g" type="const char *" base_Parameter="_S2GAcErDEemG5ZtmQS1p2g"/>
  <UMLRealTime:RTPort xmi:id="_S2fCAErDEemG5ZtmQS1p2g" isNotification="true" isWired="false" base_Port="_S2bXoErDEemG5ZtmQS1p2g"/>
  <UMLRealTime:RTPort xmi:id="_S2iFUErDEemG5ZtmQS1p2g" base_Port="_S2bXoErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:AttributeProperties xmi:id="_S2-KMErDEemG5ZtmQS1p2g" type="debugEvents::Event" base_Property="_S25RsErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:AttributeProperties xmi:id="_S3BNgErDEemG5ZtmQS1p2g" type="SROManager" base_Property="_S2-KMUrDEemG5ZtmQS1p2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_S3E34ErDEemG5ZtmQS1p2g" base_Class="_xS9RANq_EeahI77Vg4Dl9Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_S3MMoErDEemG5ZtmQS1p2g" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_S3K-gErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_S3PP8ErDEemG5ZtmQS1p2g" type="debugEvents::EVENTTYPE" base_Parameter="_S3MzsErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_S3STQErDEemG5ZtmQS1p2g" type="const char *" base_Parameter="_S3P3AErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_S3WksErDEemG5ZtmQS1p2g" type="const char *" base_Parameter="_S3UIcErDEemG5ZtmQS1p2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_S3YZ4ErDEemG5ZtmQS1p2g" type="const char *" base_Parameter="_S3WksUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S4LEEErDEemG5ZtmQS1p2g" base_Pseudostate="_S4In0ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S4OucErDEemG5ZtmQS1p2g" base_State="_S4LrIErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S4RKsErDEemG5ZtmQS1p2g" base_Pseudostate="_S4PVgErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S4S_4ErDEemG5ZtmQS1p2g" base_Pseudostate="_S4RKsUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_S5Eb8ErDEemG5ZtmQS1p2g" base_Region="_S4LrIUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S5XW4ErDEemG5ZtmQS1p2g" base_State="_S5FDAErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S5ddgErDEemG5ZtmQS1p2g" base_State="_S5HfQErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S5i9EErDEemG5ZtmQS1p2g" base_State="_S5LwsErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S5suEErDEemG5ZtmQS1p2g" base_State="_S5O0AErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S6NEYErDEemG5ZtmQS1p2g" base_Pseudostate="_S6LPMErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S6RV0ErDEemG5ZtmQS1p2g" base_State="_S6NrcErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S6UZIErDEemG5ZtmQS1p2g" base_Pseudostate="_S6R84ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S6WOUErDEemG5ZtmQS1p2g" base_Pseudostate="_S6UZIUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_S7CK0ErDEemG5ZtmQS1p2g" base_Region="_S6NrcUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S7SCcErDEemG5ZtmQS1p2g" base_State="_S7Cx4ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S7YJEErDEemG5ZtmQS1p2g" base_State="_S7EnEErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S7ePsErDEemG5ZtmQS1p2g" base_State="_S7I4gErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S78w0ErDEemG5ZtmQS1p2g" base_Pseudostate="_S78JwErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S7-mAErDEemG5ZtmQS1p2g" base_State="_S79X4ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S8AbMErDEemG5ZtmQS1p2g" base_Pseudostate="_S7-mAUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S8BpUErDEemG5ZtmQS1p2g" base_Pseudostate="_S8AbMUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_S8YOoErDEemG5ZtmQS1p2g" base_Region="_S79X4UrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S8gxgErDEemG5ZtmQS1p2g" base_State="_S8Y1sErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S8j00ErDEemG5ZtmQS1p2g" base_State="_S8aD0ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S8m4IErDEemG5ZtmQS1p2g" base_State="_S8b5AErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S84k8ErDEemG5ZtmQS1p2g" base_Pseudostate="_S82vwErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S85zEErDEemG5ZtmQS1p2g" base_State="_S84k8UrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S88PUErDEemG5ZtmQS1p2g" base_Pseudostate="_S86aIErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S89dcErDEemG5ZtmQS1p2g" base_Pseudostate="_S88PUUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_S9awcErDEemG5ZtmQS1p2g" base_Region="_S84k8krDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S9lvkErDEemG5ZtmQS1p2g" base_State="_S9cloErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S9oy4ErDEemG5ZtmQS1p2g" base_State="_S9fo8ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S9rPIErDEemG5ZtmQS1p2g" base_State="_S9g3EErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S96fsErDEemG5ZtmQS1p2g" base_Pseudostate="_S95RkErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S9-KEErDEemG5ZtmQS1p2g" base_State="_S97GwErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S9_YMErDEemG5ZtmQS1p2g" base_Pseudostate="_S9-KEUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S9__QErDEemG5ZtmQS1p2g" base_Pseudostate="_S9_YMUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_S-RsEErDEemG5ZtmQS1p2g" base_Region="_S97GwUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S-STIErDEemG5ZtmQS1p2g" base_State="_S97GwErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S-ZA0ErDEemG5ZtmQS1p2g" base_State="_S-S6MErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S-crMErDEemG5ZtmQS1p2g" base_State="_S-UIUErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S-fHcErDEemG5ZtmQS1p2g" base_State="_S-V9gErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S-u_EErDEemG5ZtmQS1p2g" base_Pseudostate="_S-tJ4ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S-wNMErDEemG5ZtmQS1p2g" base_State="_S-vmIErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S-w0QErDEemG5ZtmQS1p2g" base_Pseudostate="_S-wNMUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S-zQgErDEemG5ZtmQS1p2g" base_Pseudostate="_S-xbUErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_S_FkYErDEemG5ZtmQS1p2g" base_Region="_S-vmIUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S_PVYErDEemG5ZtmQS1p2g" base_State="_S_GLcErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S_UN4ErDEemG5ZtmQS1p2g" base_State="_S_GygErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S_XRMErDEemG5ZtmQS1p2g" base_State="_S_J10ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S_mhwErDEemG5ZtmQS1p2g" base_Pseudostate="_S_lToErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_S_o-AErDEemG5ZtmQS1p2g" base_State="_S_mhwUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S_qMIErDEemG5ZtmQS1p2g" base_Pseudostate="_S_o-AUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_S_raQErDEemG5ZtmQS1p2g" base_Pseudostate="_S_qMIUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_TADNsErDEemG5ZtmQS1p2g" base_Region="_S_mhwkrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TAQCAErDEemG5ZtmQS1p2g" base_State="_TAD0wErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TAUTcErDEemG5ZtmQS1p2g" base_State="_TAFC4ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TAX90ErDEemG5ZtmQS1p2g" base_State="_TAHfIErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TAergErDEemG5ZtmQS1p2g" base_State="_TAJUUErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TA0pwErDEemG5ZtmQS1p2g" base_Pseudostate="_TAzboErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TA2e8ErDEemG5ZtmQS1p2g" base_State="_TA1Q0ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TA3tEErDEemG5ZtmQS1p2g" base_Pseudostate="_TA2e8UrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TA47MErDEemG5ZtmQS1p2g" base_Pseudostate="_TA3tEUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_TBRVsErDEemG5ZtmQS1p2g" base_Region="_TA1Q0UrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TBTx8ErDEemG5ZtmQS1p2g" base_State="_TA1Q0ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TBeKAErDEemG5ZtmQS1p2g" base_State="_TBTx8UrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TBibcErDEemG5ZtmQS1p2g" base_State="_TBVAEErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TBlewErDEemG5ZtmQS1p2g" base_State="_TBXcUErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TB5AwErDEemG5ZtmQS1p2g" base_Pseudostate="_TB3yoErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TB6O4ErDEemG5ZtmQS1p2g" base_State="_TB5AwUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TB7dAErDEemG5ZtmQS1p2g" base_Pseudostate="_TB6O4UrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TB8rIErDEemG5ZtmQS1p2g" base_Pseudostate="_TB7dAUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_TCWTwErDEemG5ZtmQS1p2g" base_Region="_TB5AwkrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TCjvIErDEemG5ZtmQS1p2g" base_State="_TCW60ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TCoAkErDEemG5ZtmQS1p2g" base_State="_TCYI8ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TCrq8ErDEemG5ZtmQS1p2g" base_State="_TCbzUErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TCxxkErDEemG5ZtmQS1p2g" base_State="_TCePkErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TDC3UErDEemG5ZtmQS1p2g" base_Pseudostate="_TDBpMErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TDEFcErDEemG5ZtmQS1p2g" base_State="_TDC3UUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TDFTkErDEemG5ZtmQS1p2g" base_Pseudostate="_TDEFcUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TDF6oErDEemG5ZtmQS1p2g" base_Pseudostate="_TDFTkUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_TDotMErDEemG5ZtmQS1p2g" base_Region="_TDC3UkrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TDzFQErDEemG5ZtmQS1p2g" base_State="_TDpUQErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TD3WsErDEemG5ZtmQS1p2g" base_State="_TDrwgErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TD7oIErDEemG5ZtmQS1p2g" base_State="_TDtlsErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TES0gErDEemG5ZtmQS1p2g" base_State="_TERmYErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TFE3oErDEemG5ZtmQS1p2g" base_Pseudostate="_TFDCcErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TFGFwErDEemG5ZtmQS1p2g" base_State="_TFE3oUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TFHT4ErDEemG5ZtmQS1p2g" base_Pseudostate="_TFGs0ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TFIiAErDEemG5ZtmQS1p2g" base_Pseudostate="_TFHT4UrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_TFg8gErDEemG5ZtmQS1p2g" base_Region="_TFE3okrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TFo4UErDEemG5ZtmQS1p2g" base_State="_TFg8gUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TFtJwErDEemG5ZtmQS1p2g" base_State="_TFixsErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TFxbMErDEemG5ZtmQS1p2g" base_State="_TFj_0ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TGLD0ErDEemG5ZtmQS1p2g" base_Pseudostate="_TGJ1sErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TGM5AErDEemG5ZtmQS1p2g" base_State="_TGLq4ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TGOHIErDEemG5ZtmQS1p2g" base_Pseudostate="_TGM5AUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TGPVQErDEemG5ZtmQS1p2g" base_Pseudostate="_TGOHIUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_TGnvwErDEemG5ZtmQS1p2g" base_Region="_TGLq4UrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TGzV8ErDEemG5ZtmQS1p2g" base_State="_TGoW0ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TG3AUErDEemG5ZtmQS1p2g" base_State="_TGpk8ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TG6qsErDEemG5ZtmQS1p2g" base_State="_TGraIErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_THEbsErDEemG5ZtmQS1p2g" base_State="_TGsoQErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_THVhcErDEemG5ZtmQS1p2g" base_Pseudostate="_THU6YErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_THYkwErDEemG5ZtmQS1p2g" base_State="_THWIgErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_THZy4ErDEemG5ZtmQS1p2g" base_Pseudostate="_THYkwUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_THaZ8ErDEemG5ZtmQS1p2g" base_Pseudostate="_THZy4UrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_THrfsErDEemG5ZtmQS1p2g" base_Region="_THWIgUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TH0CkErDEemG5ZtmQS1p2g" base_State="_THsGwErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TH3F4ErDEemG5ZtmQS1p2g" base_State="_THtU4ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TH47EErDEemG5ZtmQS1p2g" base_State="_THujAErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TH9zkErDEemG5ZtmQS1p2g" base_State="_THwYMErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TILO8ErDEemG5ZtmQS1p2g" base_Pseudostate="_TIKA0ErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TIMdEErDEemG5ZtmQS1p2g" base_State="_TILO8UrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TINEIErDEemG5ZtmQS1p2g" base_Pseudostate="_TIMdEUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TIO5UErDEemG5ZtmQS1p2g" base_Pseudostate="_TINrMErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_TIgmIErDEemG5ZtmQS1p2g" base_Region="_TILO8krDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TIq-MErDEemG5ZtmQS1p2g" base_State="_TIhNMErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TIuokErDEemG5ZtmQS1p2g" base_State="_TIh0QErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TIxE0ErDEemG5ZtmQS1p2g" base_State="_TIjpcErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TI1WQErDEemG5ZtmQS1p2g" base_State="_TIleoErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TJBjgErDEemG5ZtmQS1p2g" base_Pseudostate="_TJAVYErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TJCxoErDEemG5ZtmQS1p2g" base_State="_TJBjgUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TJEm0ErDEemG5ZtmQS1p2g" base_Pseudostate="_TJCxoUrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_TJF08ErDEemG5ZtmQS1p2g" base_Pseudostate="_TJEm0UrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_TJW6sErDEemG5ZtmQS1p2g" base_Region="_TJBjgkrDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TJlkMErDEemG5ZtmQS1p2g" base_State="_TJXhwErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TJqcsErDEemG5ZtmQS1p2g" base_State="_TJZ-AErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TJuuIErDEemG5ZtmQS1p2g" base_State="_TJbzMErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TJy_kErDEemG5ZtmQS1p2g" base_State="_TJdoYErDEemG5ZtmQS1p2g"/>
  <UMLRTStateMachines:RTState xmi:id="_TKJk4ErDEemG5ZtmQS1p2g" base_State="_TKIWwErDEemG5ZtmQS1p2g"/>
</xmi:XMI>
