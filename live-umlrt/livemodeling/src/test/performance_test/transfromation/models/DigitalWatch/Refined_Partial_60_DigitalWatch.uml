<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_GN1XsAqpEeiwdpidSbDb2g" name="DigitalWatch">
    <eAnnotations xmi:id="_GN1XsQqpEeiwdpidSbDb2g" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_GN1XsgqpEeiwdpidSbDb2g" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_r_6AUAqqEeiwdpidSbDb2g" source="UMLRT_Default_top">
      <details xmi:id="_r_6nYAqqEeiwdpidSbDb2g" key="top_name" value="DigitalWatch"/>
    </eAnnotations>
    <eAnnotations xmi:id="_F619kEwZEem9Z94xcSBqRg" source="dummy"/>
    <eAnnotations xmi:id="_0XtGEExcEemSTMikSlnaJg" source="dummy"/>
    <eAnnotations xmi:id="_OrHBQEyFEemIJq1ICJNekw" source="dummy"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_pOYT4AqqEeiwdpidSbDb2g" name="DigitalWatch" isActive="true">
      <ownedAttribute xmi:id="_4mJV0AqvEeiwdpidSbDb2g" name="displayGateKeeper" visibility="protected" type="_WFgwIAqrEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_7I3xQAqvEeiwdpidSbDb2g" name="alarmsCapsule" visibility="protected" type="_DFR5EAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_-PuNcAqvEeiwdpidSbDb2g" name="stopWatchController" visibility="protected" type="_Jz5GIAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_DaXtYAqwEeiwdpidSbDb2g" name="display" visibility="protected" type="_ZtPkcAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_K2VIoAqwEeiwdpidSbDb2g" name="buttonsReader" visibility="protected" type="_xFgrYAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_QJhgkAqwEeiwdpidSbDb2g" name="watchCore" visibility="protected" type="_5cgykAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_TqnowAqwEeiwdpidSbDb2g" name="timeTracker" visibility="protected" type="_EUMt0AqvEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_wIHFUEv9Eem6z9v1kruhiQ" name="dbgAgent" type="_vgTecEv9Eem6z9v1kruhiQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wIITcEv9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_wIITcUv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedConnector xmi:id="_4edHgAqxEeiwdpidSbDb2g" name="RTConnector1">
        <end xmi:id="_4eoGoAqxEeiwdpidSbDb2g" partWithPort="_K2VIoAqwEeiwdpidSbDb2g" role="_qHclsAqxEeiwdpidSbDb2g"/>
        <end xmi:id="_4epUwAqxEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_wsY5YAqxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_8aQ8UAreEeiwdpidSbDb2g" name="RTConnector2">
        <end xmi:id="_8aT_oAreEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_2ASigAreEeiwdpidSbDb2g"/>
        <end xmi:id="_8aT_oQreEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_y_nm0AreEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_ws4AwArhEeiwdpidSbDb2g" name="RTConnector3">
        <end xmi:id="_ws6dAArhEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_mHDRkArhEeiwdpidSbDb2g"/>
        <end xmi:id="_ws7EEArhEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ppFN4ArhEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_OI7kMArkEeiwdpidSbDb2g" name="RTConnector4">
        <end xmi:id="_OI-ngArkEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_IaFLAArkEeiwdpidSbDb2g"/>
        <end xmi:id="_OI_OkArkEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="__kPLsArjEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-6yscArrEeiwdpidSbDb2g" name="RTConnector5">
        <end xmi:id="_-61IsArrEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="_7dRcsArrEeiwdpidSbDb2g"/>
        <end xmi:id="_-61IsQrrEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_AK-h8ArsEeiwdpidSbDb2g" name="RTConnector6">
        <end xmi:id="_ALAXIArsEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_xE8-AArrEeiwdpidSbDb2g"/>
        <end xmi:id="_ALAXIQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_A6WwcArsEeiwdpidSbDb2g" name="RTConnector7">
        <end xmi:id="_A6ZMsArsEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_28NFQArrEeiwdpidSbDb2g"/>
        <end xmi:id="_A6ZMsQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_WMp3IArxEeiwdpidSbDb2g" name="RTConnector8">
        <end xmi:id="_WMrsUArxEeiwdpidSbDb2g" partWithPort="_DaXtYAqwEeiwdpidSbDb2g" role="_LLt5QArxEeiwdpidSbDb2g"/>
        <end xmi:id="_WMsTYArxEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_L9t98ArxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_qGxKQArzEeiwdpidSbDb2g" name="RTConnector9">
        <end xmi:id="_qGy_cArzEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ka0UEArzEeiwdpidSbDb2g"/>
        <end xmi:id="_qGzmgArzEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_WFgwIAqrEeiwdpidSbDb2g" name="DisplayGateKeeper" classifierBehavior="_hUDbcA-pEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uB7goArlEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yMSoQArlEeiwdpidSbDb2g" value="4"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_yNBoEArlEeiwdpidSbDb2g" value="4"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_L9t98ArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_vz8MIEv9Eem6z9v1kruhiQ" name="dbgPortForDisplayGateKeeper" visibility="protected" type="_vkHAYEv9Eem6z9v1kruhiQ" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vz8MIUv9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_vz8zMEv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_hUDbcA-pEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_hUncIA-pEeijktysABpT4g" name="Region">
          <transition xmi:id="_v1z0YEv9Eem6z9v1kruhiQ" name="Trans__Pseudo6669" source="_hUybQA-pEeijktysABpT4g" target="_v1wKAEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_v2GIQEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo66&quot;,&quot;New__State__68&quot;,&quot;To__New__State__68__75&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo66&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_v11CgEv9Eem6z9v1kruhiQ" name="From__New__State__68__70" source="_v1xYIEv9Eem6z9v1kruhiQ" target="_v1wKAEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_v2H9cEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__68&quot;,&quot;New__State__68&quot;,&quot;To__New__State__68__75&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__68&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_v17JIEv9Eem6z9v1kruhiQ" name="PME_Trig71" event="_vkieMEv9Eem6z9v1kruhiQ" port="_vz8MIEv9Eem6z9v1kruhiQ"/>
            <trigger xmi:id="_v18-UEv9Eem6z9v1kruhiQ" name="PME_Trig72" event="__mIMuQrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v1_akEv9Eem6z9v1kruhiQ" name="PME_Trig73" event="__mIMtwrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v2AosEv9Eem6z9v1kruhiQ" name="PME_Trig74" event="__mIMuArkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_v2DsAEv9Eem6z9v1kruhiQ" name="To__New__State__68__75" guard="_v2IkgUv9Eem6z9v1kruhiQ" source="_v1wKAEv9Eem6z9v1kruhiQ" target="_v1xYIEv9Eem6z9v1kruhiQ">
            <ownedRule xmi:id="_v2IkgUv9Eem6z9v1kruhiQ" name="PME_checkDecesion76">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_v2IkgEv9Eem6z9v1kruhiQ" name="PME_checkDecesion76">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__68__75&quot;,&quot;New__State__68&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_hUybQA-pEeijktysABpT4g" name="Pseudo66"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_v1wKAEv9Eem6z9v1kruhiQ" name="DecesionPoint__67" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_v1xYIEv9Eem6z9v1kruhiQ" name="New__State__68"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v0toMEv9Eem6z9v1kruhiQ" name="loadHeap" specification="_v0saEEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v0u2UUv9Eem6z9v1kruhiQ" name="unLoadHeap" specification="_v0u2UEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v04AQUv9Eem6z9v1kruhiQ" name="sendMessage" specification="_v04AQEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayP&quot;) {
  if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v1KUIUv9Eem6z9v1kruhiQ" name="sendInternalMessage" specification="_v1KUIEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v1dPEUv9Eem6z9v1kruhiQ" name="initForPMD" specification="_v1dPEEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForDisplayGateKeeper&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_v0saEEv9Eem6z9v1kruhiQ" name="loadHeap" visibility="private" method="_v0toMEv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_v0u2UEv9Eem6z9v1kruhiQ" name="unLoadHeap" visibility="private" method="_v0u2UUv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_v04AQEv9Eem6z9v1kruhiQ" name="sendMessage" visibility="private" method="_v04AQUv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_v04nUEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_v1Ie8Ev9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_v1KUIEv9Eem6z9v1kruhiQ" name="sendInternalMessage" visibility="private" method="_v1KUIUv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_v1LiQEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_v1OlkEv9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_v1dPEEv9Eem6z9v1kruhiQ" name="initForPMD" visibility="private" method="_v1dPEUv9Eem6z9v1kruhiQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_DFR5EAquEeiwdpidSbDb2g" name="AlarmsCapsule" classifierBehavior="_OKhecA-sEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_y_nm0AreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xE8-AArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_XbRmMA-uEeijktysABpT4g" name="alarmTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_nHqHMBgMEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_3pL_0BgMEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_v-uwIBi9EeiSBIpf1RqKYQ" name="alarmTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_wFsDcEv9Eem6z9v1kruhiQ" name="dbgPortForAlarmsCapsule" visibility="protected" type="_vkHAYEv9Eem6z9v1kruhiQ" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wFsDcUv9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_wFsqgEv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_OKhecA-sEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_OKuSwA-sEeijktysABpT4g" name="Region">
          <transition xmi:id="_wG4WQEv9Eem6z9v1kruhiQ" name="Trans__Pseudo215218" source="_OKx9IA-sEeijktysABpT4g" target="_wG0E0Ev9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wIEpEEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo215&quot;,&quot;New__State__217&quot;,&quot;To__New__State__217__227&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo215&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_wG7ZkEv9Eem6z9v1kruhiQ" name="From__New__State__217__219" source="_wG16AEv9Eem6z9v1kruhiQ" target="_wG0E0Ev9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wH-icEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__217&quot;,&quot;New__State__217&quot;,&quot;To__New__State__217__227&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__217&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_wG9OwEv9Eem6z9v1kruhiQ" name="PME_Trig220" event="_vkieMEv9Eem6z9v1kruhiQ" port="_wFsDcEv9Eem6z9v1kruhiQ"/>
            <trigger xmi:id="_wG_D8Ev9Eem6z9v1kruhiQ" name="PME_Trig221" event="_suGa4ArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_wHA5IEv9Eem6z9v1kruhiQ" name="PME_Trig222" event="_0IHVYArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_wHFxoEv9Eem6z9v1kruhiQ" name="PME_Trig223" event="_dfgJwArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_wHIN4Ev9Eem6z9v1kruhiQ" name="PME_Trig224" port="_XbRmMA-uEeijktysABpT4g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_wHKqIEv9Eem6z9v1kruhiQ" name="PME_Trig225" event="__mIMuwrkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_wH1_kEv9Eem6z9v1kruhiQ" name="PME_Trig226" event="__mIMvArkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_wH8GMEv9Eem6z9v1kruhiQ" name="To__New__State__217__227" guard="_wIF3MUv9Eem6z9v1kruhiQ" source="_wG0E0Ev9Eem6z9v1kruhiQ" target="_wG16AEv9Eem6z9v1kruhiQ">
            <ownedRule xmi:id="_wIF3MUv9Eem6z9v1kruhiQ" name="PME_checkDecesion228">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_wIF3MEv9Eem6z9v1kruhiQ" name="PME_checkDecesion228">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__217__227&quot;,&quot;New__State__217&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_OKx9IA-sEeijktysABpT4g" name="Pseudo215"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_wG0E0Ev9Eem6z9v1kruhiQ" name="DecesionPoint__216" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_wG16AEv9Eem6z9v1kruhiQ" name="New__State__217"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wF3CkUv9Eem6z9v1kruhiQ" name="loadHeap" specification="_wF3CkEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wF5e0Uv9Eem6z9v1kruhiQ" name="unLoadHeap" specification="_wF5e0Ev9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wGJWcUv9Eem6z9v1kruhiQ" name="sendMessage" specification="_wGJWcEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    alarmP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    alarmP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wGPdEUv9Eem6z9v1kruhiQ" name="sendInternalMessage" specification="_wGPdEEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wGpswUv9Eem6z9v1kruhiQ" name="initForPMD" specification="_wGpswEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForAlarmsCapsule&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_wF3CkEv9Eem6z9v1kruhiQ" name="loadHeap" visibility="private" method="_wF3CkUv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_wF5e0Ev9Eem6z9v1kruhiQ" name="unLoadHeap" visibility="private" method="_wF5e0Uv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_wGJWcEv9Eem6z9v1kruhiQ" name="sendMessage" visibility="private" method="_wGJWcUv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_wGMZwEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_wGNA0Ev9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_wGPdEEv9Eem6z9v1kruhiQ" name="sendInternalMessage" visibility="private" method="_wGPdEUv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_wGQrMEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_wGRSQEv9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_wGpswEv9Eem6z9v1kruhiQ" name="initForPMD" visibility="private" method="_wGpswUv9Eem6z9v1kruhiQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_Jz5GIAquEeiwdpidSbDb2g" name="StopWatchCore" classifierBehavior="_U9KO4A-3EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_mHDRkArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_28NFQArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_fwJekBNgEeiFubQUFHg6OA" name="showCounterTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Dan-ABNhEeiFubQUFHg6OA" name="timeCountingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2KcBNhEeiFubQUFHg6OA" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2xgBNhEeiFubQUFHg6OA" name="stopWatchResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_OM2xgRNhEeiFubQUFHg6OA" value="200"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_XYKbwBNnEeiFubQUFHg6OA" name="timeCountingTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_dK4oUBNnEeiFubQUFHg6OA" name="showCounterTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_vuYWsEv9Eem6z9v1kruhiQ" name="dbgPortForStopWatchCore" visibility="protected" type="_vkHAYEv9Eem6z9v1kruhiQ" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vuZk0Ev9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_vuaL4Ev9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_U9KO4A-3EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_U9SKsA-3EeijktysABpT4g" name="Region">
          <transition xmi:id="_P2qHwA-6EeijktysABpT4g" name="showStopWatchCounter" source="_P2fvsA-6EeijktysABpT4g" target="_gmZCsBNjEeiFubQUFHg6OA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CFEuEBNmEeiFubQUFHg6OA">
              <language>C++</language>
              <body>printf(&quot;milliTime:%d\n&quot;,milliTime);
int hour=    milliTime/(1000*60*60);
int minute= milliTime % (1000*60*60) / (1000*60);
int second= milliTime % (1000*60) / 1000;
int milliSecond= milliTime % 1000;
displayGateKeeperP.ShowCounter(hour, minute, second, milliSecond).send();</body>
            </effect>
            <trigger xmi:id="_DuE-IBNkEeiFubQUFHg6OA" port="_fwJekBNgEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_vxO2YEv9Eem6z9v1kruhiQ" name="Trans__Pseudo1926" source="_U9Um8A-3EeijktysABpT4g" target="_vxFFYEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vzuwwEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo19&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__41&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo19&quot;,&quot;New__State__25&quot;,&quot;To__New__State__25__38&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo19&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_vxQrkEv9Eem6z9v1kruhiQ" name="From__New__State__25__27" source="_vxJW0Ev9Eem6z9v1kruhiQ" target="_vxFFYEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vzxNAEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__25&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__41&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__25&quot;,&quot;New__State__25&quot;,&quot;To__New__State__25__38&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__25&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_vxUV8Ev9Eem6z9v1kruhiQ" name="PME_Trig28" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_vxWLIEv9Eem6z9v1kruhiQ" name="PME_Trig29" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_vxZ1gEv9Eem6z9v1kruhiQ" name="PME_Trig30" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_vxdf4Ev9Eem6z9v1kruhiQ" name="PME_Trig31" port="_Dan-ABNhEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_vxfVEEv9Eem6z9v1kruhiQ" name="PME_Trig32" event="_vkieMEv9Eem6z9v1kruhiQ" port="_vuYWsEv9Eem6z9v1kruhiQ"/>
            <trigger xmi:id="_vxgjMEv9Eem6z9v1kruhiQ" name="PME_Trig33" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_vxiYYEv9Eem6z9v1kruhiQ" name="PME_Trig34" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_vxk0oEv9Eem6z9v1kruhiQ" name="PME_Trig35" port="_fwJekBNgEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_vxofAEv9Eem6z9v1kruhiQ" name="PME_Trig36" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_vxqUMEv9Eem6z9v1kruhiQ" name="PME_Trig37" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_vxswcEv9Eem6z9v1kruhiQ" name="To__New__State__25__38" guard="_vz5v4Uv9Eem6z9v1kruhiQ" source="_vxFFYEv9Eem6z9v1kruhiQ" target="_vxJW0Ev9Eem6z9v1kruhiQ">
            <ownedRule xmi:id="_vz5v4Uv9Eem6z9v1kruhiQ" name="PME_checkDecesion65">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_vz5v4Ev9Eem6z9v1kruhiQ" name="PME_checkDecesion65">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__25__38&quot;,&quot;New__State__25&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_vxvzwEv9Eem6z9v1kruhiQ" name="Trans__Pseudo2339" source="_P2fvsA-6EeijktysABpT4g" target="_vxFFYEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vz2FgEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__41&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;New__State__25&quot;,&quot;To__New__State__25__38&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_vxxB4Uv9Eem6z9v1kruhiQ" name="To__Substates__StopWatchMode__41" guard="_vz36sUv9Eem6z9v1kruhiQ" source="_vxFFYEv9Eem6z9v1kruhiQ" target="_vxvzwUv9Eem6z9v1kruhiQ">
            <ownedRule xmi:id="_vz36sUv9Eem6z9v1kruhiQ" name="PME_checkDecesion64">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_vz36sEv9Eem6z9v1kruhiQ" name="PME_checkDecesion64">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__StopWatchMode__41&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_vxzeIEv9Eem6z9v1kruhiQ" name="From__Substates__StopWatchMode__43" source="_vxxo8Ev9Eem6z9v1kruhiQ" target="_vxFFYEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vzzpQEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__41&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;New__State__25&quot;,&quot;To__New__State__25__38&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_U9Um8A-3EeijktysABpT4g" name="Pseudo19"/>
          <subvertex xmi:type="uml:State" xmi:id="_e52hgA-3EeijktysABpT4g" name="StopWatchMode">
            <connectionPoint xmi:id="_P2fvsA-6EeijktysABpT4g" name="Pseudo23" kind="exitPoint"/>
            <connectionPoint xmi:id="_gmZCsBNjEeiFubQUFHg6OA" name="Pseudo21" kind="entryPoint"/>
            <connectionPoint xmi:id="_6lSmABeHEei-ccFu-OwT7Q" name="Pseudo22" kind="entryPoint"/>
            <connectionPoint xmi:id="_vxvzwUv9Eem6z9v1kruhiQ" name="From__Parent__40" kind="entryPoint"/>
            <connectionPoint xmi:id="_vxxo8Ev9Eem6z9v1kruhiQ" name="To__Parent__42" kind="exitPoint"/>
            <region xmi:id="_O4jWMA-5EeijktysABpT4g" name="Region1">
              <transition xmi:id="_VjF7kA-5EeijktysABpT4g" name="init" source="_UevioA-5EeijktysABpT4g" target="_P908MA-5EeijktysABpT4g"/>
              <transition xmi:id="_vyJcYEv9Eem6z9v1kruhiQ" name="Trans__Pseudo2145" source="_gmZCsBNjEeiFubQUFHg6OA" target="_vx0FMEv9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vzDbUEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__59&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__61&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_vyKDcEv9Eem6z9v1kruhiQ" name="Trans__Pseudo2246" source="_6lSmABeHEei-ccFu-OwT7Q" target="_vx0FMEv9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vzGeoEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__59&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__61&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_vyKqgEv9Eem6z9v1kruhiQ" name="Trans__Pseudo2347" source="_P2fvsA-6EeijktysABpT4g" target="_vx0FMEv9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vzjxoEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__59&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__61&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_vyNGwEv9Eem6z9v1kruhiQ" name="From__Pause__48" source="_P908MA-5EeijktysABpT4g" target="_vx0FMEv9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vzMlQEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;Pause&quot;,&quot;To__Pause__59&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__61&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pause&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_vyO78Ev9Eem6z9v1kruhiQ" name="PME_Trig49" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_vydlcEv9Eem6z9v1kruhiQ" name="PME_Trig50" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_vyid8Ev9Eem6z9v1kruhiQ" name="PME_Trig51" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_vyk6MEv9Eem6z9v1kruhiQ" name="PME_Trig52" port="_Dan-ABNhEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_vynWcEv9Eem6z9v1kruhiQ" name="PME_Trig53" event="_vkieMEv9Eem6z9v1kruhiQ" port="_vuYWsEv9Eem6z9v1kruhiQ"/>
                <trigger xmi:id="_vypLoEv9Eem6z9v1kruhiQ" name="PME_Trig54" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_vys2AEv9Eem6z9v1kruhiQ" name="PME_Trig55" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_vy0KwEv9Eem6z9v1kruhiQ" name="PME_Trig56" port="_fwJekBNgEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_vy3OEEv9Eem6z9v1kruhiQ" name="PME_Trig57" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_vy6RYEv9Eem6z9v1kruhiQ" name="PME_Trig58" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_vy8toEv9Eem6z9v1kruhiQ" name="To__Pause__59" guard="_vzoqIUv9Eem6z9v1kruhiQ" source="_vx0FMEv9Eem6z9v1kruhiQ" target="_P908MA-5EeijktysABpT4g">
                <ownedRule xmi:id="_vzoqIUv9Eem6z9v1kruhiQ" name="PME_checkDecesion62">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_vzoqIEv9Eem6z9v1kruhiQ" name="PME_checkDecesion62">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Pause__59&quot;,&quot;Pause&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_vy_J4Ev9Eem6z9v1kruhiQ" name="From__Parnet__StateMachine__60" source="_vxvzwUv9Eem6z9v1kruhiQ" target="_vx0FMEv9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vzoDEEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__59&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__61&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_vzAYAEv9Eem6z9v1kruhiQ" name="To__Parent__StateMachine__61" guard="_vzqfUUv9Eem6z9v1kruhiQ" source="_vx0FMEv9Eem6z9v1kruhiQ" target="_vxxo8Ev9Eem6z9v1kruhiQ">
                <ownedRule xmi:id="_vzqfUUv9Eem6z9v1kruhiQ" name="PME_checkDecesion63">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_vzqfUEv9Eem6z9v1kruhiQ" name="PME_checkDecesion63">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__61&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_P908MA-5EeijktysABpT4g" name="Pause"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_UevioA-5EeijktysABpT4g" name="Pseudo20"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_vx0FMEv9Eem6z9v1kruhiQ" name="DecesionPoint__44" kind="choice"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_vxFFYEv9Eem6z9v1kruhiQ" name="DecesionPoint__24" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_vxJW0Ev9Eem6z9v1kruhiQ" name="New__State__25"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vvBP4Uv9Eem6z9v1kruhiQ" name="loadHeap" specification="_vvBP4Ev9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.stopWatchResolution&quot;,this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vvGIYUv9Eem6z9v1kruhiQ" name="unLoadHeap" specification="_vvGIYEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.stopWatchResolution&quot;,&amp;this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vvvBkUv9Eem6z9v1kruhiQ" name="sendMessage" specification="_vvvBkEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vv8c8Uv9Eem6z9v1kruhiQ" name="sendInternalMessage" specification="_vv8c8Ev9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vw77cEv9Eem6z9v1kruhiQ" name="initForPMD" specification="_vw5fMEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_StopWatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_StopWatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;showCounterTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;timeCountingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForStopWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_vvBP4Ev9Eem6z9v1kruhiQ" name="loadHeap" visibility="private" method="_vvBP4Uv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_vvGIYEv9Eem6z9v1kruhiQ" name="unLoadHeap" visibility="private" method="_vvGIYUv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_vvvBkEv9Eem6z9v1kruhiQ" name="sendMessage" visibility="private" method="_vvvBkUv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_vv29YEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_vv4ykEv9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_vv8c8Ev9Eem6z9v1kruhiQ" name="sendInternalMessage" visibility="private" method="_vv8c8Uv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_vv-SIEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_vwBVcEv9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_vw5fMEv9Eem6z9v1kruhiQ" name="initForPMD" visibility="private" method="_vw77cEv9Eem6z9v1kruhiQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_ZtPkcAquEeiwdpidSbDb2g" name="Display" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_LLt5QArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_xFgrYAquEeiwdpidSbDb2g" name="ButtonsReader" classifierBehavior="_Kab6MA-7EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qHclsAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xB-9sBE6EeiaCPCnhevAQQ" name="readKeyTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_voAB4Ev9Eem6z9v1kruhiQ" name="dbgPortForButtonsReader" visibility="protected" type="_vkHAYEv9Eem6z9v1kruhiQ" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_voAo8Ev9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_voBQAEv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_Kab6MA-7EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_KahZwA-7EeijktysABpT4g" name="Region">
          <transition xmi:id="_vqXZYEv9Eem6z9v1kruhiQ" name="Trans__Init__State__34" source="_vqSg4Ev9Eem6z9v1kruhiQ" target="_vqJW8Ev9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vrDV4Ev9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__3&quot;,&quot;New__State__2&quot;,&quot;To__New__State__2__9&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__3&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_vqdgAEv9Eem6z9v1kruhiQ" name="From__New__State__2__5" source="_vqNoYEv9Eem6z9v1kruhiQ" target="_vqJW8Ev9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vq-dYEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__2&quot;,&quot;New__State__2&quot;,&quot;To__New__State__2__9&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__2&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_vqkNsEv9Eem6z9v1kruhiQ" name="PME_Trig6" event="_-anYcBFKEeibZqndpu8erg" port="_qHclsAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_vqq7YEv9Eem6z9v1kruhiQ" name="PME_Trig7" event="_vkieMEv9Eem6z9v1kruhiQ" port="_voAB4Ev9Eem6z9v1kruhiQ"/>
            <trigger xmi:id="_vqxpEEv9Eem6z9v1kruhiQ" name="PME_Trig8" port="_xB-9sBE6EeiaCPCnhevAQQ">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_vq2hkEv9Eem6z9v1kruhiQ" name="To__New__State__2__9" guard="_vrGZMUv9Eem6z9v1kruhiQ" source="_vqJW8Ev9Eem6z9v1kruhiQ" target="_vqNoYEv9Eem6z9v1kruhiQ">
            <ownedRule xmi:id="_vrGZMUv9Eem6z9v1kruhiQ" name="PME_checkDecesion10">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_vrGZMEv9Eem6z9v1kruhiQ" name="PME_checkDecesion10">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__2__9&quot;,&quot;New__State__2&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_vqJW8Ev9Eem6z9v1kruhiQ" name="DecesionPoint__1" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_vqNoYEv9Eem6z9v1kruhiQ" name="New__State__2"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_vqSg4Ev9Eem6z9v1kruhiQ" name="Init__State__3"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vogYMUv9Eem6z9v1kruhiQ" name="loadHeap" specification="_vogYMEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_volQsUv9Eem6z9v1kruhiQ" name="unLoadHeap" specification="_volQsEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vpMUsUv9Eem6z9v1kruhiQ" name="sendMessage" specification="_vpMUsEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ButtonHold&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonHold( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonPressed&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonPressed().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonReleased&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonReleased( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ReadIntResult&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadIntResult( boost::any_cast&lt;int>(message.payload[&quot;InputInt&quot;])).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vpaXIUv9Eem6z9v1kruhiQ" name="sendInternalMessage" specification="_vpaXIEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vp_l8Ev9Eem6z9v1kruhiQ" name="initForPMD" specification="_vp--4Ev9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_ButtonsReader::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_ButtonsReader::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;readKeyTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForButtonsReader&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_vogYMEv9Eem6z9v1kruhiQ" name="loadHeap" visibility="private" method="_vogYMUv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_volQsEv9Eem6z9v1kruhiQ" name="unLoadHeap" visibility="private" method="_volQsUv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_vpMUsEv9Eem6z9v1kruhiQ" name="sendMessage" visibility="private" method="_vpMUsUv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_vpPYAEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_vpRNMEv9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_vpaXIEv9Eem6z9v1kruhiQ" name="sendInternalMessage" visibility="private" method="_vpaXIUv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_vpczYEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_vpeBgEv9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_vp--4Ev9Eem6z9v1kruhiQ" name="initForPMD" visibility="private" method="_vp_l8Ev9Eem6z9v1kruhiQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_5cgykAquEeiwdpidSbDb2g" name="WatchCore" classifierBehavior="_5TyacBNsEeiFubQUFHg6OA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_wsY5YAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_2ASigAreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ppFN4ArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_IaFLAArkEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ka0UEArzEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_CpaG0BgfEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CpeYQBgfEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_v7JnYEv9Eem6z9v1kruhiQ" name="dbgPortForWatchCore" visibility="protected" type="_vkHAYEv9Eem6z9v1kruhiQ" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_v7KOcEv9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_v7K1gEv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_5TyacBNsEeiFubQUFHg6OA" name="StateMachine" isReentrant="false">
        <region xmi:id="_5UK08BNsEeiFubQUFHg6OA" name="Region">
          <transition xmi:id="_5Udv4BNsEeiFubQUFHg6OA" name="Initial" source="_5UPGYBNsEeiFubQUFHg6OA" target="_qc0-gBNyEeiFubQUFHg6OA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_76FHQBNsEeiFubQUFHg6OA">
              <language>C++</language>
              <body>initForPMD();
    displayGateKeeperP.ShowText(0,&quot;WatchCore capsule is started&quot;).send();
</body>
            </effect>
          </transition>
          <transition xmi:id="_v-1NgEv9Eem6z9v1kruhiQ" name="From__New__State__121__122" source="_v9LnsEv9Eem6z9v1kruhiQ" target="_v9JygEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wFf2MEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__121&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__180&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__121&quot;,&quot;New__State__121&quot;,&quot;To__New__State__121__136&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__121&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__139&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__121&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_v-3CsEv9Eem6z9v1kruhiQ" name="PME_Trig123" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v-6tEEv9Eem6z9v1kruhiQ" name="PME_Trig124" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v--XcEv9Eem6z9v1kruhiQ" name="PME_Trig125" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v_FFIEv9Eem6z9v1kruhiQ" name="PME_Trig126" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v_JWkEv9Eem6z9v1kruhiQ" name="PME_Trig127" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v_O2IEv9Eem6z9v1kruhiQ" name="PME_Trig128" event="_vkieMEv9Eem6z9v1kruhiQ" port="_v7JnYEv9Eem6z9v1kruhiQ"/>
            <trigger xmi:id="_v_R5cEv9Eem6z9v1kruhiQ" name="PME_Trig129" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v_UVsEv9Eem6z9v1kruhiQ" name="PME_Trig130" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v_XZAEv9Eem6z9v1kruhiQ" name="PME_Trig131" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v_acUEv9Eem6z9v1kruhiQ" name="PME_Trig132" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v_wakEv9Eem6z9v1kruhiQ" name="PME_Trig133" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v_y20Ev9Eem6z9v1kruhiQ" name="PME_Trig134" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v_8n0Ev9Eem6z9v1kruhiQ" name="PME_Trig135" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_wAA5QEv9Eem6z9v1kruhiQ" name="To__New__State__121__136" guard="_wFoZEUv9Eem6z9v1kruhiQ" source="_v9JygEv9Eem6z9v1kruhiQ" target="_v9LnsEv9Eem6z9v1kruhiQ">
            <ownedRule xmi:id="_wFoZEUv9Eem6z9v1kruhiQ" name="PME_checkDecesion213">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_wFoZEEv9Eem6z9v1kruhiQ" name="PME_checkDecesion213">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__121__136&quot;,&quot;New__State__121&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_wAJcIEv9Eem6z9v1kruhiQ" name="Trans__Pseudo113137" source="_GFOZ0BRjEeiFubQUFHg6OA" target="_v9JygEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wFiScEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__180&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;New__State__121&quot;,&quot;To__New__State__121__136&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__139&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_wAOUoUv9Eem6z9v1kruhiQ" name="To__Substates__SetAlarm__139" guard="_wFpnMUv9Eem6z9v1kruhiQ" source="_v9JygEv9Eem6z9v1kruhiQ" target="_wAL4YEv9Eem6z9v1kruhiQ">
            <ownedRule xmi:id="_wFpnMUv9Eem6z9v1kruhiQ" name="PME_checkDecesion214">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_wFpnMEv9Eem6z9v1kruhiQ" name="PME_checkDecesion214">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__SetAlarm__139&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_wAQJ0Uv9Eem6z9v1kruhiQ" name="From__Substates__SetAlarm__141" source="_wAO7sEv9Eem6z9v1kruhiQ" target="_v9JygEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wFlVwEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__180&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;New__State__121&quot;,&quot;To__New__State__121__136&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__139&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_wDjVcUv9Eem6z9v1kruhiQ" name="To__Substates__WorkingMode__180" guard="_wFnK8Ev9Eem6z9v1kruhiQ" source="_v9JygEv9Eem6z9v1kruhiQ" target="_wDiHUEv9Eem6z9v1kruhiQ">
            <ownedRule xmi:id="_wFnK8Ev9Eem6z9v1kruhiQ" name="PME_checkDecesion212">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_wFmj4Ev9Eem6z9v1kruhiQ" name="PME_checkDecesion212">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__WorkingMode__180&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_wDlKoUv9Eem6z9v1kruhiQ" name="From__Substates__WorkingMode__182" source="_wDj8gEv9Eem6z9v1kruhiQ" target="_v9JygEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wFbkwEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__180&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__121&quot;,&quot;To__New__State__121__136&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__139&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5UPGYBNsEeiFubQUFHg6OA" name="Pseudo115"/>
          <subvertex xmi:type="uml:State" xmi:id="_5UY3YBNsEeiFubQUFHg6OA" name="WorkingMode">
            <connectionPoint xmi:id="_qc0-gBNyEeiFubQUFHg6OA" name="mainEn" kind="entryPoint"/>
            <connectionPoint xmi:id="_wDiHUEv9Eem6z9v1kruhiQ" name="From__Parent__179" kind="entryPoint"/>
            <connectionPoint xmi:id="_wDj8gEv9Eem6z9v1kruhiQ" name="To__Parent__181" kind="exitPoint"/>
            <region xmi:id="_qcoxQBNyEeiFubQUFHg6OA" name="Region1">
              <transition xmi:id="_SBFkUBRiEeiFubQUFHg6OA" name="leaveStopWatchMode" guard="_b-PbkBXDEeikLqTX9lOhHA" source="_5oJgABRgEeiFubQUFHg6OA" target="_PmcG0BRiEeiFubQUFHg6OA">
                <ownedRule xmi:id="_b-PbkBXDEeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_b-PbkRXDEeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    #define ButtonID ( *(char *)msg->getParam( 0 ) )
    if (ButtonID=='0' ||  ButtonID=='3')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ZfyNYBXJEeio2qtoBBAMvw">
                  <language>C++</language>
                  <body>    // leave stopwatch mode
	stopWatchP.Deactivate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_YOTHcBgmEeiSBIpf1RqKYQ" name="mainEn__Pseudo114__119" kind="local" source="_qc0-gBNyEeiFubQUFHg6OA" target="_OEEIEBgmEeiSBIpf1RqKYQ"/>
              <transition xmi:id="_wDu7oEv9Eem6z9v1kruhiQ" name="Trans__Pseudo114186" source="_OEEIEBgmEeiSBIpf1RqKYQ" target="_wDnm4Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wEz5sEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo114&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__209&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo114&quot;,&quot;New__State__184&quot;,&quot;To__New__State__184__207&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo114&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_wDvisEv9Eem6z9v1kruhiQ" name="Trans__Init__State__185187" source="_wDqqMEv9Eem6z9v1kruhiQ" target="_wDnm4Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wFIp0Ev9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__185&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__209&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__185&quot;,&quot;New__State__184&quot;,&quot;To__New__State__184__207&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__185&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_wDvisUv9Eem6z9v1kruhiQ" name="Trans__Pseudo116188" source="_GT9dcBNzEeiFubQUFHg6OA" target="_wDnm4Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wFP-kEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo116&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__209&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo116&quot;,&quot;New__State__184&quot;,&quot;To__New__State__184__207&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo116&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_wDwJwEv9Eem6z9v1kruhiQ" name="Trans__Pseudo118189" source="_PmcG0BRiEeiFubQUFHg6OA" target="_wDnm4Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wE3kEEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo118&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__209&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo118&quot;,&quot;New__State__184&quot;,&quot;To__New__State__184__207&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo118&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_wDzNEEv9Eem6z9v1kruhiQ" name="190" source="_GT9dcBNzEeiFubQUFHg6OA" target="_wDnm4Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wFEYYEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo116&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__209&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo116&quot;,&quot;New__State__184&quot;,&quot;To__New__State__184__207&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo116&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_wDz0IEv9Eem6z9v1kruhiQ" name="191" source="_5oJgABRgEeiFubQUFHg6OA" target="_wDnm4Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wFAuAEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo117&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__209&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo117&quot;,&quot;New__State__184&quot;,&quot;To__New__State__184__207&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo117&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_wD0bMEv9Eem6z9v1kruhiQ" name="192" source="_PmcG0BRiEeiFubQUFHg6OA" target="_wDnm4Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wFTo8Ev9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo118&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__209&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo118&quot;,&quot;New__State__184&quot;,&quot;To__New__State__184__207&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo118&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_wD1pUEv9Eem6z9v1kruhiQ" name="From__New__State__184__193" source="_wDo1AEv9Eem6z9v1kruhiQ" target="_wDnm4Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wEw2YEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__184&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__209&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__184&quot;,&quot;New__State__184&quot;,&quot;To__New__State__184__207&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__184&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_wD4FkEv9Eem6z9v1kruhiQ" name="PME_Trig194" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wD7v8Ev9Eem6z9v1kruhiQ" name="PME_Trig195" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wD_aUEv9Eem6z9v1kruhiQ" name="PME_Trig196" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wEDEsEv9Eem6z9v1kruhiQ" name="PME_Trig197" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wEFg8Ev9Eem6z9v1kruhiQ" name="PME_Trig198" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wEJLUEv9Eem6z9v1kruhiQ" name="PME_Trig199" event="_vkieMEv9Eem6z9v1kruhiQ" port="_v7JnYEv9Eem6z9v1kruhiQ"/>
                <trigger xmi:id="_wELnkEv9Eem6z9v1kruhiQ" name="PME_Trig200" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wEOq4Ev9Eem6z9v1kruhiQ" name="PME_Trig201" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wERuMEv9Eem6z9v1kruhiQ" name="PME_Trig202" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wEUxgEv9Eem6z9v1kruhiQ" name="PME_Trig203" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wEYb4Ev9Eem6z9v1kruhiQ" name="PME_Trig204" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wEbfMEv9Eem6z9v1kruhiQ" name="PME_Trig205" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wEjbAEv9Eem6z9v1kruhiQ" name="PME_Trig206" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_wEoTgEv9Eem6z9v1kruhiQ" name="To__New__State__184__207" guard="_wFWsQUv9Eem6z9v1kruhiQ" source="_wDnm4Ev9Eem6z9v1kruhiQ" target="_wDo1AEv9Eem6z9v1kruhiQ">
                <ownedRule xmi:id="_wFWsQUv9Eem6z9v1kruhiQ" name="PME_checkDecesion211">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_wFWsQEv9Eem6z9v1kruhiQ" name="PME_checkDecesion211">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__New__State__184__207&quot;,&quot;New__State__184&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_wEqvwEv9Eem6z9v1kruhiQ" name="From__Parnet__StateMachine__208" source="_wDiHUEv9Eem6z9v1kruhiQ" target="_wDnm4Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wFM7QEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__209&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__184&quot;,&quot;To__New__State__184__207&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_wErW0Ev9Eem6z9v1kruhiQ" name="To__Parent__StateMachine__209" guard="_wFVeIUv9Eem6z9v1kruhiQ" source="_wDnm4Ev9Eem6z9v1kruhiQ" target="_wDj8gEv9Eem6z9v1kruhiQ">
                <ownedRule xmi:id="_wFVeIUv9Eem6z9v1kruhiQ" name="PME_checkDecesion210">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_wFVeIEv9Eem6z9v1kruhiQ" name="PME_checkDecesion210">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__209&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_GT9dcBNzEeiFubQUFHg6OA" name="Pseudo116" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_5oJgABRgEeiFubQUFHg6OA" name="Pseudo117" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_PmcG0BRiEeiFubQUFHg6OA" name="Pseudo118" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_OEEIEBgmEeiSBIpf1RqKYQ" name="Pseudo114" kind="junction"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_wDnm4Ev9Eem6z9v1kruhiQ" name="DecesionPoint__183" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_wDo1AEv9Eem6z9v1kruhiQ" name="New__State__184"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_wDqqMEv9Eem6z9v1kruhiQ" name="Init__State__185"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_m0-1cBNvEeiFubQUFHg6OA" name="SetAlarm">
            <connectionPoint xmi:id="_GFOZ0BRjEeiFubQUFHg6OA" name="Pseudo113" kind="exitPoint"/>
            <connectionPoint xmi:id="_wAL4YEv9Eem6z9v1kruhiQ" name="From__Parent__138" kind="entryPoint"/>
            <connectionPoint xmi:id="_wAO7sEv9Eem6z9v1kruhiQ" name="To__Parent__140" kind="exitPoint"/>
            <region xmi:id="_GFF28BRjEeiFubQUFHg6OA" name="Region1">
              <ownedComment xmi:id="_PbsboBghEei-ccFu-OwT7Q"/>
              <transition xmi:id="_L6OeUBRjEeiFubQUFHg6OA" name="readHourResult" source="_G6Ch8BRjEeiFubQUFHg6OA" target="_HQIGsBRjEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_AByssBgREei-ccFu-OwT7Q">
                  <language>C++</language>
                  <body>    ////
    this->alarmHour=InputInt;
    buttonsP.ReadInt(&quot;Enter Minute: &quot;).send();

</body>
                </effect>
                <trigger xmi:id="_v232YBRkEeiFubQUFHg6OA" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_TD2MYBRjEeiFubQUFHg6OA" name="readMinResult" source="_HQIGsBRjEeiFubQUFHg6OA" target="_GFOZ0BRjEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_FL2WwBgREei-ccFu-OwT7Q">
                  <language>C++</language>
                  <body>////
	this->alarmMinute=InputInt;
	alarmP.SetAlarm(this->alarmHour,this->alarmMinute,0).send();
	displayGateKeeperP.ShowText(0,&quot;Alarm Is Set&quot;).send();</body>
                </effect>
                <trigger xmi:id="_8FyqUBRkEeiFubQUFHg6OA" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_wAc-IEv9Eem6z9v1kruhiQ" name="Trans__Pseudo113144" source="_GFOZ0BRjEeiFubQUFHg6OA" target="_wARX8Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wDQagEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__175&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readMinute&quot;,&quot;To__readMinute__173&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readHour&quot;,&quot;To__readHour__172&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_wAdlMEv9Eem6z9v1kruhiQ" name="Trans__Init__State__143145" source="_wAZ60Ev9Eem6z9v1kruhiQ" target="_wARX8Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wDYWUEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__143&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__175&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__143&quot;,&quot;readMinute&quot;,&quot;To__readMinute__173&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__143&quot;,&quot;readHour&quot;,&quot;To__readHour__172&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__143&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_wAmvIEv9Eem6z9v1kruhiQ" name="From__readHour__146" source="_G6Ch8BRjEeiFubQUFHg6OA" target="_wARX8Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wDbZoEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__175&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;readMinute&quot;,&quot;To__readMinute__173&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;readHour&quot;,&quot;To__readHour__172&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;readHour&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_wApLYEv9Eem6z9v1kruhiQ" name="PME_Trig147" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wA0KgEv9Eem6z9v1kruhiQ" name="PME_Trig148" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wA5qEEv9Eem6z9v1kruhiQ" name="PME_Trig149" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wA8tYEv9Eem6z9v1kruhiQ" name="PME_Trig150" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wBGeYEv9Eem6z9v1kruhiQ" name="PME_Trig151" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wBPoUEv9Eem6z9v1kruhiQ" name="PME_Trig152" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wBSroEv9Eem6z9v1kruhiQ" name="PME_Trig153" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wBZZUEv9Eem6z9v1kruhiQ" name="PME_Trig154" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wBccoEv9Eem6z9v1kruhiQ" name="PME_Trig155" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wBnbwEv9Eem6z9v1kruhiQ" name="PME_Trig156" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wBsUQEv9Eem6z9v1kruhiQ" name="PME_Trig157" event="_vkieMEv9Eem6z9v1kruhiQ" port="_v7JnYEv9Eem6z9v1kruhiQ"/>
                <trigger xmi:id="_wB5IkEv9Eem6z9v1kruhiQ" name="PME_Trig158" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_wB8L4Ev9Eem6z9v1kruhiQ" name="From__readMinute__159" source="_HQIGsBRjEeiFubQUFHg6OA" target="_wARX8Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wDUE4Ev9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__175&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;readMinute&quot;,&quot;To__readMinute__173&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;readHour&quot;,&quot;To__readHour__172&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;readMinute&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_wB-oIEv9Eem6z9v1kruhiQ" name="PME_Trig160" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wCMqkEv9Eem6z9v1kruhiQ" name="PME_Trig161" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wCQU8Ev9Eem6z9v1kruhiQ" name="PME_Trig162" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wCT_UEv9Eem6z9v1kruhiQ" name="PME_Trig163" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wCXpsEv9Eem6z9v1kruhiQ" name="PME_Trig164" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wCgzoEv9Eem6z9v1kruhiQ" name="PME_Trig165" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wCp9kEv9Eem6z9v1kruhiQ" name="PME_Trig166" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wCtn8Ev9Eem6z9v1kruhiQ" name="PME_Trig167" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wCx5YEv9Eem6z9v1kruhiQ" name="PME_Trig168" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wC2K0Ev9Eem6z9v1kruhiQ" name="PME_Trig169" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_wC5OIEv9Eem6z9v1kruhiQ" name="PME_Trig170" event="_vkieMEv9Eem6z9v1kruhiQ" port="_v7JnYEv9Eem6z9v1kruhiQ"/>
                <trigger xmi:id="_wC8RcEv9Eem6z9v1kruhiQ" name="PME_Trig171" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_wDCYEEv9Eem6z9v1kruhiQ" name="To__readHour__172" guard="_wDfrEUv9Eem6z9v1kruhiQ" source="_wARX8Ev9Eem6z9v1kruhiQ" target="_G6Ch8BRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_wDfrEUv9Eem6z9v1kruhiQ" name="PME_checkDecesion178">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_wDfrEEv9Eem6z9v1kruhiQ" name="PME_checkDecesion178">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__readHour__172&quot;,&quot;readHour&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_wDC_IEv9Eem6z9v1kruhiQ" name="To__readMinute__173" guard="_wDec8Uv9Eem6z9v1kruhiQ" source="_wARX8Ev9Eem6z9v1kruhiQ" target="_HQIGsBRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_wDec8Uv9Eem6z9v1kruhiQ" name="PME_checkDecesion177">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_wDec8Ev9Eem6z9v1kruhiQ" name="PME_checkDecesion177">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__readMinute__173&quot;,&quot;readMinute&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_wDGCcEv9Eem6z9v1kruhiQ" name="From__Parnet__StateMachine__174" source="_wAL4YEv9Eem6z9v1kruhiQ" target="_wARX8Ev9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wDLiAEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__175&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readMinute&quot;,&quot;To__readMinute__173&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readHour&quot;,&quot;To__readHour__172&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_wDGpgEv9Eem6z9v1kruhiQ" name="To__Parent__StateMachine__175" guard="_wDd14Ev9Eem6z9v1kruhiQ" source="_wARX8Ev9Eem6z9v1kruhiQ" target="_wAO7sEv9Eem6z9v1kruhiQ">
                <ownedRule xmi:id="_wDd14Ev9Eem6z9v1kruhiQ" name="PME_checkDecesion176">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_wDdO0Ev9Eem6z9v1kruhiQ" name="PME_checkDecesion176">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__175&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_G6Ch8BRjEeiFubQUFHg6OA" name="readHour"/>
              <subvertex xmi:type="uml:State" xmi:id="_HQIGsBRjEeiFubQUFHg6OA" name="readMinute"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_wARX8Ev9Eem6z9v1kruhiQ" name="DecesionPoint__142" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_wAZ60Ev9Eem6z9v1kruhiQ" name="Init__State__143"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_v9JygEv9Eem6z9v1kruhiQ" name="DecesionPoint__120" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_v9LnsEv9Eem6z9v1kruhiQ" name="New__State__121"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v7keIUv9Eem6z9v1kruhiQ" name="loadHeap" specification="_v7keIEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v7wrYEv9Eem6z9v1kruhiQ" name="unLoadHeap" specification="_v7wEUEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v8S24Uv9Eem6z9v1kruhiQ" name="sendMessage" specification="_v8S24Ev9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ReadInt&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadInt( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;TextToShow&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;RemAlarm&quot;) {
   if(message.payload.size()==1){
    alarmP.RemAlarm( boost::any_cast&lt;int>(message.payload[&quot;alarmID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;viewAlarmReq&quot;) {
   if(message.payload.size()==0){
    alarmP.viewAlarmReq().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;SetAlarm&quot;) {
   if(message.payload.size()==3){
    alarmP.SetAlarm( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;oneShot&quot;])).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Toggle&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Toggle().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Reset&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Reset().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Deactivate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Resume&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Resume().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Deactivate().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v8XIUUv9Eem6z9v1kruhiQ" name="sendInternalMessage" specification="_v8XIUEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v8-zYUv9Eem6z9v1kruhiQ" name="initForPMD" specification="_v8-zYEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_WatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_WatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_v7keIEv9Eem6z9v1kruhiQ" name="loadHeap" visibility="private" method="_v7keIUv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_v7wEUEv9Eem6z9v1kruhiQ" name="unLoadHeap" visibility="private" method="_v7wrYEv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_v8S24Ev9Eem6z9v1kruhiQ" name="sendMessage" visibility="private" method="_v8S24Uv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_v8Td8Ev9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_v8UsEEv9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_v8XIUEv9Eem6z9v1kruhiQ" name="sendInternalMessage" visibility="private" method="_v8XIUUv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_v8YWcEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_v8Y9gEv9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_v8-zYEv9Eem6z9v1kruhiQ" name="initForPMD" visibility="private" method="_v8-zYUv9Eem6z9v1kruhiQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_EUMt0AqvEeiwdpidSbDb2g" name="TimeTracker" classifierBehavior="_f9DS0Ar0EeiwdpidSbDb2g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="__kPLsArjEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_7dRcsArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_-6GrwAryEeiwdpidSbDb2g" name="timeTrackingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_L22PAArzEeiwdpidSbDb2g" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yQcqUAr3EeiwdpidSbDb2g" name="showTimeTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KsSnIBKYEeiBE_x0ZD7_9g" name="clockResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_UKWdABKYEeiBE_x0ZD7_9g" value="500"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_7xV-8BbCEei-ccFu-OwT7Q" name="showTimeTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_v2UKsEv9Eem6z9v1kruhiQ" name="dbgPortForTimeTracker" visibility="protected" type="_vkHAYEv9Eem6z9v1kruhiQ" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_v2UxwEv9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_v2UxwUv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_f9DS0Ar0EeiwdpidSbDb2g" name="TimeTrackerSM" isReentrant="false">
        <region xmi:id="_gAJqIAr0EeiwdpidSbDb2g" name="Region">
          <transition xmi:id="_v449kEv9Eem6z9v1kruhiQ" name="Trans__Pseudo7881" source="_gAMtcAr0EeiwdpidSbDb2g" target="_v4i_UEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_v6oC8Ev9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo78&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__93&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo78&quot;,&quot;New__State__80&quot;,&quot;To__New__State__80__90&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo78&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_v4-dIEv9Eem6z9v1kruhiQ" name="From__New__State__80__82" source="_v4jmYUv9Eem6z9v1kruhiQ" target="_v4i_UEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_v65IsEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__80&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__93&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__80&quot;,&quot;New__State__80&quot;,&quot;To__New__State__80__90&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__80&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_v5BgcEv9Eem6z9v1kruhiQ" name="PME_Trig83" event="_vkieMEv9Eem6z9v1kruhiQ" port="_v2UKsEv9Eem6z9v1kruhiQ"/>
            <trigger xmi:id="_v5DVoEv9Eem6z9v1kruhiQ" name="PME_Trig84" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v5FK0Ev9Eem6z9v1kruhiQ" name="PME_Trig85" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v5NGoEv9Eem6z9v1kruhiQ" name="PME_Trig86" port="_-6GrwAryEeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_v5RYEEv9Eem6z9v1kruhiQ" name="PME_Trig87" port="_yQcqUAr3EeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_v5TNQEv9Eem6z9v1kruhiQ" name="PME_Trig88" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_v5VCcEv9Eem6z9v1kruhiQ" name="PME_Trig89" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_v5XesEv9Eem6z9v1kruhiQ" name="To__New__State__80__90" guard="_v7AdcUv9Eem6z9v1kruhiQ" source="_v4i_UEv9Eem6z9v1kruhiQ" target="_v4jmYUv9Eem6z9v1kruhiQ">
            <ownedRule xmi:id="_v7AdcUv9Eem6z9v1kruhiQ" name="PME_checkDecesion112">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_v7AdcEv9Eem6z9v1kruhiQ" name="PME_checkDecesion112">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__80__90&quot;,&quot;New__State__80&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_v5ZT4Ev9Eem6z9v1kruhiQ" name="Trans__Pseudo7791" source="_hUNdkAr1EeiwdpidSbDb2g" target="_v4i_UEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_v6uwoEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__93&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__80&quot;,&quot;To__New__State__80__90&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_v5aiAUv9Eem6z9v1kruhiQ" name="To__Substates__TrackingTime__93" guard="_v6-oQUv9Eem6z9v1kruhiQ" source="_v4i_UEv9Eem6z9v1kruhiQ" target="_v5ZT4Uv9Eem6z9v1kruhiQ">
            <ownedRule xmi:id="_v6-oQUv9Eem6z9v1kruhiQ" name="PME_checkDecesion111">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_v6-oQEv9Eem6z9v1kruhiQ" name="PME_checkDecesion111">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__TrackingTime__93&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_v5cXMUv9Eem6z9v1kruhiQ" name="From__Substates__TrackingTime__95" source="_v5bJEEv9Eem6z9v1kruhiQ" target="_v4i_UEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_v69aIEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__93&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__80&quot;,&quot;To__New__State__80__90&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_gAMtcAr0EeiwdpidSbDb2g" name="Pseudo78"/>
          <subvertex xmi:type="uml:State" xmi:id="_gARl8Ar0EeiwdpidSbDb2g" name="TrackingTime">
            <connectionPoint xmi:id="_hUNdkAr1EeiwdpidSbDb2g" name="Pseudo77" kind="exitPoint"/>
            <connectionPoint xmi:id="_v5ZT4Uv9Eem6z9v1kruhiQ" name="From__Parent__92" kind="entryPoint"/>
            <connectionPoint xmi:id="_v5bJEEv9Eem6z9v1kruhiQ" name="To__Parent__94" kind="exitPoint"/>
            <region xmi:id="_BISvsAr1EeiwdpidSbDb2g" name="Region1">
              <transition xmi:id="_RrrNAAr2EeiwdpidSbDb2g" name="ignoreActive" source="_DTbxkAr1EeiwdpidSbDb2g" target="_DTbxkAr1EeiwdpidSbDb2g">
                <trigger xmi:id="_iP6wgAr4EeiwdpidSbDb2g" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_otIWcAr2EeiwdpidSbDb2g" name="showTime" source="_DTbxkAr1EeiwdpidSbDb2g" target="_DTbxkAr1EeiwdpidSbDb2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_XpX0gBKLEeiEEYKmuRZPIg">
                  <language>C++</language>
                  <body>int hour=    milliTime/(1000*60*60);
int minute= milliTime % (1000*60*60) / (1000*60);
int second= milliTime % (1000*60) / 1000;
displayGateKeeperP.ShowTime(hour,minute,second ).send();
</body>
                </effect>
                <trigger xmi:id="_brsOgAr4EeiwdpidSbDb2g" port="_yQcqUAr3EeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:id="_v5id0Ev9Eem6z9v1kruhiQ" name="Trans__Init__State__9798" source="_v5ezcEv9Eem6z9v1kruhiQ" target="_v5c-QEv9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_v564UEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__97&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__108&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__97&quot;,&quot;Active&quot;,&quot;To__Active__106&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__97&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_v5jE4Ev9Eem6z9v1kruhiQ" name="Trans__Pseudo7799" source="_hUNdkAr1EeiwdpidSbDb2g" target="_v5c-QEv9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_v6Kv8Ev9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__108&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;Active&quot;,&quot;To__Active__106&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_v5mIMEv9Eem6z9v1kruhiQ" name="From__Active__100" source="_DTbxkAr1EeiwdpidSbDb2g" target="_v5c-QEv9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_v6GegEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__108&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;Active&quot;,&quot;To__Active__106&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Active&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_v5nWUEv9Eem6z9v1kruhiQ" name="PME_Trig101" event="_vkieMEv9Eem6z9v1kruhiQ" port="_v2UKsEv9Eem6z9v1kruhiQ"/>
                <trigger xmi:id="_v5qZoEv9Eem6z9v1kruhiQ" name="PME_Trig102" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
                <trigger xmi:id="_v5sO0Ev9Eem6z9v1kruhiQ" name="PME_Trig103" port="_-6GrwAryEeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_v5uEAEv9Eem6z9v1kruhiQ" name="PME_Trig104" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_v5v5MEv9Eem6z9v1kruhiQ" name="PME_Trig105" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_v5zjkEv9Eem6z9v1kruhiQ" name="To__Active__106" guard="_v6T54Uv9Eem6z9v1kruhiQ" source="_v5c-QEv9Eem6z9v1kruhiQ" target="_DTbxkAr1EeiwdpidSbDb2g">
                <ownedRule xmi:id="_v6T54Uv9Eem6z9v1kruhiQ" name="PME_checkDecesion110">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_v6T54Ev9Eem6z9v1kruhiQ" name="PME_checkDecesion110">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Active__106&quot;,&quot;Active&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_v51YwEv9Eem6z9v1kruhiQ" name="From__Parnet__TimeTrackerSM__107" source="_v5ZT4Uv9Eem6z9v1kruhiQ" target="_v5c-QEv9Eem6z9v1kruhiQ">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_v5-isEv9Eem6z9v1kruhiQ">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__108&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;Active&quot;,&quot;To__Active__106&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_v51_0Ev9Eem6z9v1kruhiQ" name="To__Parent__TimeTrackerSM__108" guard="_v6NzQUv9Eem6z9v1kruhiQ" source="_v5c-QEv9Eem6z9v1kruhiQ" target="_v5bJEEv9Eem6z9v1kruhiQ">
                <ownedRule xmi:id="_v6NzQUv9Eem6z9v1kruhiQ" name="PME_checkDecesion109">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_v6NzQEv9Eem6z9v1kruhiQ" name="PME_checkDecesion109">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__TimeTrackerSM__108&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_DTbxkAr1EeiwdpidSbDb2g" name="Active"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_v5c-QEv9Eem6z9v1kruhiQ" name="DecesionPoint__96" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_v5ezcEv9Eem6z9v1kruhiQ" name="Init__State__97"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_v4i_UEv9Eem6z9v1kruhiQ" name="DecesionPoint__79" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_v4jmYUv9Eem6z9v1kruhiQ" name="New__State__80"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v2qI8Ev9Eem6z9v1kruhiQ" name="loadHeap" specification="_v2ph4Ev9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.clockResolution&quot;,this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v2tMQUv9Eem6z9v1kruhiQ" name="unLoadHeap" specification="_v2tMQEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.clockResolution&quot;,&amp;this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v3cMEUv9Eem6z9v1kruhiQ" name="sendMessage" specification="_v3cMEEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v3uf8Ev9Eem6z9v1kruhiQ" name="sendInternalMessage" specification="_v3t44Ev9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v4WyEUv9Eem6z9v1kruhiQ" name="initForPMD" specification="_v4WyEEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_TimeTracker::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_TimeTracker::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;showTimeTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForTimeTracker&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_v2ph4Ev9Eem6z9v1kruhiQ" name="loadHeap" visibility="private" method="_v2qI8Ev9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_v2tMQEv9Eem6z9v1kruhiQ" name="unLoadHeap" visibility="private" method="_v2tMQUv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_v3cMEEv9Eem6z9v1kruhiQ" name="sendMessage" visibility="private" method="_v3cMEUv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_v3q1kEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_v3sqwEv9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_v3t44Ev9Eem6z9v1kruhiQ" name="sendInternalMessage" visibility="private" method="_v3uf8Ev9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_v3vHAEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_v3wVIEv9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_v4WyEEv9Eem6z9v1kruhiQ" name="initForPMD" visibility="private" method="_v4WyEUv9Eem6z9v1kruhiQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_OX25MAqxEeiwdpidSbDb2g" name="ButtonsP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_OXynwAqxEeiwdpidSbDb2g" name="ButtonsP">
        <interfaceRealization xmi:id="_OX_cEAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OX7KoAqxEeiwdpidSbDb2g" contract="_OX7KoAqxEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_OYLCQAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g" contract="_OYH-8AqxEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OX7KoAqxEeiwdpidSbDb2g" name="ButtonsP">
        <ownedOperation xmi:id="_-aZWABFKEeibZqndpu8erg" name="ReadInt">
          <ownedParameter xmi:id="_EERNMBgdEei-ccFu-OwT7Q" name="TextToShow">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYB4UAqxEeiwdpidSbDb2g" name="ButtonsP~">
        <ownedOperation xmi:id="_SXAPUAqxEeiwdpidSbDb2g" name="ButtonPressed">
          <ownedParameter xmi:id="_n9--0AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrus.designer.languages.cpp.library_1.0.4.jar!/models/AnsiCLibrary.uml#_5lVhgBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_XpIQQAqxEeiwdpidSbDb2g" name="ButtonHold">
          <ownedParameter xmi:id="_nYJt4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_cpytwAqxEeiwdpidSbDb2g" name="ButtonReleased">
          <ownedParameter xmi:id="_jp9k4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_nYfEIBFLEeibZqndpu8erg" name="ReadIntResult">
          <ownedParameter xmi:id="_nYfEIRFLEeibZqndpu8erg" name="InputInt">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYGJwAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYB4UAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_OYGw0AqxEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYH-8AqxEeiwdpidSbDb2g" name="ButtonsPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYLpUAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_SXXbsAqxEeiwdpidSbDb2g" operation="_SXAPUAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_XpPlAAqxEeiwdpidSbDb2g" operation="_XpIQQAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_cp40YAqxEeiwdpidSbDb2g" operation="_cpytwAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_-anYcBFKEeibZqndpu8erg" operation="_-aZWABFKEeibZqndpu8erg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_nYhgYBFLEeibZqndpu8erg" operation="_nYfEIBFLEeibZqndpu8erg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_atLzIArdEeiwdpidSbDb2g" name="AlarmP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_atHhsArdEeiwdpidSbDb2g" name="AlarmP">
        <interfaceRealization xmi:id="_atTH4ArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atQEkArdEeiwdpidSbDb2g" contract="_atQEkArdEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_ateHAArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g" contract="_atZ1kArdEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atQEkArdEeiwdpidSbDb2g" name="AlarmP">
        <ownedOperation xmi:id="_de5s0ArdEeiwdpidSbDb2g" name="SetAlarm">
          <ownedParameter xmi:id="_g8GMcArdEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_k_tL0ArdEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_n-OLYArdEeiwdpidSbDb2g" name="oneShot">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_suDXkArdEeiwdpidSbDb2g" name="RemAlarm">
          <ownedParameter xmi:id="_suDXkQrdEeiwdpidSbDb2g" name="alarmID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_0IE5IArdEeiwdpidSbDb2g" name="viewAlarmReq"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atU9EArdEeiwdpidSbDb2g" name="AlarmP~">
        <ownedOperation xmi:id="_d5y8QArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_d5y8QQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_d5zjUQrhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_d50KYArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atYncArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atU9EArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_atZOgArdEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atZ1kArdEeiwdpidSbDb2g" name="AlarmPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atfVIArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_dfgJwArdEeiwdpidSbDb2g" operation="_de5s0ArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_suGa4ArdEeiwdpidSbDb2g" operation="_suDXkArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_0IHVYArdEeiwdpidSbDb2g" operation="_0IE5IArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d5zjUArhEeiwdpidSbDb2g" operation="_d5y8QArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d50KYQrhEeiwdpidSbDb2g" operation="_d5zjUQrhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Viyf8ArfEeiwdpidSbDb2g" name="StopWatchP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Viyf8QrfEeiwdpidSbDb2g" name="StopWatchP">
        <interfaceRealization xmi:id="_Viyf8grfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf9ArfEeiwdpidSbDb2g" contract="_Viyf9ArfEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Viyf8wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g" contract="_ViygAQrfEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf9ArfEeiwdpidSbDb2g" name="StopWatchP">
        <ownedOperation xmi:id="_Viyf9QrfEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Viyf-QrfEeiwdpidSbDb2g" name="Reset"/>
        <ownedOperation xmi:id="_Viyf-wrfEeiwdpidSbDb2g" name="Deactivate"/>
        <ownedOperation xmi:id="_Viyf_ArfEeiwdpidSbDb2g" name="Resume"/>
        <ownedOperation xmi:id="_mM4pQArgEeiwdpidSbDb2g" name="Toggle"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf_grfEeiwdpidSbDb2g" name="StopWatchP~">
        <ownedOperation xmi:id="_RNPKEArhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_WQpZkArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_bGjYkArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_bGjYkQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Viyf_wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf_grfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_ViygAArfEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ViygAQrfEeiwdpidSbDb2g" name="StopWatchPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ViygAgrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygAwrfEeiwdpidSbDb2g" operation="_Viyf9QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBArfEeiwdpidSbDb2g" operation="_Viyf-QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBQrfEeiwdpidSbDb2g" operation="_Viyf-wrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBgrfEeiwdpidSbDb2g" operation="_Viyf_ArfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_mM5QUArgEeiwdpidSbDb2g" operation="_mM4pQArgEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_RNQYMArhEeiwdpidSbDb2g" operation="_RNPKEArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bGjYkgrhEeiwdpidSbDb2g" operation="_bGjYkArhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Lo6JYAriEeiwdpidSbDb2g" name="TimeTrackerP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Lo6JYQriEeiwdpidSbDb2g" name="TimeTrackerP">
        <interfaceRealization xmi:id="_Lo6JYgriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JZAriEeiwdpidSbDb2g" contract="_Lo6JZAriEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Lo6JYwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g" contract="_Lo6JcgriEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JZAriEeiwdpidSbDb2g" name="TimeTrackerP">
        <ownedOperation xmi:id="_Lo6JaQriEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Lo6JagriEeiwdpidSbDb2g" name="Deactivate"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JawriEeiwdpidSbDb2g" name="TimeTrackerP~">
        <ownedOperation xmi:id="_Lo6JbAriEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_Lo6JbQriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Lo6JbgriEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_Lo6JbwriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcAriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JawriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_Lo6JcQriEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JcgriEeiwdpidSbDb2g" name="TimeTrackerPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeAriEeiwdpidSbDb2g" operation="_Lo6JaQriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeQriEeiwdpidSbDb2g" operation="_Lo6JagriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JegriEeiwdpidSbDb2g" operation="_Lo6JbAriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JewriEeiwdpidSbDb2g" operation="_Lo6JbgriEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="__mIMoArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="__mIMoQrkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <interfaceRealization xmi:id="__mIMogrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMpArkEeiwdpidSbDb2g" contract="__mIMpArkEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="__mIMowrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g" contract="__mIMtQrkEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMpArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <ownedOperation xmi:id="__mIMpQrkEeiwdpidSbDb2g" name="ShowTime">
          <ownedParameter xmi:id="__mIMpgrkEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMpwrkEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMqArkEeiwdpidSbDb2g" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqQrkEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="__mIMqgrkEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_SddfAArlEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqwrkEeiwdpidSbDb2g" name="ShowCounter">
          <ownedParameter xmi:id="_gD0nAArlEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xd8cBKIEeiEEYKmuRZPIg" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xt0EBKIEeiEEYKmuRZPIg" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_3cTiABKIEeiEEYKmuRZPIg" name="milli">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMrgrkEeiwdpidSbDb2g" name="DisplayGateKeeperP~">
        <ownedOperation xmi:id="__mIMrwrkEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="__mIMsArkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMsQrkEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="__mIMsgrkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMswrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMrgrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="__mIMtArkEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMtQrkEeiwdpidSbDb2g" name="DisplayGateKeeperPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMtgrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMtwrkEeiwdpidSbDb2g" operation="__mIMpQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuArkEeiwdpidSbDb2g" operation="__mIMqQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuQrkEeiwdpidSbDb2g" operation="__mIMqwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuwrkEeiwdpidSbDb2g" operation="__mIMrwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMvArkEeiwdpidSbDb2g" operation="__mIMsQrkEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_EOr9EAruEeiwdpidSbDb2g" name="DisplayP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_EOqu8AruEeiwdpidSbDb2g" name="DisplayP">
        <interfaceRealization xmi:id="_EOw1kAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOuZUAruEeiwdpidSbDb2g" contract="_EOuZUAruEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_EO5YcAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g" contract="_EO2VIAruEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOuZUAruEeiwdpidSbDb2g" name="DisplayP">
        <ownedOperation xmi:id="_gYfq8ArvEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="_gYfq8QrvEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gYfq8grvEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOyDsAruEeiwdpidSbDb2g" name="DisplayP~"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO1HAAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOyDsAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_EO1uEAruEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EO2VIAruEeiwdpidSbDb2g" name="DisplayPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO6mkAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_gYhgIArvEeiwdpidSbDb2g" operation="_gYfq8ArvEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_vgTecEv9Eem6z9v1kruhiQ" name="dbgAgent">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_vkjsUEv9Eem6z9v1kruhiQ" name="timing" visibility="protected">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vkk6cEv9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_vkurcEv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_voGIgEv9Eem6z9v1kruhiQ" name="dbgPortForButtonsReader" visibility="public" type="_vkHAYEv9Eem6z9v1kruhiQ" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_voGvkEv9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_voHWoEv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_vucBEEv9Eem6z9v1kruhiQ" name="dbgPortForStopWatchCore" visibility="public" type="_vkHAYEv9Eem6z9v1kruhiQ" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vucoIEv9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_vucoIUv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_vz_PcEv9Eem6z9v1kruhiQ" name="dbgPortForDisplayGateKeeper" visibility="public" type="_vkHAYEv9Eem6z9v1kruhiQ" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vz_2gEv9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_vz_2gUv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_v2Wm8Ev9Eem6z9v1kruhiQ" name="dbgPortForTimeTracker" visibility="public" type="_vkHAYEv9Eem6z9v1kruhiQ" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_v2Wm8Uv9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_v2Wm8kv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_v7NRwEv9Eem6z9v1kruhiQ" name="dbgPortForWatchCore" visibility="public" type="_vkHAYEv9Eem6z9v1kruhiQ" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_v7N40Ev9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_v7N40Uv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_wFt4oEv9Eem6z9v1kruhiQ" name="dbgPortForAlarmsCapsule" visibility="public" type="_vkHAYEv9Eem6z9v1kruhiQ" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wFufsEv9Eem6z9v1kruhiQ" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_wFufsUv9Eem6z9v1kruhiQ" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_vj7aMEv9Eem6z9v1kruhiQ" name="dbgAgent StateMachine">
        <region xmi:id="_vsNzgEv9Eem6z9v1kruhiQ" name="mainRegion">
          <transition xmi:id="_vsXkgEv9Eem6z9v1kruhiQ" name="Trans__Init__State__1314" source="_vsTTEEv9Eem6z9v1kruhiQ" target="_vsPosEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vuSQEEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__13&quot;,&quot;New__State__12&quot;,&quot;To__New__State__12__17&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__13&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_vsan0Ev9Eem6z9v1kruhiQ" name="From__New__State__12__15" source="_vsRd4Ev9Eem6z9v1kruhiQ" target="_vsPosEv9Eem6z9v1kruhiQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vuVTYEv9Eem6z9v1kruhiQ">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__12&quot;,&quot;New__State__12&quot;,&quot;To__New__State__12__17&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__12&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_vsdEEEv9Eem6z9v1kruhiQ" name="PME_Trig16" port="_vkjsUEv9Eem6z9v1kruhiQ">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_vuOlsEv9Eem6z9v1kruhiQ" name="To__New__State__12__17" guard="_vuV6cUv9Eem6z9v1kruhiQ" source="_vsPosEv9Eem6z9v1kruhiQ" target="_vsRd4Ev9Eem6z9v1kruhiQ">
            <ownedRule xmi:id="_vuV6cUv9Eem6z9v1kruhiQ" name="PME_checkDecesion18">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_vuV6cEv9Eem6z9v1kruhiQ" name="PME_checkDecesion18">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__12__17&quot;,&quot;New__State__12&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_vsPosEv9Eem6z9v1kruhiQ" name="DecesionPoint__11" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_vsRd4Ev9Eem6z9v1kruhiQ" name="New__State__12">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wIlmcEv9Eem6z9v1kruhiQ" name="New__State__12">
              <language>C++</language>
              <body>timing.informIn(UMLRTTimespec(1,0));
</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_vsTTEEv9Eem6z9v1kruhiQ" name="Init__State__13"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vrW34Uv9Eem6z9v1kruhiQ" name="loadHeap" specification="_vrW34Ev9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vrZUIUv9Eem6z9v1kruhiQ" name="unLoadHeap" specification="_vrZUIEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vrmIcEv9Eem6z9v1kruhiQ" name="sendMessage" specification="_vrlhYEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;dbgPortForButtonsReader&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForButtonsReader.dbg().sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vrwggUv9Eem6z9v1kruhiQ" name="sendInternalMessage" specification="_vrwggEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vsCNUUv9Eem6z9v1kruhiQ" name="initForPMD" specification="_vsCNUEv9Eem6z9v1kruhiQ">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_dbgAgent::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_dbgAgent::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;dbgPortForButtonsReader&quot;,&quot;dbg&quot;,{});
 this->execContext.addInputMessages(&quot;timing&quot;,&quot;timeout&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_vrW34Ev9Eem6z9v1kruhiQ" name="loadHeap" visibility="private" method="_vrW34Uv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_vrZUIEv9Eem6z9v1kruhiQ" name="unLoadHeap" visibility="private" method="_vrZUIUv9Eem6z9v1kruhiQ"/>
      <ownedOperation xmi:id="_vrlhYEv9Eem6z9v1kruhiQ" name="sendMessage" visibility="private" method="_vrmIcEv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_vrn9oEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_vrqZ4Ev9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_vrwggEv9Eem6z9v1kruhiQ" name="sendInternalMessage" visibility="private" method="_vrwggUv9Eem6z9v1kruhiQ">
        <ownedParameter xmi:id="_vryVsEv9Eem6z9v1kruhiQ" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_vr0K4Ev9Eem6z9v1kruhiQ" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_vsCNUEv9Eem6z9v1kruhiQ" name="initForPMD" visibility="private" method="_vsCNUUv9Eem6z9v1kruhiQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_vkEkIEv9Eem6z9v1kruhiQ" name="dbgProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_vkHAYEv9Eem6z9v1kruhiQ" name="dbgProtocol">
        <interfaceRealization xmi:id="_vkdlsEv9Eem6z9v1kruhiQ" client="_vkHAYEv9Eem6z9v1kruhiQ" supplier="_vkJcoEv9Eem6z9v1kruhiQ" contract="_vkJcoEv9Eem6z9v1kruhiQ"/>
        <interfaceRealization xmi:id="_vkez0Ev9Eem6z9v1kruhiQ" client="_vkHAYEv9Eem6z9v1kruhiQ" supplier="_vkL44Ev9Eem6z9v1kruhiQ" contract="_vkL44Ev9Eem6z9v1kruhiQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_vkJcoEv9Eem6z9v1kruhiQ" name="dbgProtocol">
        <ownedOperation xmi:id="_vkgpAEv9Eem6z9v1kruhiQ" name="dbg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_vkKqwEv9Eem6z9v1kruhiQ" name="dbgProtocol~"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_vkL44Ev9Eem6z9v1kruhiQ" name="dbgProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_vkNHAEv9Eem6z9v1kruhiQ" client="_vkHAYEv9Eem6z9v1kruhiQ" supplier="_vkKqwEv9Eem6z9v1kruhiQ"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_vkPjQEv9Eem6z9v1kruhiQ" client="_vkHAYEv9Eem6z9v1kruhiQ" supplier="_vkL44Ev9Eem6z9v1kruhiQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_vkieMEv9Eem6z9v1kruhiQ" operation="_vkgpAEv9Eem6z9v1kruhiQ"/>
    </packagedElement>
    <profileApplication xmi:id="_GN1XswqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.profile_1.0.0.201707181432.jar!/umlProfile/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtQqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtgqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtwqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XuAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.codegen.cpp.profile_1.0.0.201707181457.jar!/profiles/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_pS-gAAqqEeiwdpidSbDb2g" base_Class="_pOYT4AqqEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_WFuLgAqrEeiwdpidSbDb2g" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_DFbqEAquEeiwdpidSbDb2g" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_J0BpAAquEeiwdpidSbDb2g" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_ZtYuYAquEeiwdpidSbDb2g" base_Class="_ZtPkcAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_xFmyAAquEeiwdpidSbDb2g" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_5crxsAquEeiwdpidSbDb2g" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_EUS0cAqvEeiwdpidSbDb2g" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_4mUU8AqvEeiwdpidSbDb2g" base_Property="_4mJV0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_7I7boAqvEeiwdpidSbDb2g" base_Property="_7I3xQAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_-Pye4AqvEeiwdpidSbDb2g" base_Property="_-PuNcAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Dab-0AqwEeiwdpidSbDb2g" base_Property="_DaXtYAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_K2YzAAqwEeiwdpidSbDb2g" base_Property="_K2VIoAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_QJj80AqwEeiwdpidSbDb2g" base_Property="_QJhgkAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Tqpd8AqwEeiwdpidSbDb2g" base_Property="_TqnowAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_OX4uYAqxEeiwdpidSbDb2g" base_Package="_OX25MAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OX9m4AqxEeiwdpidSbDb2g" base_Interface="_OX7KoAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYEUkAqxEeiwdpidSbDb2g" base_Interface="_OYB4UAqxEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYJ0IAqxEeiwdpidSbDb2g" base_Interface="_OYH-8AqxEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_OYM3cAqxEeiwdpidSbDb2g" base_Collaboration="_OXynwAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_qHisUAqxEeiwdpidSbDb2g" base_Port="_qHclsAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_wsb8sAqxEeiwdpidSbDb2g" base_Port="_wsY5YAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_4erJ8AqxEeiwdpidSbDb2g" base_Connector="_4edHgAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_atO2cArdEeiwdpidSbDb2g" base_Package="_atLzIArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atSg0ArdEeiwdpidSbDb2g" base_Interface="_atQEkArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atXZUArdEeiwdpidSbDb2g" base_Interface="_atU9EArdEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_atc44ArdEeiwdpidSbDb2g" base_Interface="_atZ1kArdEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_atgjQArdEeiwdpidSbDb2g" base_Collaboration="_atHhsArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_y_qqIAreEeiwdpidSbDb2g" base_Port="_y_nm0AreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_2AUXsAreEeiwdpidSbDb2g" base_Port="_2ASigAreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_8aUmsAreEeiwdpidSbDb2g" base_Connector="_8aQ8UAreEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_VizuEArfEeiwdpidSbDb2g" base_Package="_Viyf8ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Vi1jQArfEeiwdpidSbDb2g" base_Collaboration="_Viyf8QrfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2KUArfEeiwdpidSbDb2g" base_Interface="_Viyf9ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2xYArfEeiwdpidSbDb2g" base_Interface="_Viyf_grfEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi3_gArfEeiwdpidSbDb2g" base_Interface="_ViygAQrfEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_mHFGwArhEeiwdpidSbDb2g" base_Port="_mHDRkArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ppHqIArhEeiwdpidSbDb2g" base_Port="_ppFN4ArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ws7rIArhEeiwdpidSbDb2g" base_Connector="_ws4AwArhEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_Lo7XgAriEeiwdpidSbDb2g" base_Package="_Lo6JYAriEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Lo7-kAriEeiwdpidSbDb2g" base_Collaboration="_Lo6JYQriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo8loAriEeiwdpidSbDb2g" base_Interface="_Lo6JZAriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsAriEeiwdpidSbDb2g" base_Interface="_Lo6JawriEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsQriEeiwdpidSbDb2g" base_Interface="_Lo6JcgriEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="__kRn8ArjEeiwdpidSbDb2g" base_Port="__kPLsArjEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_IaHnQArkEeiwdpidSbDb2g" base_Port="_IaFLAArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_OI_1oArkEeiwdpidSbDb2g" base_Connector="_OI7kMArkEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="__mKB0ArkEeiwdpidSbDb2g" base_Package="__mIMoArkEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="__mLP8ArkEeiwdpidSbDb2g" base_Collaboration="__mIMoQrkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mMeEArkEeiwdpidSbDb2g" base_Interface="__mIMpArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mNsMArkEeiwdpidSbDb2g" base_Interface="__mIMrgrkEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="__mO6UArkEeiwdpidSbDb2g" base_Interface="__mIMtQrkEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_uB_LAArlEeiwdpidSbDb2g" base_Port="_uB7goArlEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_xFE50ArrEeiwdpidSbDb2g" base_Port="_xE8-AArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_28O6cArrEeiwdpidSbDb2g" base_Port="_28NFQArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_7dT48ArrEeiwdpidSbDb2g" base_Port="_7dRcsArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_-61vwArrEeiwdpidSbDb2g" base_Connector="_-6yscArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ALA-MArsEeiwdpidSbDb2g" base_Connector="_AK-h8ArsEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_A6ZzwArsEeiwdpidSbDb2g" base_Connector="_A6WwcArsEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_EOtyQAruEeiwdpidSbDb2g" base_Package="_EOr9EAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOwOgAruEeiwdpidSbDb2g" base_Interface="_EOuZUAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOz44AruEeiwdpidSbDb2g" base_Interface="_EOyDsAruEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_EO4KUAruEeiwdpidSbDb2g" base_Interface="_EO2VIAruEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_EO7NoAruEeiwdpidSbDb2g" base_Collaboration="_EOqu8AruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_LLyxwArxEeiwdpidSbDb2g" base_Port="_LLt5QArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_L9vzIArxEeiwdpidSbDb2g" base_Port="_L9t98ArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_WMsTYQrxEeiwdpidSbDb2g" base_Connector="_WMp3IArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_-6JIAAryEeiwdpidSbDb2g" isWired="false" base_Port="_-6GrwAryEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ka3XYArzEeiwdpidSbDb2g" base_Port="_ka0UEArzEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_qGzmgQrzEeiwdpidSbDb2g" base_Connector="_qGxKQArzEeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gAPwwAr0EeiwdpidSbDb2g" base_Pseudostate="_gAMtcAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_gATbIAr0EeiwdpidSbDb2g" base_State="_gARl8Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_gAV3YAr0EeiwdpidSbDb2g" base_Region="_gAJqIAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_gAaI0Ar0EeiwdpidSbDb2g" base_StateMachine="_f9DS0Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_BIUk4Ar1EeiwdpidSbDb2g" base_Region="_BISvsAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CErfcAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_DTdmwAr1EeiwdpidSbDb2g" base_State="_DTbxkAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_FtbHwAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUQg4Ar1EeiwdpidSbDb2g" base_Pseudostate="_hUNdkAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUUyUAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_pbDo4Ar1EeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_yQefgAr3EeiwdpidSbDb2g" isWired="false" base_Port="_yQcqUAr3EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hU-BcA-pEeijktysABpT4g" base_Pseudostate="_hUybQA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_hVdJoA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_hVipMA-pEeijktysABpT4g" base_Region="_hUncIA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_hWGp4A-pEeijktysABpT4g" base_StateMachine="_hUDbcA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OK1ngA-sEeijktysABpT4g" base_Pseudostate="_OKx9IA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_OK7uIA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_OK-xcA-sEeijktysABpT4g" base_Region="_OKuSwA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_OLDp8A-sEeijktysABpT4g" base_StateMachine="_OKhecA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_kB4zUA-sEeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_Xb2N8A-uEeijktysABpT4g" isWired="false" base_Port="_XbRmMA-uEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_U9XDMA-3EeijktysABpT4g" base_Pseudostate="_U9Um8A-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_U9b7sA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_U9dw4A-3EeijktysABpT4g" base_Region="_U9SKsA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_U9ipYA-3EeijktysABpT4g" base_StateMachine="_U9KO4A-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_e549wA-3EeijktysABpT4g" base_State="_e52hgA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_O4nAkA-5EeijktysABpT4g" base_Region="_O4jWMA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_P93_gA-5EeijktysABpT4g" base_State="_P908MA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_R-Zs0A-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Uez0EA-5EeijktysABpT4g" base_Pseudostate="_UevioA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2izAA-6EeijktysABpT4g" base_Pseudostate="_P2fvsA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2oSkA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KalrMA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KarKwA-7EeijktysABpT4g" base_Region="_KahZwA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_Kau1IA-7EeijktysABpT4g" base_StateMachine="_Kab6MA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_bC7WcA-7EeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_xHS7gBE6EeiaCPCnhevAQQ" isWired="false" base_Port="_xB-9sBE6EeiaCPCnhevAQQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_5O9OkBKMEeiEEYKmuRZPIg" headerPreface="#include &lt;iostream>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_WFgwIAqrEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRealTime:RTPort xmi:id="_fwhSABNgEeiFubQUFHg6OA" isWired="false" base_Port="_fwJekBNgEeiFubQUFHg6OA"/>
  <UMLRealTime:RTPort xmi:id="_DarBUBNhEeiFubQUFHg6OA" isWired="false" base_Port="_Dan-ABNhEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gmdUIBNjEeiFubQUFHg6OA" base_Pseudostate="_gmZCsBNjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5USJsBNsEeiFubQUFHg6OA" base_Pseudostate="_5UPGYBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_5Ub6sBNsEeiFubQUFHg6OA" base_State="_5UY3YBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5Ue-ABNsEeiFubQUFHg6OA" base_Region="_5UK08BNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_5VCXoBNsEeiFubQUFHg6OA" base_StateMachine="_5TyacBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_m1DG4BNvEeiFubQUFHg6OA" base_State="_m0-1cBNvEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_qcuQ0BNyEeiFubQUFHg6OA" base_Region="_qcoxQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qc4o4BNyEeiFubQUFHg6OA" base_Pseudostate="_qc0-gBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qdJuoBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_2N0gUBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_34xmQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GUGnYBNzEeiFubQUFHg6OA" base_Pseudostate="_GT9dcBNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_VhtaABNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5oRb0BRgEeiFubQUFHg6OA" base_Pseudostate="_5oJgABRgEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_PmfKIBRiEeiFubQUFHg6OA" base_Pseudostate="_PmcG0BRiEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_GFHsIBRjEeiFubQUFHg6OA" base_Region="_GFF28BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GFQ2EBRjEeiFubQUFHg6OA" base_Pseudostate="_GFOZ0BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_G6EXIBRjEeiFubQUFHg6OA" base_State="_G6Ch8BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_HQJU0BRjEeiFubQUFHg6OA" base_State="_HQIGsBRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzA6ABUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzRYsBUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_2-fvYBUfEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_bAe6cBUhEeiYy9niOG6dTw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_huQNUBa-Eei-ccFu-OwT7Q" headerPreface="#include &lt;termios.h>&#xA;#include &lt;iostream>&#xA;#include &lt;unistd.h>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_xFgrYAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lMfYBeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lcXABeHEei-ccFu-OwT7Q" base_Pseudostate="_6lSmABeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_smoRwBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tthoYBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OMmZABgmEeiSBIpf1RqKYQ" base_Pseudostate="_OEEIEBgmEeiSBIpf1RqKYQ"/>
  <UMLRealTime:Capsule xmi:id="_vj6MEEv9Eem6z9v1kruhiQ" base_Class="_vgTecEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_vkDWAEv9Eem6z9v1kruhiQ" base_StateMachine="_vj7aMEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:ProtocolContainer xmi:id="_vkGZUEv9Eem6z9v1kruhiQ" base_Package="_vkEkIEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:Protocol xmi:id="_vkI1kEv9Eem6z9v1kruhiQ" base_Collaboration="_vkHAYEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_vkUbwEv9Eem6z9v1kruhiQ" base_Interface="_vkJcoEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_vkaiYEv9Eem6z9v1kruhiQ" base_Interface="_vkKqwEv9Eem6z9v1kruhiQ" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_vkcXkEv9Eem6z9v1kruhiQ" base_Interface="_vkL44Ev9Eem6z9v1kruhiQ" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_vkyV0Ev9Eem6z9v1kruhiQ" base_Port="_vkjsUEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTPort xmi:id="_voCeIEv9Eem6z9v1kruhiQ" isWired="false" base_Port="_voAB4Ev9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTPort xmi:id="_voJL0Ev9Eem6z9v1kruhiQ" isPublish="true" isWired="false" base_Port="_voGIgEv9Eem6z9v1kruhiQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_voWnMEv9Eem6z9v1kruhiQ" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_voct0Ev9Eem6z9v1kruhiQ" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_vpWswEv9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_vpRNMEv9Eem6z9v1kruhiQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_vpgdwEv9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_vpeBgEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_vqNBUEv9Eem6z9v1kruhiQ" base_Pseudostate="_vqJW8Ev9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTState xmi:id="_vqRSwEv9Eem6z9v1kruhiQ" base_State="_vqNoYEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_vqVkMEv9Eem6z9v1kruhiQ" base_Pseudostate="_vqSg4Ev9Eem6z9v1kruhiQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_vrR_YEv9Eem6z9v1kruhiQ" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_vgTecEv9Eem6z9v1kruhiQ" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_vrUboEv9Eem6z9v1kruhiQ" base_Class="_vgTecEv9Eem6z9v1kruhiQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_vrurUEv9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_vrqZ4Ev9Eem6z9v1kruhiQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_vr2AEEv9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_vr0K4Ev9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTRegion xmi:id="_vsPBoEv9Eem6z9v1kruhiQ" base_Region="_vsNzgEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_vsQ20Ev9Eem6z9v1kruhiQ" base_Pseudostate="_vsPosEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTState xmi:id="_vsSsAEv9Eem6z9v1kruhiQ" base_State="_vsRd4Ev9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_vsVIQEv9Eem6z9v1kruhiQ" base_Pseudostate="_vsTTEEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTPort xmi:id="_vuay8Ev9Eem6z9v1kruhiQ" isWired="false" base_Port="_vuYWsEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTPort xmi:id="_vufEYEv9Eem6z9v1kruhiQ" isPublish="true" isWired="false" base_Port="_vucBEEv9Eem6z9v1kruhiQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_vu1psEv9Eem6z9v1kruhiQ" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_Jz5GIAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_vu8-cEv9Eem6z9v1kruhiQ" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_vv6AsEv9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_vv4ykEv9Eem6z9v1kruhiQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_vwCjkEv9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_vwBVcEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_vxHhoEv9Eem6z9v1kruhiQ" base_Pseudostate="_vxFFYEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTState xmi:id="_vxLzEEv9Eem6z9v1kruhiQ" base_State="_vxJW0Ev9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_vxxB4Ev9Eem6z9v1kruhiQ" base_Pseudostate="_vxvzwUv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_vxy3EEv9Eem6z9v1kruhiQ" base_Pseudostate="_vxxo8Ev9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_vx2hcEv9Eem6z9v1kruhiQ" base_Pseudostate="_vx0FMEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTPort xmi:id="_vz-BUEv9Eem6z9v1kruhiQ" isWired="false" base_Port="_vz8MIEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTPort xmi:id="_v0BrsEv9Eem6z9v1kruhiQ" isPublish="true" isWired="false" base_Port="_vz_PcEv9Eem6z9v1kruhiQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_v0gM0Ev9Eem6z9v1kruhiQ" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_v0rL8Ev9Eem6z9v1kruhiQ" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_v1JtEEv9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_v1Ie8Ev9Eem6z9v1kruhiQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_v1RB0Ev9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_v1OlkEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_v1wxEEv9Eem6z9v1kruhiQ" base_Pseudostate="_v1wKAEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTState xmi:id="_v1x_MEv9Eem6z9v1kruhiQ" base_State="_v1xYIEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTPort xmi:id="_v2VY0Ev9Eem6z9v1kruhiQ" isWired="false" base_Port="_v2UKsEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTPort xmi:id="_v2X1EEv9Eem6z9v1kruhiQ" isPublish="true" isWired="false" base_Port="_v2Wm8Ev9Eem6z9v1kruhiQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_v2eiwEv9Eem6z9v1kruhiQ" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_EUMt0AqvEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_v2gX8Ev9Eem6z9v1kruhiQ" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_v3tR0Ev9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_v3sqwEv9Eem6z9v1kruhiQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_v3w8MEv9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_v3wVIEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_v4jmYEv9Eem6z9v1kruhiQ" base_Pseudostate="_v4i_UEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTState xmi:id="_v4qUEEv9Eem6z9v1kruhiQ" base_State="_v4jmYUv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_v5aiAEv9Eem6z9v1kruhiQ" base_Pseudostate="_v5ZT4Uv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_v5cXMEv9Eem6z9v1kruhiQ" base_Pseudostate="_v5bJEEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_v5eMYEv9Eem6z9v1kruhiQ" base_Pseudostate="_v5c-QEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_v5gooEv9Eem6z9v1kruhiQ" base_Pseudostate="_v5ezcEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTPort xmi:id="_v7MDoEv9Eem6z9v1kruhiQ" isWired="false" base_Port="_v7JnYEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTPort xmi:id="_v7PG8Ev9Eem6z9v1kruhiQ" isPublish="true" isWired="false" base_Port="_v7NRwEv9Eem6z9v1kruhiQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_v7dJYEv9Eem6z9v1kruhiQ" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_5cgykAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_v7floEv9Eem6z9v1kruhiQ" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_v8V6MEv9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_v8UsEEv9Eem6z9v1kruhiQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_v8aLoEv9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_v8Y9gEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_v9KZkEv9Eem6z9v1kruhiQ" base_Pseudostate="_v9JygEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTState xmi:id="_v9M10Ev9Eem6z9v1kruhiQ" base_State="_v9LnsEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wAOUoEv9Eem6z9v1kruhiQ" base_Pseudostate="_wAL4YEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wAQJ0Ev9Eem6z9v1kruhiQ" base_Pseudostate="_wAO7sEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wAR_AEv9Eem6z9v1kruhiQ" base_Pseudostate="_wARX8Ev9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wAah4Ev9Eem6z9v1kruhiQ" base_Pseudostate="_wAZ60Ev9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wDjVcEv9Eem6z9v1kruhiQ" base_Pseudostate="_wDiHUEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wDlKoEv9Eem6z9v1kruhiQ" base_Pseudostate="_wDj8gEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wDoN8Ev9Eem6z9v1kruhiQ" base_Pseudostate="_wDnm4Ev9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTState xmi:id="_wDpcEEv9Eem6z9v1kruhiQ" base_State="_wDo1AEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wDr4UEv9Eem6z9v1kruhiQ" base_Pseudostate="_wDqqMEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTPort xmi:id="_wFtRkEv9Eem6z9v1kruhiQ" isWired="false" base_Port="_wFsDcEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:RTPort xmi:id="_wFvGwEv9Eem6z9v1kruhiQ" isPublish="true" isWired="false" base_Port="_wFt4oEv9Eem6z9v1kruhiQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_wFyKEEv9Eem6z9v1kruhiQ" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_DFR5EAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_wF0mUEv9Eem6z9v1kruhiQ" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_wGOO8Ev9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_wGNA0Ev9Eem6z9v1kruhiQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_wGTHcEv9Eem6z9v1kruhiQ" type="pmd::Message" base_Parameter="_wGRSQEv9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wG1S8Ev9Eem6z9v1kruhiQ" base_Pseudostate="_wG0E0Ev9Eem6z9v1kruhiQ"/>
  <UMLRTStateMachines:RTState xmi:id="_wG2hEEv9Eem6z9v1kruhiQ" base_State="_wG16AEv9Eem6z9v1kruhiQ"/>
  <UMLRealTime:CapsulePart xmi:id="_wIHsYEv9Eem6z9v1kruhiQ" base_Property="_wIHFUEv9Eem6z9v1kruhiQ"/>
</xmi:XMI>
