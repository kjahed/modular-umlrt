<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_GN1XsAqpEeiwdpidSbDb2g" name="DigitalWatch">
    <eAnnotations xmi:id="_GN1XsQqpEeiwdpidSbDb2g" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_GN1XsgqpEeiwdpidSbDb2g" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_r_6AUAqqEeiwdpidSbDb2g" source="UMLRT_Default_top">
      <details xmi:id="_r_6nYAqqEeiwdpidSbDb2g" key="top_name" value="DigitalWatch"/>
    </eAnnotations>
    <eAnnotations xmi:id="_CR12kEwZEemPD4ngXRS2Yg" source="dummy"/>
    <eAnnotations xmi:id="_vajPkExcEemqSrdzE5NESg" source="dummy"/>
    <eAnnotations xmi:id="_MxtPoEyFEemPvrFUmnOaHg" source="dummy"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_pOYT4AqqEeiwdpidSbDb2g" name="DigitalWatch" isActive="true">
      <ownedAttribute xmi:id="_4mJV0AqvEeiwdpidSbDb2g" name="displayGateKeeper" visibility="protected" type="_WFgwIAqrEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_7I3xQAqvEeiwdpidSbDb2g" name="alarmsCapsule" visibility="protected" type="_DFR5EAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_-PuNcAqvEeiwdpidSbDb2g" name="stopWatchController" visibility="protected" type="_Jz5GIAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_DaXtYAqwEeiwdpidSbDb2g" name="display" visibility="protected" type="_ZtPkcAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_K2VIoAqwEeiwdpidSbDb2g" name="buttonsReader" visibility="protected" type="_xFgrYAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_QJhgkAqwEeiwdpidSbDb2g" name="watchCore" visibility="protected" type="_5cgykAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_TqnowAqwEeiwdpidSbDb2g" name="timeTracker" visibility="protected" type="_EUMt0AqvEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_ocA8UEv9EemPbqxlL8FnXw" name="dbgAgent" type="_nqqX4Ev9EemPbqxlL8FnXw">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ocCKcUv9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_ocCKckv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedConnector xmi:id="_4edHgAqxEeiwdpidSbDb2g" name="RTConnector1">
        <end xmi:id="_4eoGoAqxEeiwdpidSbDb2g" partWithPort="_K2VIoAqwEeiwdpidSbDb2g" role="_qHclsAqxEeiwdpidSbDb2g"/>
        <end xmi:id="_4epUwAqxEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_wsY5YAqxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_8aQ8UAreEeiwdpidSbDb2g" name="RTConnector2">
        <end xmi:id="_8aT_oAreEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_2ASigAreEeiwdpidSbDb2g"/>
        <end xmi:id="_8aT_oQreEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_y_nm0AreEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_ws4AwArhEeiwdpidSbDb2g" name="RTConnector3">
        <end xmi:id="_ws6dAArhEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_mHDRkArhEeiwdpidSbDb2g"/>
        <end xmi:id="_ws7EEArhEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ppFN4ArhEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_OI7kMArkEeiwdpidSbDb2g" name="RTConnector4">
        <end xmi:id="_OI-ngArkEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_IaFLAArkEeiwdpidSbDb2g"/>
        <end xmi:id="_OI_OkArkEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="__kPLsArjEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-6yscArrEeiwdpidSbDb2g" name="RTConnector5">
        <end xmi:id="_-61IsArrEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="_7dRcsArrEeiwdpidSbDb2g"/>
        <end xmi:id="_-61IsQrrEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_AK-h8ArsEeiwdpidSbDb2g" name="RTConnector6">
        <end xmi:id="_ALAXIArsEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_xE8-AArrEeiwdpidSbDb2g"/>
        <end xmi:id="_ALAXIQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_A6WwcArsEeiwdpidSbDb2g" name="RTConnector7">
        <end xmi:id="_A6ZMsArsEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_28NFQArrEeiwdpidSbDb2g"/>
        <end xmi:id="_A6ZMsQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_WMp3IArxEeiwdpidSbDb2g" name="RTConnector8">
        <end xmi:id="_WMrsUArxEeiwdpidSbDb2g" partWithPort="_DaXtYAqwEeiwdpidSbDb2g" role="_LLt5QArxEeiwdpidSbDb2g"/>
        <end xmi:id="_WMsTYArxEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_L9t98ArxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_qGxKQArzEeiwdpidSbDb2g" name="RTConnector9">
        <end xmi:id="_qGy_cArzEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ka0UEArzEeiwdpidSbDb2g"/>
        <end xmi:id="_qGzmgArzEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_WFgwIAqrEeiwdpidSbDb2g" name="DisplayGateKeeper" classifierBehavior="_hUDbcA-pEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uB7goArlEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yMSoQArlEeiwdpidSbDb2g" value="4"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_yNBoEArlEeiwdpidSbDb2g" value="4"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_L9t98ArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oMQpEEv9EemPbqxlL8FnXw" name="dbgPortForDisplayGateKeeper" visibility="protected" type="_nwsHYEv9EemPbqxlL8FnXw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_oMRQIEv9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_oMR3MEv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_hUDbcA-pEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_hUncIA-pEeijktysABpT4g" name="Region">
          <transition xmi:id="_u0Ob4A-pEeijktysABpT4g" name="State1__State1__135" source="_hVXqEA-pEeijktysABpT4g" target="_hVXqEA-pEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_9n8aUBKHEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>	std::cout &lt;&lt; std::string( 100, '\n' );
    std::cout&lt;&lt;hour&lt;&lt;&quot;:&quot;&lt;&lt;minute&lt;&lt;&quot;:&quot;&lt;&lt;second&lt;&lt;std::endl;
</body>
            </effect>
            <trigger xmi:id="_AKuNoA-qEeijktysABpT4g" event="__mIMtwrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_zVXr0A-pEeijktysABpT4g" name="State1__State1__134" source="_hVXqEA-pEeijktysABpT4g" target="_hVXqEA-pEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_bW6koBKIEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>    //std::cout&lt;&lt;&quot;new text is recieved\n&quot;;
    //putp( tigetstr( &quot;clear&quot; ) ); 
    std::cout&lt;&lt;text&lt;&lt;std::endl;
</body>
            </effect>
            <trigger xmi:id="_HSdsYA-qEeijktysABpT4g" event="__mIMuArkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_KXN20A-qEeijktysABpT4g" name="State1__State1__133" source="_hVXqEA-pEeijktysABpT4g" target="_hVXqEA-pEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_9muc4BKIEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>std::cout &lt;&lt; std::string( 100, '\n' );
std::cout&lt;&lt;hour&lt;&lt;&quot;:&quot;&lt;&lt;minute&lt;&lt;&quot;:&quot;&lt;&lt;second&lt;&lt;&quot;:&quot;&lt;&lt;milli&lt;&lt;std::endl;
</body>
            </effect>
            <trigger xmi:id="_SrO7cA-qEeijktysABpT4g" event="__mIMuQrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_oNrlYEv9EemPbqxlL8FnXw" name="Trans__Init__State__137138" source="_oNpJIEv9EemPbqxlL8FnXw" target="_oNms4Ev9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oN8rIEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__137&quot;,&quot;State1&quot;,&quot;To__State1__141&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__137&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_oNvPwEv9EemPbqxlL8FnXw" name="From__State1__139" source="_hVXqEA-pEeijktysABpT4g" target="_oNms4Ev9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oN_ucEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;State1&quot;,&quot;State1&quot;,&quot;To__State1__141&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;State1&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_oNy6IEv9EemPbqxlL8FnXw" name="PME_Trig140" event="_nxCFoEv9EemPbqxlL8FnXw" port="_oMQpEEv9EemPbqxlL8FnXw"/>
          </transition>
          <transition xmi:id="_oN4ZsEv9EemPbqxlL8FnXw" name="To__State1__141" guard="_oOA8kUv9EemPbqxlL8FnXw" source="_oNms4Ev9EemPbqxlL8FnXw" target="_hVXqEA-pEeijktysABpT4g">
            <ownedRule xmi:id="_oOA8kUv9EemPbqxlL8FnXw" name="PME_checkDecesion142">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_oOA8kEv9EemPbqxlL8FnXw" name="PME_checkDecesion142">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__State1__141&quot;,&quot;State1&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:State" xmi:id="_hVXqEA-pEeijktysABpT4g" name="State1"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_oNms4Ev9EemPbqxlL8FnXw" name="DecesionPoint__136" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_oNpJIEv9EemPbqxlL8FnXw" name="Init__State__137"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oMst8Ev9EemPbqxlL8FnXw" name="loadHeap" specification="_oMsG4Ev9EemPbqxlL8FnXw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oMvxQUv9EemPbqxlL8FnXw" name="unLoadHeap" specification="_oMvxQEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oND6UEv9EemPbqxlL8FnXw" name="sendMessage" specification="_oNDTQEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayP&quot;) {
  if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oNIy0Uv9EemPbqxlL8FnXw" name="sendInternalMessage" specification="_oNIy0Ev9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oNdi8Uv9EemPbqxlL8FnXw" name="initForPMD" specification="_oNdi8Ev9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForDisplayGateKeeper&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_oMsG4Ev9EemPbqxlL8FnXw" name="loadHeap" visibility="private" method="_oMst8Ev9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_oMvxQEv9EemPbqxlL8FnXw" name="unLoadHeap" visibility="private" method="_oMvxQUv9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_oNDTQEv9EemPbqxlL8FnXw" name="sendMessage" visibility="private" method="_oND6UEv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_oNFIcEv9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oNG9oEv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oNIy0Ev9EemPbqxlL8FnXw" name="sendInternalMessage" visibility="private" method="_oNIy0Uv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_oNLPEEv9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oNNEQEv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oNdi8Ev9EemPbqxlL8FnXw" name="initForPMD" visibility="private" method="_oNdi8Uv9EemPbqxlL8FnXw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_DFR5EAquEeiwdpidSbDb2g" name="AlarmsCapsule" classifierBehavior="_OKhecA-sEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_y_nm0AreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xE8-AArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_XbRmMA-uEeijktysABpT4g" name="alarmTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_nHqHMBgMEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_3pL_0BgMEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_v-uwIBi9EeiSBIpf1RqKYQ" name="alarmTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oFWv0Ev9EemPbqxlL8FnXw" name="dbgPortForAlarmsCapsule" visibility="protected" type="_nwsHYEv9EemPbqxlL8FnXw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_oFXW4Ev9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_oFX98Ev9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_OKhecA-sEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_OKuSwA-sEeijktysABpT4g" name="Region">
          <transition xmi:id="_OK9jUA-sEeijktysABpT4g" name="Initial" source="_OKx9IA-sEeijktysABpT4g" target="_OK4DwA-sEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lvbNgBNtEeiFubQUFHg6OA">
              <language>C++</language>
              <body>initForPMD();
    displayGateKeeperP.ShowText(0,&quot;Alarm capsule is started&quot;).send();
</body>
            </effect>
          </transition>
          <transition xmi:id="_QJSFoA-2EeijktysABpT4g" name="NoAlarm__NoAlarm__114" source="_OK4DwA-sEeijktysABpT4g" target="_OK4DwA-sEeijktysABpT4g">
            <trigger xmi:id="_X9BuwA-2EeijktysABpT4g" event="_0IHVYArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_oJvgkEv9EemPbqxlL8FnXw" name="From__NoAlarm__116" source="_OK4DwA-sEeijktysABpT4g" target="_oJqBAEv9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oKiKwEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;NoAlarm&quot;,&quot;NoAlarm&quot;,&quot;To__NoAlarm__123&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;NoAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_oJyj4Ev9EemPbqxlL8FnXw" name="PME_Trig117" event="_nxCFoEv9EemPbqxlL8FnXw" port="_oFWv0Ev9EemPbqxlL8FnXw"/>
            <trigger xmi:id="_oJ1nMEv9EemPbqxlL8FnXw" name="PME_Trig118" event="_suGa4ArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_oKDCkEv9EemPbqxlL8FnXw" name="PME_Trig119" event="_dfgJwArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_oKH7EEv9EemPbqxlL8FnXw" name="PME_Trig120" port="_XbRmMA-uEeijktysABpT4g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_oKK-YEv9EemPbqxlL8FnXw" name="PME_Trig121" event="__mIMuwrkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_oKOowEv9EemPbqxlL8FnXw" name="PME_Trig122" event="__mIMvArkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_oKSTIEv9EemPbqxlL8FnXw" name="To__NoAlarm__123" guard="_oKjY4Ev9EemPbqxlL8FnXw" source="_oJqBAEv9EemPbqxlL8FnXw" target="_OK4DwA-sEeijktysABpT4g">
            <ownedRule xmi:id="_oKjY4Ev9EemPbqxlL8FnXw" name="PME_checkDecesion124">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_oKix0Ev9EemPbqxlL8FnXw" name="PME_checkDecesion124">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__NoAlarm__123&quot;,&quot;NoAlarm&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_OKx9IA-sEeijktysABpT4g" name="Pseudo113"/>
          <subvertex xmi:type="uml:State" xmi:id="_OK4DwA-sEeijktysABpT4g" name="NoAlarm"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_oJqBAEv9EemPbqxlL8FnXw" name="DecesionPoint__115" kind="choice"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oGNrcUv9EemPbqxlL8FnXw" name="loadHeap" specification="_oGNrcEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oGR84Uv9EemPbqxlL8FnXw" name="unLoadHeap" specification="_oGR84Ev9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oHVs0Uv9EemPbqxlL8FnXw" name="sendMessage" specification="_oHVs0Ev9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    alarmP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    alarmP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oHmykUv9EemPbqxlL8FnXw" name="sendInternalMessage" specification="_oHmykEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oJdMsEv9EemPbqxlL8FnXw" name="initForPMD" specification="_oJcloEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForAlarmsCapsule&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_oGNrcEv9EemPbqxlL8FnXw" name="loadHeap" visibility="private" method="_oGNrcUv9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_oGR84Ev9EemPbqxlL8FnXw" name="unLoadHeap" visibility="private" method="_oGR84Uv9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_oHVs0Ev9EemPbqxlL8FnXw" name="sendMessage" visibility="private" method="_oHVs0Uv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_oHYJEEv9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oHcagEv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oHmykEv9EemPbqxlL8FnXw" name="sendInternalMessage" visibility="private" method="_oHmykUv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_oHpO0Ev9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oHsSIEv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oJcloEv9EemPbqxlL8FnXw" name="initForPMD" visibility="private" method="_oJdMsEv9EemPbqxlL8FnXw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_Jz5GIAquEeiwdpidSbDb2g" name="StopWatchCore" classifierBehavior="_U9KO4A-3EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_mHDRkArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_28NFQArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_fwJekBNgEeiFubQUFHg6OA" name="showCounterTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Dan-ABNhEeiFubQUFHg6OA" name="timeCountingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2KcBNhEeiFubQUFHg6OA" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2xgBNhEeiFubQUFHg6OA" name="stopWatchResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_OM2xgRNhEeiFubQUFHg6OA" value="200"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_XYKbwBNnEeiFubQUFHg6OA" name="timeCountingTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_dK4oUBNnEeiFubQUFHg6OA" name="showCounterTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oUNrMEv9EemPbqxlL8FnXw" name="dbgPortForStopWatchCore" visibility="protected" type="_nwsHYEv9EemPbqxlL8FnXw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_oUOSQEv9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_oUOSQUv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_U9KO4A-3EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_U9SKsA-3EeijktysABpT4g" name="Region">
          <transition xmi:id="_gmfJUBNjEeiFubQUFHg6OA" name="countTime2" source="_wzEkYBUeEeiYy9niOG6dTw" target="_P2koMA-6EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_hC2qUBNlEeiFubQUFHg6OA">
              <language>C++</language>
              <body>milliTime=milliTime+stopWatchResolution;</body>
            </effect>
            <trigger xmi:id="_3opdYBNjEeiFubQUFHg6OA" port="_Dan-ABNhEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_6lezQBeHEei-ccFu-OwT7Q" name="reset" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_e52hgA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_PYz4QBeIEei-ccFu-OwT7Q">
              <language>C++</language>
              <body>milliTime=0;</body>
            </effect>
            <trigger xmi:id="_Mb5bMBeIEei-ccFu-OwT7Q" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_oV0NsEv9EemPbqxlL8FnXw" name="Trans__Pseudo181189" source="_U9Um8A-3EeijktysABpT4g" target="_oVv8QEv9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_obvPgEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo181&quot;,&quot;New__State__188&quot;,&quot;To__New__State__188__201&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo181&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__206&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo181&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_oV3RAEv9EemPbqxlL8FnXw" name="From__New__State__188__190" source="_oVxKYEv9EemPbqxlL8FnXw" target="_oVv8QEv9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_obkQYEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__188&quot;,&quot;New__State__188&quot;,&quot;To__New__State__188__201&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__188&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__206&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__188&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_oV6UUEv9EemPbqxlL8FnXw" name="PME_Trig191" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_oWF6gEv9EemPbqxlL8FnXw" name="PME_Trig192" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_oWKL8Ev9EemPbqxlL8FnXw" name="PME_Trig193" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_oWN2UEv9EemPbqxlL8FnXw" name="PME_Trig194" port="_Dan-ABNhEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_oWSHwEv9EemPbqxlL8FnXw" name="PME_Trig195" event="_nxCFoEv9EemPbqxlL8FnXw" port="_oUNrMEv9EemPbqxlL8FnXw"/>
            <trigger xmi:id="_oWbRsEv9EemPbqxlL8FnXw" name="PME_Trig196" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_oWh_YEv9EemPbqxlL8FnXw" name="PME_Trig197" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_oWlpwEv9EemPbqxlL8FnXw" name="PME_Trig198" port="_fwJekBNgEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_oWoGAEv9EemPbqxlL8FnXw" name="PME_Trig199" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_oWuzsEv9EemPbqxlL8FnXw" name="PME_Trig200" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_oW3WkEv9EemPbqxlL8FnXw" name="To__New__State__188__201" guard="_ob95AUv9EemPbqxlL8FnXw" source="_oVv8QEv9EemPbqxlL8FnXw" target="_oVxKYEv9EemPbqxlL8FnXw">
            <ownedRule xmi:id="_ob95AUv9EemPbqxlL8FnXw" name="PME_checkDecesion242">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ob95AEv9EemPbqxlL8FnXw" name="PME_checkDecesion242">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__188__201&quot;,&quot;New__State__188&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_oW82IEv9EemPbqxlL8FnXw" name="Trans__Pseudo180202" source="_wzEkYBUeEeiYy9niOG6dTw" target="_oVv8QEv9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ob8q4Ev9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;New__State__188&quot;,&quot;To__New__State__188__201&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__206&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_oW9dMEv9EemPbqxlL8FnXw" name="Trans__Pseudo182203" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_oVv8QEv9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_obh0IEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;New__State__188&quot;,&quot;To__New__State__188__201&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__206&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_oW-EQEv9EemPbqxlL8FnXw" name="Trans__Pseudo185204" source="_wy9PoBUeEeiYy9niOG6dTw" target="_oVv8QEv9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_obew0Ev9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;New__State__188&quot;,&quot;To__New__State__188__201&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__206&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_oXAggEv9EemPbqxlL8FnXw" name="To__Substates__StopWatchMode__206" guard="_ob_HIUv9EemPbqxlL8FnXw" source="_oVv8QEv9EemPbqxlL8FnXw" target="_oW_SYEv9EemPbqxlL8FnXw">
            <ownedRule xmi:id="_ob_HIUv9EemPbqxlL8FnXw" name="PME_checkDecesion243">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ob_HIEv9EemPbqxlL8FnXw" name="PME_checkDecesion243">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__StopWatchMode__206&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_oXCVsUv9EemPbqxlL8FnXw" name="From__Substates__StopWatchMode__208" source="_oXBHkEv9EemPbqxlL8FnXw" target="_oVv8QEv9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_obszQEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;New__State__188&quot;,&quot;To__New__State__188__201&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__206&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_U9Um8A-3EeijktysABpT4g" name="Pseudo181"/>
          <subvertex xmi:type="uml:State" xmi:id="_e52hgA-3EeijktysABpT4g" name="StopWatchMode">
            <connectionPoint xmi:id="_P2koMA-6EeijktysABpT4g" name="Pseudo184" kind="entryPoint"/>
            <connectionPoint xmi:id="_wy9PoBUeEeiYy9niOG6dTw" name="Pseudo185" kind="exitPoint"/>
            <connectionPoint xmi:id="_wzEkYBUeEeiYy9niOG6dTw" name="Pseudo180" kind="exitPoint"/>
            <connectionPoint xmi:id="_6lDVcBeHEei-ccFu-OwT7Q" name="Pseudo182" kind="exitPoint"/>
            <connectionPoint xmi:id="_6lSmABeHEei-ccFu-OwT7Q" name="Pseudo186" kind="entryPoint"/>
            <connectionPoint xmi:id="_oW_SYEv9EemPbqxlL8FnXw" name="From__Parent__205" kind="entryPoint"/>
            <connectionPoint xmi:id="_oXBHkEv9EemPbqxlL8FnXw" name="To__Parent__207" kind="exitPoint"/>
            <region xmi:id="_O4jWMA-5EeijktysABpT4g" name="Region1">
              <transition xmi:id="_VjF7kA-5EeijktysABpT4g" name="init" source="_UevioA-5EeijktysABpT4g" target="_P908MA-5EeijktysABpT4g"/>
              <transition xmi:id="_W2EmYA-5EeijktysABpT4g" name="start" source="_P908MA-5EeijktysABpT4g" target="_R-XQkA-5EeijktysABpT4g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_zbNpEBNiEeiFubQUFHg6OA">
                  <language>C++</language>
                  <body>timeCountingTimerID =timeCountingTimer.informEvery(UMLRTTimespec(0,stopWatchResolution*1000000),0);</body>
                </effect>
                <trigger xmi:id="_7buYUBNhEeiFubQUFHg6OA" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_dNliEA-5EeijktysABpT4g" name="pause" source="_R-XQkA-5EeijktysABpT4g" target="_P908MA-5EeijktysABpT4g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_B3qEgBNjEeiFubQUFHg6OA">
                  <language>C++</language>
                  <body>timeCountingTimer.cancelTimer(timeCountingTimerID);
</body>
                </effect>
                <trigger xmi:id="_9-n9cBNiEeiFubQUFHg6OA" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_oXJqcEv9EemPbqxlL8FnXw" name="Trans__Pseudo180210" source="_wzEkYBUeEeiYy9niOG6dTw" target="_oXC8wEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oaVhUEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__236&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__238&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__235&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_oXKRgEv9EemPbqxlL8FnXw" name="Trans__Pseudo182211" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_oXC8wEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oaG30Ev9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__236&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__238&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__235&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_oXLfoEv9EemPbqxlL8FnXw" name="Trans__Pseudo184212" source="_P2koMA-6EeijktysABpT4g" target="_oXC8wEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oaRP4Ev9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__236&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__238&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__235&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_oXMGsEv9EemPbqxlL8FnXw" name="Trans__Pseudo185213" source="_wy9PoBUeEeiYy9niOG6dTw" target="_oXC8wEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oalY8Ev9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__236&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__238&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__235&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_oXMtwEv9EemPbqxlL8FnXw" name="Trans__Pseudo186214" source="_6lSmABeHEei-ccFu-OwT7Q" target="_oXC8wEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oaxmMEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__236&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__238&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__235&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_oXWewEv9EemPbqxlL8FnXw" name="From__Active__215" source="_R-XQkA-5EeijktysABpT4g" target="_oXC8wEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_obJZoEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;Pause&quot;,&quot;To__Pause__236&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__238&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;Active&quot;,&quot;To__Active__235&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Active&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_oXY7AEv9EemPbqxlL8FnXw" name="PME_Trig216" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oXdMcEv9EemPbqxlL8FnXw" name="PME_Trig217" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oXfosEv9EemPbqxlL8FnXw" name="PME_Trig218" port="_Dan-ABNhEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_oXisAEv9EemPbqxlL8FnXw" name="PME_Trig219" event="_nxCFoEv9EemPbqxlL8FnXw" port="_oUNrMEv9EemPbqxlL8FnXw"/>
                <trigger xmi:id="_oXkhMEv9EemPbqxlL8FnXw" name="PME_Trig220" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oXnkgEv9EemPbqxlL8FnXw" name="PME_Trig221" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oXqn0Ev9EemPbqxlL8FnXw" name="PME_Trig222" port="_fwJekBNgEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_oXuSMEv9EemPbqxlL8FnXw" name="PME_Trig223" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oXxVgEv9EemPbqxlL8FnXw" name="PME_Trig224" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_oX0Y0Ev9EemPbqxlL8FnXw" name="From__Pause__225" source="_P908MA-5EeijktysABpT4g" target="_oXC8wEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oaM-cEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;Pause&quot;,&quot;To__Pause__236&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__238&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;Active&quot;,&quot;To__Active__235&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pause&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_oX7tkEv9EemPbqxlL8FnXw" name="PME_Trig226" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oX__AEv9EemPbqxlL8FnXw" name="PME_Trig227" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oYIh4Ev9EemPbqxlL8FnXw" name="PME_Trig228" port="_Dan-ABNhEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_oYP2oEv9EemPbqxlL8FnXw" name="PME_Trig229" event="_nxCFoEv9EemPbqxlL8FnXw" port="_oUNrMEv9EemPbqxlL8FnXw"/>
                <trigger xmi:id="_oYS58Ev9EemPbqxlL8FnXw" name="PME_Trig230" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oYWkUEv9EemPbqxlL8FnXw" name="PME_Trig231" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oYZAkEv9EemPbqxlL8FnXw" name="PME_Trig232" port="_fwJekBNgEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_oYcD4Ev9EemPbqxlL8FnXw" name="PME_Trig233" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oYfuQEv9EemPbqxlL8FnXw" name="PME_Trig234" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_oYw0AEv9EemPbqxlL8FnXw" name="To__Active__235" guard="_obafYUv9EemPbqxlL8FnXw" source="_oXC8wEv9EemPbqxlL8FnXw" target="_R-XQkA-5EeijktysABpT4g">
                <ownedRule xmi:id="_obafYUv9EemPbqxlL8FnXw" name="PME_checkDecesion241">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_obafYEv9EemPbqxlL8FnXw" name="PME_checkDecesion241">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Active__235&quot;,&quot;Active&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_oYw0AUv9EemPbqxlL8FnXw" name="To__Pause__236" guard="_obUYwUv9EemPbqxlL8FnXw" source="_oXC8wEv9EemPbqxlL8FnXw" target="_P908MA-5EeijktysABpT4g">
                <ownedRule xmi:id="_obUYwUv9EemPbqxlL8FnXw" name="PME_checkDecesion239">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_obUYwEv9EemPbqxlL8FnXw" name="PME_checkDecesion239">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Pause__236&quot;,&quot;Pause&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_oY4v0Ev9EemPbqxlL8FnXw" name="From__Parnet__StateMachine__237" source="_oW_SYEv9EemPbqxlL8FnXw" target="_oXC8wEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_obTxsEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__236&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__238&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__235&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_oY5W4Ev9EemPbqxlL8FnXw" name="To__Parent__StateMachine__238" guard="_obZRQUv9EemPbqxlL8FnXw" source="_oXC8wEv9EemPbqxlL8FnXw" target="_oXBHkEv9EemPbqxlL8FnXw">
                <ownedRule xmi:id="_obZRQUv9EemPbqxlL8FnXw" name="PME_checkDecesion240">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_obZRQEv9EemPbqxlL8FnXw" name="PME_checkDecesion240">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__238&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_P908MA-5EeijktysABpT4g" name="Pause"/>
              <subvertex xmi:type="uml:State" xmi:id="_R-XQkA-5EeijktysABpT4g" name="Active"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_UevioA-5EeijktysABpT4g" name="Pseudo183"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_oXC8wEv9EemPbqxlL8FnXw" name="DecesionPoint__209" kind="choice"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_oVv8QEv9EemPbqxlL8FnXw" name="DecesionPoint__187" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_oVxKYEv9EemPbqxlL8FnXw" name="New__State__188"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oUqXIUv9EemPbqxlL8FnXw" name="loadHeap" specification="_oUqXIEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.stopWatchResolution&quot;,this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oUszYUv9EemPbqxlL8FnXw" name="unLoadHeap" specification="_oUszYEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.stopWatchResolution&quot;,&amp;this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oVHqIUv9EemPbqxlL8FnXw" name="sendMessage" specification="_oVHqIEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oVO-4Ev9EemPbqxlL8FnXw" name="sendInternalMessage" specification="_oVOX0Ev9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oVmyUUv9EemPbqxlL8FnXw" name="initForPMD" specification="_oVmyUEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_StopWatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_StopWatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;showCounterTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;timeCountingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForStopWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_oUqXIEv9EemPbqxlL8FnXw" name="loadHeap" visibility="private" method="_oUqXIUv9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_oUszYEv9EemPbqxlL8FnXw" name="unLoadHeap" visibility="private" method="_oUszYUv9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_oVHqIEv9EemPbqxlL8FnXw" name="sendMessage" visibility="private" method="_oVHqIUv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_oVIRMEv9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oVNwwEv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oVOX0Ev9EemPbqxlL8FnXw" name="sendInternalMessage" visibility="private" method="_oVO-4Ev9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_oVQNAEv9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oVRbIEv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oVmyUEv9EemPbqxlL8FnXw" name="initForPMD" visibility="private" method="_oVmyUUv9EemPbqxlL8FnXw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_ZtPkcAquEeiwdpidSbDb2g" name="Display" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_LLt5QArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_xFgrYAquEeiwdpidSbDb2g" name="ButtonsReader" classifierBehavior="_Kab6MA-7EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qHclsAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xB-9sBE6EeiaCPCnhevAQQ" name="readKeyTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oDoRgEv9EemPbqxlL8FnXw" name="dbgPortForButtonsReader" visibility="protected" type="_nwsHYEv9EemPbqxlL8FnXw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_oDoRgUv9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_oDo4kEv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_Kab6MA-7EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_KahZwA-7EeijktysABpT4g" name="Region">
          <transition xmi:id="_liwyYA-7EeijktysABpT4g" name="readButton" source="_bC4TIA-7EeijktysABpT4g" target="_bC4TIA-7EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_NRY38BLWEeiFubQUFHg6OA">
              <language>C++</language>
              <body>    //int r = rand()%4;
    //r = rand()%2+1;33
    //printf(&quot;&quot;);
    struct termios t;
    tcgetattr(STDIN_FILENO, &amp;t);
    t.c_lflag &amp;= ~ICANON;
    tcsetattr(STDIN_FILENO, TCSANOW, &amp;t);
    char key= std::cin.get();
    //printf(&quot;ReadButton: %c\n&quot;,key);
    if (key>='0' &amp;&amp; key &lt;='3' ){
    	buttonsP.ButtonPressed(key).send();
    	//std::cout&lt;&lt;&quot;Key sent to core\n&quot;;
    }

    readKeyTimer.informIn(UMLRTTimespec(0,200000000),0);
</body>
            </effect>
            <trigger xmi:id="_7hu8QBFJEeibZqndpu8erg" port="_xB-9sBE6EeiaCPCnhevAQQ">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_pMgG0BFIEeibZqndpu8erg" name="readInt" source="_bC4TIA-7EeijktysABpT4g" target="_bC4TIA-7EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_rujlABLWEeiFubQUFHg6OA">
              <language>C++</language>
              <body>    //int r = rand()%max;
    //r=r+min;
    int r=0;
    std::cout&lt;&lt;TextToShow;
    std::cin>>r;
    buttonsP.ReadIntResult(r).send();
</body>
            </effect>
            <trigger xmi:id="_qe0YYBFKEeibZqndpu8erg" event="_-anYcBFKEeibZqndpu8erg" port="_qHclsAqxEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_oEwS4Ev9EemPbqxlL8FnXw" name="Trans__Init__State__107108" source="_oEudsEv9EemPbqxlL8FnXw" target="_oEhpYEv9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oE75EEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__107&quot;,&quot;ReadKey&quot;,&quot;To__ReadKey__111&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__107&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_oEyvIEv9EemPbqxlL8FnXw" name="From__ReadKey__109" source="_bC4TIA-7EeijktysABpT4g" target="_oEhpYEv9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oFJ7gEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;ReadKey&quot;,&quot;ReadKey&quot;,&quot;To__ReadKey__111&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;ReadKey&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_oE0kUEv9EemPbqxlL8FnXw" name="PME_Trig110" event="_nxCFoEv9EemPbqxlL8FnXw" port="_oDoRgEv9EemPbqxlL8FnXw"/>
          </transition>
          <transition xmi:id="_oE4OsEv9EemPbqxlL8FnXw" name="To__ReadKey__111" guard="_oFMXwUv9EemPbqxlL8FnXw" source="_oEhpYEv9EemPbqxlL8FnXw" target="_bC4TIA-7EeijktysABpT4g">
            <ownedRule xmi:id="_oFMXwUv9EemPbqxlL8FnXw" name="PME_checkDecesion112">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_oFMXwEv9EemPbqxlL8FnXw" name="PME_checkDecesion112">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__ReadKey__111&quot;,&quot;ReadKey&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:State" xmi:id="_bC4TIA-7EeijktysABpT4g" name="ReadKey"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_oEhpYEv9EemPbqxlL8FnXw" name="DecesionPoint__106" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_oEudsEv9EemPbqxlL8FnXw" name="Init__State__107"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oD9osUv9EemPbqxlL8FnXw" name="loadHeap" specification="_oD9osEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oD-20Uv9EemPbqxlL8FnXw" name="unLoadHeap" specification="_oD-20Ev9EemPbqxlL8FnXw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oEHZsUv9EemPbqxlL8FnXw" name="sendMessage" specification="_oEHZsEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ButtonHold&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonHold( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonPressed&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonPressed().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonReleased&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonReleased( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ReadIntResult&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadIntResult( boost::any_cast&lt;int>(message.payload[&quot;InputInt&quot;])).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oEKdAUv9EemPbqxlL8FnXw" name="sendInternalMessage" specification="_oEKdAEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oEX4YUv9EemPbqxlL8FnXw" name="initForPMD" specification="_oEX4YEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_ButtonsReader::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_ButtonsReader::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;readKeyTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForButtonsReader&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_oD9osEv9EemPbqxlL8FnXw" name="loadHeap" visibility="private" method="_oD9osUv9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_oD-20Ev9EemPbqxlL8FnXw" name="unLoadHeap" visibility="private" method="_oD-20Uv9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_oEHZsEv9EemPbqxlL8FnXw" name="sendMessage" visibility="private" method="_oEHZsUv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_oEIn0Ev9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oEJ18Ev9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oEKdAEv9EemPbqxlL8FnXw" name="sendInternalMessage" visibility="private" method="_oEKdAUv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_oELrIEv9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oEM5QUv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oEX4YEv9EemPbqxlL8FnXw" name="initForPMD" visibility="private" method="_oEX4YUv9EemPbqxlL8FnXw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_5cgykAquEeiwdpidSbDb2g" name="WatchCore" classifierBehavior="_5TyacBNsEeiFubQUFHg6OA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_wsY5YAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_2ASigAreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ppFN4ArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_IaFLAArkEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ka0UEArzEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_CpaG0BgfEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CpeYQBgfEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_n0NVcEv9EemPbqxlL8FnXw" name="dbgPortForWatchCore" visibility="protected" type="_nwsHYEv9EemPbqxlL8FnXw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_n0N8gEv9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_n0N8gUv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_5TyacBNsEeiFubQUFHg6OA" name="StateMachine" isReentrant="false">
        <region xmi:id="_5UK08BNsEeiFubQUFHg6OA" name="Region">
          <transition xmi:id="_5Udv4BNsEeiFubQUFHg6OA" name="Initial" source="_5UPGYBNsEeiFubQUFHg6OA" target="_qc0-gBNyEeiFubQUFHg6OA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_76FHQBNsEeiFubQUFHg6OA">
              <language>C++</language>
              <body>initForPMD();
    displayGateKeeperP.ShowText(0,&quot;WatchCore capsule is started&quot;).send();
</body>
            </effect>
          </transition>
          <transition xmi:id="_7MQsMBRiEeiFubQUFHg6OA" name="adjasuAlarmDone" source="_GFOZ0BRjEeiFubQUFHg6OA" target="_2-cFABUfEeiYy9niOG6dTw"/>
          <transition xmi:id="_n7lv0Ev9EemPbqxlL8FnXw" name="From__New__State__16__17" source="_n7V4MEv9EemPbqxlL8FnXw" target="_n7Tb8Ev9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oDK-gEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__16&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__16&quot;,&quot;New__State__16&quot;,&quot;To__New__State__16__31&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__16&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__34&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__16&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_n7paMEv9EemPbqxlL8FnXw" name="PME_Trig18" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_n7tEkEv9EemPbqxlL8FnXw" name="PME_Trig19" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_n7wH4Ev9EemPbqxlL8FnXw" name="PME_Trig20" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_n71AYEv9EemPbqxlL8FnXw" name="PME_Trig21" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
            <trigger xmi:id="_n77uEEv9EemPbqxlL8FnXw" name="PME_Trig22" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_n8DC0Ev9EemPbqxlL8FnXw" name="PME_Trig23" event="_nxCFoEv9EemPbqxlL8FnXw" port="_n0NVcEv9EemPbqxlL8FnXw"/>
            <trigger xmi:id="_n8QeMEv9EemPbqxlL8FnXw" name="PME_Trig24" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_n8a2QEv9EemPbqxlL8FnXw" name="PME_Trig25" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_n8d5kEv9EemPbqxlL8FnXw" name="PME_Trig26" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_n8jZIEv9EemPbqxlL8FnXw" name="PME_Trig27" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_n8txMEv9EemPbqxlL8FnXw" name="PME_Trig28" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_n827IEv9EemPbqxlL8FnXw" name="PME_Trig29" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_n88asEv9EemPbqxlL8FnXw" name="PME_Trig30" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_n9AsIEv9EemPbqxlL8FnXw" name="To__New__State__16__31" guard="_oDXLwUv9EemPbqxlL8FnXw" source="_n7Tb8Ev9EemPbqxlL8FnXw" target="_n7V4MEv9EemPbqxlL8FnXw">
            <ownedRule xmi:id="_oDXLwUv9EemPbqxlL8FnXw" name="PME_checkDecesion104">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDXLwEv9EemPbqxlL8FnXw" name="PME_checkDecesion104">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__16__31&quot;,&quot;New__State__16&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_n9HZ0Ev9EemPbqxlL8FnXw" name="Trans__Pseudo832" source="_GFOZ0BRjEeiFubQUFHg6OA" target="_n7Tb8Ev9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oDUIcEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;New__State__16&quot;,&quot;To__New__State__16__31&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__34&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_n9PVoEv9EemPbqxlL8FnXw" name="To__Substates__SetAlarm__34" guard="_oDknIUv9EemPbqxlL8FnXw" source="_n7Tb8Ev9EemPbqxlL8FnXw" target="_n9MSUEv9EemPbqxlL8FnXw">
            <ownedRule xmi:id="_oDknIUv9EemPbqxlL8FnXw" name="PME_checkDecesion105">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDknIEv9EemPbqxlL8FnXw" name="PME_checkDecesion105">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__SetAlarm__34&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_n9SY8Ev9EemPbqxlL8FnXw" name="From__Substates__SetAlarm__36" source="_n9QjwEv9EemPbqxlL8FnXw" target="_n7Tb8Ev9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oDE34Ev9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;New__State__16&quot;,&quot;To__New__State__16__31&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__34&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_n-f54Uv9EemPbqxlL8FnXw" name="To__Substates__WorkingMode__61" guard="_oDV9oUv9EemPbqxlL8FnXw" source="_n7Tb8Ev9EemPbqxlL8FnXw" target="_n-erwEv9EemPbqxlL8FnXw">
            <ownedRule xmi:id="_oDV9oUv9EemPbqxlL8FnXw" name="PME_checkDecesion103">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDV9oEv9EemPbqxlL8FnXw" name="PME_checkDecesion103">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__WorkingMode__61&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_n-nOoEv9EemPbqxlL8FnXw" name="From__Substates__WorkingMode__63" source="_n-i9MEv9EemPbqxlL8FnXw" target="_n7Tb8Ev9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oDH7MEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__16&quot;,&quot;To__New__State__16__31&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__34&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5UPGYBNsEeiFubQUFHg6OA" name="Pseudo6"/>
          <subvertex xmi:type="uml:State" xmi:id="_5UY3YBNsEeiFubQUFHg6OA" name="WorkingMode">
            <connectionPoint xmi:id="_qc0-gBNyEeiFubQUFHg6OA" name="mainEn" kind="entryPoint"/>
            <connectionPoint xmi:id="_2-cFABUfEeiYy9niOG6dTw" name="backFromAlarmSet" kind="entryPoint"/>
            <connectionPoint xmi:id="_n-erwEv9EemPbqxlL8FnXw" name="From__Parent__60" kind="entryPoint"/>
            <connectionPoint xmi:id="_n-i9MEv9EemPbqxlL8FnXw" name="To__Parent__62" kind="exitPoint"/>
            <region xmi:id="_qcoxQBNyEeiFubQUFHg6OA" name="Region1">
              <transition xmi:id="_-sDQ4BNyEeiFubQUFHg6OA" name="Pseudo1__WatchMode__10" kind="local" source="_OEEIEBgmEeiSBIpf1RqKYQ" target="_2NyEEBNyEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_y0FDgBXGEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    /// send message to TimeTracker to be activated
	timeTrackerP.Activate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_Q0xw0BNzEeiFubQUFHg6OA" name="btnPressed1" source="_2NyEEBNyEeiFubQUFHg6OA" target="_GT9dcBNzEeiFubQUFHg6OA">
                <trigger xmi:id="_b8GCoBRnEeiFubQUFHg6OA" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_S87wIBNzEeiFubQUFHg6OA" name="ignoreBtn" source="_GT9dcBNzEeiFubQUFHg6OA" target="_2NyEEBNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_me648BWrEeiYy9niOG6dTw">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_me648RWrEeiYy9niOG6dTw">
                    <language>C++</language>
                    <body>    if (ButtonID!=3  &amp;&amp; ButtonID!=0)
    	return true;
    else
    	return false;
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_XGRkEBNzEeiFubQUFHg6OA" name="leaveWatchMode" guard="_Q1zukBXDEeikLqTX9lOhHA" source="_GT9dcBNzEeiFubQUFHg6OA" target="_VhqWsBNzEeiFubQUFHg6OA">
                <ownedRule xmi:id="_Q1zukBXDEeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Q1zukRXDEeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    if (ButtonID=='0' ||  ButtonID=='3')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yVuzQBXJEeio2qtoBBAMvw">
                  <language>C++</language>
                  <body>    // leave watch mode
	timeTrackerP.Deactivate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ZwRFIBNzEeiFubQUFHg6OA" name="goStopWatch" guard="_Da_hgBW-EeikLqTX9lOhHA" source="_VhqWsBNzEeiFubQUFHg6OA" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_Da_hgBW-EeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Da_hgRW-EeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    if (ButtonID=='0')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_4C1AUBXGEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    // activate stopwatch
	stopWatchP.Activate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_M1WfQBRiEeiFubQUFHg6OA" name="keyPressed2" source="_34ui8BNyEeiFubQUFHg6OA" target="_5oJgABRgEeiFubQUFHg6OA">
                <trigger xmi:id="_hoSycBbCEei-ccFu-OwT7Q" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_Tt5EYBRiEeiFubQUFHg6OA" name="ignoreBtn2" source="_5oJgABRgEeiFubQUFHg6OA" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_YAqlABW-EeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_YArMEBW-EeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>ButtonID!=0 &amp;&amp;  ButtonID!=3 </body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KDQf4BXHEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    // do reset and start of the stop watch here 
    #define ButtonID ( *(char *)msg->getParam( 0 ) )
    if (ButtonID=='1')
    stopWatchP.Toggle().send();
    else if (ButtonID=='2')
    stopWatchP.Reset().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_T8G5gBgmEeiSBIpf1RqKYQ" name="backFromAlarmSet__Pseudo1__12" kind="local" source="_2-cFABUfEeiYy9niOG6dTw" target="_OEEIEBgmEeiSBIpf1RqKYQ"/>
              <transition xmi:id="_YOTHcBgmEeiSBIpf1RqKYQ" name="mainEn__Pseudo1__13" kind="local" source="_qc0-gBNyEeiFubQUFHg6OA" target="_OEEIEBgmEeiSBIpf1RqKYQ"/>
              <transition xmi:id="_n-xmsEv9EemPbqxlL8FnXw" name="Trans__Init__State__6566" source="_n-sHIEv9EemPbqxlL8FnXw" target="_n-ocwEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oCxV4Ev9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__65&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__97&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__65&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__96&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__65&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__99&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__65&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_n-14IEv9EemPbqxlL8FnXw" name="67" source="_VhqWsBNzEeiFubQUFHg6OA" target="_n-ocwEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oCY7YEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo2&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__97&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo2&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__96&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo2&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__99&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo2&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_n-2fMEv9EemPbqxlL8FnXw" name="68" source="_GT9dcBNzEeiFubQUFHg6OA" target="_n-ocwEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oCzyIEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo3&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__97&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo3&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__96&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo3&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__99&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo3&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_n-3tUEv9EemPbqxlL8FnXw" name="69" source="_5oJgABRgEeiFubQUFHg6OA" target="_n-ocwEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oCtrgEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo4&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__97&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo4&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__96&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo4&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__99&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo4&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_n-47cEv9EemPbqxlL8FnXw" name="From__StopWatchMode__70" source="_34ui8BNyEeiFubQUFHg6OA" target="_n-ocwEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oCdz4Ev9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__97&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__96&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__99&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_n-6woEv9EemPbqxlL8FnXw" name="PME_Trig71" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n-9M4Ev9EemPbqxlL8FnXw" name="PME_Trig72" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n_A3QEv9EemPbqxlL8FnXw" name="PME_Trig73" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n_EhoEv9EemPbqxlL8FnXw" name="PME_Trig74" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n_L2YEv9EemPbqxlL8FnXw" name="PME_Trig75" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n_TyMEv9EemPbqxlL8FnXw" name="PME_Trig76" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n_djMEv9EemPbqxlL8FnXw" name="PME_Trig77" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n_k38Ev9EemPbqxlL8FnXw" name="PME_Trig78" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n_pJYEv9EemPbqxlL8FnXw" name="PME_Trig79" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n_q-kEv9EemPbqxlL8FnXw" name="PME_Trig80" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n_ta0Ev9EemPbqxlL8FnXw" name="PME_Trig81" event="_nxCFoEv9EemPbqxlL8FnXw" port="_n0NVcEv9EemPbqxlL8FnXw"/>
                <trigger xmi:id="_n_v3EEv9EemPbqxlL8FnXw" name="PME_Trig82" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_n_y6YEv9EemPbqxlL8FnXw" name="From__WatchMode__83" source="_2NyEEBNyEeiFubQUFHg6OA" target="_n-ocwEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oCbXoEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WatchMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__97&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__96&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WatchMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__99&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_oBMokEv9EemPbqxlL8FnXw" name="PME_Trig84" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oBPr4Ev9EemPbqxlL8FnXw" name="PME_Trig85" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oBWZkEv9EemPbqxlL8FnXw" name="PME_Trig86" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oBY10Ev9EemPbqxlL8FnXw" name="PME_Trig87" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oBeVYEv9EemPbqxlL8FnXw" name="PME_Trig88" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oBhYsEv9EemPbqxlL8FnXw" name="PME_Trig89" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oBlqIEv9EemPbqxlL8FnXw" name="PME_Trig90" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oBnfUEv9EemPbqxlL8FnXw" name="PME_Trig91" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oB5zMEv9EemPbqxlL8FnXw" name="PME_Trig92" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oB8PcEv9EemPbqxlL8FnXw" name="PME_Trig93" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oB-EoEv9EemPbqxlL8FnXw" name="PME_Trig94" event="_nxCFoEv9EemPbqxlL8FnXw" port="_n0NVcEv9EemPbqxlL8FnXw"/>
                <trigger xmi:id="_oCGAcEv9EemPbqxlL8FnXw" name="PME_Trig95" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_oCMHEEv9EemPbqxlL8FnXw" name="To__StopWatchMode__96" guard="_oDAmcUv9EemPbqxlL8FnXw" source="_n-ocwEv9EemPbqxlL8FnXw" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_oDAmcUv9EemPbqxlL8FnXw" name="PME_checkDecesion101">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDAmcEv9EemPbqxlL8FnXw" name="PME_checkDecesion101">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__StopWatchMode__96&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_oCSNsEv9EemPbqxlL8FnXw" name="To__WatchMode__97" guard="_oC_YUUv9EemPbqxlL8FnXw" source="_n-ocwEv9EemPbqxlL8FnXw" target="_2NyEEBNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_oC_YUUv9EemPbqxlL8FnXw" name="PME_checkDecesion100">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_oC_YUEv9EemPbqxlL8FnXw" name="PME_checkDecesion100">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__WatchMode__97&quot;,&quot;WatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_oCUp8Ev9EemPbqxlL8FnXw" name="From__Parnet__StateMachine__98" source="_n-erwEv9EemPbqxlL8FnXw" target="_n-ocwEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oCrPQEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__97&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__96&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__99&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_oCVRAEv9EemPbqxlL8FnXw" name="To__Parent__StateMachine__99" guard="_oDB0kUv9EemPbqxlL8FnXw" source="_n-ocwEv9EemPbqxlL8FnXw" target="_n-i9MEv9EemPbqxlL8FnXw">
                <ownedRule xmi:id="_oDB0kUv9EemPbqxlL8FnXw" name="PME_checkDecesion102">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_oDB0kEv9EemPbqxlL8FnXw" name="PME_checkDecesion102">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__99&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_2NyEEBNyEeiFubQUFHg6OA" name="WatchMode"/>
              <subvertex xmi:type="uml:State" xmi:id="_34ui8BNyEeiFubQUFHg6OA" name="StopWatchMode"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_GT9dcBNzEeiFubQUFHg6OA" name="Pseudo3" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_VhqWsBNzEeiFubQUFHg6OA" name="Pseudo2" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_5oJgABRgEeiFubQUFHg6OA" name="Pseudo4" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_OEEIEBgmEeiSBIpf1RqKYQ" name="Pseudo1" kind="junction"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_n-ocwEv9EemPbqxlL8FnXw" name="DecesionPoint__64" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_n-sHIEv9EemPbqxlL8FnXw" name="Init__State__65"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_m0-1cBNvEeiFubQUFHg6OA" name="SetAlarm">
            <connectionPoint xmi:id="_GFOZ0BRjEeiFubQUFHg6OA" name="Pseudo8" kind="exitPoint"/>
            <connectionPoint xmi:id="_bAapABUhEeiYy9niOG6dTw" name="Pseudo5" kind="entryPoint"/>
            <connectionPoint xmi:id="_n9MSUEv9EemPbqxlL8FnXw" name="From__Parent__33" kind="entryPoint"/>
            <connectionPoint xmi:id="_n9QjwEv9EemPbqxlL8FnXw" name="To__Parent__35" kind="exitPoint"/>
            <region xmi:id="_GFF28BRjEeiFubQUFHg6OA" name="Region1">
              <ownedComment xmi:id="_PbsboBghEei-ccFu-OwT7Q"/>
              <transition xmi:id="_TD2MYBRjEeiFubQUFHg6OA" name="readMinResult" source="_HQIGsBRjEeiFubQUFHg6OA" target="_GFOZ0BRjEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_FL2WwBgREei-ccFu-OwT7Q">
                  <language>C++</language>
                  <body>////
	this->alarmMinute=InputInt;
	alarmP.SetAlarm(this->alarmHour,this->alarmMinute,0).send();
	displayGateKeeperP.ShowText(0,&quot;Alarm Is Set&quot;).send();</body>
                </effect>
                <trigger xmi:id="_8FyqUBRkEeiFubQUFHg6OA" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_61UlEBeSEei-ccFu-OwT7Q" name="readMinute__Pseudo7__11" source="_HQIGsBRjEeiFubQUFHg6OA" target="_ttfMIBeSEei-ccFu-OwT7Q">
                <trigger xmi:id="_GnFtgBeUEei-ccFu-OwT7Q" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_-WovsBeSEei-ccFu-OwT7Q" name="Pseudo7__Pseudo8__14" guard="_QFFdEBgEEei-ccFu-OwT7Q" source="_ttfMIBeSEei-ccFu-OwT7Q" target="_GFOZ0BRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_QFFdEBgEEei-ccFu-OwT7Q">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_QFFdERgEEei-ccFu-OwT7Q">
                    <language>C++</language>
                    <body>////
	if (ButtonID!='3')
		return true;
	else
		return false;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_F-QBUBeTEei-ccFu-OwT7Q" name="Pseudo7__readMinute__9" source="_ttfMIBeSEei-ccFu-OwT7Q" target="_HQIGsBRjEeiFubQUFHg6OA"/>
              <transition xmi:id="_n9d_IEv9EemPbqxlL8FnXw" name="Trans__Pseudo539" source="_bAapABUhEeiYy9niOG6dTw" target="_n9TnEEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_n-MX4Ev9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readMinute&quot;,&quot;To__readMinute__55&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__57&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_n9emMEv9EemPbqxlL8FnXw" name="Trans__Init__State__3840" source="_n9ZGoEv9EemPbqxlL8FnXw" target="_n9TnEEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_n-Vh0Ev9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__38&quot;,&quot;readMinute&quot;,&quot;To__readMinute__55&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__38&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__57&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__38&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_n9fNQEv9EemPbqxlL8FnXw" name="Trans__Pseudo841" source="_GFOZ0BRjEeiFubQUFHg6OA" target="_n9TnEEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_n-RQYEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readMinute&quot;,&quot;To__readMinute__55&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__57&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_n9kFwEv9EemPbqxlL8FnXw" name="42" source="_ttfMIBeSEei-ccFu-OwT7Q" target="_n9TnEEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_n-YlIEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo7&quot;,&quot;readMinute&quot;,&quot;To__readMinute__55&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo7&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__57&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo7&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_n9l68Ev9EemPbqxlL8FnXw" name="From__readMinute__43" source="_HQIGsBRjEeiFubQUFHg6OA" target="_n9TnEEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_n-TFkEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;readMinute&quot;,&quot;To__readMinute__55&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__57&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;readMinute&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_n9qMYEv9EemPbqxlL8FnXw" name="PME_Trig44" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n9ud0Ev9EemPbqxlL8FnXw" name="PME_Trig45" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n9yIMEv9EemPbqxlL8FnXw" name="PME_Trig46" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n9z9YEv9EemPbqxlL8FnXw" name="PME_Trig47" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n91LgEv9EemPbqxlL8FnXw" name="PME_Trig48" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n93nwEv9EemPbqxlL8FnXw" name="PME_Trig49" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n96EAEv9EemPbqxlL8FnXw" name="PME_Trig50" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n975MEv9EemPbqxlL8FnXw" name="PME_Trig51" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n99HUEv9EemPbqxlL8FnXw" name="PME_Trig52" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_n9-8gEv9EemPbqxlL8FnXw" name="PME_Trig53" event="_nxCFoEv9EemPbqxlL8FnXw" port="_n0NVcEv9EemPbqxlL8FnXw"/>
                <trigger xmi:id="_n-B_0Ev9EemPbqxlL8FnXw" name="PME_Trig54" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_n-GRQEv9EemPbqxlL8FnXw" name="To__readMinute__55" guard="_n-ZMMUv9EemPbqxlL8FnXw" source="_n9TnEEv9EemPbqxlL8FnXw" target="_HQIGsBRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_n-ZMMUv9EemPbqxlL8FnXw" name="PME_checkDecesion58">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-ZMMEv9EemPbqxlL8FnXw" name="PME_checkDecesion58">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__readMinute__55&quot;,&quot;readMinute&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_n-ItgEv9EemPbqxlL8FnXw" name="From__Parnet__StateMachine__56" source="_n9MSUEv9EemPbqxlL8FnXw" target="_n9TnEEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_n-O0IEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readMinute&quot;,&quot;To__readMinute__55&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__57&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_n-JUkEv9EemPbqxlL8FnXw" name="To__Parent__StateMachine__57" guard="_n-bocUv9EemPbqxlL8FnXw" source="_n9TnEEv9EemPbqxlL8FnXw" target="_n9QjwEv9EemPbqxlL8FnXw">
                <ownedRule xmi:id="_n-bocUv9EemPbqxlL8FnXw" name="PME_checkDecesion59">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_n-bocEv9EemPbqxlL8FnXw" name="PME_checkDecesion59">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__57&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_HQIGsBRjEeiFubQUFHg6OA" name="readMinute"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_ttfMIBeSEei-ccFu-OwT7Q" name="Pseudo7" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_n9TnEEv9EemPbqxlL8FnXw" name="DecesionPoint__37" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_n9ZGoEv9EemPbqxlL8FnXw" name="Init__State__38"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_n7Tb8Ev9EemPbqxlL8FnXw" name="DecesionPoint__15" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_n7V4MEv9EemPbqxlL8FnXw" name="New__State__16"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_n29HcUv9EemPbqxlL8FnXw" name="loadHeap" specification="_n29HcEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_n3HfgEv9EemPbqxlL8FnXw" name="unLoadHeap" specification="_n3G4cEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_n5tggEv9EemPbqxlL8FnXw" name="sendMessage" specification="_n5s5cEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ReadInt&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadInt( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;TextToShow&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;RemAlarm&quot;) {
   if(message.payload.size()==1){
    alarmP.RemAlarm( boost::any_cast&lt;int>(message.payload[&quot;alarmID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;viewAlarmReq&quot;) {
   if(message.payload.size()==0){
    alarmP.viewAlarmReq().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;SetAlarm&quot;) {
   if(message.payload.size()==3){
    alarmP.SetAlarm( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;oneShot&quot;])).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Toggle&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Toggle().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Reset&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Reset().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Deactivate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Resume&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Resume().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Deactivate().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_n6GiEUv9EemPbqxlL8FnXw" name="sendInternalMessage" specification="_n6GiEEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_n7FZgUv9EemPbqxlL8FnXw" name="initForPMD" specification="_n7FZgEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_WatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_WatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_n29HcEv9EemPbqxlL8FnXw" name="loadHeap" visibility="private" method="_n29HcUv9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_n3G4cEv9EemPbqxlL8FnXw" name="unLoadHeap" visibility="private" method="_n3HfgEv9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_n5s5cEv9EemPbqxlL8FnXw" name="sendMessage" visibility="private" method="_n5tggEv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_n5xK4Ev9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_n6DewEv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n6GiEEv9EemPbqxlL8FnXw" name="sendInternalMessage" visibility="private" method="_n6GiEUv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_n6IXQEv9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_n6KzgEv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_n7FZgEv9EemPbqxlL8FnXw" name="initForPMD" visibility="private" method="_n7FZgUv9EemPbqxlL8FnXw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_EUMt0AqvEeiwdpidSbDb2g" name="TimeTracker" classifierBehavior="_f9DS0Ar0EeiwdpidSbDb2g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="__kPLsArjEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_7dRcsArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_-6GrwAryEeiwdpidSbDb2g" name="timeTrackingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_L22PAArzEeiwdpidSbDb2g" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yQcqUAr3EeiwdpidSbDb2g" name="showTimeTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KsSnIBKYEeiBE_x0ZD7_9g" name="clockResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_UKWdABKYEeiBE_x0ZD7_9g" value="500"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_7xV-8BbCEei-ccFu-OwT7Q" name="showTimeTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oOD_4Ev9EemPbqxlL8FnXw" name="dbgPortForTimeTracker" visibility="protected" type="_nwsHYEv9EemPbqxlL8FnXw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_oOEm8Ev9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_oOEm8Uv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_f9DS0Ar0EeiwdpidSbDb2g" name="TimeTrackerSM" isReentrant="false">
        <region xmi:id="_gAJqIAr0EeiwdpidSbDb2g" name="Region">
          <transition xmi:id="_pbEP8Ar1EeiwdpidSbDb2g" name="init " source="_gAMtcAr0EeiwdpidSbDb2g" target="_pbBzsAr1EeiwdpidSbDb2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_0z3DoBKJEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>initForPMD();
displayGateKeeperP.ShowText(0,&quot;TimeTracker capsule is started&quot;).send();
timeTrackingTimer.informEvery(UMLRTTimespec(0,clockResolution*1000000),0);
showTimeTimerID=showTimeTimer.informEvery(UMLRTTimespec(1,0),0);

</body>
            </effect>
          </transition>
          <transition xmi:id="_oRThIEv9EemPbqxlL8FnXw" name="From__New__State__149__150" source="_oRCbYEv9EemPbqxlL8FnXw" target="_oQ870Ev9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oT_owEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__149&quot;,&quot;New__State__149&quot;,&quot;To__New__State__149__158&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__149&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__161&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__149&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_oRWkcEv9EemPbqxlL8FnXw" name="PME_Trig151" event="_nxCFoEv9EemPbqxlL8FnXw" port="_oOD_4Ev9EemPbqxlL8FnXw"/>
            <trigger xmi:id="_oRZAsEv9EemPbqxlL8FnXw" name="PME_Trig152" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_oRj_0Ev9EemPbqxlL8FnXw" name="PME_Trig153" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_oRmcEEv9EemPbqxlL8FnXw" name="PME_Trig154" port="_-6GrwAryEeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_oRrUkEv9EemPbqxlL8FnXw" name="PME_Trig155" port="_yQcqUAr3EeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_oRwNEEv9EemPbqxlL8FnXw" name="PME_Trig156" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_oRz3cEv9EemPbqxlL8FnXw" name="PME_Trig157" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_oR9BYEv9EemPbqxlL8FnXw" name="To__New__State__149__158" guard="_oUKA0Uv9EemPbqxlL8FnXw" source="_oQ870Ev9EemPbqxlL8FnXw" target="_oRCbYEv9EemPbqxlL8FnXw">
            <ownedRule xmi:id="_oUKA0Uv9EemPbqxlL8FnXw" name="PME_checkDecesion178">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_oUKA0Ev9EemPbqxlL8FnXw" name="PME_checkDecesion178">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__149__158&quot;,&quot;New__State__149&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_oR_doEv9EemPbqxlL8FnXw" name="Trans__Pseudo143159" source="_hUNdkAr1EeiwdpidSbDb2g" target="_oQ870Ev9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oUIysEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__149&quot;,&quot;To__New__State__149__158&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__161&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_oSCg8Ev9EemPbqxlL8FnXw" name="To__Substates__TrackingTime__161" guard="_oULO8Uv9EemPbqxlL8FnXw" source="_oQ870Ev9EemPbqxlL8FnXw" target="_oSArwEv9EemPbqxlL8FnXw">
            <ownedRule xmi:id="_oULO8Uv9EemPbqxlL8FnXw" name="PME_checkDecesion179">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_oULO8Ev9EemPbqxlL8FnXw" name="PME_checkDecesion179">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__TrackingTime__161&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_oSGLUUv9EemPbqxlL8FnXw" name="From__Substates__TrackingTime__163" source="_oSDIAEv9EemPbqxlL8FnXw" target="_oQ870Ev9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oUD6MEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__149&quot;,&quot;To__New__State__149__158&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__161&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_gAMtcAr0EeiwdpidSbDb2g" name="Pseudo146"/>
          <subvertex xmi:type="uml:State" xmi:id="_gARl8Ar0EeiwdpidSbDb2g" name="TrackingTime">
            <connectionPoint xmi:id="_hUNdkAr1EeiwdpidSbDb2g" name="Pseudo143" kind="exitPoint"/>
            <connectionPoint xmi:id="_pbBzsAr1EeiwdpidSbDb2g" name="Pseudo144" kind="entryPoint"/>
            <connectionPoint xmi:id="_oSArwEv9EemPbqxlL8FnXw" name="From__Parent__160" kind="entryPoint"/>
            <connectionPoint xmi:id="_oSDIAEv9EemPbqxlL8FnXw" name="To__Parent__162" kind="exitPoint"/>
            <region xmi:id="_BISvsAr1EeiwdpidSbDb2g" name="Region1">
              <transition xmi:id="_PY02EAr1EeiwdpidSbDb2g" name="Pseudo145__Active__147" source="_CEn1EAr1EeiwdpidSbDb2g" target="_DTbxkAr1EeiwdpidSbDb2g"/>
              <transition xmi:id="_RrrNAAr2EeiwdpidSbDb2g" name="ignoreActive" source="_DTbxkAr1EeiwdpidSbDb2g" target="_DTbxkAr1EeiwdpidSbDb2g">
                <trigger xmi:id="_iP6wgAr4EeiwdpidSbDb2g" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_otIWcAr2EeiwdpidSbDb2g" name="showTime" source="_DTbxkAr1EeiwdpidSbDb2g" target="_DTbxkAr1EeiwdpidSbDb2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_XpX0gBKLEeiEEYKmuRZPIg">
                  <language>C++</language>
                  <body>int hour=    milliTime/(1000*60*60);
int minute= milliTime % (1000*60*60) / (1000*60);
int second= milliTime % (1000*60) / 1000;
displayGateKeeperP.ShowTime(hour,minute,second ).send();
</body>
                </effect>
                <trigger xmi:id="_brsOgAr4EeiwdpidSbDb2g" port="_yQcqUAr3EeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:id="_oSQjYEv9EemPbqxlL8FnXw" name="Trans__Pseudo143165" source="_hUNdkAr1EeiwdpidSbDb2g" target="_oSGyYEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oTq4oEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;Active&quot;,&quot;To__Active__173&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__175&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_oSRKcEv9EemPbqxlL8FnXw" name="Trans__Pseudo144166" source="_pbBzsAr1EeiwdpidSbDb2g" target="_oSGyYEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oT1QsEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;Active&quot;,&quot;To__Active__173&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__175&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_oSl6kEv9EemPbqxlL8FnXw" name="From__Active__167" source="_DTbxkAr1EeiwdpidSbDb2g" target="_oSGyYEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oThusEv9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;Active&quot;,&quot;To__Active__173&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__175&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Active&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_oSpk8Ev9EemPbqxlL8FnXw" name="PME_Trig168" event="_nxCFoEv9EemPbqxlL8FnXw" port="_oOD_4Ev9EemPbqxlL8FnXw"/>
                <trigger xmi:id="_oSxgwEv9EemPbqxlL8FnXw" name="PME_Trig169" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oS3nYEv9EemPbqxlL8FnXw" name="PME_Trig170" port="_-6GrwAryEeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_oS9uAEv9EemPbqxlL8FnXw" name="PME_Trig171" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_oTAxUEv9EemPbqxlL8FnXw" name="PME_Trig172" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_oTEbsEv9EemPbqxlL8FnXw" name="To__Active__173" guard="_oT47EUv9EemPbqxlL8FnXw" source="_oSGyYEv9EemPbqxlL8FnXw" target="_DTbxkAr1EeiwdpidSbDb2g">
                <ownedRule xmi:id="_oT47EUv9EemPbqxlL8FnXw" name="PME_checkDecesion176">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT47EEv9EemPbqxlL8FnXw" name="PME_checkDecesion176">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Active__173&quot;,&quot;Active&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_oTPa0Ev9EemPbqxlL8FnXw" name="From__Parnet__TimeTrackerSM__174" source="_oSArwEv9EemPbqxlL8FnXw" target="_oSGyYEv9EemPbqxlL8FnXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oTZy4Ev9EemPbqxlL8FnXw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;Active&quot;,&quot;To__Active__173&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__175&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_oTQo8Ev9EemPbqxlL8FnXw" name="To__Parent__TimeTrackerSM__175" guard="_oT6wQUv9EemPbqxlL8FnXw" source="_oSGyYEv9EemPbqxlL8FnXw" target="_oSDIAEv9EemPbqxlL8FnXw">
                <ownedRule xmi:id="_oT6wQUv9EemPbqxlL8FnXw" name="PME_checkDecesion177">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_oT6wQEv9EemPbqxlL8FnXw" name="PME_checkDecesion177">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__TimeTrackerSM__175&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_CEn1EAr1EeiwdpidSbDb2g" name="Pseudo145"/>
              <subvertex xmi:type="uml:State" xmi:id="_DTbxkAr1EeiwdpidSbDb2g" name="Active"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_oSGyYEv9EemPbqxlL8FnXw" name="DecesionPoint__164" kind="choice"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_oQ870Ev9EemPbqxlL8FnXw" name="DecesionPoint__148" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_oRCbYEv9EemPbqxlL8FnXw" name="New__State__149"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oOdogUv9EemPbqxlL8FnXw" name="loadHeap" specification="_oOdogEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.clockResolution&quot;,this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oOgr0Ev9EemPbqxlL8FnXw" name="unLoadHeap" specification="_oOgEwEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.clockResolution&quot;,&amp;this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oPTWAUv9EemPbqxlL8FnXw" name="sendMessage" specification="_oPTWAEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oPeVIUv9EemPbqxlL8FnXw" name="sendInternalMessage" specification="_oPeVIEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oQzK0Ev9EemPbqxlL8FnXw" name="initForPMD" specification="_oQyjwEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_TimeTracker::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_TimeTracker::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;showTimeTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForTimeTracker&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_oOdogEv9EemPbqxlL8FnXw" name="loadHeap" visibility="private" method="_oOdogUv9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_oOgEwEv9EemPbqxlL8FnXw" name="unLoadHeap" visibility="private" method="_oOgr0Ev9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_oPTWAEv9EemPbqxlL8FnXw" name="sendMessage" visibility="private" method="_oPTWAUv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_oPUkIEv9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oPWZUEv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oPeVIEv9EemPbqxlL8FnXw" name="sendInternalMessage" visibility="private" method="_oPeVIUv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_oPfjQEv9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oPhYcEv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oQyjwEv9EemPbqxlL8FnXw" name="initForPMD" visibility="private" method="_oQzK0Ev9EemPbqxlL8FnXw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_OX25MAqxEeiwdpidSbDb2g" name="ButtonsP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_OXynwAqxEeiwdpidSbDb2g" name="ButtonsP">
        <interfaceRealization xmi:id="_OX_cEAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OX7KoAqxEeiwdpidSbDb2g" contract="_OX7KoAqxEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_OYLCQAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g" contract="_OYH-8AqxEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OX7KoAqxEeiwdpidSbDb2g" name="ButtonsP">
        <ownedOperation xmi:id="_-aZWABFKEeibZqndpu8erg" name="ReadInt">
          <ownedParameter xmi:id="_EERNMBgdEei-ccFu-OwT7Q" name="TextToShow">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYB4UAqxEeiwdpidSbDb2g" name="ButtonsP~">
        <ownedOperation xmi:id="_SXAPUAqxEeiwdpidSbDb2g" name="ButtonPressed">
          <ownedParameter xmi:id="_n9--0AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrus.designer.languages.cpp.library_1.0.4.jar!/models/AnsiCLibrary.uml#_5lVhgBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_XpIQQAqxEeiwdpidSbDb2g" name="ButtonHold">
          <ownedParameter xmi:id="_nYJt4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_cpytwAqxEeiwdpidSbDb2g" name="ButtonReleased">
          <ownedParameter xmi:id="_jp9k4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_nYfEIBFLEeibZqndpu8erg" name="ReadIntResult">
          <ownedParameter xmi:id="_nYfEIRFLEeibZqndpu8erg" name="InputInt">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYGJwAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYB4UAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_OYGw0AqxEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYH-8AqxEeiwdpidSbDb2g" name="ButtonsPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYLpUAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_SXXbsAqxEeiwdpidSbDb2g" operation="_SXAPUAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_XpPlAAqxEeiwdpidSbDb2g" operation="_XpIQQAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_cp40YAqxEeiwdpidSbDb2g" operation="_cpytwAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_-anYcBFKEeibZqndpu8erg" operation="_-aZWABFKEeibZqndpu8erg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_nYhgYBFLEeibZqndpu8erg" operation="_nYfEIBFLEeibZqndpu8erg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_atLzIArdEeiwdpidSbDb2g" name="AlarmP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_atHhsArdEeiwdpidSbDb2g" name="AlarmP">
        <interfaceRealization xmi:id="_atTH4ArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atQEkArdEeiwdpidSbDb2g" contract="_atQEkArdEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_ateHAArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g" contract="_atZ1kArdEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atQEkArdEeiwdpidSbDb2g" name="AlarmP">
        <ownedOperation xmi:id="_de5s0ArdEeiwdpidSbDb2g" name="SetAlarm">
          <ownedParameter xmi:id="_g8GMcArdEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_k_tL0ArdEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_n-OLYArdEeiwdpidSbDb2g" name="oneShot">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_suDXkArdEeiwdpidSbDb2g" name="RemAlarm">
          <ownedParameter xmi:id="_suDXkQrdEeiwdpidSbDb2g" name="alarmID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_0IE5IArdEeiwdpidSbDb2g" name="viewAlarmReq"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atU9EArdEeiwdpidSbDb2g" name="AlarmP~">
        <ownedOperation xmi:id="_d5y8QArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_d5y8QQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_d5zjUQrhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_d50KYArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atYncArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atU9EArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_atZOgArdEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atZ1kArdEeiwdpidSbDb2g" name="AlarmPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atfVIArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_dfgJwArdEeiwdpidSbDb2g" operation="_de5s0ArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_suGa4ArdEeiwdpidSbDb2g" operation="_suDXkArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_0IHVYArdEeiwdpidSbDb2g" operation="_0IE5IArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d5zjUArhEeiwdpidSbDb2g" operation="_d5y8QArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d50KYQrhEeiwdpidSbDb2g" operation="_d5zjUQrhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Viyf8ArfEeiwdpidSbDb2g" name="StopWatchP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Viyf8QrfEeiwdpidSbDb2g" name="StopWatchP">
        <interfaceRealization xmi:id="_Viyf8grfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf9ArfEeiwdpidSbDb2g" contract="_Viyf9ArfEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Viyf8wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g" contract="_ViygAQrfEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf9ArfEeiwdpidSbDb2g" name="StopWatchP">
        <ownedOperation xmi:id="_Viyf9QrfEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Viyf-QrfEeiwdpidSbDb2g" name="Reset"/>
        <ownedOperation xmi:id="_Viyf-wrfEeiwdpidSbDb2g" name="Deactivate"/>
        <ownedOperation xmi:id="_Viyf_ArfEeiwdpidSbDb2g" name="Resume"/>
        <ownedOperation xmi:id="_mM4pQArgEeiwdpidSbDb2g" name="Toggle"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf_grfEeiwdpidSbDb2g" name="StopWatchP~">
        <ownedOperation xmi:id="_RNPKEArhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_WQpZkArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_bGjYkArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_bGjYkQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Viyf_wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf_grfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_ViygAArfEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ViygAQrfEeiwdpidSbDb2g" name="StopWatchPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ViygAgrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygAwrfEeiwdpidSbDb2g" operation="_Viyf9QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBArfEeiwdpidSbDb2g" operation="_Viyf-QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBQrfEeiwdpidSbDb2g" operation="_Viyf-wrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBgrfEeiwdpidSbDb2g" operation="_Viyf_ArfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_mM5QUArgEeiwdpidSbDb2g" operation="_mM4pQArgEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_RNQYMArhEeiwdpidSbDb2g" operation="_RNPKEArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bGjYkgrhEeiwdpidSbDb2g" operation="_bGjYkArhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Lo6JYAriEeiwdpidSbDb2g" name="TimeTrackerP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Lo6JYQriEeiwdpidSbDb2g" name="TimeTrackerP">
        <interfaceRealization xmi:id="_Lo6JYgriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JZAriEeiwdpidSbDb2g" contract="_Lo6JZAriEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Lo6JYwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g" contract="_Lo6JcgriEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JZAriEeiwdpidSbDb2g" name="TimeTrackerP">
        <ownedOperation xmi:id="_Lo6JaQriEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Lo6JagriEeiwdpidSbDb2g" name="Deactivate"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JawriEeiwdpidSbDb2g" name="TimeTrackerP~">
        <ownedOperation xmi:id="_Lo6JbAriEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_Lo6JbQriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Lo6JbgriEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_Lo6JbwriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcAriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JawriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_Lo6JcQriEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JcgriEeiwdpidSbDb2g" name="TimeTrackerPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeAriEeiwdpidSbDb2g" operation="_Lo6JaQriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeQriEeiwdpidSbDb2g" operation="_Lo6JagriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JegriEeiwdpidSbDb2g" operation="_Lo6JbAriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JewriEeiwdpidSbDb2g" operation="_Lo6JbgriEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="__mIMoArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="__mIMoQrkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <interfaceRealization xmi:id="__mIMogrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMpArkEeiwdpidSbDb2g" contract="__mIMpArkEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="__mIMowrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g" contract="__mIMtQrkEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMpArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <ownedOperation xmi:id="__mIMpQrkEeiwdpidSbDb2g" name="ShowTime">
          <ownedParameter xmi:id="__mIMpgrkEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMpwrkEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMqArkEeiwdpidSbDb2g" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqQrkEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="__mIMqgrkEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_SddfAArlEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqwrkEeiwdpidSbDb2g" name="ShowCounter">
          <ownedParameter xmi:id="_gD0nAArlEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xd8cBKIEeiEEYKmuRZPIg" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xt0EBKIEeiEEYKmuRZPIg" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_3cTiABKIEeiEEYKmuRZPIg" name="milli">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMrgrkEeiwdpidSbDb2g" name="DisplayGateKeeperP~">
        <ownedOperation xmi:id="__mIMrwrkEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="__mIMsArkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMsQrkEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="__mIMsgrkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMswrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMrgrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="__mIMtArkEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMtQrkEeiwdpidSbDb2g" name="DisplayGateKeeperPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMtgrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMtwrkEeiwdpidSbDb2g" operation="__mIMpQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuArkEeiwdpidSbDb2g" operation="__mIMqQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuQrkEeiwdpidSbDb2g" operation="__mIMqwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuwrkEeiwdpidSbDb2g" operation="__mIMrwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMvArkEeiwdpidSbDb2g" operation="__mIMsQrkEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_EOr9EAruEeiwdpidSbDb2g" name="DisplayP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_EOqu8AruEeiwdpidSbDb2g" name="DisplayP">
        <interfaceRealization xmi:id="_EOw1kAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOuZUAruEeiwdpidSbDb2g" contract="_EOuZUAruEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_EO5YcAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g" contract="_EO2VIAruEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOuZUAruEeiwdpidSbDb2g" name="DisplayP">
        <ownedOperation xmi:id="_gYfq8ArvEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="_gYfq8QrvEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gYfq8grvEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOyDsAruEeiwdpidSbDb2g" name="DisplayP~"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO1HAAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOyDsAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_EO1uEAruEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EO2VIAruEeiwdpidSbDb2g" name="DisplayPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO6mkAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_gYhgIArvEeiwdpidSbDb2g" operation="_gYfq8ArvEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_nqqX4Ev9EemPbqxlL8FnXw" name="dbgAgent">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_nxD60Ev9EemPbqxlL8FnXw" name="timing" visibility="protected">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_nxGXEEv9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_nxHlMEv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_n0SN8Ev9EemPbqxlL8FnXw" name="dbgPortForWatchCore" visibility="public" type="_nwsHYEv9EemPbqxlL8FnXw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_n0S1AEv9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_n0TcEEv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oDqGsEv9EemPbqxlL8FnXw" name="dbgPortForButtonsReader" visibility="public" type="_nwsHYEv9EemPbqxlL8FnXw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_oDqtwEv9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_oDqtwUv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oFbBQEv9EemPbqxlL8FnXw" name="dbgPortForAlarmsCapsule" visibility="public" type="_nwsHYEv9EemPbqxlL8FnXw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_oFboUEv9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_oFboUUv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oMU6gEv9EemPbqxlL8FnXw" name="dbgPortForDisplayGateKeeper" visibility="public" type="_nwsHYEv9EemPbqxlL8FnXw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_oMWIoEv9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_oMXWwEv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oOHqQEv9EemPbqxlL8FnXw" name="dbgPortForTimeTracker" visibility="public" type="_nwsHYEv9EemPbqxlL8FnXw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_oOIRUEv9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_oOIRUUv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oURVkEv9EemPbqxlL8FnXw" name="dbgPortForStopWatchCore" visibility="public" type="_nwsHYEv9EemPbqxlL8FnXw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_oUSjsEv9EemPbqxlL8FnXw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_oUTKwEv9EemPbqxlL8FnXw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_nwjkgEv9EemPbqxlL8FnXw" name="dbgAgent StateMachine">
        <region xmi:id="_oL4OkEv9EemPbqxlL8FnXw" name="mainRegion">
          <transition xmi:id="_oL-8QEv9EemPbqxlL8FnXw" name="Trans__Init__State__127128" source="_oL8gAEv9EemPbqxlL8FnXw" target="_oL5csEv9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oMLJgEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__127&quot;,&quot;New__State__126&quot;,&quot;To__New__State__126__131&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__127&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_oMB_kEv9EemPbqxlL8FnXw" name="From__New__State__126__129" source="_oL6q0Ev9EemPbqxlL8FnXw" target="_oL5csEv9EemPbqxlL8FnXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_oMM-sEv9EemPbqxlL8FnXw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__126&quot;,&quot;New__State__126&quot;,&quot;To__New__State__126__131&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__126&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_oMD0wEv9EemPbqxlL8FnXw" name="PME_Trig130" port="_nxD60Ev9EemPbqxlL8FnXw">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_oMHfIEv9EemPbqxlL8FnXw" name="To__New__State__126__131" guard="_oMOM0Uv9EemPbqxlL8FnXw" source="_oL5csEv9EemPbqxlL8FnXw" target="_oL6q0Ev9EemPbqxlL8FnXw">
            <ownedRule xmi:id="_oMOM0Uv9EemPbqxlL8FnXw" name="PME_checkDecesion132">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_oMOM0Ev9EemPbqxlL8FnXw" name="PME_checkDecesion132">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__126__131&quot;,&quot;New__State__126&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_oL5csEv9EemPbqxlL8FnXw" name="DecesionPoint__125" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_oL6q0Ev9EemPbqxlL8FnXw" name="New__State__126">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ocJfMEv9EemPbqxlL8FnXw" name="New__State__126">
              <language>C++</language>
              <body>timing.informIn(UMLRTTimespec(1,0));
</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_oL8gAEv9EemPbqxlL8FnXw" name="Init__State__127"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oK8acEv9EemPbqxlL8FnXw" name="loadHeap" specification="_oK7zYEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oK-PoUv9EemPbqxlL8FnXw" name="unLoadHeap" specification="_oK-PoEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oLTm0Uv9EemPbqxlL8FnXw" name="sendMessage" specification="_oLTm0Ev9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;dbgPortForWatchCore&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForWatchCore.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForButtonsReader&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForButtonsReader.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForAlarmsCapsule&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForAlarmsCapsule.dbg().sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oLhpQUv9EemPbqxlL8FnXw" name="sendInternalMessage" specification="_oLhpQEv9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oLxg4Ev9EemPbqxlL8FnXw" name="initForPMD" specification="_oLw50Ev9EemPbqxlL8FnXw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_dbgAgent::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_dbgAgent::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;dbgPortForWatchCore&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForButtonsReader&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForAlarmsCapsule&quot;,&quot;dbg&quot;,{});
 this->execContext.addInputMessages(&quot;timing&quot;,&quot;timeout&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_oK7zYEv9EemPbqxlL8FnXw" name="loadHeap" visibility="private" method="_oK8acEv9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_oK-PoEv9EemPbqxlL8FnXw" name="unLoadHeap" visibility="private" method="_oK-PoUv9EemPbqxlL8FnXw"/>
      <ownedOperation xmi:id="_oLTm0Ev9EemPbqxlL8FnXw" name="sendMessage" visibility="private" method="_oLTm0Uv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_oLU08Ev9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oLWqIEv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oLhpQEv9EemPbqxlL8FnXw" name="sendInternalMessage" visibility="private" method="_oLhpQUv9EemPbqxlL8FnXw">
        <ownedParameter xmi:id="_oLjecEv9EemPbqxlL8FnXw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_oLlToEv9EemPbqxlL8FnXw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_oLw50Ev9EemPbqxlL8FnXw" name="initForPMD" visibility="private" method="_oLxg4Ev9EemPbqxlL8FnXw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_nwprIEv9EemPbqxlL8FnXw" name="dbgProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_nwsHYEv9EemPbqxlL8FnXw" name="dbgProtocol">
        <interfaceRealization xmi:id="_nw9NIEv9EemPbqxlL8FnXw" client="_nwsHYEv9EemPbqxlL8FnXw" supplier="_nwvKsEv9EemPbqxlL8FnXw" contract="_nwvKsEv9EemPbqxlL8FnXw"/>
        <interfaceRealization xmi:id="_nw_CUEv9EemPbqxlL8FnXw" client="_nwsHYEv9EemPbqxlL8FnXw" supplier="_nwwY0Ev9EemPbqxlL8FnXw" contract="_nwwY0Ev9EemPbqxlL8FnXw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_nwvKsEv9EemPbqxlL8FnXw" name="dbgProtocol">
        <ownedOperation xmi:id="_nxA3gEv9EemPbqxlL8FnXw" name="dbg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_nwvxwEv9EemPbqxlL8FnXw" name="dbgProtocol~"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_nwwY0Ev9EemPbqxlL8FnXw" name="dbgProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_nwxm8Ev9EemPbqxlL8FnXw" client="_nwsHYEv9EemPbqxlL8FnXw" supplier="_nwvxwEv9EemPbqxlL8FnXw"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_nwzcIEv9EemPbqxlL8FnXw" client="_nwsHYEv9EemPbqxlL8FnXw" supplier="_nwwY0Ev9EemPbqxlL8FnXw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_nxCFoEv9EemPbqxlL8FnXw" operation="_nxA3gEv9EemPbqxlL8FnXw"/>
    </packagedElement>
    <profileApplication xmi:id="_GN1XswqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.profile_1.0.0.201707181432.jar!/umlProfile/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtQqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtgqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtwqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XuAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.codegen.cpp.profile_1.0.0.201707181457.jar!/profiles/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_pS-gAAqqEeiwdpidSbDb2g" base_Class="_pOYT4AqqEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_WFuLgAqrEeiwdpidSbDb2g" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_DFbqEAquEeiwdpidSbDb2g" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_J0BpAAquEeiwdpidSbDb2g" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_ZtYuYAquEeiwdpidSbDb2g" base_Class="_ZtPkcAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_xFmyAAquEeiwdpidSbDb2g" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_5crxsAquEeiwdpidSbDb2g" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_EUS0cAqvEeiwdpidSbDb2g" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_4mUU8AqvEeiwdpidSbDb2g" base_Property="_4mJV0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_7I7boAqvEeiwdpidSbDb2g" base_Property="_7I3xQAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_-Pye4AqvEeiwdpidSbDb2g" base_Property="_-PuNcAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Dab-0AqwEeiwdpidSbDb2g" base_Property="_DaXtYAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_K2YzAAqwEeiwdpidSbDb2g" base_Property="_K2VIoAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_QJj80AqwEeiwdpidSbDb2g" base_Property="_QJhgkAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Tqpd8AqwEeiwdpidSbDb2g" base_Property="_TqnowAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_OX4uYAqxEeiwdpidSbDb2g" base_Package="_OX25MAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OX9m4AqxEeiwdpidSbDb2g" base_Interface="_OX7KoAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYEUkAqxEeiwdpidSbDb2g" base_Interface="_OYB4UAqxEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYJ0IAqxEeiwdpidSbDb2g" base_Interface="_OYH-8AqxEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_OYM3cAqxEeiwdpidSbDb2g" base_Collaboration="_OXynwAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_qHisUAqxEeiwdpidSbDb2g" base_Port="_qHclsAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_wsb8sAqxEeiwdpidSbDb2g" base_Port="_wsY5YAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_4erJ8AqxEeiwdpidSbDb2g" base_Connector="_4edHgAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_atO2cArdEeiwdpidSbDb2g" base_Package="_atLzIArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atSg0ArdEeiwdpidSbDb2g" base_Interface="_atQEkArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atXZUArdEeiwdpidSbDb2g" base_Interface="_atU9EArdEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_atc44ArdEeiwdpidSbDb2g" base_Interface="_atZ1kArdEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_atgjQArdEeiwdpidSbDb2g" base_Collaboration="_atHhsArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_y_qqIAreEeiwdpidSbDb2g" base_Port="_y_nm0AreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_2AUXsAreEeiwdpidSbDb2g" base_Port="_2ASigAreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_8aUmsAreEeiwdpidSbDb2g" base_Connector="_8aQ8UAreEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_VizuEArfEeiwdpidSbDb2g" base_Package="_Viyf8ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Vi1jQArfEeiwdpidSbDb2g" base_Collaboration="_Viyf8QrfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2KUArfEeiwdpidSbDb2g" base_Interface="_Viyf9ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2xYArfEeiwdpidSbDb2g" base_Interface="_Viyf_grfEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi3_gArfEeiwdpidSbDb2g" base_Interface="_ViygAQrfEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_mHFGwArhEeiwdpidSbDb2g" base_Port="_mHDRkArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ppHqIArhEeiwdpidSbDb2g" base_Port="_ppFN4ArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ws7rIArhEeiwdpidSbDb2g" base_Connector="_ws4AwArhEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_Lo7XgAriEeiwdpidSbDb2g" base_Package="_Lo6JYAriEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Lo7-kAriEeiwdpidSbDb2g" base_Collaboration="_Lo6JYQriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo8loAriEeiwdpidSbDb2g" base_Interface="_Lo6JZAriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsAriEeiwdpidSbDb2g" base_Interface="_Lo6JawriEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsQriEeiwdpidSbDb2g" base_Interface="_Lo6JcgriEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="__kRn8ArjEeiwdpidSbDb2g" base_Port="__kPLsArjEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_IaHnQArkEeiwdpidSbDb2g" base_Port="_IaFLAArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_OI_1oArkEeiwdpidSbDb2g" base_Connector="_OI7kMArkEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="__mKB0ArkEeiwdpidSbDb2g" base_Package="__mIMoArkEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="__mLP8ArkEeiwdpidSbDb2g" base_Collaboration="__mIMoQrkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mMeEArkEeiwdpidSbDb2g" base_Interface="__mIMpArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mNsMArkEeiwdpidSbDb2g" base_Interface="__mIMrgrkEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="__mO6UArkEeiwdpidSbDb2g" base_Interface="__mIMtQrkEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_uB_LAArlEeiwdpidSbDb2g" base_Port="_uB7goArlEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_xFE50ArrEeiwdpidSbDb2g" base_Port="_xE8-AArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_28O6cArrEeiwdpidSbDb2g" base_Port="_28NFQArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_7dT48ArrEeiwdpidSbDb2g" base_Port="_7dRcsArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_-61vwArrEeiwdpidSbDb2g" base_Connector="_-6yscArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ALA-MArsEeiwdpidSbDb2g" base_Connector="_AK-h8ArsEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_A6ZzwArsEeiwdpidSbDb2g" base_Connector="_A6WwcArsEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_EOtyQAruEeiwdpidSbDb2g" base_Package="_EOr9EAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOwOgAruEeiwdpidSbDb2g" base_Interface="_EOuZUAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOz44AruEeiwdpidSbDb2g" base_Interface="_EOyDsAruEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_EO4KUAruEeiwdpidSbDb2g" base_Interface="_EO2VIAruEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_EO7NoAruEeiwdpidSbDb2g" base_Collaboration="_EOqu8AruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_LLyxwArxEeiwdpidSbDb2g" base_Port="_LLt5QArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_L9vzIArxEeiwdpidSbDb2g" base_Port="_L9t98ArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_WMsTYQrxEeiwdpidSbDb2g" base_Connector="_WMp3IArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_-6JIAAryEeiwdpidSbDb2g" isWired="false" base_Port="_-6GrwAryEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ka3XYArzEeiwdpidSbDb2g" base_Port="_ka0UEArzEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_qGzmgQrzEeiwdpidSbDb2g" base_Connector="_qGxKQArzEeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gAPwwAr0EeiwdpidSbDb2g" base_Pseudostate="_gAMtcAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_gATbIAr0EeiwdpidSbDb2g" base_State="_gARl8Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_gAV3YAr0EeiwdpidSbDb2g" base_Region="_gAJqIAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_gAaI0Ar0EeiwdpidSbDb2g" base_StateMachine="_f9DS0Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_BIUk4Ar1EeiwdpidSbDb2g" base_Region="_BISvsAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CErfcAr1EeiwdpidSbDb2g" base_Pseudostate="_CEn1EAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_DTdmwAr1EeiwdpidSbDb2g" base_State="_DTbxkAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_FtbHwAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUQg4Ar1EeiwdpidSbDb2g" base_Pseudostate="_hUNdkAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUUyUAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_pbDo4Ar1EeiwdpidSbDb2g" base_Pseudostate="_pbBzsAr1EeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_yQefgAr3EeiwdpidSbDb2g" isWired="false" base_Port="_yQcqUAr3EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hU-BcA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_hVdJoA-pEeijktysABpT4g" base_State="_hVXqEA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_hVipMA-pEeijktysABpT4g" base_Region="_hUncIA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_hWGp4A-pEeijktysABpT4g" base_StateMachine="_hUDbcA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OK1ngA-sEeijktysABpT4g" base_Pseudostate="_OKx9IA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_OK7uIA-sEeijktysABpT4g" base_State="_OK4DwA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_OK-xcA-sEeijktysABpT4g" base_Region="_OKuSwA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_OLDp8A-sEeijktysABpT4g" base_StateMachine="_OKhecA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_kB4zUA-sEeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_Xb2N8A-uEeijktysABpT4g" isWired="false" base_Port="_XbRmMA-uEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_U9XDMA-3EeijktysABpT4g" base_Pseudostate="_U9Um8A-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_U9b7sA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_U9dw4A-3EeijktysABpT4g" base_Region="_U9SKsA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_U9ipYA-3EeijktysABpT4g" base_StateMachine="_U9KO4A-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_e549wA-3EeijktysABpT4g" base_State="_e52hgA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_O4nAkA-5EeijktysABpT4g" base_Region="_O4jWMA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_P93_gA-5EeijktysABpT4g" base_State="_P908MA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_R-Zs0A-5EeijktysABpT4g" base_State="_R-XQkA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Uez0EA-5EeijktysABpT4g" base_Pseudostate="_UevioA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2izAA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2oSkA-6EeijktysABpT4g" base_Pseudostate="_P2koMA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KalrMA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KarKwA-7EeijktysABpT4g" base_Region="_KahZwA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_Kau1IA-7EeijktysABpT4g" base_StateMachine="_Kab6MA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_bC7WcA-7EeijktysABpT4g" base_State="_bC4TIA-7EeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_xHS7gBE6EeiaCPCnhevAQQ" isWired="false" base_Port="_xB-9sBE6EeiaCPCnhevAQQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_5O9OkBKMEeiEEYKmuRZPIg" headerPreface="#include &lt;iostream>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_WFgwIAqrEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRealTime:RTPort xmi:id="_fwhSABNgEeiFubQUFHg6OA" isWired="false" base_Port="_fwJekBNgEeiFubQUFHg6OA"/>
  <UMLRealTime:RTPort xmi:id="_DarBUBNhEeiFubQUFHg6OA" isWired="false" base_Port="_Dan-ABNhEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gmdUIBNjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5USJsBNsEeiFubQUFHg6OA" base_Pseudostate="_5UPGYBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_5Ub6sBNsEeiFubQUFHg6OA" base_State="_5UY3YBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5Ue-ABNsEeiFubQUFHg6OA" base_Region="_5UK08BNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_5VCXoBNsEeiFubQUFHg6OA" base_StateMachine="_5TyacBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_m1DG4BNvEeiFubQUFHg6OA" base_State="_m0-1cBNvEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_qcuQ0BNyEeiFubQUFHg6OA" base_Region="_qcoxQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qc4o4BNyEeiFubQUFHg6OA" base_Pseudostate="_qc0-gBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qdJuoBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_2N0gUBNyEeiFubQUFHg6OA" base_State="_2NyEEBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_34xmQBNyEeiFubQUFHg6OA" base_State="_34ui8BNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GUGnYBNzEeiFubQUFHg6OA" base_Pseudostate="_GT9dcBNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_VhtaABNzEeiFubQUFHg6OA" base_Pseudostate="_VhqWsBNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5oRb0BRgEeiFubQUFHg6OA" base_Pseudostate="_5oJgABRgEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_PmfKIBRiEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_GFHsIBRjEeiFubQUFHg6OA" base_Region="_GFF28BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GFQ2EBRjEeiFubQUFHg6OA" base_Pseudostate="_GFOZ0BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_G6EXIBRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_HQJU0BRjEeiFubQUFHg6OA" base_State="_HQIGsBRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzA6ABUeEeiYy9niOG6dTw" base_Pseudostate="_wy9PoBUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzRYsBUeEeiYy9niOG6dTw" base_Pseudostate="_wzEkYBUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_2-fvYBUfEeiYy9niOG6dTw" base_Pseudostate="_2-cFABUfEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_bAe6cBUhEeiYy9niOG6dTw" base_Pseudostate="_bAapABUhEeiYy9niOG6dTw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_huQNUBa-Eei-ccFu-OwT7Q" headerPreface="#include &lt;termios.h>&#xA;#include &lt;iostream>&#xA;#include &lt;unistd.h>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_xFgrYAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lMfYBeHEei-ccFu-OwT7Q" base_Pseudostate="_6lDVcBeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lcXABeHEei-ccFu-OwT7Q" base_Pseudostate="_6lSmABeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_smoRwBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tthoYBeSEei-ccFu-OwT7Q" base_Pseudostate="_ttfMIBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OMmZABgmEeiSBIpf1RqKYQ" base_Pseudostate="_OEEIEBgmEeiSBIpf1RqKYQ"/>
  <UMLRealTime:Capsule xmi:id="_nwhIQEv9EemPbqxlL8FnXw" base_Class="_nqqX4Ev9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_nwpEEEv9EemPbqxlL8FnXw" base_StateMachine="_nwjkgEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:ProtocolContainer xmi:id="_nwrgUEv9EemPbqxlL8FnXw" base_Package="_nwprIEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:Protocol xmi:id="_nwujoEv9EemPbqxlL8FnXw" base_Collaboration="_nwsHYEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTMessageSet xmi:id="_nw14YEv9EemPbqxlL8FnXw" base_Interface="_nwvKsEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTMessageSet xmi:id="_nw5iwEv9EemPbqxlL8FnXw" base_Interface="_nwvxwEv9EemPbqxlL8FnXw" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_nw7_AEv9EemPbqxlL8FnXw" base_Interface="_nwwY0Ev9EemPbqxlL8FnXw" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_nxPhAEv9EemPbqxlL8FnXw" base_Port="_nxD60Ev9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTPort xmi:id="_n0PKoEv9EemPbqxlL8FnXw" isWired="false" base_Port="_n0NVcEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTPort xmi:id="_n0VRQEv9EemPbqxlL8FnXw" isPublish="true" isWired="false" base_Port="_n0SN8Ev9EemPbqxlL8FnXw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_n2iQsEv9EemPbqxlL8FnXw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_5cgykAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_n2wTIEv9EemPbqxlL8FnXw" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_n6BCgEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_n5xK4Ev9EemPbqxlL8FnXw"/>
  <RTCppProperties:ParameterProperties xmi:id="_n6KMcEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_n6IXQEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_n7VRIEv9EemPbqxlL8FnXw" base_Pseudostate="_n7Tb8Ev9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTState xmi:id="_n7ZikEv9EemPbqxlL8FnXw" base_State="_n7V4MEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_n9NgcEv9EemPbqxlL8FnXw" base_Pseudostate="_n9MSUEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_n9Rx4Ev9EemPbqxlL8FnXw" base_Pseudostate="_n9QjwEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_n9VcQEv9EemPbqxlL8FnXw" base_Pseudostate="_n9TnEEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_n9a70Ev9EemPbqxlL8FnXw" base_Pseudostate="_n9ZGoEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_n-f54Ev9EemPbqxlL8FnXw" base_Pseudostate="_n-erwEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_n-mAgEv9EemPbqxlL8FnXw" base_Pseudostate="_n-i9MEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_n-q5AEv9EemPbqxlL8FnXw" base_Pseudostate="_n-ocwEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_n-t8UEv9EemPbqxlL8FnXw" base_Pseudostate="_n-sHIEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTPort xmi:id="_oDpfoEv9EemPbqxlL8FnXw" isWired="false" base_Port="_oDoRgEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTPort xmi:id="_oDr74Ev9EemPbqxlL8FnXw" isPublish="true" isWired="false" base_Port="_oDqGsEv9EemPbqxlL8FnXw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_oDwNUEv9EemPbqxlL8FnXw" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_oD8akEv9EemPbqxlL8FnXw" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_oEJO4Ev9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_oEIn0Ev9EemPbqxlL8FnXw"/>
  <RTCppProperties:ParameterProperties xmi:id="_oEM5QEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_oELrIEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oEsBcEv9EemPbqxlL8FnXw" base_Pseudostate="_oEhpYEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oEvEwEv9EemPbqxlL8FnXw" base_Pseudostate="_oEudsEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTPort xmi:id="_oFZMEEv9EemPbqxlL8FnXw" isWired="false" base_Port="_oFWv0Ev9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTPort xmi:id="_oFddgEv9EemPbqxlL8FnXw" isPublish="true" isWired="false" base_Port="_oFbBQEv9EemPbqxlL8FnXw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_oFqR0Ev9EemPbqxlL8FnXw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_DFR5EAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_oF_pAEv9EemPbqxlL8FnXw" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_oHbMYEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_oHYJEEv9EemPbqxlL8FnXw"/>
  <RTCppProperties:ParameterProperties xmi:id="_oHrEAEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_oHpO0Ev9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oJqoEEv9EemPbqxlL8FnXw" base_Pseudostate="_oJqBAEv9EemPbqxlL8FnXw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_oK2T0Ev9EemPbqxlL8FnXw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_nqqX4Ev9EemPbqxlL8FnXw" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_oK5-MEv9EemPbqxlL8FnXw" base_Class="_nqqX4Ev9EemPbqxlL8FnXw"/>
  <RTCppProperties:ParameterProperties xmi:id="_oLWDEEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_oLU08Ev9EemPbqxlL8FnXw"/>
  <RTCppProperties:ParameterProperties xmi:id="_oLkskEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_oLjecEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTRegion xmi:id="_oL41oEv9EemPbqxlL8FnXw" base_Region="_oL4OkEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oL6DwEv9EemPbqxlL8FnXw" base_Pseudostate="_oL5csEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTState xmi:id="_oL7R4Ev9EemPbqxlL8FnXw" base_State="_oL6q0Ev9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oL9uIEv9EemPbqxlL8FnXw" base_Pseudostate="_oL8gAEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTPort xmi:id="_oMTFUEv9EemPbqxlL8FnXw" isWired="false" base_Port="_oMQpEEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTPort xmi:id="_oMaaEEv9EemPbqxlL8FnXw" isPublish="true" isWired="false" base_Port="_oMU6gEv9EemPbqxlL8FnXw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_oMlZMEv9EemPbqxlL8FnXw" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_oMpqoEv9EemPbqxlL8FnXw" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_oNGWkEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_oNFIcEv9EemPbqxlL8FnXw"/>
  <RTCppProperties:ParameterProperties xmi:id="_oNMdMEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_oNLPEEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oNn7AEv9EemPbqxlL8FnXw" base_Pseudostate="_oNms4Ev9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oNqXQEv9EemPbqxlL8FnXw" base_Pseudostate="_oNpJIEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTPort xmi:id="_oOF1EEv9EemPbqxlL8FnXw" isWired="false" base_Port="_oOD_4Ev9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTPort xmi:id="_oOJfcEv9EemPbqxlL8FnXw" isPublish="true" isWired="false" base_Port="_oOHqQEv9EemPbqxlL8FnXw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_oOUekEv9EemPbqxlL8FnXw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_EUMt0AqvEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_oOalMEv9EemPbqxlL8FnXw" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_oPVyQEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_oPUkIEv9EemPbqxlL8FnXw"/>
  <RTCppProperties:ParameterProperties xmi:id="_oPgxYEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_oPfjQEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oRB0UEv9EemPbqxlL8FnXw" base_Pseudostate="_oQ870Ev9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTState xmi:id="_oRMMYEv9EemPbqxlL8FnXw" base_State="_oRCbYEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oSB54Ev9EemPbqxlL8FnXw" base_Pseudostate="_oSArwEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oSGLUEv9EemPbqxlL8FnXw" base_Pseudostate="_oSDIAEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oSLq4Ev9EemPbqxlL8FnXw" base_Pseudostate="_oSGyYEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTPort xmi:id="_oUPgYEv9EemPbqxlL8FnXw" isWired="false" base_Port="_oUNrMEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:RTPort xmi:id="_oUVnAEv9EemPbqxlL8FnXw" isPublish="true" isWired="false" base_Port="_oURVkEv9EemPbqxlL8FnXw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_oUjCYEv9EemPbqxlL8FnXw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_Jz5GIAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_oUn64Ev9EemPbqxlL8FnXw" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_oVL7kEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_oVIRMEv9EemPbqxlL8FnXw"/>
  <RTCppProperties:ParameterProperties xmi:id="_oVQ0EEv9EemPbqxlL8FnXw" type="pmd::Message" base_Parameter="_oVQNAEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oVwjUEv9EemPbqxlL8FnXw" base_Pseudostate="_oVv8QEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTState xmi:id="_oVyYgEv9EemPbqxlL8FnXw" base_State="_oVxKYEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oW_5cEv9EemPbqxlL8FnXw" base_Pseudostate="_oW_SYEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oXCVsEv9EemPbqxlL8FnXw" base_Pseudostate="_oXBHkEv9EemPbqxlL8FnXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_oXEK4Ev9EemPbqxlL8FnXw" base_Pseudostate="_oXC8wEv9EemPbqxlL8FnXw"/>
  <UMLRealTime:CapsulePart xmi:id="_ocCKcEv9EemPbqxlL8FnXw" base_Property="_ocA8UEv9EemPbqxlL8FnXw"/>
</xmi:XMI>
