<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_GN1XsAqpEeiwdpidSbDb2g" name="DigitalWatch">
    <eAnnotations xmi:id="_GN1XsQqpEeiwdpidSbDb2g" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_GN1XsgqpEeiwdpidSbDb2g" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_r_6AUAqqEeiwdpidSbDb2g" source="UMLRT_Default_top">
      <details xmi:id="_r_6nYAqqEeiwdpidSbDb2g" key="top_name" value="DigitalWatch"/>
    </eAnnotations>
    <eAnnotations xmi:id="_kL26cEwYEemMWMC3zTt5AA" source="dummy"/>
    <eAnnotations xmi:id="_DzLLAExcEemlv_r2dATnvQ" source="dummy"/>
    <eAnnotations xmi:id="_9y01gEyEEemF0J0eSPAdMQ" source="dummy"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_pOYT4AqqEeiwdpidSbDb2g" name="DigitalWatch" isActive="true">
      <ownedAttribute xmi:id="_4mJV0AqvEeiwdpidSbDb2g" name="displayGateKeeper" visibility="protected" type="_WFgwIAqrEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_7I3xQAqvEeiwdpidSbDb2g" name="alarmsCapsule" visibility="protected" type="_DFR5EAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_-PuNcAqvEeiwdpidSbDb2g" name="stopWatchController" visibility="protected" type="_Jz5GIAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_DaXtYAqwEeiwdpidSbDb2g" name="display" visibility="protected" type="_ZtPkcAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_K2VIoAqwEeiwdpidSbDb2g" name="buttonsReader" visibility="protected" type="_xFgrYAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_QJhgkAqwEeiwdpidSbDb2g" name="watchCore" visibility="protected" type="_5cgykAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_TqnowAqwEeiwdpidSbDb2g" name="timeTracker" visibility="protected" type="_EUMt0AqvEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_i-N24Ev9EemO-swIV6Fy_Q" name="dbgAgent" type="_h6r9UEv9EemO-swIV6Fy_Q">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_i-PsEEv9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_i-PsEUv9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedConnector xmi:id="_4edHgAqxEeiwdpidSbDb2g" name="RTConnector1">
        <end xmi:id="_4eoGoAqxEeiwdpidSbDb2g" partWithPort="_K2VIoAqwEeiwdpidSbDb2g" role="_qHclsAqxEeiwdpidSbDb2g"/>
        <end xmi:id="_4epUwAqxEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_wsY5YAqxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_8aQ8UAreEeiwdpidSbDb2g" name="RTConnector2">
        <end xmi:id="_8aT_oAreEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_2ASigAreEeiwdpidSbDb2g"/>
        <end xmi:id="_8aT_oQreEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_y_nm0AreEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_ws4AwArhEeiwdpidSbDb2g" name="RTConnector3">
        <end xmi:id="_ws6dAArhEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_mHDRkArhEeiwdpidSbDb2g"/>
        <end xmi:id="_ws7EEArhEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ppFN4ArhEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_OI7kMArkEeiwdpidSbDb2g" name="RTConnector4">
        <end xmi:id="_OI-ngArkEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_IaFLAArkEeiwdpidSbDb2g"/>
        <end xmi:id="_OI_OkArkEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="__kPLsArjEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-6yscArrEeiwdpidSbDb2g" name="RTConnector5">
        <end xmi:id="_-61IsArrEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="_7dRcsArrEeiwdpidSbDb2g"/>
        <end xmi:id="_-61IsQrrEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_AK-h8ArsEeiwdpidSbDb2g" name="RTConnector6">
        <end xmi:id="_ALAXIArsEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_xE8-AArrEeiwdpidSbDb2g"/>
        <end xmi:id="_ALAXIQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_A6WwcArsEeiwdpidSbDb2g" name="RTConnector7">
        <end xmi:id="_A6ZMsArsEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_28NFQArrEeiwdpidSbDb2g"/>
        <end xmi:id="_A6ZMsQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_WMp3IArxEeiwdpidSbDb2g" name="RTConnector8">
        <end xmi:id="_WMrsUArxEeiwdpidSbDb2g" partWithPort="_DaXtYAqwEeiwdpidSbDb2g" role="_LLt5QArxEeiwdpidSbDb2g"/>
        <end xmi:id="_WMsTYArxEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_L9t98ArxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_qGxKQArzEeiwdpidSbDb2g" name="RTConnector9">
        <end xmi:id="_qGy_cArzEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ka0UEArzEeiwdpidSbDb2g"/>
        <end xmi:id="_qGzmgArzEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_WFgwIAqrEeiwdpidSbDb2g" name="DisplayGateKeeper" classifierBehavior="_hUDbcA-pEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uB7goArlEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yMSoQArlEeiwdpidSbDb2g" value="4"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_yNBoEArlEeiwdpidSbDb2g" value="4"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_L9t98ArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_iknEEEv9EemO-swIV6Fy_Q" name="dbgPortForDisplayGateKeeper" visibility="protected" type="_h7oYgEv9EemO-swIV6Fy_Q" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_iknrIEv9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_iknrIUv9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_hUDbcA-pEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_hUncIA-pEeijktysABpT4g" name="Region">
          <transition xmi:id="_hVfl4A-pEeijktysABpT4g" name="Initial" source="_hUybQA-pEeijktysABpT4g" target="_hVXqEA-pEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LUZt0BKJEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>initForPMD();
    std::cout&lt;&lt;&quot;Display is started&quot;&lt;&lt;std::endl;
    //int i=0;
    //std::cin>>i;
</body>
            </effect>
          </transition>
          <transition xmi:id="_u0Ob4A-pEeijktysABpT4g" name="State1__State1__124" source="_hVXqEA-pEeijktysABpT4g" target="_hVXqEA-pEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_9n8aUBKHEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>	std::cout &lt;&lt; std::string( 100, '\n' );
    std::cout&lt;&lt;hour&lt;&lt;&quot;:&quot;&lt;&lt;minute&lt;&lt;&quot;:&quot;&lt;&lt;second&lt;&lt;std::endl;
</body>
            </effect>
            <trigger xmi:id="_AKuNoA-qEeijktysABpT4g" event="__mIMtwrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_zVXr0A-pEeijktysABpT4g" name="State1__State1__122" source="_hVXqEA-pEeijktysABpT4g" target="_hVXqEA-pEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_bW6koBKIEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>    //std::cout&lt;&lt;&quot;new text is recieved\n&quot;;
    //putp( tigetstr( &quot;clear&quot; ) ); 
    std::cout&lt;&lt;text&lt;&lt;std::endl;
</body>
            </effect>
            <trigger xmi:id="_HSdsYA-qEeijktysABpT4g" event="__mIMuArkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_KXN20A-qEeijktysABpT4g" name="State1__State1__123" source="_hVXqEA-pEeijktysABpT4g" target="_hVXqEA-pEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_9muc4BKIEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>std::cout &lt;&lt; std::string( 100, '\n' );
std::cout&lt;&lt;hour&lt;&lt;&quot;:&quot;&lt;&lt;minute&lt;&lt;&quot;:&quot;&lt;&lt;second&lt;&lt;&quot;:&quot;&lt;&lt;milli&lt;&lt;std::endl;
</body>
            </effect>
            <trigger xmi:id="_SrO7cA-qEeijktysABpT4g" event="__mIMuQrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_inyT4Ev9EemO-swIV6Fy_Q" name="From__State1__126" source="_hVXqEA-pEeijktysABpT4g" target="_inTLsEv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_in_IMEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;State1&quot;,&quot;State1&quot;,&quot;To__State1__128&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;State1&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_in3MYEv9EemO-swIV6Fy_Q" name="PME_Trig127" event="_h82ggEv9EemO-swIV6Fy_Q" port="_iknEEEv9EemO-swIV6Fy_Q"/>
          </transition>
          <transition xmi:id="_in7d0Ev9EemO-swIV6Fy_Q" name="To__State1__128" guard="_ioAWUUv9EemO-swIV6Fy_Q" source="_inTLsEv9EemO-swIV6Fy_Q" target="_hVXqEA-pEeijktysABpT4g">
            <ownedRule xmi:id="_ioAWUUv9EemO-swIV6Fy_Q" name="PME_checkDecesion129">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ioAWUEv9EemO-swIV6Fy_Q" name="PME_checkDecesion129">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__State1__128&quot;,&quot;State1&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_hUybQA-pEeijktysABpT4g" name="Pseudo121"/>
          <subvertex xmi:type="uml:State" xmi:id="_hVXqEA-pEeijktysABpT4g" name="State1"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_inTLsEv9EemO-swIV6Fy_Q" name="DecesionPoint__125" kind="choice"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ilRLYUv9EemO-swIV6Fy_Q" name="loadHeap" specification="_ilRLYEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ilTAkUv9EemO-swIV6Fy_Q" name="unLoadHeap" specification="_ilTAkEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_imPbwUv9EemO-swIV6Fy_Q" name="sendMessage" specification="_imPbwEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayP&quot;) {
  if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_imXXkUv9EemO-swIV6Fy_Q" name="sendInternalMessage" specification="_imXXkEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_inL28Uv9EemO-swIV6Fy_Q" name="initForPMD" specification="_inL28Ev9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForDisplayGateKeeper&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_ilRLYEv9EemO-swIV6Fy_Q" name="loadHeap" visibility="private" method="_ilRLYUv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_ilTAkEv9EemO-swIV6Fy_Q" name="unLoadHeap" visibility="private" method="_ilTAkUv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_imPbwEv9EemO-swIV6Fy_Q" name="sendMessage" visibility="private" method="_imPbwUv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_imR4AEv9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_imViYEv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_imXXkEv9EemO-swIV6Fy_Q" name="sendInternalMessage" visibility="private" method="_imXXkUv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_imYlsEv9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_imbpAEv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_inL28Ev9EemO-swIV6Fy_Q" name="initForPMD" visibility="private" method="_inL28Uv9EemO-swIV6Fy_Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_DFR5EAquEeiwdpidSbDb2g" name="AlarmsCapsule" classifierBehavior="_OKhecA-sEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_y_nm0AreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xE8-AArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_XbRmMA-uEeijktysABpT4g" name="alarmTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_nHqHMBgMEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_3pL_0BgMEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_v-uwIBi9EeiSBIpf1RqKYQ" name="alarmTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_iW8bgEv9EemO-swIV6Fy_Q" name="dbgPortForAlarmsCapsule" visibility="protected" type="_h7oYgEv9EemO-swIV6Fy_Q" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_iXHaoEv9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_iXIBsEv9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_OKhecA-sEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_OKuSwA-sEeijktysABpT4g" name="Region">
          <transition xmi:id="_q642AA-tEeijktysABpT4g" name="AlarmMode__AlarmMode__71" source="_kBSWYA-sEeijktysABpT4g" target="_kBSWYA-sEeijktysABpT4g">
            <trigger xmi:id="_xxXJIA-uEeijktysABpT4g" event="_0IHVYArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_22maEA-tEeijktysABpT4g" name="doAlarm" source="_kBSWYA-sEeijktysABpT4g" target="_kBSWYA-sEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_BHpuABjAEeiSBIpf1RqKYQ">
              <language>C++</language>
              <body>/// beep when alram time reached
printf(&quot;\a&quot;);
printf(&quot;\a&quot;);
printf(&quot;\a&quot;);
printf(&quot;\a&quot;);
printf(&quot;\a&quot;);</body>
            </effect>
            <trigger xmi:id="_tEtMwA-uEeijktysABpT4g" port="_XbRmMA-uEeijktysABpT4g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_k5kdwBi2EeiSBIpf1RqKYQ" name="resetAlarm" source="_kBSWYA-sEeijktysABpT4g" target="_kBSWYA-sEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ZpdFUBi_EeiSBIpf1RqKYQ">
              <language>C++</language>
              <body>    /////
	alarmTimer.cancelTimer(alarmTimerID);
    UMLRTTimespec now;
    UMLRTTimespec::getclock(now);
    long millSec=hour*60*60*100 + minute*60*1000;
    alarmTimerID=alarmTimer.informAt(now+UMLRTTimespec(millSec,0));
</body>
            </effect>
            <trigger xmi:id="_2AC2gBi2EeiSBIpf1RqKYQ" event="_dfgJwArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_ianakEv9EemO-swIV6Fy_Q" name="Trans__Pseudo7073" source="_OKx9IA-sEeijktysABpT4g" target="_iags4Ev9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iblD4Ev9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo70&quot;,&quot;AlarmMode&quot;,&quot;To__AlarmMode__79&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo70&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_iawkgEv9EemO-swIV6Fy_Q" name="From__AlarmMode__74" source="_kBSWYA-sEeijktysABpT4g" target="_iags4Ev9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ibinoEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;AlarmMode&quot;,&quot;AlarmMode&quot;,&quot;To__AlarmMode__79&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;AlarmMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_ibEtkEv9EemO-swIV6Fy_Q" name="PME_Trig75" event="_h82ggEv9EemO-swIV6Fy_Q" port="_iW8bgEv9EemO-swIV6Fy_Q"/>
            <trigger xmi:id="_ibJmEEv9EemO-swIV6Fy_Q" name="PME_Trig76" event="_suGa4ArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_ibLbQEv9EemO-swIV6Fy_Q" name="PME_Trig77" event="__mIMuwrkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_ibNQcEv9EemO-swIV6Fy_Q" name="PME_Trig78" event="__mIMvArkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_ibdvIEv9EemO-swIV6Fy_Q" name="To__AlarmMode__79" guard="_ibsYoUv9EemO-swIV6Fy_Q" source="_iags4Ev9EemO-swIV6Fy_Q" target="_kBSWYA-sEeijktysABpT4g">
            <ownedRule xmi:id="_ibsYoUv9EemO-swIV6Fy_Q" name="PME_checkDecesion80">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ibsYoEv9EemO-swIV6Fy_Q" name="PME_checkDecesion80">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__AlarmMode__79&quot;,&quot;AlarmMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_OKx9IA-sEeijktysABpT4g" name="Pseudo70"/>
          <subvertex xmi:type="uml:State" xmi:id="_kBSWYA-sEeijktysABpT4g" name="AlarmMode"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_iags4Ev9EemO-swIV6Fy_Q" name="DecesionPoint__72" kind="choice"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iXsCYUv9EemO-swIV6Fy_Q" name="loadHeap" specification="_iXsCYEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iXueoEv9EemO-swIV6Fy_Q" name="unLoadHeap" specification="_iXt3kEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iYHgMUv9EemO-swIV6Fy_Q" name="sendMessage" specification="_iYHgMEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    alarmP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    alarmP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iYO08Uv9EemO-swIV6Fy_Q" name="sendInternalMessage" specification="_iYO08Ev9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iYt9IUv9EemO-swIV6Fy_Q" name="initForPMD" specification="_iYt9IEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForAlarmsCapsule&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_iXsCYEv9EemO-swIV6Fy_Q" name="loadHeap" visibility="private" method="_iXsCYUv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_iXt3kEv9EemO-swIV6Fy_Q" name="unLoadHeap" visibility="private" method="_iXueoEv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_iYHgMEv9EemO-swIV6Fy_Q" name="sendMessage" visibility="private" method="_iYHgMUv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_iYIuUEv9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_iYLKkEv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_iYO08Ev9EemO-swIV6Fy_Q" name="sendInternalMessage" visibility="private" method="_iYO08Uv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_iYQDEEv9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_iYR4QUv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_iYt9IEv9EemO-swIV6Fy_Q" name="initForPMD" visibility="private" method="_iYt9IUv9EemO-swIV6Fy_Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_Jz5GIAquEeiwdpidSbDb2g" name="StopWatchCore" classifierBehavior="_U9KO4A-3EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_mHDRkArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_28NFQArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_fwJekBNgEeiFubQUFHg6OA" name="showCounterTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Dan-ABNhEeiFubQUFHg6OA" name="timeCountingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2KcBNhEeiFubQUFHg6OA" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2xgBNhEeiFubQUFHg6OA" name="stopWatchResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_OM2xgRNhEeiFubQUFHg6OA" value="200"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_XYKbwBNnEeiFubQUFHg6OA" name="timeCountingTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_dK4oUBNnEeiFubQUFHg6OA" name="showCounterTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_iJ6FEEv9EemO-swIV6Fy_Q" name="dbgPortForStopWatchCore" visibility="protected" type="_h7oYgEv9EemO-swIV6Fy_Q" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_iJ6sIEv9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_iJ76QEv9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_U9KO4A-3EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_U9SKsA-3EeijktysABpT4g" name="Region">
          <transition xmi:id="_U9dJ0A-3EeijktysABpT4g" name="Initial" source="_U9Um8A-3EeijktysABpT4g" target="_U9Y4YA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_rrHbwBNgEeiFubQUFHg6OA">
              <language>C++</language>
              <body>initForPMD();
    displayGateKeeperP.ShowText(0,&quot;StopWatch capsule is started&quot;).send();
    milliTime=0;
</body>
            </effect>
          </transition>
          <transition xmi:id="_1-9b4A-3EeijktysABpT4g" name="stopWatchActivate" source="_U9Y4YA-3EeijktysABpT4g" target="_e52hgA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fmruoBNiEeiFubQUFHg6OA">
              <language>C++</language>
              <body>showCounterTimerID=showCounterTimer.informEvery(UMLRTTimespec(0,50000000),0);</body>
            </effect>
            <trigger xmi:id="_MT8SoBNiEeiFubQUFHg6OA" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_iH0K8A-6EeijktysABpT4g" name="stopWatchDeactivate" source="_wy9PoBUeEeiYy9niOG6dTw" target="_U9Y4YA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JUqWsBNlEeiFubQUFHg6OA">
              <language>C++</language>
              <body> showCounterTimer.cancelTimer(showCounterTimerID);
</body>
            </effect>
            <trigger xmi:id="_YlDe8BNiEeiFubQUFHg6OA" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_gmfJUBNjEeiFubQUFHg6OA" name="countTime2" source="_wzEkYBUeEeiYy9niOG6dTw" target="_P2koMA-6EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_hC2qUBNlEeiFubQUFHg6OA">
              <language>C++</language>
              <body>milliTime=milliTime+stopWatchResolution;</body>
            </effect>
            <trigger xmi:id="_3opdYBNjEeiFubQUFHg6OA" port="_Dan-ABNhEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tgpzYBd5Eei-ccFu-OwT7Q" name="countTime1" source="_U9Y4YA-3EeijktysABpT4g" target="_U9Y4YA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fdIY0Bd6Eei-ccFu-OwT7Q">
              <language>C++</language>
              <body>milliTime=milliTime+stopWatchResolution;</body>
            </effect>
            <trigger xmi:id="_1r-PABd5Eei-ccFu-OwT7Q" port="_Dan-ABNhEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_6lezQBeHEei-ccFu-OwT7Q" name="reset" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_e52hgA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_PYz4QBeIEei-ccFu-OwT7Q">
              <language>C++</language>
              <body>milliTime=0;</body>
            </effect>
            <trigger xmi:id="_Mb5bMBeIEei-ccFu-OwT7Q" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_iQHawEv9EemO-swIV6Fy_Q" name="From__Idle__16" source="_U9Y4YA-3EeijktysABpT4g" target="_iPQfIEv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iWqHoEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Idle&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__31&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Idle&quot;,&quot;Idle&quot;,&quot;To__Idle__25&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Idle&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_iQTA8Ev9EemO-swIV6Fy_Q" name="PME_Trig17" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iQf1QEv9EemO-swIV6Fy_Q" name="PME_Trig18" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iQl74Ev9EemO-swIV6Fy_Q" name="PME_Trig19" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iQvF0Ev9EemO-swIV6Fy_Q" name="PME_Trig20" event="_h82ggEv9EemO-swIV6Fy_Q" port="_iJ6FEEv9EemO-swIV6Fy_Q"/>
            <trigger xmi:id="_iQ76IEv9EemO-swIV6Fy_Q" name="PME_Trig21" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iRGSMEv9EemO-swIV6Fy_Q" name="PME_Trig22" port="_fwJekBNgEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_iROOAEv9EemO-swIV6Fy_Q" name="PME_Trig23" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iRXX8Ev9EemO-swIV6Fy_Q" name="PME_Trig24" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_iRkzUEv9EemO-swIV6Fy_Q" name="To__Idle__25" guard="_iW4KEUv9EemO-swIV6Fy_Q" source="_iPQfIEv9EemO-swIV6Fy_Q" target="_U9Y4YA-3EeijktysABpT4g">
            <ownedRule xmi:id="_iW4KEUv9EemO-swIV6Fy_Q" name="PME_checkDecesion69">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_iW4KEEv9EemO-swIV6Fy_Q" name="PME_checkDecesion69">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Idle__25&quot;,&quot;Idle&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_iSLQQEv9EemO-swIV6Fy_Q" name="Trans__Pseudo726" source="_wzEkYBUeEeiYy9niOG6dTw" target="_iPQfIEv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iWw1UEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__31&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__25&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_iSMeYEv9EemO-swIV6Fy_Q" name="Trans__Pseudo827" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_iPQfIEv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iWSUMEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__31&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__25&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_iSNFcEv9EemO-swIV6Fy_Q" name="Trans__Pseudo928" source="_P2fvsA-6EeijktysABpT4g" target="_iPQfIEv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iW1t0Ev9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__31&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__25&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_iSQIwEv9EemO-swIV6Fy_Q" name="Trans__Pseudo1229" source="_wy9PoBUeEeiYy9niOG6dTw" target="_iPQfIEv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iWZB4Ev9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__31&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__25&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_iSW2cEv9EemO-swIV6Fy_Q" name="To__Substates__StopWatchMode__31" guard="_iW3jAUv9EemO-swIV6Fy_Q" source="_iPQfIEv9EemO-swIV6Fy_Q" target="_iSTMEEv9EemO-swIV6Fy_Q">
            <ownedRule xmi:id="_iW3jAUv9EemO-swIV6Fy_Q" name="PME_checkDecesion68">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_iW3jAEv9EemO-swIV6Fy_Q" name="PME_checkDecesion68">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__StopWatchMode__31&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_iSeyQUv9EemO-swIV6Fy_Q" name="From__Substates__StopWatchMode__33" source="_iSeLMEv9EemO-swIV6Fy_Q" target="_iPQfIEv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iWVXgEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__31&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__25&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_U9Um8A-3EeijktysABpT4g" name="Pseudo11"/>
          <subvertex xmi:type="uml:State" xmi:id="_U9Y4YA-3EeijktysABpT4g" name="Idle"/>
          <subvertex xmi:type="uml:State" xmi:id="_e52hgA-3EeijktysABpT4g" name="StopWatchMode">
            <connectionPoint xmi:id="_P2fvsA-6EeijktysABpT4g" name="Pseudo9" kind="exitPoint"/>
            <connectionPoint xmi:id="_P2koMA-6EeijktysABpT4g" name="Pseudo10" kind="entryPoint"/>
            <connectionPoint xmi:id="_wy9PoBUeEeiYy9niOG6dTw" name="Pseudo12" kind="exitPoint"/>
            <connectionPoint xmi:id="_wzEkYBUeEeiYy9niOG6dTw" name="Pseudo7" kind="exitPoint"/>
            <connectionPoint xmi:id="_6lDVcBeHEei-ccFu-OwT7Q" name="Pseudo8" kind="exitPoint"/>
            <connectionPoint xmi:id="_6lSmABeHEei-ccFu-OwT7Q" name="Pseudo13" kind="entryPoint"/>
            <connectionPoint xmi:id="_iSTMEEv9EemO-swIV6Fy_Q" name="From__Parent__30" kind="entryPoint"/>
            <connectionPoint xmi:id="_iSeLMEv9EemO-swIV6Fy_Q" name="To__Parent__32" kind="exitPoint"/>
            <region xmi:id="_O4jWMA-5EeijktysABpT4g" name="Region1">
              <transition xmi:id="_VjF7kA-5EeijktysABpT4g" name="init" source="_UevioA-5EeijktysABpT4g" target="_P908MA-5EeijktysABpT4g"/>
              <transition xmi:id="_W2EmYA-5EeijktysABpT4g" name="start" source="_P908MA-5EeijktysABpT4g" target="_R-XQkA-5EeijktysABpT4g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_zbNpEBNiEeiFubQUFHg6OA">
                  <language>C++</language>
                  <body>timeCountingTimerID =timeCountingTimer.informEvery(UMLRTTimespec(0,stopWatchResolution*1000000),0);</body>
                </effect>
                <trigger xmi:id="_7buYUBNhEeiFubQUFHg6OA" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_dNliEA-5EeijktysABpT4g" name="pause" source="_R-XQkA-5EeijktysABpT4g" target="_P908MA-5EeijktysABpT4g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_B3qEgBNjEeiFubQUFHg6OA">
                  <language>C++</language>
                  <body>timeCountingTimer.cancelTimer(timeCountingTimerID);
</body>
                </effect>
                <trigger xmi:id="_9-n9cBNiEeiFubQUFHg6OA" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_iSy7UEv9EemO-swIV6Fy_Q" name="Trans__Pseudo735" source="_wzEkYBUeEeiYy9niOG6dTw" target="_iSgAYEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iVwIsEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__64&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__62&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_iSziYEv9EemO-swIV6Fy_Q" name="Trans__Pseudo836" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_iSgAYEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iV5SoEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__64&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__62&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_iS0JcEv9EemO-swIV6Fy_Q" name="Trans__Pseudo937" source="_P2fvsA-6EeijktysABpT4g" target="_iSgAYEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iWERwEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__64&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__62&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_iS0wgEv9EemO-swIV6Fy_Q" name="Trans__Pseudo1038" source="_P2koMA-6EeijktysABpT4g" target="_iSgAYEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iVlwoEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__64&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__62&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_iS4a4Ev9EemO-swIV6Fy_Q" name="Trans__Pseudo1239" source="_wy9PoBUeEeiYy9niOG6dTw" target="_iSgAYEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iVV5AEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__64&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__62&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_iS63IEv9EemO-swIV6Fy_Q" name="Trans__Pseudo1340" source="_6lSmABeHEei-ccFu-OwT7Q" target="_iSgAYEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iVrQMEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__64&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__62&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_iTLV0Ev9EemO-swIV6Fy_Q" name="From__Pause__41" source="_P908MA-5EeijktysABpT4g" target="_iSgAYEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iV_ZQEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;Pause&quot;,&quot;To__Pause__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__64&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;Active&quot;,&quot;To__Active__62&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pause&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_iTSqkEv9EemO-swIV6Fy_Q" name="PME_Trig42" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iTYxMEv9EemO-swIV6Fy_Q" name="PME_Trig43" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iTdpsEv9EemO-swIV6Fy_Q" name="PME_Trig44" port="_Dan-ABNhEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_iTiiMEv9EemO-swIV6Fy_Q" name="PME_Trig45" event="_h82ggEv9EemO-swIV6Fy_Q" port="_iJ6FEEv9EemO-swIV6Fy_Q"/>
                <trigger xmi:id="_iTk-cEv9EemO-swIV6Fy_Q" name="PME_Trig46" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iTpP4Ev9EemO-swIV6Fy_Q" name="PME_Trig47" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iTv9kEv9EemO-swIV6Fy_Q" name="PME_Trig48" port="_fwJekBNgEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_iT6VoEv9EemO-swIV6Fy_Q" name="PME_Trig49" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iUAcQEv9EemO-swIV6Fy_Q" name="PME_Trig50" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_iUKNQEv9EemO-swIV6Fy_Q" name="From__Active__51" source="_R-XQkA-5EeijktysABpT4g" target="_iSgAYEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iVLg8Ev9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;Pause&quot;,&quot;To__Pause__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__64&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;Active&quot;,&quot;To__Active__62&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Active&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_iUN3oEv9EemO-swIV6Fy_Q" name="PME_Trig52" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iUSJEEv9EemO-swIV6Fy_Q" name="PME_Trig53" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iUinwEv9EemO-swIV6Fy_Q" name="PME_Trig54" port="_Dan-ABNhEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_iUoHUEv9EemO-swIV6Fy_Q" name="PME_Trig55" event="_h82ggEv9EemO-swIV6Fy_Q" port="_iJ6FEEv9EemO-swIV6Fy_Q"/>
                <trigger xmi:id="_iUsYwEv9EemO-swIV6Fy_Q" name="PME_Trig56" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iUu1AEv9EemO-swIV6Fy_Q" name="PME_Trig57" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iUztgEv9EemO-swIV6Fy_Q" name="PME_Trig58" port="_fwJekBNgEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_iU3-8Ev9EemO-swIV6Fy_Q" name="PME_Trig59" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iU9egEv9EemO-swIV6Fy_Q" name="PME_Trig60" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_iVBv8Ev9EemO-swIV6Fy_Q" name="To__Pause__61" guard="_iWIjMUv9EemO-swIV6Fy_Q" source="_iSgAYEv9EemO-swIV6Fy_Q" target="_P908MA-5EeijktysABpT4g">
                <ownedRule xmi:id="_iWIjMUv9EemO-swIV6Fy_Q" name="PME_checkDecesion65">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_iWIjMEv9EemO-swIV6Fy_Q" name="PME_checkDecesion65">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Pause__61&quot;,&quot;Pause&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_iVC-EEv9EemO-swIV6Fy_Q" name="To__Active__62" guard="_iWMNkUv9EemO-swIV6Fy_Q" source="_iSgAYEv9EemO-swIV6Fy_Q" target="_R-XQkA-5EeijktysABpT4g">
                <ownedRule xmi:id="_iWMNkUv9EemO-swIV6Fy_Q" name="PME_checkDecesion67">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_iWMNkEv9EemO-swIV6Fy_Q" name="PME_checkDecesion67">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Active__62&quot;,&quot;Active&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_iVH2kEv9EemO-swIV6Fy_Q" name="From__Parnet__StateMachine__63" source="_iSTMEEv9EemO-swIV6Fy_Q" target="_iSgAYEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iVfC8Ev9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__61&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__64&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__62&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_iVIdoEv9EemO-swIV6Fy_Q" name="To__Parent__StateMachine__64" guard="_iWLmgUv9EemO-swIV6Fy_Q" source="_iSgAYEv9EemO-swIV6Fy_Q" target="_iSeLMEv9EemO-swIV6Fy_Q">
                <ownedRule xmi:id="_iWLmgUv9EemO-swIV6Fy_Q" name="PME_checkDecesion66">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_iWLmgEv9EemO-swIV6Fy_Q" name="PME_checkDecesion66">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__64&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_P908MA-5EeijktysABpT4g" name="Pause"/>
              <subvertex xmi:type="uml:State" xmi:id="_R-XQkA-5EeijktysABpT4g" name="Active"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_UevioA-5EeijktysABpT4g" name="Pseudo14"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_iSgAYEv9EemO-swIV6Fy_Q" name="DecesionPoint__34" kind="choice"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_iPQfIEv9EemO-swIV6Fy_Q" name="DecesionPoint__15" kind="choice"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iL96kUv9EemO-swIV6Fy_Q" name="loadHeap" specification="_iL96kEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.stopWatchResolution&quot;,this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iMAW0Uv9EemO-swIV6Fy_Q" name="unLoadHeap" specification="_iMAW0Ev9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.stopWatchResolution&quot;,&amp;this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iNZd8Uv9EemO-swIV6Fy_Q" name="sendMessage" specification="_iNZd8Ev9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iOBwEEv9EemO-swIV6Fy_Q" name="sendInternalMessage" specification="_iOBJAEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iO1BUEv9EemO-swIV6Fy_Q" name="initForPMD" specification="_iO0aQEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_StopWatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_StopWatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;showCounterTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;timeCountingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForStopWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_iL96kEv9EemO-swIV6Fy_Q" name="loadHeap" visibility="private" method="_iL96kUv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_iMAW0Ev9EemO-swIV6Fy_Q" name="unLoadHeap" visibility="private" method="_iMAW0Uv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_iNZd8Ev9EemO-swIV6Fy_Q" name="sendMessage" visibility="private" method="_iNZd8Uv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_iN6bUEv9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_iN-swEv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_iOBJAEv9EemO-swIV6Fy_Q" name="sendInternalMessage" visibility="private" method="_iOBwEEv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_iOC-MEv9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_iOEMUUv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_iO0aQEv9EemO-swIV6Fy_Q" name="initForPMD" visibility="private" method="_iO1BUEv9EemO-swIV6Fy_Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_ZtPkcAquEeiwdpidSbDb2g" name="Display" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_LLt5QArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_xFgrYAquEeiwdpidSbDb2g" name="ButtonsReader" classifierBehavior="_Kab6MA-7EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qHclsAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xB-9sBE6EeiaCPCnhevAQQ" name="readKeyTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_iD2gYEv9EemO-swIV6Fy_Q" name="dbgPortForButtonsReader" visibility="protected" type="_h7oYgEv9EemO-swIV6Fy_Q" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_iD3HcEv9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_iD3ugEv9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_Kab6MA-7EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_KahZwA-7EeijktysABpT4g" name="Region">
          <transition xmi:id="_KaqjsA-7EeijktysABpT4g" name="Initial" source="_Kaj2AA-7EeijktysABpT4g" target="_bC4TIA-7EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ktv3UBKmEeiBE_x0ZD7_9g">
              <language>C++</language>
              <body>initForPMD();
    srand(time(NULL));   // should only be called once
    //int r = rand()%3; 
    readKeyTimer.informIn(UMLRTTimespec(1,0),0);
    printf(&quot;ButtonReader capsule is started\n&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_liwyYA-7EeijktysABpT4g" name="readButton" source="_bC4TIA-7EeijktysABpT4g" target="_bC4TIA-7EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_NRY38BLWEeiFubQUFHg6OA">
              <language>C++</language>
              <body>    //int r = rand()%4;
    //r = rand()%2+1;33
    //printf(&quot;&quot;);
    struct termios t;
    tcgetattr(STDIN_FILENO, &amp;t);
    t.c_lflag &amp;= ~ICANON;
    tcsetattr(STDIN_FILENO, TCSANOW, &amp;t);
    char key= std::cin.get();
    //printf(&quot;ReadButton: %c\n&quot;,key);
    if (key>='0' &amp;&amp; key &lt;='3' ){
    	buttonsP.ButtonPressed(key).send();
    	//std::cout&lt;&lt;&quot;Key sent to core\n&quot;;
    }

    readKeyTimer.informIn(UMLRTTimespec(0,200000000),0);
</body>
            </effect>
            <trigger xmi:id="_7hu8QBFJEeibZqndpu8erg" port="_xB-9sBE6EeiaCPCnhevAQQ">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_pMgG0BFIEeibZqndpu8erg" name="readInt" source="_bC4TIA-7EeijktysABpT4g" target="_bC4TIA-7EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_rujlABLWEeiFubQUFHg6OA">
              <language>C++</language>
              <body>    //int r = rand()%max;
    //r=r+min;
    int r=0;
    std::cout&lt;&lt;TextToShow;
    std::cin>>r;
    buttonsP.ReadIntResult(r).send();
</body>
            </effect>
            <trigger xmi:id="_qe0YYBFKEeibZqndpu8erg" event="_-anYcBFKEeibZqndpu8erg" port="_qHclsAqxEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_iISUcEv9EemO-swIV6Fy_Q" name="From__ReadKey__3" source="_bC4TIA-7EeijktysABpT4g" target="_iIJKgEv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iJue4Ev9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;ReadKey&quot;,&quot;ReadKey&quot;,&quot;To__ReadKey__5&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;ReadKey&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_iJToIEv9EemO-swIV6Fy_Q" name="PME_Trig4" event="_h82ggEv9EemO-swIV6Fy_Q" port="_iD2gYEv9EemO-swIV6Fy_Q"/>
          </transition>
          <transition xmi:id="_iJl8AEv9EemO-swIV6Fy_Q" name="To__ReadKey__5" guard="_iJwUEEv9EemO-swIV6Fy_Q" source="_iIJKgEv9EemO-swIV6Fy_Q" target="_bC4TIA-7EeijktysABpT4g">
            <ownedRule xmi:id="_iJwUEEv9EemO-swIV6Fy_Q" name="PME_checkDecesion6">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_iJvtAEv9EemO-swIV6Fy_Q" name="PME_checkDecesion6">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__ReadKey__5&quot;,&quot;ReadKey&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Kaj2AA-7EeijktysABpT4g" name="Pseudo1"/>
          <subvertex xmi:type="uml:State" xmi:id="_bC4TIA-7EeijktysABpT4g" name="ReadKey"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_iIJKgEv9EemO-swIV6Fy_Q" name="DecesionPoint__2" kind="choice"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iE_v4Uv9EemO-swIV6Fy_Q" name="loadHeap" specification="_iE_v4Ev9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iFI50Uv9EemO-swIV6Fy_Q" name="unLoadHeap" specification="_iFI50Ev9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iGCRsEv9EemO-swIV6Fy_Q" name="sendMessage" specification="_iGBqoEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ButtonHold&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonHold( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonPressed&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonPressed().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonReleased&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonReleased( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ReadIntResult&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadIntResult( boost::any_cast&lt;int>(message.payload[&quot;InputInt&quot;])).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iGY3AUv9EemO-swIV6Fy_Q" name="sendInternalMessage" specification="_iGY3AEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iHWgUUv9EemO-swIV6Fy_Q" name="initForPMD" specification="_iHWgUEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_ButtonsReader::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_ButtonsReader::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;readKeyTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForButtonsReader&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_iE_v4Ev9EemO-swIV6Fy_Q" name="loadHeap" visibility="private" method="_iE_v4Uv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_iFI50Ev9EemO-swIV6Fy_Q" name="unLoadHeap" visibility="private" method="_iFI50Uv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_iGBqoEv9EemO-swIV6Fy_Q" name="sendMessage" visibility="private" method="_iGCRsEv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_iGFVAEv9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_iGPtEEv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_iGY3AEv9EemO-swIV6Fy_Q" name="sendInternalMessage" visibility="private" method="_iGY3AUv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_iGfksEv9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_iGjPEEv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_iHWgUEv9EemO-swIV6Fy_Q" name="initForPMD" visibility="private" method="_iHWgUUv9EemO-swIV6Fy_Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_5cgykAquEeiwdpidSbDb2g" name="WatchCore" classifierBehavior="_5TyacBNsEeiFubQUFHg6OA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_wsY5YAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_2ASigAreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ppFN4ArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_IaFLAArkEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ka0UEArzEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_CpaG0BgfEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CpeYQBgfEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ioWUkEv9EemO-swIV6Fy_Q" name="dbgPortForWatchCore" visibility="protected" type="_h7oYgEv9EemO-swIV6Fy_Q" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ioW7oEv9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_ioW7oUv9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_5TyacBNsEeiFubQUFHg6OA" name="StateMachine" isReentrant="false">
        <region xmi:id="_5UK08BNsEeiFubQUFHg6OA" name="Region">
          <transition xmi:id="_5Udv4BNsEeiFubQUFHg6OA" name="Initial" source="_5UPGYBNsEeiFubQUFHg6OA" target="_qc0-gBNyEeiFubQUFHg6OA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_76FHQBNsEeiFubQUFHg6OA">
              <language>C++</language>
              <body>initForPMD();
    displayGateKeeperP.ShowText(0,&quot;WatchCore capsule is started&quot;).send();
</body>
            </effect>
          </transition>
          <transition xmi:id="_3D6aoBW-EeikLqTX9lOhHA" name="adjustAlarm" source="_qdGEQBNyEeiFubQUFHg6OA" target="_bAapABUhEeiYy9niOG6dTw"/>
          <transition xmi:id="_it-bcEv9EemO-swIV6Fy_Q" name="From__New__State__147__148" source="_ityOMEv9EemO-swIV6Fy_Q" target="_itwZAEv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i7ZzcEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__147&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__164&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__147&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__206&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__147&quot;,&quot;New__State__147&quot;,&quot;To__New__State__147__162&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__147&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_iuA3sEv9EemO-swIV6Fy_Q" name="PME_Trig149" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iuFJIEv9EemO-swIV6Fy_Q" name="PME_Trig150" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iuKosEv9EemO-swIV6Fy_Q" name="PME_Trig151" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iuPhMEv9EemO-swIV6Fy_Q" name="PME_Trig152" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iuTLkEv9EemO-swIV6Fy_Q" name="PME_Trig153" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iuW18Ev9EemO-swIV6Fy_Q" name="PME_Trig154" event="_h82ggEv9EemO-swIV6Fy_Q" port="_ioWUkEv9EemO-swIV6Fy_Q"/>
            <trigger xmi:id="_iueKsEv9EemO-swIV6Fy_Q" name="PME_Trig155" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iuhOAEv9EemO-swIV6Fy_Q" name="PME_Trig156" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iuoiwEv9EemO-swIV6Fy_Q" name="PME_Trig157" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iuq_AEv9EemO-swIV6Fy_Q" name="PME_Trig158" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iuv3gEv9EemO-swIV6Fy_Q" name="PME_Trig159" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iuzh4Ev9EemO-swIV6Fy_Q" name="PME_Trig160" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_iu8EwEv9EemO-swIV6Fy_Q" name="PME_Trig161" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_iu_vIEv9EemO-swIV6Fy_Q" name="To__New__State__147__162" guard="_i7eE4Uv9EemO-swIV6Fy_Q" source="_itwZAEv9EemO-swIV6Fy_Q" target="_ityOMEv9EemO-swIV6Fy_Q">
            <ownedRule xmi:id="_i7eE4Uv9EemO-swIV6Fy_Q" name="PME_checkDecesion252">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_i7eE4Ev9EemO-swIV6Fy_Q" name="PME_checkDecesion252">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__147__162&quot;,&quot;New__State__147&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_ivF1wUv9EemO-swIV6Fy_Q" name="To__Substates__SetAlarm__164" guard="_i7booUv9EemO-swIV6Fy_Q" source="_itwZAEv9EemO-swIV6Fy_Q" target="_ivEnoEv9EemO-swIV6Fy_Q">
            <ownedRule xmi:id="_i7booUv9EemO-swIV6Fy_Q" name="PME_checkDecesion250">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_i7booEv9EemO-swIV6Fy_Q" name="PME_checkDecesion250">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__SetAlarm__164&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_ivKHMEv9EemO-swIV6Fy_Q" name="From__Substates__SetAlarm__166" source="_ivGc0Ev9EemO-swIV6Fy_Q" target="_itwZAEv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i7WJEEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__164&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__206&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;New__State__147&quot;,&quot;To__New__State__147__162&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_i1wecEv9EemO-swIV6Fy_Q" name="Trans__keyPressEx204" source="_qdGEQBNyEeiFubQUFHg6OA" target="_itwZAEv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i7FqYEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__164&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__206&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__147&quot;,&quot;To__New__State__147__162&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_i1-g4Uv9EemO-swIV6Fy_Q" name="To__Substates__WorkingMode__206" guard="_i7c2wUv9EemO-swIV6Fy_Q" source="_itwZAEv9EemO-swIV6Fy_Q" target="_i1950Ev9EemO-swIV6Fy_Q">
            <ownedRule xmi:id="_i7c2wUv9EemO-swIV6Fy_Q" name="PME_checkDecesion251">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_i7c2wEv9EemO-swIV6Fy_Q" name="PME_checkDecesion251">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__WorkingMode__206&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_i2I48Ev9EemO-swIV6Fy_Q" name="From__Substates__WorkingMode__208" source="_i1_H8Ev9EemO-swIV6Fy_Q" target="_itwZAEv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i7MYEEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__164&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__206&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__147&quot;,&quot;To__New__State__147__162&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5UPGYBNsEeiFubQUFHg6OA" name="Pseudo133"/>
          <subvertex xmi:type="uml:State" xmi:id="_5UY3YBNsEeiFubQUFHg6OA" name="WorkingMode">
            <connectionPoint xmi:id="_qc0-gBNyEeiFubQUFHg6OA" name="mainEn" kind="entryPoint"/>
            <connectionPoint xmi:id="_qdGEQBNyEeiFubQUFHg6OA" name="keyPressEx" kind="exitPoint"/>
            <connectionPoint xmi:id="_2-cFABUfEeiYy9niOG6dTw" name="backFromAlarmSet" kind="entryPoint"/>
            <connectionPoint xmi:id="_i1950Ev9EemO-swIV6Fy_Q" name="From__Parent__205" kind="entryPoint"/>
            <connectionPoint xmi:id="_i1_H8Ev9EemO-swIV6Fy_Q" name="To__Parent__207" kind="exitPoint"/>
            <region xmi:id="_qcoxQBNyEeiFubQUFHg6OA" name="Region1">
              <transition xmi:id="_-sDQ4BNyEeiFubQUFHg6OA" name="Pseudo131__WatchMode__145" kind="local" source="_OEEIEBgmEeiSBIpf1RqKYQ" target="_2NyEEBNyEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_y0FDgBXGEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    /// send message to TimeTracker to be activated
	timeTrackerP.Activate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_Q0xw0BNzEeiFubQUFHg6OA" name="btnPressed1" source="_2NyEEBNyEeiFubQUFHg6OA" target="_GT9dcBNzEeiFubQUFHg6OA">
                <trigger xmi:id="_b8GCoBRnEeiFubQUFHg6OA" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_S87wIBNzEeiFubQUFHg6OA" name="ignoreBtn" source="_GT9dcBNzEeiFubQUFHg6OA" target="_2NyEEBNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_me648BWrEeiYy9niOG6dTw">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_me648RWrEeiYy9niOG6dTw">
                    <language>C++</language>
                    <body>    if (ButtonID!=3  &amp;&amp; ButtonID!=0)
    	return true;
    else
    	return false;
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_XGRkEBNzEeiFubQUFHg6OA" name="leaveWatchMode" guard="_Q1zukBXDEeikLqTX9lOhHA" source="_GT9dcBNzEeiFubQUFHg6OA" target="_VhqWsBNzEeiFubQUFHg6OA">
                <ownedRule xmi:id="_Q1zukBXDEeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Q1zukRXDEeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    if (ButtonID=='0' ||  ButtonID=='3')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yVuzQBXJEeio2qtoBBAMvw">
                  <language>C++</language>
                  <body>    // leave watch mode
	timeTrackerP.Deactivate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ZwRFIBNzEeiFubQUFHg6OA" name="goStopWatch" guard="_Da_hgBW-EeikLqTX9lOhHA" source="_VhqWsBNzEeiFubQUFHg6OA" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_Da_hgBW-EeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Da_hgRW-EeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    if (ButtonID=='0')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_4C1AUBXGEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    // activate stopwatch
	stopWatchP.Activate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_aosh8BNzEeiFubQUFHg6OA" name="alarmSet1" source="_VhqWsBNzEeiFubQUFHg6OA" target="_qdGEQBNyEeiFubQUFHg6OA"/>
              <transition xmi:id="_M1WfQBRiEeiFubQUFHg6OA" name="keyPressed2" source="_34ui8BNyEeiFubQUFHg6OA" target="_5oJgABRgEeiFubQUFHg6OA">
                <trigger xmi:id="_hoSycBbCEei-ccFu-OwT7Q" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_SBFkUBRiEeiFubQUFHg6OA" name="leaveStopWatchMode" guard="_b-PbkBXDEeikLqTX9lOhHA" source="_5oJgABRgEeiFubQUFHg6OA" target="_PmcG0BRiEeiFubQUFHg6OA">
                <ownedRule xmi:id="_b-PbkBXDEeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_b-PbkRXDEeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    #define ButtonID ( *(char *)msg->getParam( 0 ) )
    if (ButtonID=='0' ||  ButtonID=='3')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ZfyNYBXJEeio2qtoBBAMvw">
                  <language>C++</language>
                  <body>    // leave stopwatch mode
	stopWatchP.Deactivate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_Tt5EYBRiEeiFubQUFHg6OA" name="ignoreBtn2" source="_5oJgABRgEeiFubQUFHg6OA" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_YAqlABW-EeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_YArMEBW-EeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>ButtonID!=0 &amp;&amp;  ButtonID!=3 </body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KDQf4BXHEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    // do reset and start of the stop watch here 
    #define ButtonID ( *(char *)msg->getParam( 0 ) )
    if (ButtonID=='1')
    stopWatchP.Toggle().send();
    else if (ButtonID=='2')
    stopWatchP.Reset().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_WEr8oBRiEeiFubQUFHg6OA" name="backWatchMode" guard="_nhGNABW-EeikLqTX9lOhHA" source="_PmcG0BRiEeiFubQUFHg6OA" target="_2NyEEBNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_nhGNABW-EeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_nhGNARW-EeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    #define ButtonID ( *(char *)msg->getParam( 0 ) )
    if (ButtonID=='0')
    return true;
    else 
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cibfABXJEeio2qtoBBAMvw">
                  <language>C++</language>
                  <body>    // go to watch mode
	timeTrackerP.Activate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_bwAgsBRiEeiFubQUFHg6OA" name="alarmSet2" source="_PmcG0BRiEeiFubQUFHg6OA" target="_qdGEQBNyEeiFubQUFHg6OA"/>
              <transition xmi:id="_T8G5gBgmEeiSBIpf1RqKYQ" name="backFromAlarmSet__Pseudo131__140" kind="local" source="_2-cFABUfEeiYy9niOG6dTw" target="_OEEIEBgmEeiSBIpf1RqKYQ"/>
              <transition xmi:id="_YOTHcBgmEeiSBIpf1RqKYQ" name="mainEn__Pseudo131__142" kind="local" source="_qc0-gBNyEeiFubQUFHg6OA" target="_OEEIEBgmEeiSBIpf1RqKYQ"/>
              <transition xmi:id="_i2tgsEv9EemO-swIV6Fy_Q" name="Trans__Init__State__210211" source="_i2ihkEv9EemO-swIV6Fy_Q" target="_i2KHEEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i675YEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__210&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__243&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__210&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__246&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__210&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__244&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__210&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_i2uu0Ev9EemO-swIV6Fy_Q" name="Trans__keyPressEx212" source="_qdGEQBNyEeiFubQUFHg6OA" target="_i2KHEEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i6miMEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__243&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__246&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__244&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_i201cEv9EemO-swIV6Fy_Q" name="213" source="_PmcG0BRiEeiFubQUFHg6OA" target="_i2KHEEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i6d_UEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo136&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__243&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo136&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__246&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo136&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__244&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo136&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_i21cgEv9EemO-swIV6Fy_Q" name="214" source="_GT9dcBNzEeiFubQUFHg6OA" target="_i2KHEEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i6RyEEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo132&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__243&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo132&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__246&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo132&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__244&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo132&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_i23RsEv9EemO-swIV6Fy_Q" name="215" source="_VhqWsBNzEeiFubQUFHg6OA" target="_i2KHEEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i6so0Ev9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo134&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__243&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo134&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__246&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo134&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__244&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo134&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_i234wEv9EemO-swIV6Fy_Q" name="216" source="_5oJgABRgEeiFubQUFHg6OA" target="_i2KHEEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i63n8Ev9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo135&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__243&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo135&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__246&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo135&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__244&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo135&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_i25G4Ev9EemO-swIV6Fy_Q" name="From__StopWatchMode__217" source="_34ui8BNyEeiFubQUFHg6OA" target="_i2KHEEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i6hpsEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__243&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__246&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__244&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_i28KMEv9EemO-swIV6Fy_Q" name="PME_Trig218" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i3m4kEv9EemO-swIV6Fy_Q" name="PME_Trig219" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i3rxEEv9EemO-swIV6Fy_Q" name="PME_Trig220" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i3wpkEv9EemO-swIV6Fy_Q" name="PME_Trig221" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i34lYEv9EemO-swIV6Fy_Q" name="PME_Trig222" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i39d4Ev9EemO-swIV6Fy_Q" name="PME_Trig223" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i4MHYEv9EemO-swIV6Fy_Q" name="PME_Trig224" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i4PKsEv9EemO-swIV6Fy_Q" name="PME_Trig225" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i4UDMEv9EemO-swIV6Fy_Q" name="PME_Trig226" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i4XGgEv9EemO-swIV6Fy_Q" name="PME_Trig227" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i4issEv9EemO-swIV6Fy_Q" name="PME_Trig228" event="_h82ggEv9EemO-swIV6Fy_Q" port="_ioWUkEv9EemO-swIV6Fy_Q"/>
                <trigger xmi:id="_i4oMQEv9EemO-swIV6Fy_Q" name="PME_Trig229" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_i4rPkEv9EemO-swIV6Fy_Q" name="From__WatchMode__230" source="_2NyEEBNyEeiFubQUFHg6OA" target="_i2KHEEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i6ZG0Ev9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__243&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WatchMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__246&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WatchMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__244&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_i4tr0Ev9EemO-swIV6Fy_Q" name="PME_Trig231" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i4x9QEv9EemO-swIV6Fy_Q" name="PME_Trig232" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i44D4Ev9EemO-swIV6Fy_Q" name="PME_Trig233" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i4_YoEv9EemO-swIV6Fy_Q" name="PME_Trig234" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i5NbEEv9EemO-swIV6Fy_Q" name="PME_Trig235" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i5dSsEv9EemO-swIV6Fy_Q" name="PME_Trig236" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i5iLMEv9EemO-swIV6Fy_Q" name="PME_Trig237" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i5lOgEv9EemO-swIV6Fy_Q" name="PME_Trig238" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i5pf8Ev9EemO-swIV6Fy_Q" name="PME_Trig239" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i5txYEv9EemO-swIV6Fy_Q" name="PME_Trig240" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_i5yC0Ev9EemO-swIV6Fy_Q" name="PME_Trig241" event="_h82ggEv9EemO-swIV6Fy_Q" port="_ioWUkEv9EemO-swIV6Fy_Q"/>
                <trigger xmi:id="_i527UEv9EemO-swIV6Fy_Q" name="PME_Trig242" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_i59pAEv9EemO-swIV6Fy_Q" name="To__StopWatchMode__243" guard="_i69ukUv9EemO-swIV6Fy_Q" source="_i2KHEEv9EemO-swIV6Fy_Q" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_i69ukUv9EemO-swIV6Fy_Q" name="PME_checkDecesion247">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_i69ukEv9EemO-swIV6Fy_Q" name="PME_checkDecesion247">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__StopWatchMode__243&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_i5-QEEv9EemO-swIV6Fy_Q" name="To__WatchMode__244" guard="_i7Ax4Uv9EemO-swIV6Fy_Q" source="_i2KHEEv9EemO-swIV6Fy_Q" target="_2NyEEBNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_i7Ax4Uv9EemO-swIV6Fy_Q" name="PME_checkDecesion249">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_i7Ax4Ev9EemO-swIV6Fy_Q" name="PME_checkDecesion249">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__WatchMode__244&quot;,&quot;WatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_i6B6cEv9EemO-swIV6Fy_Q" name="From__Parnet__StateMachine__245" source="_i1950Ev9EemO-swIV6Fy_Q" target="_i2KHEEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i6zWgEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__243&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__246&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__244&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_i6ChgEv9EemO-swIV6Fy_Q" name="To__Parent__StateMachine__246" guard="_i6-8sUv9EemO-swIV6Fy_Q" source="_i2KHEEv9EemO-swIV6Fy_Q" target="_i1_H8Ev9EemO-swIV6Fy_Q">
                <ownedRule xmi:id="_i6-8sUv9EemO-swIV6Fy_Q" name="PME_checkDecesion248">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_i6-8sEv9EemO-swIV6Fy_Q" name="PME_checkDecesion248">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__246&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_2NyEEBNyEeiFubQUFHg6OA" name="WatchMode"/>
              <subvertex xmi:type="uml:State" xmi:id="_34ui8BNyEeiFubQUFHg6OA" name="StopWatchMode"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_GT9dcBNzEeiFubQUFHg6OA" name="Pseudo132" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_VhqWsBNzEeiFubQUFHg6OA" name="Pseudo134" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_5oJgABRgEeiFubQUFHg6OA" name="Pseudo135" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_PmcG0BRiEeiFubQUFHg6OA" name="Pseudo136" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_OEEIEBgmEeiSBIpf1RqKYQ" name="Pseudo131" kind="junction"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_i2KHEEv9EemO-swIV6Fy_Q" name="DecesionPoint__209" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_i2ihkEv9EemO-swIV6Fy_Q" name="Init__State__210"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_m0-1cBNvEeiFubQUFHg6OA" name="SetAlarm">
            <connectionPoint xmi:id="_bAapABUhEeiYy9niOG6dTw" name="Pseudo138" kind="entryPoint"/>
            <connectionPoint xmi:id="_ivEnoEv9EemO-swIV6Fy_Q" name="From__Parent__163" kind="entryPoint"/>
            <connectionPoint xmi:id="_ivGc0Ev9EemO-swIV6Fy_Q" name="To__Parent__165" kind="exitPoint"/>
            <region xmi:id="_GFF28BRjEeiFubQUFHg6OA" name="Region1">
              <ownedComment xmi:id="_PbsboBghEei-ccFu-OwT7Q"/>
              <transition xmi:id="_L6OeUBRjEeiFubQUFHg6OA" name="readHourResult" source="_G6Ch8BRjEeiFubQUFHg6OA" target="_HQIGsBRjEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_AByssBgREei-ccFu-OwT7Q">
                  <language>C++</language>
                  <body>    ////
    this->alarmHour=InputInt;
    buttonsP.ReadInt(&quot;Enter Minute: &quot;).send();

</body>
                </effect>
                <trigger xmi:id="_v232YBRkEeiFubQUFHg6OA" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_b18i0BUhEeiYy9niOG6dTw" name="initSetAlarm" kind="local" source="_bAapABUhEeiYy9niOG6dTw" target="_G6Ch8BRjEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_8zI_YBgQEei-ccFu-OwT7Q">
                  <language>C++</language>
                  <body>    ////
    buttonsP.ReadInt(&quot;Enter Hour: &quot;).send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_y76_4BeSEei-ccFu-OwT7Q" name="readHour__Pseudo137__139" source="_G6Ch8BRjEeiFubQUFHg6OA" target="_smhkEBeSEei-ccFu-OwT7Q">
                <trigger xmi:id="_A-higBeUEei-ccFu-OwT7Q" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_61UlEBeSEei-ccFu-OwT7Q" name="readMinute__Pseudo130__141" source="_HQIGsBRjEeiFubQUFHg6OA" target="_ttfMIBeSEei-ccFu-OwT7Q">
                <trigger xmi:id="_GnFtgBeUEei-ccFu-OwT7Q" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_DwyrQBeTEei-ccFu-OwT7Q" name="Pseudo137__readHour__143" source="_smhkEBeSEei-ccFu-OwT7Q" target="_G6Ch8BRjEeiFubQUFHg6OA"/>
              <transition xmi:id="_F-QBUBeTEei-ccFu-OwT7Q" name="Pseudo130__readMinute__144" source="_ttfMIBeSEei-ccFu-OwT7Q" target="_HQIGsBRjEeiFubQUFHg6OA"/>
              <transition xmi:id="_ivW7gEv9EemO-swIV6Fy_Q" name="Trans__Init__State__168169" source="_ivQ04Ev9EemO-swIV6Fy_Q" target="_ivNKgEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i0X-YEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__168&quot;,&quot;readMinute&quot;,&quot;To__readMinute__197&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__168&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__200&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__168&quot;,&quot;readHour&quot;,&quot;To__readHour__198&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__168&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ivmzIEv9EemO-swIV6Fy_Q" name="170" source="_ttfMIBeSEei-ccFu-OwT7Q" target="_ivNKgEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i1VAoEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo130&quot;,&quot;readMinute&quot;,&quot;To__readMinute__197&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo130&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__200&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo130&quot;,&quot;readHour&quot;,&quot;To__readHour__198&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo130&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ivmzIUv9EemO-swIV6Fy_Q" name="171" source="_smhkEBeSEei-ccFu-OwT7Q" target="_ivNKgEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i0M_QEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo137&quot;,&quot;readMinute&quot;,&quot;To__readMinute__197&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo137&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__200&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo137&quot;,&quot;readHour&quot;,&quot;To__readHour__198&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo137&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ivooUEv9EemO-swIV6Fy_Q" name="From__readMinute__172" source="_HQIGsBRjEeiFubQUFHg6OA" target="_ivNKgEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i1fYsEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;readMinute&quot;,&quot;To__readMinute__197&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__200&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;readHour&quot;,&quot;To__readHour__198&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;readMinute&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_ivqdgEv9EemO-swIV6Fy_Q" name="PME_Trig173" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ivuH4Ev9EemO-swIV6Fy_Q" name="PME_Trig174" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iv4f8Ev9EemO-swIV6Fy_Q" name="PME_Trig175" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iv7jQEv9EemO-swIV6Fy_Q" name="PME_Trig176" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iwEGIEv9EemO-swIV6Fy_Q" name="PME_Trig177" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iwHJcEv9EemO-swIV6Fy_Q" name="PME_Trig178" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iwMB8Ev9EemO-swIV6Fy_Q" name="PME_Trig179" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iwRhgEv9EemO-swIV6Fy_Q" name="PME_Trig180" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iwYPMEv9EemO-swIV6Fy_Q" name="PME_Trig181" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iwarcEv9EemO-swIV6Fy_Q" name="PME_Trig182" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iwlqkEv9EemO-swIV6Fy_Q" name="PME_Trig183" event="_h82ggEv9EemO-swIV6Fy_Q" port="_ioWUkEv9EemO-swIV6Fy_Q"/>
                <trigger xmi:id="_iwxQwEv9EemO-swIV6Fy_Q" name="PME_Trig184" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_iyDqMEv9EemO-swIV6Fy_Q" name="From__readHour__185" source="_G6Ch8BRjEeiFubQUFHg6OA" target="_ivNKgEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i0mA0Ev9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;readMinute&quot;,&quot;To__readMinute__197&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__200&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;readHour&quot;,&quot;To__readHour__198&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;readHour&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_iyHUkEv9EemO-swIV6Fy_Q" name="PME_Trig186" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iyXzQEv9EemO-swIV6Fy_Q" name="PME_Trig187" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iybdoEv9EemO-swIV6Fy_Q" name="PME_Trig188" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iytKcEv9EemO-swIV6Fy_Q" name="PME_Trig189" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iyyqAEv9EemO-swIV6Fy_Q" name="PME_Trig190" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iy1tUEv9EemO-swIV6Fy_Q" name="PME_Trig191" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iy8bAEv9EemO-swIV6Fy_Q" name="PME_Trig192" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_izDvwEv9EemO-swIV6Fy_Q" name="PME_Trig193" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_iza8IEv9EemO-swIV6Fy_Q" name="PME_Trig194" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_izktIEv9EemO-swIV6Fy_Q" name="PME_Trig195" event="_h82ggEv9EemO-swIV6Fy_Q" port="_ioWUkEv9EemO-swIV6Fy_Q"/>
                <trigger xmi:id="_iznJYEv9EemO-swIV6Fy_Q" name="PME_Trig196" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_iz4PIEv9EemO-swIV6Fy_Q" name="To__readMinute__197" guard="_i1gm0Uv9EemO-swIV6Fy_Q" source="_ivNKgEv9EemO-swIV6Fy_Q" target="_HQIGsBRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_i1gm0Uv9EemO-swIV6Fy_Q" name="PME_checkDecesion201">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_i1gm0Ev9EemO-swIV6Fy_Q" name="PME_checkDecesion201">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__readMinute__197&quot;,&quot;readMinute&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_iz42MEv9EemO-swIV6Fy_Q" name="To__readHour__198" guard="_i1mGYUv9EemO-swIV6Fy_Q" source="_ivNKgEv9EemO-swIV6Fy_Q" target="_G6Ch8BRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_i1mGYUv9EemO-swIV6Fy_Q" name="PME_checkDecesion203">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_i1mGYEv9EemO-swIV6Fy_Q" name="PME_checkDecesion203">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__readHour__198&quot;,&quot;readHour&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_i0BZEEv9EemO-swIV6Fy_Q" name="From__Parnet__StateMachine__199" source="_ivEnoEv9EemO-swIV6Fy_Q" target="_ivNKgEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i0dd8Ev9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readMinute&quot;,&quot;To__readMinute__197&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__200&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readHour&quot;,&quot;To__readHour__198&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_i0CAIEv9EemO-swIV6Fy_Q" name="To__Parent__StateMachine__200" guard="_i1jDEUv9EemO-swIV6Fy_Q" source="_ivNKgEv9EemO-swIV6Fy_Q" target="_ivGc0Ev9EemO-swIV6Fy_Q">
                <ownedRule xmi:id="_i1jDEUv9EemO-swIV6Fy_Q" name="PME_checkDecesion202">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_i1jDEEv9EemO-swIV6Fy_Q" name="PME_checkDecesion202">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__200&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_G6Ch8BRjEeiFubQUFHg6OA" name="readHour"/>
              <subvertex xmi:type="uml:State" xmi:id="_HQIGsBRjEeiFubQUFHg6OA" name="readMinute"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_smhkEBeSEei-ccFu-OwT7Q" name="Pseudo137" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_ttfMIBeSEei-ccFu-OwT7Q" name="Pseudo130" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_ivNKgEv9EemO-swIV6Fy_Q" name="DecesionPoint__167" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_ivQ04Ev9EemO-swIV6Fy_Q" name="Init__State__168"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_itwZAEv9EemO-swIV6Fy_Q" name="DecesionPoint__146" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ityOMEv9EemO-swIV6Fy_Q" name="New__State__147"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ipJl0Uv9EemO-swIV6Fy_Q" name="loadHeap" specification="_ipJl0Ev9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ipjOcEv9EemO-swIV6Fy_Q" name="unLoadHeap" specification="_ipgLIEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_iq88oUv9EemO-swIV6Fy_Q" name="sendMessage" specification="_iq88oEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ReadInt&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadInt( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;TextToShow&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;RemAlarm&quot;) {
   if(message.payload.size()==1){
    alarmP.RemAlarm( boost::any_cast&lt;int>(message.payload[&quot;alarmID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;viewAlarmReq&quot;) {
   if(message.payload.size()==0){
    alarmP.viewAlarmReq().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;SetAlarm&quot;) {
   if(message.payload.size()==3){
    alarmP.SetAlarm( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;oneShot&quot;])).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Toggle&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Toggle().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Reset&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Reset().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Deactivate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Resume&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Resume().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Deactivate().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_irDDQUv9EemO-swIV6Fy_Q" name="sendInternalMessage" specification="_irDDQEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ist3MUv9EemO-swIV6Fy_Q" name="initForPMD" specification="_ist3MEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_WatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_WatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_ipJl0Ev9EemO-swIV6Fy_Q" name="loadHeap" visibility="private" method="_ipJl0Uv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_ipgLIEv9EemO-swIV6Fy_Q" name="unLoadHeap" visibility="private" method="_ipjOcEv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_iq88oEv9EemO-swIV6Fy_Q" name="sendMessage" visibility="private" method="_iq88oUv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_iq__8Ev9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_irBOEEv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_irDDQEv9EemO-swIV6Fy_Q" name="sendInternalMessage" visibility="private" method="_irDDQUv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_irERYEv9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_irGGkEv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ist3MEv9EemO-swIV6Fy_Q" name="initForPMD" visibility="private" method="_ist3MUv9EemO-swIV6Fy_Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_EUMt0AqvEeiwdpidSbDb2g" name="TimeTracker" classifierBehavior="_f9DS0Ar0EeiwdpidSbDb2g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="__kPLsArjEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_7dRcsArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_-6GrwAryEeiwdpidSbDb2g" name="timeTrackingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_L22PAArzEeiwdpidSbDb2g" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yQcqUAr3EeiwdpidSbDb2g" name="showTimeTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KsSnIBKYEeiBE_x0ZD7_9g" name="clockResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_UKWdABKYEeiBE_x0ZD7_9g" value="500"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_7xV-8BbCEei-ccFu-OwT7Q" name="showTimeTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ibu04Ev9EemO-swIV6Fy_Q" name="dbgPortForTimeTracker" visibility="protected" type="_h7oYgEv9EemO-swIV6Fy_Q" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ibvb8Ev9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_ibvb8Uv9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_f9DS0Ar0EeiwdpidSbDb2g" name="TimeTrackerSM" isReentrant="false">
        <region xmi:id="_gAJqIAr0EeiwdpidSbDb2g" name="Region">
          <transition xmi:id="_hUWAcAr1EeiwdpidSbDb2g" name="updateTime" source="_hUNdkAr1EeiwdpidSbDb2g" target="_hUSWEAr1EeiwdpidSbDb2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ZSxQsBKKEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>milliTime= milliTime+clockResolution;
</body>
            </effect>
            <trigger xmi:id="_8R-qkAsAEeiwdpidSbDb2g" port="_-6GrwAryEeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_pbEP8Ar1EeiwdpidSbDb2g" name="init " source="_gAMtcAr0EeiwdpidSbDb2g" target="_pbBzsAr1EeiwdpidSbDb2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_0z3DoBKJEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>initForPMD();
displayGateKeeperP.ShowText(0,&quot;TimeTracker capsule is started&quot;).send();
timeTrackingTimer.informEvery(UMLRTTimespec(0,clockResolution*1000000),0);
showTimeTimerID=showTimeTimer.informEvery(UMLRTTimespec(1,0),0);

</body>
            </effect>
          </transition>
          <transition xmi:id="_ifZz8Ev9EemO-swIV6Fy_Q" name="From__New__State__87__88" source="_ie1MMEv9EemO-swIV6Fy_Q" target="_ieyv8Ev9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ikRs4Ev9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__87&quot;,&quot;New__State__87&quot;,&quot;To__New__State__87__96&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__87&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__99&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__87&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_iffTgEv9EemO-swIV6Fy_Q" name="PME_Trig89" event="_h82ggEv9EemO-swIV6Fy_Q" port="_ibu04Ev9EemO-swIV6Fy_Q"/>
            <trigger xmi:id="_ifi94Ev9EemO-swIV6Fy_Q" name="PME_Trig90" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_ifnPUEv9EemO-swIV6Fy_Q" name="PME_Trig91" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_ifq5sEv9EemO-swIV6Fy_Q" name="PME_Trig92" port="_-6GrwAryEeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_ifvLIEv9EemO-swIV6Fy_Q" name="PME_Trig93" port="_yQcqUAr3EeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_ifyOcEv9EemO-swIV6Fy_Q" name="PME_Trig94" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_igL3EEv9EemO-swIV6Fy_Q" name="PME_Trig95" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_igVBAEv9EemO-swIV6Fy_Q" name="To__New__State__87__96" guard="_ika20Uv9EemO-swIV6Fy_Q" source="_ieyv8Ev9EemO-swIV6Fy_Q" target="_ie1MMEv9EemO-swIV6Fy_Q">
            <ownedRule xmi:id="_ika20Uv9EemO-swIV6Fy_Q" name="PME_checkDecesion119">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ika20Ev9EemO-swIV6Fy_Q" name="PME_checkDecesion119">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__87__96&quot;,&quot;New__State__87&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_igZScEv9EemO-swIV6Fy_Q" name="Trans__Pseudo8197" source="_hUNdkAr1EeiwdpidSbDb2g" target="_ieyv8Ev9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ikZBoEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__87&quot;,&quot;To__New__State__87__96&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__99&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_igcVwEv9EemO-swIV6Fy_Q" name="To__Substates__TrackingTime__99" guard="_ikcE8Uv9EemO-swIV6Fy_Q" source="_ieyv8Ev9EemO-swIV6Fy_Q" target="_igagkEv9EemO-swIV6Fy_Q">
            <ownedRule xmi:id="_ikcE8Uv9EemO-swIV6Fy_Q" name="PME_checkDecesion120">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ikcE8Ev9EemO-swIV6Fy_Q" name="PME_checkDecesion120">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__TrackingTime__99&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_igeyAUv9EemO-swIV6Fy_Q" name="From__Substates__TrackingTime__101" source="_igdj4Ev9EemO-swIV6Fy_Q" target="_ieyv8Ev9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ikVXQEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__87&quot;,&quot;To__New__State__87__96&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__99&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_gAMtcAr0EeiwdpidSbDb2g" name="Pseudo85"/>
          <subvertex xmi:type="uml:State" xmi:id="_gARl8Ar0EeiwdpidSbDb2g" name="TrackingTime">
            <connectionPoint xmi:id="_hUNdkAr1EeiwdpidSbDb2g" name="Pseudo81" kind="exitPoint"/>
            <connectionPoint xmi:id="_hUSWEAr1EeiwdpidSbDb2g" name="Pseudo82" kind="entryPoint"/>
            <connectionPoint xmi:id="_pbBzsAr1EeiwdpidSbDb2g" name="Pseudo84" kind="entryPoint"/>
            <connectionPoint xmi:id="_igagkEv9EemO-swIV6Fy_Q" name="From__Parent__98" kind="entryPoint"/>
            <connectionPoint xmi:id="_igdj4Ev9EemO-swIV6Fy_Q" name="To__Parent__100" kind="exitPoint"/>
            <region xmi:id="_BISvsAr1EeiwdpidSbDb2g" name="Region1">
              <transition xmi:id="_JpwlAAr2EeiwdpidSbDb2g" name="ignoreDeActive" source="_FtZSkAr1EeiwdpidSbDb2g" target="_FtZSkAr1EeiwdpidSbDb2g">
                <trigger xmi:id="_v3INEAr4EeiwdpidSbDb2g" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_ignU4Ev9EemO-swIV6Fy_Q" name="Trans__Pseudo81103" source="_hUNdkAr1EeiwdpidSbDb2g" target="_iggAIEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ijDk4Ev9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__116&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;DeActive&quot;,&quot;To__DeActive__114&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_igpKEEv9EemO-swIV6Fy_Q" name="Trans__Pseudo82104" source="_hUSWEAr1EeiwdpidSbDb2g" target="_iggAIEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iix4EEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__116&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;DeActive&quot;,&quot;To__DeActive__114&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_igpxIEv9EemO-swIV6Fy_Q" name="Trans__Pseudo83105" source="_CEn1EAr1EeiwdpidSbDb2g" target="_iggAIEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iiJl8Ev9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo83&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__116&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo83&quot;,&quot;DeActive&quot;,&quot;To__DeActive__114&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo83&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_igqYMEv9EemO-swIV6Fy_Q" name="Trans__Pseudo84106" source="_pbBzsAr1EeiwdpidSbDb2g" target="_iggAIEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ikCcUEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__116&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;DeActive&quot;,&quot;To__DeActive__114&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_igy7EEv9EemO-swIV6Fy_Q" name="From__DeActive__107" source="_FtZSkAr1EeiwdpidSbDb2g" target="_iggAIEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ijMu0Ev9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;DeActive&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__116&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;DeActive&quot;,&quot;DeActive&quot;,&quot;To__DeActive__114&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;DeActive&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_ig1XUEv9EemO-swIV6Fy_Q" name="PME_Trig108" event="_h82ggEv9EemO-swIV6Fy_Q" port="_ibu04Ev9EemO-swIV6Fy_Q"/>
                <trigger xmi:id="_ig9TIEv9EemO-swIV6Fy_Q" name="PME_Trig109" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ig_vYEv9EemO-swIV6Fy_Q" name="PME_Trig110" port="_-6GrwAryEeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_ihmMUEv9EemO-swIV6Fy_Q" name="PME_Trig111" port="_yQcqUAr3EeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_ihsS8Ev9EemO-swIV6Fy_Q" name="PME_Trig112" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ih6VYEv9EemO-swIV6Fy_Q" name="PME_Trig113" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_ih_08Ev9EemO-swIV6Fy_Q" name="To__DeActive__114" guard="_ikKYIUv9EemO-swIV6Fy_Q" source="_iggAIEv9EemO-swIV6Fy_Q" target="_FtZSkAr1EeiwdpidSbDb2g">
                <ownedRule xmi:id="_ikKYIUv9EemO-swIV6Fy_Q" name="PME_checkDecesion118">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_ikKYIEv9EemO-swIV6Fy_Q" name="PME_checkDecesion118">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__DeActive__114&quot;,&quot;DeActive&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_iiDfUEv9EemO-swIV6Fy_Q" name="From__Parnet__TimeTrackerSM__115" source="_igagkEv9EemO-swIV6Fy_Q" target="_iggAIEv9EemO-swIV6Fy_Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ijtFIEv9EemO-swIV6Fy_Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__116&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;DeActive&quot;,&quot;To__DeActive__114&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_iiEGYEv9EemO-swIV6Fy_Q" name="To__Parent__TimeTrackerSM__116" guard="_ikHU0Uv9EemO-swIV6Fy_Q" source="_iggAIEv9EemO-swIV6Fy_Q" target="_igdj4Ev9EemO-swIV6Fy_Q">
                <ownedRule xmi:id="_ikHU0Uv9EemO-swIV6Fy_Q" name="PME_checkDecesion117">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_ikHU0Ev9EemO-swIV6Fy_Q" name="PME_checkDecesion117">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__TimeTrackerSM__116&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_CEn1EAr1EeiwdpidSbDb2g" name="Pseudo83"/>
              <subvertex xmi:type="uml:State" xmi:id="_FtZSkAr1EeiwdpidSbDb2g" name="DeActive"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_iggAIEv9EemO-swIV6Fy_Q" name="DecesionPoint__102" kind="choice"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ieyv8Ev9EemO-swIV6Fy_Q" name="DecesionPoint__86" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ie1MMEv9EemO-swIV6Fy_Q" name="New__State__87"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_icYVIEv9EemO-swIV6Fy_Q" name="loadHeap" specification="_icXuEEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.clockResolution&quot;,this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_icaxYUv9EemO-swIV6Fy_Q" name="unLoadHeap" specification="_icaxYEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.clockResolution&quot;,&amp;this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_idPQwUv9EemO-swIV6Fy_Q" name="sendMessage" specification="_idPQwEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_idTiMUv9EemO-swIV6Fy_Q" name="sendInternalMessage" specification="_idTiMEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ieM6EEv9EemO-swIV6Fy_Q" name="initForPMD" specification="_ieMTAEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_TimeTracker::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_TimeTracker::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;showTimeTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForTimeTracker&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_icXuEEv9EemO-swIV6Fy_Q" name="loadHeap" visibility="private" method="_icYVIEv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_icaxYEv9EemO-swIV6Fy_Q" name="unLoadHeap" visibility="private" method="_icaxYUv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_idPQwEv9EemO-swIV6Fy_Q" name="sendMessage" visibility="private" method="_idPQwUv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_idQe4Ev9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_idSUEEv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_idTiMEv9EemO-swIV6Fy_Q" name="sendInternalMessage" visibility="private" method="_idTiMUv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_idUJQEv9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_idehUEv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ieMTAEv9EemO-swIV6Fy_Q" name="initForPMD" visibility="private" method="_ieM6EEv9EemO-swIV6Fy_Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_OX25MAqxEeiwdpidSbDb2g" name="ButtonsP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_OXynwAqxEeiwdpidSbDb2g" name="ButtonsP">
        <interfaceRealization xmi:id="_OX_cEAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OX7KoAqxEeiwdpidSbDb2g" contract="_OX7KoAqxEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_OYLCQAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g" contract="_OYH-8AqxEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OX7KoAqxEeiwdpidSbDb2g" name="ButtonsP">
        <ownedOperation xmi:id="_-aZWABFKEeibZqndpu8erg" name="ReadInt">
          <ownedParameter xmi:id="_EERNMBgdEei-ccFu-OwT7Q" name="TextToShow">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYB4UAqxEeiwdpidSbDb2g" name="ButtonsP~">
        <ownedOperation xmi:id="_SXAPUAqxEeiwdpidSbDb2g" name="ButtonPressed">
          <ownedParameter xmi:id="_n9--0AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrus.designer.languages.cpp.library_1.0.4.jar!/models/AnsiCLibrary.uml#_5lVhgBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_XpIQQAqxEeiwdpidSbDb2g" name="ButtonHold">
          <ownedParameter xmi:id="_nYJt4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_cpytwAqxEeiwdpidSbDb2g" name="ButtonReleased">
          <ownedParameter xmi:id="_jp9k4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_nYfEIBFLEeibZqndpu8erg" name="ReadIntResult">
          <ownedParameter xmi:id="_nYfEIRFLEeibZqndpu8erg" name="InputInt">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYGJwAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYB4UAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_OYGw0AqxEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYH-8AqxEeiwdpidSbDb2g" name="ButtonsPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYLpUAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_SXXbsAqxEeiwdpidSbDb2g" operation="_SXAPUAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_XpPlAAqxEeiwdpidSbDb2g" operation="_XpIQQAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_cp40YAqxEeiwdpidSbDb2g" operation="_cpytwAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_-anYcBFKEeibZqndpu8erg" operation="_-aZWABFKEeibZqndpu8erg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_nYhgYBFLEeibZqndpu8erg" operation="_nYfEIBFLEeibZqndpu8erg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_atLzIArdEeiwdpidSbDb2g" name="AlarmP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_atHhsArdEeiwdpidSbDb2g" name="AlarmP">
        <interfaceRealization xmi:id="_atTH4ArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atQEkArdEeiwdpidSbDb2g" contract="_atQEkArdEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_ateHAArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g" contract="_atZ1kArdEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atQEkArdEeiwdpidSbDb2g" name="AlarmP">
        <ownedOperation xmi:id="_de5s0ArdEeiwdpidSbDb2g" name="SetAlarm">
          <ownedParameter xmi:id="_g8GMcArdEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_k_tL0ArdEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_n-OLYArdEeiwdpidSbDb2g" name="oneShot">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_suDXkArdEeiwdpidSbDb2g" name="RemAlarm">
          <ownedParameter xmi:id="_suDXkQrdEeiwdpidSbDb2g" name="alarmID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_0IE5IArdEeiwdpidSbDb2g" name="viewAlarmReq"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atU9EArdEeiwdpidSbDb2g" name="AlarmP~">
        <ownedOperation xmi:id="_d5y8QArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_d5y8QQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_d5zjUQrhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_d50KYArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atYncArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atU9EArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_atZOgArdEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atZ1kArdEeiwdpidSbDb2g" name="AlarmPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atfVIArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_dfgJwArdEeiwdpidSbDb2g" operation="_de5s0ArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_suGa4ArdEeiwdpidSbDb2g" operation="_suDXkArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_0IHVYArdEeiwdpidSbDb2g" operation="_0IE5IArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d5zjUArhEeiwdpidSbDb2g" operation="_d5y8QArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d50KYQrhEeiwdpidSbDb2g" operation="_d5zjUQrhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Viyf8ArfEeiwdpidSbDb2g" name="StopWatchP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Viyf8QrfEeiwdpidSbDb2g" name="StopWatchP">
        <interfaceRealization xmi:id="_Viyf8grfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf9ArfEeiwdpidSbDb2g" contract="_Viyf9ArfEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Viyf8wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g" contract="_ViygAQrfEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf9ArfEeiwdpidSbDb2g" name="StopWatchP">
        <ownedOperation xmi:id="_Viyf9QrfEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Viyf-QrfEeiwdpidSbDb2g" name="Reset"/>
        <ownedOperation xmi:id="_Viyf-wrfEeiwdpidSbDb2g" name="Deactivate"/>
        <ownedOperation xmi:id="_Viyf_ArfEeiwdpidSbDb2g" name="Resume"/>
        <ownedOperation xmi:id="_mM4pQArgEeiwdpidSbDb2g" name="Toggle"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf_grfEeiwdpidSbDb2g" name="StopWatchP~">
        <ownedOperation xmi:id="_RNPKEArhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_WQpZkArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_bGjYkArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_bGjYkQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Viyf_wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf_grfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_ViygAArfEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ViygAQrfEeiwdpidSbDb2g" name="StopWatchPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ViygAgrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygAwrfEeiwdpidSbDb2g" operation="_Viyf9QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBArfEeiwdpidSbDb2g" operation="_Viyf-QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBQrfEeiwdpidSbDb2g" operation="_Viyf-wrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBgrfEeiwdpidSbDb2g" operation="_Viyf_ArfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_mM5QUArgEeiwdpidSbDb2g" operation="_mM4pQArgEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_RNQYMArhEeiwdpidSbDb2g" operation="_RNPKEArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bGjYkgrhEeiwdpidSbDb2g" operation="_bGjYkArhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Lo6JYAriEeiwdpidSbDb2g" name="TimeTrackerP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Lo6JYQriEeiwdpidSbDb2g" name="TimeTrackerP">
        <interfaceRealization xmi:id="_Lo6JYgriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JZAriEeiwdpidSbDb2g" contract="_Lo6JZAriEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Lo6JYwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g" contract="_Lo6JcgriEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JZAriEeiwdpidSbDb2g" name="TimeTrackerP">
        <ownedOperation xmi:id="_Lo6JaQriEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Lo6JagriEeiwdpidSbDb2g" name="Deactivate"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JawriEeiwdpidSbDb2g" name="TimeTrackerP~">
        <ownedOperation xmi:id="_Lo6JbAriEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_Lo6JbQriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Lo6JbgriEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_Lo6JbwriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcAriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JawriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_Lo6JcQriEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JcgriEeiwdpidSbDb2g" name="TimeTrackerPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeAriEeiwdpidSbDb2g" operation="_Lo6JaQriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeQriEeiwdpidSbDb2g" operation="_Lo6JagriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JegriEeiwdpidSbDb2g" operation="_Lo6JbAriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JewriEeiwdpidSbDb2g" operation="_Lo6JbgriEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="__mIMoArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="__mIMoQrkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <interfaceRealization xmi:id="__mIMogrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMpArkEeiwdpidSbDb2g" contract="__mIMpArkEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="__mIMowrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g" contract="__mIMtQrkEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMpArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <ownedOperation xmi:id="__mIMpQrkEeiwdpidSbDb2g" name="ShowTime">
          <ownedParameter xmi:id="__mIMpgrkEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMpwrkEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMqArkEeiwdpidSbDb2g" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqQrkEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="__mIMqgrkEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_SddfAArlEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqwrkEeiwdpidSbDb2g" name="ShowCounter">
          <ownedParameter xmi:id="_gD0nAArlEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xd8cBKIEeiEEYKmuRZPIg" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xt0EBKIEeiEEYKmuRZPIg" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_3cTiABKIEeiEEYKmuRZPIg" name="milli">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMrgrkEeiwdpidSbDb2g" name="DisplayGateKeeperP~">
        <ownedOperation xmi:id="__mIMrwrkEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="__mIMsArkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMsQrkEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="__mIMsgrkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMswrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMrgrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="__mIMtArkEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMtQrkEeiwdpidSbDb2g" name="DisplayGateKeeperPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMtgrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMtwrkEeiwdpidSbDb2g" operation="__mIMpQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuArkEeiwdpidSbDb2g" operation="__mIMqQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuQrkEeiwdpidSbDb2g" operation="__mIMqwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuwrkEeiwdpidSbDb2g" operation="__mIMrwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMvArkEeiwdpidSbDb2g" operation="__mIMsQrkEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_EOr9EAruEeiwdpidSbDb2g" name="DisplayP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_EOqu8AruEeiwdpidSbDb2g" name="DisplayP">
        <interfaceRealization xmi:id="_EOw1kAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOuZUAruEeiwdpidSbDb2g" contract="_EOuZUAruEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_EO5YcAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g" contract="_EO2VIAruEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOuZUAruEeiwdpidSbDb2g" name="DisplayP">
        <ownedOperation xmi:id="_gYfq8ArvEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="_gYfq8QrvEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gYfq8grvEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOyDsAruEeiwdpidSbDb2g" name="DisplayP~"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO1HAAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOyDsAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_EO1uEAruEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EO2VIAruEeiwdpidSbDb2g" name="DisplayPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO6mkAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_gYhgIArvEeiwdpidSbDb2g" operation="_gYfq8ArvEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_h6r9UEv9EemO-swIV6Fy_Q" name="dbgAgent">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_h9LQoEv9EemO-swIV6Fy_Q" name="timing" visibility="protected">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_h9MewEv9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_h9Ns4Ev9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_iD_DQEv9EemO-swIV6Fy_Q" name="dbgPortForButtonsReader" visibility="public" type="_h7oYgEv9EemO-swIV6Fy_Q" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_iD_qUEv9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_iEARYEv9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_iKCn8Ev9EemO-swIV6Fy_Q" name="dbgPortForStopWatchCore" visibility="public" type="_h7oYgEv9EemO-swIV6Fy_Q" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_iKDPAEv9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_iKD2EEv9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_iXLsEEv9EemO-swIV6Fy_Q" name="dbgPortForAlarmsCapsule" visibility="public" type="_h7oYgEv9EemO-swIV6Fy_Q" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_iXOIUEv9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_iXPWcEv9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ibx4MEv9EemO-swIV6Fy_Q" name="dbgPortForTimeTracker" visibility="public" type="_h7oYgEv9EemO-swIV6Fy_Q" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ibyfQEv9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_ibyfQUv9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ikqHYEv9EemO-swIV6Fy_Q" name="dbgPortForDisplayGateKeeper" visibility="public" type="_h7oYgEv9EemO-swIV6Fy_Q" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_iktxwEv9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_ikuY0Ev9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ioZX4Ev9EemO-swIV6Fy_Q" name="dbgPortForWatchCore" visibility="public" type="_h7oYgEv9EemO-swIV6Fy_Q" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ioZ-8Ev9EemO-swIV6Fy_Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_ioZ-8Uv9EemO-swIV6Fy_Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_h7ZH8Ev9EemO-swIV6Fy_Q" name="dbgAgent StateMachine">
        <region xmi:id="_i9v80Ev9EemO-swIV6Fy_Q" name="mainRegion">
          <transition xmi:id="_i94fsEv9EemO-swIV6Fy_Q" name="Trans__Init__State__255256" source="_i92qgEv9EemO-swIV6Fy_Q" target="_i9xK8Uv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i-KzkEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__255&quot;,&quot;New__State__254&quot;,&quot;To__New__State__254__259&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__255&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_i9678Ev9EemO-swIV6Fy_Q" name="From__New__State__254__257" source="_i901UEv9EemO-swIV6Fy_Q" target="_i9xK8Uv9EemO-swIV6Fy_Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_i-IXUEv9EemO-swIV6Fy_Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__254&quot;,&quot;New__State__254&quot;,&quot;To__New__State__254__259&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__254&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_i99_QEv9EemO-swIV6Fy_Q" name="PME_Trig258" port="_h9LQoEv9EemO-swIV6Fy_Q">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_i-C3wEv9EemO-swIV6Fy_Q" name="To__New__State__254__259" guard="_i-LaoUv9EemO-swIV6Fy_Q" source="_i9xK8Uv9EemO-swIV6Fy_Q" target="_i901UEv9EemO-swIV6Fy_Q">
            <ownedRule xmi:id="_i-LaoUv9EemO-swIV6Fy_Q" name="PME_checkDecesion260">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_i-LaoEv9EemO-swIV6Fy_Q" name="PME_checkDecesion260">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__254__259&quot;,&quot;New__State__254&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_i9xK8Uv9EemO-swIV6Fy_Q" name="DecesionPoint__253" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_i901UEv9EemO-swIV6Fy_Q" name="New__State__254">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_i-QTIEv9EemO-swIV6Fy_Q" name="New__State__254">
              <language>C++</language>
              <body>timing.informIn(UMLRTTimespec(1,0));
</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_i92qgEv9EemO-swIV6Fy_Q" name="Init__State__255"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_i7tVcUv9EemO-swIV6Fy_Q" name="loadHeap" specification="_i7tVcEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_i7vKoUv9EemO-swIV6Fy_Q" name="unLoadHeap" specification="_i7vKoEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_i8TyYUv9EemO-swIV6Fy_Q" name="sendMessage" specification="_i8TyYEv9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;dbgPortForButtonsReader&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForButtonsReader.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForStopWatchCore&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForStopWatchCore.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForAlarmsCapsule&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForAlarmsCapsule.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForTimeTracker&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForTimeTracker.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForDisplayGateKeeper&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForDisplayGateKeeper.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForWatchCore&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForWatchCore.dbg().sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_i8ZR8Uv9EemO-swIV6Fy_Q" name="sendInternalMessage" specification="_i8ZR8Ev9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_i9dB4Uv9EemO-swIV6Fy_Q" name="initForPMD" specification="_i9dB4Ev9EemO-swIV6Fy_Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_dbgAgent::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_dbgAgent::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;dbgPortForButtonsReader&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForStopWatchCore&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForAlarmsCapsule&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForTimeTracker&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForDisplayGateKeeper&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForWatchCore&quot;,&quot;dbg&quot;,{});
 this->execContext.addInputMessages(&quot;timing&quot;,&quot;timeout&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_i7tVcEv9EemO-swIV6Fy_Q" name="loadHeap" visibility="private" method="_i7tVcUv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_i7vKoEv9EemO-swIV6Fy_Q" name="unLoadHeap" visibility="private" method="_i7vKoUv9EemO-swIV6Fy_Q"/>
      <ownedOperation xmi:id="_i8TyYEv9EemO-swIV6Fy_Q" name="sendMessage" visibility="private" method="_i8TyYUv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_i8VAgEv9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_i8WOoEv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_i8ZR8Ev9EemO-swIV6Fy_Q" name="sendInternalMessage" visibility="private" method="_i8ZR8Uv9EemO-swIV6Fy_Q">
        <ownedParameter xmi:id="_i8bHIEv9EemO-swIV6Fy_Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_i8c8UEv9EemO-swIV6Fy_Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_i9dB4Ev9EemO-swIV6Fy_Q" name="initForPMD" visibility="private" method="_i9dB4Uv9EemO-swIV6Fy_Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_h7l8QEv9EemO-swIV6Fy_Q" name="dbgProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_h7oYgEv9EemO-swIV6Fy_Q" name="dbgProtocol">
        <interfaceRealization xmi:id="_h8ZNgEv9EemO-swIV6Fy_Q" client="_h7oYgEv9EemO-swIV6Fy_Q" supplier="_h776gEv9EemO-swIV6Fy_Q" contract="_h776gEv9EemO-swIV6Fy_Q"/>
        <interfaceRealization xmi:id="_h8bCsEv9EemO-swIV6Fy_Q" client="_h7oYgEv9EemO-swIV6Fy_Q" supplier="_h7-WwEv9EemO-swIV6Fy_Q" contract="_h7-WwEv9EemO-swIV6Fy_Q"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_h776gEv9EemO-swIV6Fy_Q" name="dbgProtocol">
        <ownedOperation xmi:id="_h8de8Ev9EemO-swIV6Fy_Q" name="dbg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_h79IoEv9EemO-swIV6Fy_Q" name="dbgProtocol~"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_h7-WwEv9EemO-swIV6Fy_Q" name="dbgProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_h8AL8Ev9EemO-swIV6Fy_Q" client="_h7oYgEv9EemO-swIV6Fy_Q" supplier="_h79IoEv9EemO-swIV6Fy_Q"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_h8CoMEv9EemO-swIV6Fy_Q" client="_h7oYgEv9EemO-swIV6Fy_Q" supplier="_h7-WwEv9EemO-swIV6Fy_Q"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_h82ggEv9EemO-swIV6Fy_Q" operation="_h8de8Ev9EemO-swIV6Fy_Q"/>
    </packagedElement>
    <profileApplication xmi:id="_GN1XswqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.profile_1.0.0.201707181432.jar!/umlProfile/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtQqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtgqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtwqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XuAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.codegen.cpp.profile_1.0.0.201707181457.jar!/profiles/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_pS-gAAqqEeiwdpidSbDb2g" base_Class="_pOYT4AqqEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_WFuLgAqrEeiwdpidSbDb2g" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_DFbqEAquEeiwdpidSbDb2g" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_J0BpAAquEeiwdpidSbDb2g" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_ZtYuYAquEeiwdpidSbDb2g" base_Class="_ZtPkcAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_xFmyAAquEeiwdpidSbDb2g" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_5crxsAquEeiwdpidSbDb2g" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_EUS0cAqvEeiwdpidSbDb2g" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_4mUU8AqvEeiwdpidSbDb2g" base_Property="_4mJV0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_7I7boAqvEeiwdpidSbDb2g" base_Property="_7I3xQAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_-Pye4AqvEeiwdpidSbDb2g" base_Property="_-PuNcAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Dab-0AqwEeiwdpidSbDb2g" base_Property="_DaXtYAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_K2YzAAqwEeiwdpidSbDb2g" base_Property="_K2VIoAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_QJj80AqwEeiwdpidSbDb2g" base_Property="_QJhgkAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Tqpd8AqwEeiwdpidSbDb2g" base_Property="_TqnowAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_OX4uYAqxEeiwdpidSbDb2g" base_Package="_OX25MAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OX9m4AqxEeiwdpidSbDb2g" base_Interface="_OX7KoAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYEUkAqxEeiwdpidSbDb2g" base_Interface="_OYB4UAqxEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYJ0IAqxEeiwdpidSbDb2g" base_Interface="_OYH-8AqxEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_OYM3cAqxEeiwdpidSbDb2g" base_Collaboration="_OXynwAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_qHisUAqxEeiwdpidSbDb2g" base_Port="_qHclsAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_wsb8sAqxEeiwdpidSbDb2g" base_Port="_wsY5YAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_4erJ8AqxEeiwdpidSbDb2g" base_Connector="_4edHgAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_atO2cArdEeiwdpidSbDb2g" base_Package="_atLzIArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atSg0ArdEeiwdpidSbDb2g" base_Interface="_atQEkArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atXZUArdEeiwdpidSbDb2g" base_Interface="_atU9EArdEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_atc44ArdEeiwdpidSbDb2g" base_Interface="_atZ1kArdEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_atgjQArdEeiwdpidSbDb2g" base_Collaboration="_atHhsArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_y_qqIAreEeiwdpidSbDb2g" base_Port="_y_nm0AreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_2AUXsAreEeiwdpidSbDb2g" base_Port="_2ASigAreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_8aUmsAreEeiwdpidSbDb2g" base_Connector="_8aQ8UAreEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_VizuEArfEeiwdpidSbDb2g" base_Package="_Viyf8ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Vi1jQArfEeiwdpidSbDb2g" base_Collaboration="_Viyf8QrfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2KUArfEeiwdpidSbDb2g" base_Interface="_Viyf9ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2xYArfEeiwdpidSbDb2g" base_Interface="_Viyf_grfEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi3_gArfEeiwdpidSbDb2g" base_Interface="_ViygAQrfEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_mHFGwArhEeiwdpidSbDb2g" base_Port="_mHDRkArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ppHqIArhEeiwdpidSbDb2g" base_Port="_ppFN4ArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ws7rIArhEeiwdpidSbDb2g" base_Connector="_ws4AwArhEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_Lo7XgAriEeiwdpidSbDb2g" base_Package="_Lo6JYAriEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Lo7-kAriEeiwdpidSbDb2g" base_Collaboration="_Lo6JYQriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo8loAriEeiwdpidSbDb2g" base_Interface="_Lo6JZAriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsAriEeiwdpidSbDb2g" base_Interface="_Lo6JawriEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsQriEeiwdpidSbDb2g" base_Interface="_Lo6JcgriEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="__kRn8ArjEeiwdpidSbDb2g" base_Port="__kPLsArjEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_IaHnQArkEeiwdpidSbDb2g" base_Port="_IaFLAArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_OI_1oArkEeiwdpidSbDb2g" base_Connector="_OI7kMArkEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="__mKB0ArkEeiwdpidSbDb2g" base_Package="__mIMoArkEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="__mLP8ArkEeiwdpidSbDb2g" base_Collaboration="__mIMoQrkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mMeEArkEeiwdpidSbDb2g" base_Interface="__mIMpArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mNsMArkEeiwdpidSbDb2g" base_Interface="__mIMrgrkEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="__mO6UArkEeiwdpidSbDb2g" base_Interface="__mIMtQrkEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_uB_LAArlEeiwdpidSbDb2g" base_Port="_uB7goArlEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_xFE50ArrEeiwdpidSbDb2g" base_Port="_xE8-AArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_28O6cArrEeiwdpidSbDb2g" base_Port="_28NFQArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_7dT48ArrEeiwdpidSbDb2g" base_Port="_7dRcsArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_-61vwArrEeiwdpidSbDb2g" base_Connector="_-6yscArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ALA-MArsEeiwdpidSbDb2g" base_Connector="_AK-h8ArsEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_A6ZzwArsEeiwdpidSbDb2g" base_Connector="_A6WwcArsEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_EOtyQAruEeiwdpidSbDb2g" base_Package="_EOr9EAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOwOgAruEeiwdpidSbDb2g" base_Interface="_EOuZUAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOz44AruEeiwdpidSbDb2g" base_Interface="_EOyDsAruEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_EO4KUAruEeiwdpidSbDb2g" base_Interface="_EO2VIAruEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_EO7NoAruEeiwdpidSbDb2g" base_Collaboration="_EOqu8AruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_LLyxwArxEeiwdpidSbDb2g" base_Port="_LLt5QArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_L9vzIArxEeiwdpidSbDb2g" base_Port="_L9t98ArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_WMsTYQrxEeiwdpidSbDb2g" base_Connector="_WMp3IArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_-6JIAAryEeiwdpidSbDb2g" isWired="false" base_Port="_-6GrwAryEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ka3XYArzEeiwdpidSbDb2g" base_Port="_ka0UEArzEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_qGzmgQrzEeiwdpidSbDb2g" base_Connector="_qGxKQArzEeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gAPwwAr0EeiwdpidSbDb2g" base_Pseudostate="_gAMtcAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_gATbIAr0EeiwdpidSbDb2g" base_State="_gARl8Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_gAV3YAr0EeiwdpidSbDb2g" base_Region="_gAJqIAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_gAaI0Ar0EeiwdpidSbDb2g" base_StateMachine="_f9DS0Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_BIUk4Ar1EeiwdpidSbDb2g" base_Region="_BISvsAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CErfcAr1EeiwdpidSbDb2g" base_Pseudostate="_CEn1EAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_DTdmwAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_FtbHwAr1EeiwdpidSbDb2g" base_State="_FtZSkAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUQg4Ar1EeiwdpidSbDb2g" base_Pseudostate="_hUNdkAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUUyUAr1EeiwdpidSbDb2g" base_Pseudostate="_hUSWEAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_pbDo4Ar1EeiwdpidSbDb2g" base_Pseudostate="_pbBzsAr1EeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_yQefgAr3EeiwdpidSbDb2g" isWired="false" base_Port="_yQcqUAr3EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hU-BcA-pEeijktysABpT4g" base_Pseudostate="_hUybQA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_hVdJoA-pEeijktysABpT4g" base_State="_hVXqEA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_hVipMA-pEeijktysABpT4g" base_Region="_hUncIA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_hWGp4A-pEeijktysABpT4g" base_StateMachine="_hUDbcA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OK1ngA-sEeijktysABpT4g" base_Pseudostate="_OKx9IA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_OK7uIA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_OK-xcA-sEeijktysABpT4g" base_Region="_OKuSwA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_OLDp8A-sEeijktysABpT4g" base_StateMachine="_OKhecA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_kB4zUA-sEeijktysABpT4g" base_State="_kBSWYA-sEeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_Xb2N8A-uEeijktysABpT4g" isWired="false" base_Port="_XbRmMA-uEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_U9XDMA-3EeijktysABpT4g" base_Pseudostate="_U9Um8A-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_U9b7sA-3EeijktysABpT4g" base_State="_U9Y4YA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_U9dw4A-3EeijktysABpT4g" base_Region="_U9SKsA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_U9ipYA-3EeijktysABpT4g" base_StateMachine="_U9KO4A-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_e549wA-3EeijktysABpT4g" base_State="_e52hgA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_O4nAkA-5EeijktysABpT4g" base_Region="_O4jWMA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_P93_gA-5EeijktysABpT4g" base_State="_P908MA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_R-Zs0A-5EeijktysABpT4g" base_State="_R-XQkA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Uez0EA-5EeijktysABpT4g" base_Pseudostate="_UevioA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2izAA-6EeijktysABpT4g" base_Pseudostate="_P2fvsA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2oSkA-6EeijktysABpT4g" base_Pseudostate="_P2koMA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KalrMA-7EeijktysABpT4g" base_Pseudostate="_Kaj2AA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KarKwA-7EeijktysABpT4g" base_Region="_KahZwA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_Kau1IA-7EeijktysABpT4g" base_StateMachine="_Kab6MA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_bC7WcA-7EeijktysABpT4g" base_State="_bC4TIA-7EeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_xHS7gBE6EeiaCPCnhevAQQ" isWired="false" base_Port="_xB-9sBE6EeiaCPCnhevAQQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_5O9OkBKMEeiEEYKmuRZPIg" headerPreface="#include &lt;iostream>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_WFgwIAqrEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRealTime:RTPort xmi:id="_fwhSABNgEeiFubQUFHg6OA" isWired="false" base_Port="_fwJekBNgEeiFubQUFHg6OA"/>
  <UMLRealTime:RTPort xmi:id="_DarBUBNhEeiFubQUFHg6OA" isWired="false" base_Port="_Dan-ABNhEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gmdUIBNjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5USJsBNsEeiFubQUFHg6OA" base_Pseudostate="_5UPGYBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_5Ub6sBNsEeiFubQUFHg6OA" base_State="_5UY3YBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5Ue-ABNsEeiFubQUFHg6OA" base_Region="_5UK08BNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_5VCXoBNsEeiFubQUFHg6OA" base_StateMachine="_5TyacBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_m1DG4BNvEeiFubQUFHg6OA" base_State="_m0-1cBNvEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_qcuQ0BNyEeiFubQUFHg6OA" base_Region="_qcoxQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qc4o4BNyEeiFubQUFHg6OA" base_Pseudostate="_qc0-gBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qdJuoBNyEeiFubQUFHg6OA" base_Pseudostate="_qdGEQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_2N0gUBNyEeiFubQUFHg6OA" base_State="_2NyEEBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_34xmQBNyEeiFubQUFHg6OA" base_State="_34ui8BNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GUGnYBNzEeiFubQUFHg6OA" base_Pseudostate="_GT9dcBNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_VhtaABNzEeiFubQUFHg6OA" base_Pseudostate="_VhqWsBNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5oRb0BRgEeiFubQUFHg6OA" base_Pseudostate="_5oJgABRgEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_PmfKIBRiEeiFubQUFHg6OA" base_Pseudostate="_PmcG0BRiEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_GFHsIBRjEeiFubQUFHg6OA" base_Region="_GFF28BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GFQ2EBRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_G6EXIBRjEeiFubQUFHg6OA" base_State="_G6Ch8BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_HQJU0BRjEeiFubQUFHg6OA" base_State="_HQIGsBRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzA6ABUeEeiYy9niOG6dTw" base_Pseudostate="_wy9PoBUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzRYsBUeEeiYy9niOG6dTw" base_Pseudostate="_wzEkYBUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_2-fvYBUfEeiYy9niOG6dTw" base_Pseudostate="_2-cFABUfEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_bAe6cBUhEeiYy9niOG6dTw" base_Pseudostate="_bAapABUhEeiYy9niOG6dTw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_huQNUBa-Eei-ccFu-OwT7Q" headerPreface="#include &lt;termios.h>&#xA;#include &lt;iostream>&#xA;#include &lt;unistd.h>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_xFgrYAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lMfYBeHEei-ccFu-OwT7Q" base_Pseudostate="_6lDVcBeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lcXABeHEei-ccFu-OwT7Q" base_Pseudostate="_6lSmABeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_smoRwBeSEei-ccFu-OwT7Q" base_Pseudostate="_smhkEBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tthoYBeSEei-ccFu-OwT7Q" base_Pseudostate="_ttfMIBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OMmZABgmEeiSBIpf1RqKYQ" base_Pseudostate="_OEEIEBgmEeiSBIpf1RqKYQ"/>
  <UMLRealTime:Capsule xmi:id="_h7XSwEv9EemO-swIV6Fy_Q" base_Class="_h6r9UEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_h7lVMEv9EemO-swIV6Fy_Q" base_StateMachine="_h7ZH8Ev9EemO-swIV6Fy_Q"/>
  <UMLRealTime:ProtocolContainer xmi:id="_h7nxcEv9EemO-swIV6Fy_Q" base_Package="_h7l8QEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:Protocol xmi:id="_h7w7YEv9EemO-swIV6Fy_Q" base_Collaboration="_h7oYgEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTMessageSet xmi:id="_h8EdYEv9EemO-swIV6Fy_Q" base_Interface="_h776gEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTMessageSet xmi:id="_h8TG4Ev9EemO-swIV6Fy_Q" base_Interface="_h79IoEv9EemO-swIV6Fy_Q" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_h8XYUEv9EemO-swIV6Fy_Q" base_Interface="_h7-WwEv9EemO-swIV6Fy_Q" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_h9WPwEv9EemO-swIV6Fy_Q" base_Port="_h9LQoEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTPort xmi:id="_iD48oEv9EemO-swIV6Fy_Q" isWired="false" base_Port="_iD2gYEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTPort xmi:id="_iEBfgEv9EemO-swIV6Fy_Q" isPublish="true" isWired="false" base_Port="_iD_DQEv9EemO-swIV6Fy_Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_iEgAoEv9EemO-swIV6Fy_Q" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_iExGYEv9EemO-swIV6Fy_Q" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_iGJmcEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_iGFVAEv9EemO-swIV6Fy_Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_iGioAEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_iGfksEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_iIK_sEv9EemO-swIV6Fy_Q" base_Pseudostate="_iIJKgEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTPort xmi:id="_iKCA4Ev9EemO-swIV6Fy_Q" isWired="false" base_Port="_iJ6FEEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTPort xmi:id="_iKJVoEv9EemO-swIV6Fy_Q" isPublish="true" isWired="false" base_Port="_iKCn8Ev9EemO-swIV6Fy_Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_iLxtUEv9EemO-swIV6Fy_Q" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_Jz5GIAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_iL7eUEv9EemO-swIV6Fy_Q" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_iN7pcEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_iN6bUEv9EemO-swIV6Fy_Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_iOEMUEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_iOC-MEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_iPS7YEv9EemO-swIV6Fy_Q" base_Pseudostate="_iPQfIEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_iSWPYEv9EemO-swIV6Fy_Q" base_Pseudostate="_iSTMEEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_iSeyQEv9EemO-swIV6Fy_Q" base_Pseudostate="_iSeLMEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_iSgncEv9EemO-swIV6Fy_Q" base_Pseudostate="_iSgAYEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTPort xmi:id="_iXJ24Ev9EemO-swIV6Fy_Q" isWired="false" base_Port="_iW8bgEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTPort xmi:id="_iXQkkEv9EemO-swIV6Fy_Q" isPublish="true" isWired="false" base_Port="_iXLsEEv9EemO-swIV6Fy_Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_iXoYAEv9EemO-swIV6Fy_Q" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_DFR5EAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_iXqNMEv9EemO-swIV6Fy_Q" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_iYKjgEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_iYIuUEv9EemO-swIV6Fy_Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_iYR4QEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_iYQDEEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_iah7AEv9EemO-swIV6Fy_Q" base_Pseudostate="_iags4Ev9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTPort xmi:id="_ibwqEEv9EemO-swIV6Fy_Q" isWired="false" base_Port="_ibu04Ev9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTPort xmi:id="_ibzGUEv9EemO-swIV6Fy_Q" isPublish="true" isWired="false" base_Port="_ibx4MEv9EemO-swIV6Fy_Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_icRncEv9EemO-swIV6Fy_Q" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_EUMt0AqvEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_icUqwEv9EemO-swIV6Fy_Q" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_idRtAEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_idQe4Ev9EemO-swIV6Fy_Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_iddTMEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_idUJQEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_iez-EEv9EemO-swIV6Fy_Q" base_Pseudostate="_ieyv8Ev9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTState xmi:id="_ie2aUEv9EemO-swIV6Fy_Q" base_State="_ie1MMEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_igbusEv9EemO-swIV6Fy_Q" base_Pseudostate="_igagkEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_igeyAEv9EemO-swIV6Fy_Q" base_Pseudostate="_igdj4Ev9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ighOQEv9EemO-swIV6Fy_Q" base_Pseudostate="_iggAIEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTPort xmi:id="_iko5QEv9EemO-swIV6Fy_Q" isWired="false" base_Port="_iknEEEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTPort xmi:id="_ikvm8Ev9EemO-swIV6Fy_Q" isPublish="true" isWired="false" base_Port="_ikqHYEv9EemO-swIV6Fy_Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_ilIogEv9EemO-swIV6Fy_Q" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_ilPWMEv9EemO-swIV6Fy_Q" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_imU7UEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_imR4AEv9EemO-swIV6Fy_Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_imbB8Ev9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_imYlsEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_inTywEv9EemO-swIV6Fy_Q" base_Pseudostate="_inTLsEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTPort xmi:id="_ioYJwEv9EemO-swIV6Fy_Q" isWired="false" base_Port="_ioWUkEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:RTPort xmi:id="_iobNEEv9EemO-swIV6Fy_Q" isPublish="true" isWired="false" base_Port="_ioZX4Ev9EemO-swIV6Fy_Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_ipEGQEv9EemO-swIV6Fy_Q" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_5cgykAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_ipHJkEv9EemO-swIV6Fy_Q" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_irAnAEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_iq__8Ev9EemO-swIV6Fy_Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_irFfgEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_irERYEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_itxAEEv9EemO-swIV6Fy_Q" base_Pseudostate="_itwZAEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTState xmi:id="_itzcUEv9EemO-swIV6Fy_Q" base_State="_ityOMEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ivF1wEv9EemO-swIV6Fy_Q" base_Pseudostate="_ivEnoEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ivISAEv9EemO-swIV6Fy_Q" base_Pseudostate="_ivGc0Ev9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ivO_sEv9EemO-swIV6Fy_Q" base_Pseudostate="_ivNKgEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ivRb8Ev9EemO-swIV6Fy_Q" base_Pseudostate="_ivQ04Ev9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_i1-g4Ev9EemO-swIV6Fy_Q" base_Pseudostate="_i1950Ev9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_i2IR4Ev9EemO-swIV6Fy_Q" base_Pseudostate="_i1_H8Ev9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_i2L8QEv9EemO-swIV6Fy_Q" base_Pseudostate="_i2KHEEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_i2jvsEv9EemO-swIV6Fy_Q" base_Pseudostate="_i2ihkEv9EemO-swIV6Fy_Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_i7mAsEv9EemO-swIV6Fy_Q" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_h6r9UEv9EemO-swIV6Fy_Q" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_i7rgQEv9EemO-swIV6Fy_Q" base_Class="_h6r9UEv9EemO-swIV6Fy_Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_i8VnkEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_i8VAgEv9EemO-swIV6Fy_Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_i8cVQEv9EemO-swIV6Fy_Q" type="pmd::Message" base_Parameter="_i8bHIEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTRegion xmi:id="_i9xK8Ev9EemO-swIV6Fy_Q" base_Region="_i9v80Ev9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_i9xyAEv9EemO-swIV6Fy_Q" base_Pseudostate="_i9xK8Uv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTState xmi:id="_i92DcEv9EemO-swIV6Fy_Q" base_State="_i901UEv9EemO-swIV6Fy_Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_i93RkEv9EemO-swIV6Fy_Q" base_Pseudostate="_i92qgEv9EemO-swIV6Fy_Q"/>
  <UMLRealTime:CapsulePart xmi:id="_i-Od8Ev9EemO-swIV6Fy_Q" base_Property="_i-N24Ev9EemO-swIV6Fy_Q"/>
</xmi:XMI>
