<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_GN1XsAqpEeiwdpidSbDb2g" name="DigitalWatch">
    <eAnnotations xmi:id="_GN1XsQqpEeiwdpidSbDb2g" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_GN1XsgqpEeiwdpidSbDb2g" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_r_6AUAqqEeiwdpidSbDb2g" source="UMLRT_Default_top">
      <details xmi:id="_r_6nYAqqEeiwdpidSbDb2g" key="top_name" value="DigitalWatch"/>
    </eAnnotations>
    <eAnnotations xmi:id="_M78BwEwZEemamrGYQOGXIg" source="dummy"/>
    <eAnnotations xmi:id="_KwklgExdEem9e6_w_ZgFIw" source="dummy"/>
    <eAnnotations xmi:id="_SfCl4EyFEemgdZONpidPeg" source="dummy"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_pOYT4AqqEeiwdpidSbDb2g" name="DigitalWatch" isActive="true">
      <ownedAttribute xmi:id="_4mJV0AqvEeiwdpidSbDb2g" name="displayGateKeeper" visibility="protected" type="_WFgwIAqrEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_7I3xQAqvEeiwdpidSbDb2g" name="alarmsCapsule" visibility="protected" type="_DFR5EAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_-PuNcAqvEeiwdpidSbDb2g" name="stopWatchController" visibility="protected" type="_Jz5GIAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_DaXtYAqwEeiwdpidSbDb2g" name="display" visibility="protected" type="_ZtPkcAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_K2VIoAqwEeiwdpidSbDb2g" name="buttonsReader" visibility="protected" type="_xFgrYAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_QJhgkAqwEeiwdpidSbDb2g" name="watchCore" visibility="protected" type="_5cgykAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_TqnowAqwEeiwdpidSbDb2g" name="timeTracker" visibility="protected" type="_EUMt0AqvEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_lyRS4Ev9Eem_qa5hEGbw8Q" name="dbgAgent" type="_lB4-0Ev9Eem_qa5hEGbw8Q">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_lyShAEv9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_lyTvIEv9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedConnector xmi:id="_4edHgAqxEeiwdpidSbDb2g" name="RTConnector1">
        <end xmi:id="_4eoGoAqxEeiwdpidSbDb2g" partWithPort="_K2VIoAqwEeiwdpidSbDb2g" role="_qHclsAqxEeiwdpidSbDb2g"/>
        <end xmi:id="_4epUwAqxEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_wsY5YAqxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_8aQ8UAreEeiwdpidSbDb2g" name="RTConnector2">
        <end xmi:id="_8aT_oAreEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_2ASigAreEeiwdpidSbDb2g"/>
        <end xmi:id="_8aT_oQreEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_y_nm0AreEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_ws4AwArhEeiwdpidSbDb2g" name="RTConnector3">
        <end xmi:id="_ws6dAArhEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_mHDRkArhEeiwdpidSbDb2g"/>
        <end xmi:id="_ws7EEArhEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ppFN4ArhEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_OI7kMArkEeiwdpidSbDb2g" name="RTConnector4">
        <end xmi:id="_OI-ngArkEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_IaFLAArkEeiwdpidSbDb2g"/>
        <end xmi:id="_OI_OkArkEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="__kPLsArjEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-6yscArrEeiwdpidSbDb2g" name="RTConnector5">
        <end xmi:id="_-61IsArrEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="_7dRcsArrEeiwdpidSbDb2g"/>
        <end xmi:id="_-61IsQrrEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_AK-h8ArsEeiwdpidSbDb2g" name="RTConnector6">
        <end xmi:id="_ALAXIArsEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_xE8-AArrEeiwdpidSbDb2g"/>
        <end xmi:id="_ALAXIQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_A6WwcArsEeiwdpidSbDb2g" name="RTConnector7">
        <end xmi:id="_A6ZMsArsEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_28NFQArrEeiwdpidSbDb2g"/>
        <end xmi:id="_A6ZMsQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_WMp3IArxEeiwdpidSbDb2g" name="RTConnector8">
        <end xmi:id="_WMrsUArxEeiwdpidSbDb2g" partWithPort="_DaXtYAqwEeiwdpidSbDb2g" role="_LLt5QArxEeiwdpidSbDb2g"/>
        <end xmi:id="_WMsTYArxEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_L9t98ArxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_qGxKQArzEeiwdpidSbDb2g" name="RTConnector9">
        <end xmi:id="_qGy_cArzEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ka0UEArzEeiwdpidSbDb2g"/>
        <end xmi:id="_qGzmgArzEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_WFgwIAqrEeiwdpidSbDb2g" name="DisplayGateKeeper" classifierBehavior="_hUDbcA-pEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uB7goArlEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yMSoQArlEeiwdpidSbDb2g" value="4"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_yNBoEArlEeiwdpidSbDb2g" value="4"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_L9t98ArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_lmx0kEv9Eem_qa5hEGbw8Q" name="dbgPortForDisplayGateKeeper" visibility="protected" type="_lGys8Ev9Eem_qa5hEGbw8Q" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_lmyboEv9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_lmzCsEv9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_hUDbcA-pEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_hUncIA-pEeijktysABpT4g" name="Region">
          <transition xmi:id="_u0Ob4A-pEeijktysABpT4g" name="State1__State1__205" source="_hVXqEA-pEeijktysABpT4g" target="_hVXqEA-pEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_9n8aUBKHEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>	std::cout &lt;&lt; std::string( 100, '\n' );
    std::cout&lt;&lt;hour&lt;&lt;&quot;:&quot;&lt;&lt;minute&lt;&lt;&quot;:&quot;&lt;&lt;second&lt;&lt;std::endl;
</body>
            </effect>
            <trigger xmi:id="_AKuNoA-qEeijktysABpT4g" event="__mIMtwrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_zVXr0A-pEeijktysABpT4g" name="State1__State1__204" source="_hVXqEA-pEeijktysABpT4g" target="_hVXqEA-pEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_bW6koBKIEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>    //std::cout&lt;&lt;&quot;new text is recieved\n&quot;;
    //putp( tigetstr( &quot;clear&quot; ) ); 
    std::cout&lt;&lt;text&lt;&lt;std::endl;
</body>
            </effect>
            <trigger xmi:id="_HSdsYA-qEeijktysABpT4g" event="__mIMuArkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_KXN20A-qEeijktysABpT4g" name="State1__State1__203" source="_hVXqEA-pEeijktysABpT4g" target="_hVXqEA-pEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_9muc4BKIEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>std::cout &lt;&lt; std::string( 100, '\n' );
std::cout&lt;&lt;hour&lt;&lt;&quot;:&quot;&lt;&lt;minute&lt;&lt;&quot;:&quot;&lt;&lt;second&lt;&lt;&quot;:&quot;&lt;&lt;milli&lt;&lt;std::endl;
</body>
            </effect>
            <trigger xmi:id="_SrO7cA-qEeijktysABpT4g" event="__mIMuQrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_ln2LkEv9Eem_qa5hEGbw8Q" name="Trans__Init__State__207208" source="_lnzvUEv9Eem_qa5hEGbw8Q" target="_lnxTEEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_loHRUEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__207&quot;,&quot;State1&quot;,&quot;To__State1__211&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__207&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_ln8SMEv9Eem_qa5hEGbw8Q" name="From__State1__209" source="_hVXqEA-pEeijktysABpT4g" target="_lnxTEEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_loE1EEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;State1&quot;,&quot;State1&quot;,&quot;To__State1__211&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;State1&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_ln-ucEv9Eem_qa5hEGbw8Q" name="PME_Trig210" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_lmx0kEv9Eem_qa5hEGbw8Q"/>
          </transition>
          <transition xmi:id="_loBxwEv9Eem_qa5hEGbw8Q" name="To__State1__211" guard="_loIfcUv9Eem_qa5hEGbw8Q" source="_lnxTEEv9Eem_qa5hEGbw8Q" target="_hVXqEA-pEeijktysABpT4g">
            <ownedRule xmi:id="_loIfcUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion212">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_loIfcEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion212">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__State1__211&quot;,&quot;State1&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:State" xmi:id="_hVXqEA-pEeijktysABpT4g" name="State1"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_lnxTEEv9Eem_qa5hEGbw8Q" name="DecesionPoint__206" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_lnzvUEv9Eem_qa5hEGbw8Q" name="Init__State__207"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lnAeEUv9Eem_qa5hEGbw8Q" name="loadHeap" specification="_lnAeEEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lnCTQUv9Eem_qa5hEGbw8Q" name="unLoadHeap" specification="_lnCTQEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lnRj0Uv9Eem_qa5hEGbw8Q" name="sendMessage" specification="_lnRj0Ev9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayP&quot;) {
  if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lnY4kUv9Eem_qa5hEGbw8Q" name="sendInternalMessage" specification="_lnY4kEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lnrzgUv9Eem_qa5hEGbw8Q" name="initForPMD" specification="_lnrzgEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForDisplayGateKeeper&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_lnAeEEv9Eem_qa5hEGbw8Q" name="loadHeap" visibility="private" method="_lnAeEUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lnCTQEv9Eem_qa5hEGbw8Q" name="unLoadHeap" visibility="private" method="_lnCTQUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lnRj0Ev9Eem_qa5hEGbw8Q" name="sendMessage" visibility="private" method="_lnRj0Uv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lnTZAEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_lnVOMEv9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_lnY4kEv9Eem_qa5hEGbw8Q" name="sendInternalMessage" visibility="private" method="_lnY4kUv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lnatwEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_lnci8Ev9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_lnrzgEv9Eem_qa5hEGbw8Q" name="initForPMD" visibility="private" method="_lnrzgUv9Eem_qa5hEGbw8Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_DFR5EAquEeiwdpidSbDb2g" name="AlarmsCapsule" classifierBehavior="_OKhecA-sEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_y_nm0AreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xE8-AArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_XbRmMA-uEeijktysABpT4g" name="alarmTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_nHqHMBgMEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_3pL_0BgMEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_v-uwIBi9EeiSBIpf1RqKYQ" name="alarmTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_lLzv0Ev9Eem_qa5hEGbw8Q" name="dbgPortForAlarmsCapsule" visibility="protected" type="_lGys8Ev9Eem_qa5hEGbw8Q" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_lL098Ev9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_lL2MEEv9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_OKhecA-sEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_OKuSwA-sEeijktysABpT4g" name="Region">
          <transition xmi:id="_1kypYA-sEeijktysABpT4g" name="setAlarm" source="_OK4DwA-sEeijktysABpT4g" target="_kBSWYA-sEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RwF5MBi7EeiSBIpf1RqKYQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>    UMLRTTimespec now;
    UMLRTTimespec::getclock(now);
    long millSec=hour*60*60*100 + minute*60*1000;
    alarmTimerID=alarmTimer.informAt(now+UMLRTTimespec(millSec,0));
</body>
            </effect>
            <trigger xmi:id="_UbvvcA-tEeijktysABpT4g" event="_dfgJwArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_dEj_YA-tEeijktysABpT4g" name="remAlarm" source="_kBSWYA-sEeijktysABpT4g" target="_OK4DwA-sEeijktysABpT4g">
            <trigger xmi:id="_jmeNMA-tEeijktysABpT4g" event="_suGa4ArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_q642AA-tEeijktysABpT4g" name="AlarmMode__AlarmMode__9" source="_kBSWYA-sEeijktysABpT4g" target="_kBSWYA-sEeijktysABpT4g">
            <trigger xmi:id="_xxXJIA-uEeijktysABpT4g" event="_0IHVYArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_22maEA-tEeijktysABpT4g" name="doAlarm" source="_kBSWYA-sEeijktysABpT4g" target="_kBSWYA-sEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_BHpuABjAEeiSBIpf1RqKYQ">
              <language>C++</language>
              <body>/// beep when alram time reached
printf(&quot;\a&quot;);
printf(&quot;\a&quot;);
printf(&quot;\a&quot;);
printf(&quot;\a&quot;);
printf(&quot;\a&quot;);</body>
            </effect>
            <trigger xmi:id="_tEtMwA-uEeijktysABpT4g" port="_XbRmMA-uEeijktysABpT4g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_QJSFoA-2EeijktysABpT4g" name="NoAlarm__NoAlarm__10" source="_OK4DwA-sEeijktysABpT4g" target="_OK4DwA-sEeijktysABpT4g">
            <trigger xmi:id="_X9BuwA-2EeijktysABpT4g" event="_0IHVYArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_k5kdwBi2EeiSBIpf1RqKYQ" name="resetAlarm" source="_kBSWYA-sEeijktysABpT4g" target="_kBSWYA-sEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ZpdFUBi_EeiSBIpf1RqKYQ">
              <language>C++</language>
              <body>    /////
	alarmTimer.cancelTimer(alarmTimerID);
    UMLRTTimespec now;
    UMLRTTimespec::getclock(now);
    long millSec=hour*60*60*100 + minute*60*1000;
    alarmTimerID=alarmTimer.informAt(now+UMLRTTimespec(millSec,0));
</body>
            </effect>
            <trigger xmi:id="_2AC2gBi2EeiSBIpf1RqKYQ" event="_dfgJwArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_lO-YkEv9Eem_qa5hEGbw8Q" name="Trans__Init__State__1213" source="_lO78UEv9Eem_qa5hEGbw8Q" target="_lO2cwEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lQOVwEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__12&quot;,&quot;NoAlarm&quot;,&quot;To__NoAlarm__25&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__12&quot;,&quot;AlarmMode&quot;,&quot;To__AlarmMode__24&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__12&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_lPDREEv9Eem_qa5hEGbw8Q" name="From__AlarmMode__14" source="_kBSWYA-sEeijktysABpT4g" target="_lO2cwEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lQA6YEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;AlarmMode&quot;,&quot;NoAlarm&quot;,&quot;To__NoAlarm__25&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;AlarmMode&quot;,&quot;AlarmMode&quot;,&quot;To__AlarmMode__24&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;AlarmMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_lPFtUEv9Eem_qa5hEGbw8Q" name="PME_Trig15" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_lLzv0Ev9Eem_qa5hEGbw8Q"/>
            <trigger xmi:id="_lPIwoEv9Eem_qa5hEGbw8Q" name="PME_Trig16" event="__mIMuwrkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lPLz8Ev9Eem_qa5hEGbw8Q" name="PME_Trig17" event="__mIMvArkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_lPO3QEv9Eem_qa5hEGbw8Q" name="From__NoAlarm__18" source="_OK4DwA-sEeijktysABpT4g" target="_lO2cwEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lQCvkEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;NoAlarm&quot;,&quot;NoAlarm&quot;,&quot;To__NoAlarm__25&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;NoAlarm&quot;,&quot;AlarmMode&quot;,&quot;To__AlarmMode__24&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;NoAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_lPfV8Ev9Eem_qa5hEGbw8Q" name="PME_Trig19" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_lLzv0Ev9Eem_qa5hEGbw8Q"/>
            <trigger xmi:id="_lPhyMEv9Eem_qa5hEGbw8Q" name="PME_Trig20" event="_suGa4ArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lPjnYEv9Eem_qa5hEGbw8Q" name="PME_Trig21" port="_XbRmMA-uEeijktysABpT4g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_lPlckEv9Eem_qa5hEGbw8Q" name="PME_Trig22" event="__mIMuwrkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lPvNkEv9Eem_qa5hEGbw8Q" name="PME_Trig23" event="__mIMvArkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_lPy38Ev9Eem_qa5hEGbw8Q" name="To__AlarmMode__24" guard="_lQRZEUv9Eem_qa5hEGbw8Q" source="_lO2cwEv9Eem_qa5hEGbw8Q" target="_kBSWYA-sEeijktysABpT4g">
            <ownedRule xmi:id="_lQRZEUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion27">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_lQRZEEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion27">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__AlarmMode__24&quot;,&quot;AlarmMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_lP8B4Ev9Eem_qa5hEGbw8Q" name="To__NoAlarm__25" guard="_lQQK8Uv9Eem_qa5hEGbw8Q" source="_lO2cwEv9Eem_qa5hEGbw8Q" target="_OK4DwA-sEeijktysABpT4g">
            <ownedRule xmi:id="_lQQK8Uv9Eem_qa5hEGbw8Q" name="PME_checkDecesion26">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_lQQK8Ev9Eem_qa5hEGbw8Q" name="PME_checkDecesion26">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__NoAlarm__25&quot;,&quot;NoAlarm&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:State" xmi:id="_OK4DwA-sEeijktysABpT4g" name="NoAlarm"/>
          <subvertex xmi:type="uml:State" xmi:id="_kBSWYA-sEeijktysABpT4g" name="AlarmMode"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_lO2cwEv9Eem_qa5hEGbw8Q" name="DecesionPoint__11" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_lO78UEv9Eem_qa5hEGbw8Q" name="Init__State__12"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lMWiYUv9Eem_qa5hEGbw8Q" name="loadHeap" specification="_lMWiYEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lMZlsUv9Eem_qa5hEGbw8Q" name="unLoadHeap" specification="_lMZlsEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lMqEYUv9Eem_qa5hEGbw8Q" name="sendMessage" specification="_lMqEYEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    alarmP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    alarmP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lMwLAUv9Eem_qa5hEGbw8Q" name="sendInternalMessage" specification="_lMwLAEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lOoaUUv9Eem_qa5hEGbw8Q" name="initForPMD" specification="_lOoaUEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForAlarmsCapsule&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_lMWiYEv9Eem_qa5hEGbw8Q" name="loadHeap" visibility="private" method="_lMWiYUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lMZlsEv9Eem_qa5hEGbw8Q" name="unLoadHeap" visibility="private" method="_lMZlsUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lMqEYEv9Eem_qa5hEGbw8Q" name="sendMessage" visibility="private" method="_lMqEYUv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lMr5kEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_lMuV0Ev9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_lMwLAEv9Eem_qa5hEGbw8Q" name="sendInternalMessage" visibility="private" method="_lMwLAUv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lMyAMEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_lMz1YEv9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_lOoaUEv9Eem_qa5hEGbw8Q" name="initForPMD" visibility="private" method="_lOoaUUv9Eem_qa5hEGbw8Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_Jz5GIAquEeiwdpidSbDb2g" name="StopWatchCore" classifierBehavior="_U9KO4A-3EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_mHDRkArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_28NFQArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_fwJekBNgEeiFubQUFHg6OA" name="showCounterTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Dan-ABNhEeiFubQUFHg6OA" name="timeCountingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2KcBNhEeiFubQUFHg6OA" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2xgBNhEeiFubQUFHg6OA" name="stopWatchResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_OM2xgRNhEeiFubQUFHg6OA" value="200"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_XYKbwBNnEeiFubQUFHg6OA" name="timeCountingTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_dK4oUBNnEeiFubQUFHg6OA" name="showCounterTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_lQie0Ev9Eem_qa5hEGbw8Q" name="dbgPortForStopWatchCore" visibility="protected" type="_lGys8Ev9Eem_qa5hEGbw8Q" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_lQjF4Ev9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_lQjs8Ev9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_U9KO4A-3EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_U9SKsA-3EeijktysABpT4g" name="Region">
          <transition xmi:id="_1-9b4A-3EeijktysABpT4g" name="stopWatchActivate" source="_U9Y4YA-3EeijktysABpT4g" target="_e52hgA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fmruoBNiEeiFubQUFHg6OA">
              <language>C++</language>
              <body>showCounterTimerID=showCounterTimer.informEvery(UMLRTTimespec(0,50000000),0);</body>
            </effect>
            <trigger xmi:id="_MT8SoBNiEeiFubQUFHg6OA" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_P2qHwA-6EeijktysABpT4g" name="showStopWatchCounter" source="_P2fvsA-6EeijktysABpT4g" target="_gmZCsBNjEeiFubQUFHg6OA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CFEuEBNmEeiFubQUFHg6OA">
              <language>C++</language>
              <body>printf(&quot;milliTime:%d\n&quot;,milliTime);
int hour=    milliTime/(1000*60*60);
int minute= milliTime % (1000*60*60) / (1000*60);
int second= milliTime % (1000*60) / 1000;
int milliSecond= milliTime % 1000;
displayGateKeeperP.ShowCounter(hour, minute, second, milliSecond).send();</body>
            </effect>
            <trigger xmi:id="_DuE-IBNkEeiFubQUFHg6OA" port="_fwJekBNgEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_iH0K8A-6EeijktysABpT4g" name="stopWatchDeactivate" source="_wy9PoBUeEeiYy9niOG6dTw" target="_U9Y4YA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JUqWsBNlEeiFubQUFHg6OA">
              <language>C++</language>
              <body> showCounterTimer.cancelTimer(showCounterTimerID);
</body>
            </effect>
            <trigger xmi:id="_YlDe8BNiEeiFubQUFHg6OA" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_gmfJUBNjEeiFubQUFHg6OA" name="countTime2" source="_wzEkYBUeEeiYy9niOG6dTw" target="_P2koMA-6EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_hC2qUBNlEeiFubQUFHg6OA">
              <language>C++</language>
              <body>milliTime=milliTime+stopWatchResolution;</body>
            </effect>
            <trigger xmi:id="_3opdYBNjEeiFubQUFHg6OA" port="_Dan-ABNhEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tgpzYBd5Eei-ccFu-OwT7Q" name="countTime1" source="_U9Y4YA-3EeijktysABpT4g" target="_U9Y4YA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fdIY0Bd6Eei-ccFu-OwT7Q">
              <language>C++</language>
              <body>milliTime=milliTime+stopWatchResolution;</body>
            </effect>
            <trigger xmi:id="_1r-PABd5Eei-ccFu-OwT7Q" port="_Dan-ABNhEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_6lezQBeHEei-ccFu-OwT7Q" name="reset" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_e52hgA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_PYz4QBeIEei-ccFu-OwT7Q">
              <language>C++</language>
              <body>milliTime=0;</body>
            </effect>
            <trigger xmi:id="_Mb5bMBeIEei-ccFu-OwT7Q" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_lSx6gEv9Eem_qa5hEGbw8Q" name="Trans__Init__State__3637" source="_lSveQEv9Eem_qa5hEGbw8Q" target="_lSsa8Ev9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lYAYwEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__36&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__53&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__36&quot;,&quot;Idle&quot;,&quot;To__Idle__47&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__36&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_lS1k4Ev9Eem_qa5hEGbw8Q" name="From__Idle__38" source="_U9Y4YA-3EeijktysABpT4g" target="_lSsa8Ev9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lXJdIEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Idle&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__53&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Idle&quot;,&quot;Idle&quot;,&quot;To__Idle__47&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Idle&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_lTGDkEv9Eem_qa5hEGbw8Q" name="PME_Trig39" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lTH4wEv9Eem_qa5hEGbw8Q" name="PME_Trig40" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lTKVAEv9Eem_qa5hEGbw8Q" name="PME_Trig41" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lTMKMEv9Eem_qa5hEGbw8Q" name="PME_Trig42" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_lQie0Ev9Eem_qa5hEGbw8Q"/>
            <trigger xmi:id="_lTUtEEv9Eem_qa5hEGbw8Q" name="PME_Trig43" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lTWiQEv9Eem_qa5hEGbw8Q" name="PME_Trig44" port="_fwJekBNgEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_lTXwYEv9Eem_qa5hEGbw8Q" name="PME_Trig45" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lTZlkEv9Eem_qa5hEGbw8Q" name="PME_Trig46" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_lTivgEv9Eem_qa5hEGbw8Q" name="To__Idle__47" guard="_lYWXAUv9Eem_qa5hEGbw8Q" source="_lSsa8Ev9Eem_qa5hEGbw8Q" target="_U9Y4YA-3EeijktysABpT4g">
            <ownedRule xmi:id="_lYWXAUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion80">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_lYWXAEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion80">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Idle__47&quot;,&quot;Idle&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_lTly0Ev9Eem_qa5hEGbw8Q" name="Trans__Pseudo2948" source="_P2fvsA-6EeijktysABpT4g" target="_lSsa8Ev9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lX9VcEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__53&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__47&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_lTmZ4Ev9Eem_qa5hEGbw8Q" name="Trans__Pseudo3249" source="_wy9PoBUeEeiYy9niOG6dTw" target="_lSsa8Ev9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lW-eAEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__53&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__47&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_lTnA8Ev9Eem_qa5hEGbw8Q" name="Trans__Pseudo3350" source="_wzEkYBUeEeiYy9niOG6dTw" target="_lSsa8Ev9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lXNHgEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__53&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__47&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_lTqEQEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo3451" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_lSsa8Ev9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lXgpgEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__53&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__47&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_lTuVsEv9Eem_qa5hEGbw8Q" name="To__Substates__StopWatchMode__53" guard="_lYBm4Uv9Eem_qa5hEGbw8Q" source="_lSsa8Ev9Eem_qa5hEGbw8Q" target="_lTtHkEv9Eem_qa5hEGbw8Q">
            <ownedRule xmi:id="_lYBm4Uv9Eem_qa5hEGbw8Q" name="PME_checkDecesion79">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_lYBm4Ev9Eem_qa5hEGbw8Q" name="PME_checkDecesion79">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__StopWatchMode__53&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_lTwK4Ev9Eem_qa5hEGbw8Q" name="From__Substates__StopWatchMode__55" source="_lTu8wEv9Eem_qa5hEGbw8Q" target="_lSsa8Ev9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lXZ70Ev9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__53&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__47&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:State" xmi:id="_U9Y4YA-3EeijktysABpT4g" name="Idle"/>
          <subvertex xmi:type="uml:State" xmi:id="_e52hgA-3EeijktysABpT4g" name="StopWatchMode">
            <connectionPoint xmi:id="_P2fvsA-6EeijktysABpT4g" name="Pseudo29" kind="exitPoint"/>
            <connectionPoint xmi:id="_P2koMA-6EeijktysABpT4g" name="Pseudo31" kind="entryPoint"/>
            <connectionPoint xmi:id="_gmZCsBNjEeiFubQUFHg6OA" name="Pseudo30" kind="entryPoint"/>
            <connectionPoint xmi:id="_wy9PoBUeEeiYy9niOG6dTw" name="Pseudo32" kind="exitPoint"/>
            <connectionPoint xmi:id="_wzEkYBUeEeiYy9niOG6dTw" name="Pseudo33" kind="exitPoint"/>
            <connectionPoint xmi:id="_6lDVcBeHEei-ccFu-OwT7Q" name="Pseudo34" kind="exitPoint"/>
            <connectionPoint xmi:id="_lTtHkEv9Eem_qa5hEGbw8Q" name="From__Parent__52" kind="entryPoint"/>
            <connectionPoint xmi:id="_lTu8wEv9Eem_qa5hEGbw8Q" name="To__Parent__54" kind="exitPoint"/>
            <region xmi:id="_O4jWMA-5EeijktysABpT4g" name="Region1">
              <transition xmi:id="_VjF7kA-5EeijktysABpT4g" name="init" source="_UevioA-5EeijktysABpT4g" target="_P908MA-5EeijktysABpT4g"/>
              <transition xmi:id="_lUGwMEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo2957" source="_P2fvsA-6EeijktysABpT4g" target="_lTwx8Ev9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lWgj8Ev9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__74&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__76&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_lUHXQEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo3058" source="_gmZCsBNjEeiFubQUFHg6OA" target="_lTwx8Ev9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lVvH4Ev9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__74&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__76&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_lUH-UEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo3159" source="_P2koMA-6EeijktysABpT4g" target="_lTwx8Ev9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lWU9wEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__74&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__76&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_lUJMcEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo3260" source="_wy9PoBUeEeiYy9niOG6dTw" target="_lTwx8Ev9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lWyQwEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__74&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__76&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_lUJzgEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo3361" source="_wzEkYBUeEeiYy9niOG6dTw" target="_lTwx8Ev9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lVhsgEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__74&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__76&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_lUKakEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo3462" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_lTwx8Ev9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lV11kEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__74&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__76&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_lUOE8Ev9Eem_qa5hEGbw8Q" name="From__Pause__63" source="_P908MA-5EeijktysABpT4g" target="_lTwx8Ev9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lWbrcEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;Pause&quot;,&quot;To__Pause__74&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__76&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pause&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_lUoUoEv9Eem_qa5hEGbw8Q" name="PME_Trig64" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lUqw4Ev9Eem_qa5hEGbw8Q" name="PME_Trig65" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lUsmEEv9Eem_qa5hEGbw8Q" name="PME_Trig66" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lUxekEv9Eem_qa5hEGbw8Q" name="PME_Trig67" port="_Dan-ABNhEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_lU0h4Ev9Eem_qa5hEGbw8Q" name="PME_Trig68" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_lQie0Ev9Eem_qa5hEGbw8Q"/>
                <trigger xmi:id="_lU_hAEv9Eem_qa5hEGbw8Q" name="PME_Trig69" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lVB9QEv9Eem_qa5hEGbw8Q" name="PME_Trig70" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lVDycEv9Eem_qa5hEGbw8Q" name="PME_Trig71" port="_fwJekBNgEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_lVGOsEv9Eem_qa5hEGbw8Q" name="PME_Trig72" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lVNjcEv9Eem_qa5hEGbw8Q" name="PME_Trig73" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_lVRN0Ev9Eem_qa5hEGbw8Q" name="To__Pause__74" guard="_lW0F8Uv9Eem_qa5hEGbw8Q" source="_lTwx8Ev9Eem_qa5hEGbw8Q" target="_P908MA-5EeijktysABpT4g">
                <ownedRule xmi:id="_lW0F8Uv9Eem_qa5hEGbw8Q" name="PME_checkDecesion77">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_lW0F8Ev9Eem_qa5hEGbw8Q" name="PME_checkDecesion77">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Pause__74&quot;,&quot;Pause&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_lVa-0Ev9Eem_qa5hEGbw8Q" name="From__Parnet__StateMachine__75" source="_lTtHkEv9Eem_qa5hEGbw8Q" target="_lTwx8Ev9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lWA0sEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__74&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__76&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_lVcM8Ev9Eem_qa5hEGbw8Q" name="To__Parent__StateMachine__76" guard="_lW6MkUv9Eem_qa5hEGbw8Q" source="_lTwx8Ev9Eem_qa5hEGbw8Q" target="_lTu8wEv9Eem_qa5hEGbw8Q">
                <ownedRule xmi:id="_lW6MkUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion78">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_lW6MkEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion78">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__76&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_P908MA-5EeijktysABpT4g" name="Pause"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_UevioA-5EeijktysABpT4g" name="Pseudo28"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_lTwx8Ev9Eem_qa5hEGbw8Q" name="DecesionPoint__56" kind="choice"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_lSsa8Ev9Eem_qa5hEGbw8Q" name="DecesionPoint__35" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_lSveQEv9Eem_qa5hEGbw8Q" name="Init__State__36"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lRN0QUv9Eem_qa5hEGbw8Q" name="loadHeap" specification="_lRN0QEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.stopWatchResolution&quot;,this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lRReoUv9Eem_qa5hEGbw8Q" name="unLoadHeap" specification="_lRReoEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.stopWatchResolution&quot;,&amp;this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lR6X0Uv9Eem_qa5hEGbw8Q" name="sendMessage" specification="_lR6X0Ev9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lSAecEv9Eem_qa5hEGbw8Q" name="sendInternalMessage" specification="_lR_3YEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lSip8Uv9Eem_qa5hEGbw8Q" name="initForPMD" specification="_lSip8Ev9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_StopWatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_StopWatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;showCounterTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;timeCountingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForStopWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_lRN0QEv9Eem_qa5hEGbw8Q" name="loadHeap" visibility="private" method="_lRN0QUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lRReoEv9Eem_qa5hEGbw8Q" name="unLoadHeap" visibility="private" method="_lRReoUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lR6X0Ev9Eem_qa5hEGbw8Q" name="sendMessage" visibility="private" method="_lR6X0Uv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lR8NAEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_lR-pQEv9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_lR_3YEv9Eem_qa5hEGbw8Q" name="sendInternalMessage" visibility="private" method="_lSAecEv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lSBFgEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_lSC6sEv9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_lSip8Ev9Eem_qa5hEGbw8Q" name="initForPMD" visibility="private" method="_lSip8Uv9Eem_qa5hEGbw8Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_ZtPkcAquEeiwdpidSbDb2g" name="Display" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_LLt5QArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_xFgrYAquEeiwdpidSbDb2g" name="ButtonsReader" classifierBehavior="_Kab6MA-7EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qHclsAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xB-9sBE6EeiaCPCnhevAQQ" name="readKeyTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_luj3kEv9Eem_qa5hEGbw8Q" name="dbgPortForButtonsReader" visibility="protected" type="_lGys8Ev9Eem_qa5hEGbw8Q" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_lukeoEv9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_lukeoUv9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_Kab6MA-7EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_KahZwA-7EeijktysABpT4g" name="Region">
          <transition xmi:id="_lwhmcEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo252255" source="_Kaj2AA-7EeijktysABpT4g" target="_lwZDkEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lyOPkEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo252&quot;,&quot;New__State__254&quot;,&quot;To__New__State__254__260&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo252&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_lwkpwEv9Eem_qa5hEGbw8Q" name="From__New__State__254__256" source="_lwa4wEv9Eem_qa5hEGbw8Q" target="_lwZDkEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lyMaYEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__254&quot;,&quot;New__State__254&quot;,&quot;To__New__State__254__260&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__254&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_lwqJUEv9Eem_qa5hEGbw8Q" name="PME_Trig257" event="_-anYcBFKEeibZqndpu8erg" port="_qHclsAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lxhE8Ev9Eem_qa5hEGbw8Q" name="PME_Trig258" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_luj3kEv9Eem_qa5hEGbw8Q"/>
            <trigger xmi:id="_lxjhMEv9Eem_qa5hEGbw8Q" name="PME_Trig259" port="_xB-9sBE6EeiaCPCnhevAQQ">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_lyHh4Ev9Eem_qa5hEGbw8Q" name="To__New__State__254__260" guard="_lyPdsUv9Eem_qa5hEGbw8Q" source="_lwZDkEv9Eem_qa5hEGbw8Q" target="_lwa4wEv9Eem_qa5hEGbw8Q">
            <ownedRule xmi:id="_lyPdsUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion261">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_lyPdsEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion261">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__254__260&quot;,&quot;New__State__254&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Kaj2AA-7EeijktysABpT4g" name="Pseudo252"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_lwZDkEv9Eem_qa5hEGbw8Q" name="DecesionPoint__253" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_lwa4wEv9Eem_qa5hEGbw8Q" name="New__State__254"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lu2LcUv9Eem_qa5hEGbw8Q" name="loadHeap" specification="_lu2LcEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lu4AoUv9Eem_qa5hEGbw8Q" name="unLoadHeap" specification="_lu4AoEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lvKUgEv9Eem_qa5hEGbw8Q" name="sendMessage" specification="_lvJtcEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ButtonHold&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonHold( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonPressed&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonPressed().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonReleased&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonReleased( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ReadIntResult&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadIntResult( boost::any_cast&lt;int>(message.payload[&quot;InputInt&quot;])).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lvRCMUv9Eem_qa5hEGbw8Q" name="sendInternalMessage" specification="_lvRCMEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lwS88Uv9Eem_qa5hEGbw8Q" name="initForPMD" specification="_lwS88Ev9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_ButtonsReader::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_ButtonsReader::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;readKeyTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForButtonsReader&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_lu2LcEv9Eem_qa5hEGbw8Q" name="loadHeap" visibility="private" method="_lu2LcUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lu4AoEv9Eem_qa5hEGbw8Q" name="unLoadHeap" visibility="private" method="_lu4AoUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lvJtcEv9Eem_qa5hEGbw8Q" name="sendMessage" visibility="private" method="_lvKUgEv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lvLioEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_lvMwwUv9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_lvRCMEv9Eem_qa5hEGbw8Q" name="sendInternalMessage" visibility="private" method="_lvRCMUv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lvgSwEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_lvnngEv9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_lwS88Ev9Eem_qa5hEGbw8Q" name="initForPMD" visibility="private" method="_lwS88Uv9Eem_qa5hEGbw8Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_5cgykAquEeiwdpidSbDb2g" name="WatchCore" classifierBehavior="_5TyacBNsEeiFubQUFHg6OA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_wsY5YAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_2ASigAreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ppFN4ArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_IaFLAArkEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ka0UEArzEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_CpaG0BgfEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CpeYQBgfEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_lYaBYEv9Eem_qa5hEGbw8Q" name="dbgPortForWatchCore" visibility="protected" type="_lGys8Ev9Eem_qa5hEGbw8Q" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_lYbPgEv9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_lYbPgUv9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_5TyacBNsEeiFubQUFHg6OA" name="StateMachine" isReentrant="false">
        <region xmi:id="_5UK08BNsEeiFubQUFHg6OA" name="Region">
          <transition xmi:id="_7MQsMBRiEeiFubQUFHg6OA" name="adjasuAlarmDone" source="_GFOZ0BRjEeiFubQUFHg6OA" target="_2-cFABUfEeiYy9niOG6dTw"/>
          <transition xmi:id="_lbH-MEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo8296" source="_5UPGYBNsEeiFubQUFHg6OA" target="_lbB3kEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lmXk4Ev9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo82&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__160&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo82&quot;,&quot;New__State__95&quot;,&quot;To__New__State__95__111&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo82&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__114&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo82&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_lbLBgEv9Eem_qa5hEGbw8Q" name="From__New__State__95__97" source="_lbET0Ev9Eem_qa5hEGbw8Q" target="_lbB3kEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lmrG4Ev9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__95&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__160&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__95&quot;,&quot;New__State__95&quot;,&quot;To__New__State__95__111&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__95&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__114&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__95&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_lbP6AEv9Eem_qa5hEGbw8Q" name="PME_Trig98" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lbTkYEv9Eem_qa5hEGbw8Q" name="PME_Trig99" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lbWAoEv9Eem_qa5hEGbw8Q" name="PME_Trig100" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lbZD8Ev9Eem_qa5hEGbw8Q" name="PME_Trig101" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lboUgEv9Eem_qa5hEGbw8Q" name="PME_Trig102" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lbr-4Ev9Eem_qa5hEGbw8Q" name="PME_Trig103" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_lYaBYEv9Eem_qa5hEGbw8Q"/>
            <trigger xmi:id="_lbvCMEv9Eem_qa5hEGbw8Q" name="PME_Trig104" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lb3lEEv9Eem_qa5hEGbw8Q" name="PME_Trig105" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lb72gEv9Eem_qa5hEGbw8Q" name="PME_Trig106" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lb_g4Ev9Eem_qa5hEGbw8Q" name="PME_Trig107" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lcSb0Ev9Eem_qa5hEGbw8Q" name="PME_Trig108" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lcVfIEv9Eem_qa5hEGbw8Q" name="PME_Trig109" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lcgeQEv9Eem_qa5hEGbw8Q" name="PME_Trig110" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_lc0AQEv9Eem_qa5hEGbw8Q" name="To__New__State__95__111" guard="_lmuKMUv9Eem_qa5hEGbw8Q" source="_lbB3kEv9Eem_qa5hEGbw8Q" target="_lbET0Ev9Eem_qa5hEGbw8Q">
            <ownedRule xmi:id="_lmuKMUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion201">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_lmuKMEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion201">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__95__111&quot;,&quot;New__State__95&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_ldNB0Ev9Eem_qa5hEGbw8Q" name="Trans__keyPressEx112" source="_qdGEQBNyEeiFubQUFHg6OA" target="_lbB3kEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lmjLEEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__160&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__95&quot;,&quot;To__New__State__95__111&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__114&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_ldO3AEv9Eem_qa5hEGbw8Q" name="To__Substates__WorkingMode__114" guard="_lmv_YUv9Eem_qa5hEGbw8Q" source="_lbB3kEv9Eem_qa5hEGbw8Q" target="_ldNo4Ev9Eem_qa5hEGbw8Q">
            <ownedRule xmi:id="_lmv_YUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion202">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_lmv_YEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion202">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__WorkingMode__114&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_ldQsMUv9Eem_qa5hEGbw8Q" name="From__Substates__WorkingMode__116" source="_ldPeEEv9Eem_qa5hEGbw8Q" target="_lbB3kEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lmncgEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__160&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__95&quot;,&quot;To__New__State__95__111&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__114&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_ljAH0Ev9Eem_qa5hEGbw8Q" name="Trans__Pseudo87158" source="_GFOZ0BRjEeiFubQUFHg6OA" target="_lbB3kEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lmT6gEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__160&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;New__State__95&quot;,&quot;To__New__State__95__111&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__114&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_ljCkEEv9Eem_qa5hEGbw8Q" name="To__Substates__SetAlarm__160" guard="_lms8EUv9Eem_qa5hEGbw8Q" source="_lbB3kEv9Eem_qa5hEGbw8Q" target="_ljBV8Ev9Eem_qa5hEGbw8Q">
            <ownedRule xmi:id="_lms8EUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion200">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_lms8EEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion200">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__SetAlarm__160&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_ljFnYEv9Eem_qa5hEGbw8Q" name="From__Substates__SetAlarm__162" source="_ljEZQEv9Eem_qa5hEGbw8Q" target="_lbB3kEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lmPpEEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__160&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;New__State__95&quot;,&quot;To__New__State__95__111&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__114&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5UPGYBNsEeiFubQUFHg6OA" name="Pseudo82"/>
          <subvertex xmi:type="uml:State" xmi:id="_5UY3YBNsEeiFubQUFHg6OA" name="WorkingMode">
            <connectionPoint xmi:id="_qdGEQBNyEeiFubQUFHg6OA" name="keyPressEx" kind="exitPoint"/>
            <connectionPoint xmi:id="_2-cFABUfEeiYy9niOG6dTw" name="backFromAlarmSet" kind="entryPoint"/>
            <connectionPoint xmi:id="_ldNo4Ev9Eem_qa5hEGbw8Q" name="From__Parent__113" kind="entryPoint"/>
            <connectionPoint xmi:id="_ldPeEEv9Eem_qa5hEGbw8Q" name="To__Parent__115" kind="exitPoint"/>
            <region xmi:id="_qcoxQBNyEeiFubQUFHg6OA" name="Region1">
              <transition xmi:id="_-sDQ4BNyEeiFubQUFHg6OA" name="Pseudo86__WatchMode__92" kind="local" source="_OEEIEBgmEeiSBIpf1RqKYQ" target="_2NyEEBNyEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_y0FDgBXGEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    /// send message to TimeTracker to be activated
	timeTrackerP.Activate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_Q0xw0BNzEeiFubQUFHg6OA" name="btnPressed1" source="_2NyEEBNyEeiFubQUFHg6OA" target="_GT9dcBNzEeiFubQUFHg6OA">
                <trigger xmi:id="_b8GCoBRnEeiFubQUFHg6OA" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_S87wIBNzEeiFubQUFHg6OA" name="ignoreBtn" source="_GT9dcBNzEeiFubQUFHg6OA" target="_2NyEEBNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_me648BWrEeiYy9niOG6dTw">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_me648RWrEeiYy9niOG6dTw">
                    <language>C++</language>
                    <body>    if (ButtonID!=3  &amp;&amp; ButtonID!=0)
    	return true;
    else
    	return false;
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_XGRkEBNzEeiFubQUFHg6OA" name="leaveWatchMode" guard="_Q1zukBXDEeikLqTX9lOhHA" source="_GT9dcBNzEeiFubQUFHg6OA" target="_VhqWsBNzEeiFubQUFHg6OA">
                <ownedRule xmi:id="_Q1zukBXDEeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Q1zukRXDEeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    if (ButtonID=='0' ||  ButtonID=='3')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yVuzQBXJEeio2qtoBBAMvw">
                  <language>C++</language>
                  <body>    // leave watch mode
	timeTrackerP.Deactivate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ZwRFIBNzEeiFubQUFHg6OA" name="goStopWatch" guard="_Da_hgBW-EeikLqTX9lOhHA" source="_VhqWsBNzEeiFubQUFHg6OA" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_Da_hgBW-EeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Da_hgRW-EeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    if (ButtonID=='0')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_4C1AUBXGEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    // activate stopwatch
	stopWatchP.Activate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_aosh8BNzEeiFubQUFHg6OA" name="alarmSet1" source="_VhqWsBNzEeiFubQUFHg6OA" target="_qdGEQBNyEeiFubQUFHg6OA"/>
              <transition xmi:id="_M1WfQBRiEeiFubQUFHg6OA" name="keyPressed2" source="_34ui8BNyEeiFubQUFHg6OA" target="_5oJgABRgEeiFubQUFHg6OA">
                <trigger xmi:id="_hoSycBbCEei-ccFu-OwT7Q" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_SBFkUBRiEeiFubQUFHg6OA" name="leaveStopWatchMode" guard="_b-PbkBXDEeikLqTX9lOhHA" source="_5oJgABRgEeiFubQUFHg6OA" target="_PmcG0BRiEeiFubQUFHg6OA">
                <ownedRule xmi:id="_b-PbkBXDEeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_b-PbkRXDEeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    #define ButtonID ( *(char *)msg->getParam( 0 ) )
    if (ButtonID=='0' ||  ButtonID=='3')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ZfyNYBXJEeio2qtoBBAMvw">
                  <language>C++</language>
                  <body>    // leave stopwatch mode
	stopWatchP.Deactivate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_Tt5EYBRiEeiFubQUFHg6OA" name="ignoreBtn2" source="_5oJgABRgEeiFubQUFHg6OA" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_YAqlABW-EeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_YArMEBW-EeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>ButtonID!=0 &amp;&amp;  ButtonID!=3 </body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KDQf4BXHEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    // do reset and start of the stop watch here 
    #define ButtonID ( *(char *)msg->getParam( 0 ) )
    if (ButtonID=='1')
    stopWatchP.Toggle().send();
    else if (ButtonID=='2')
    stopWatchP.Reset().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_WEr8oBRiEeiFubQUFHg6OA" name="backWatchMode" guard="_nhGNABW-EeikLqTX9lOhHA" source="_PmcG0BRiEeiFubQUFHg6OA" target="_2NyEEBNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_nhGNABW-EeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_nhGNARW-EeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    #define ButtonID ( *(char *)msg->getParam( 0 ) )
    if (ButtonID=='0')
    return true;
    else 
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cibfABXJEeio2qtoBBAMvw">
                  <language>C++</language>
                  <body>    // go to watch mode
	timeTrackerP.Activate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_bwAgsBRiEeiFubQUFHg6OA" name="alarmSet2" source="_PmcG0BRiEeiFubQUFHg6OA" target="_qdGEQBNyEeiFubQUFHg6OA"/>
              <transition xmi:id="_T8G5gBgmEeiSBIpf1RqKYQ" name="backFromAlarmSet__Pseudo86__89" kind="local" source="_2-cFABUfEeiYy9niOG6dTw" target="_OEEIEBgmEeiSBIpf1RqKYQ"/>
              <transition xmi:id="_ldumQEv9Eem_qa5hEGbw8Q" name="Trans__Init__State__118119" source="_ldbEQEv9Eem_qa5hEGbw8Q" target="_ldR6UEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_liLocEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__118&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__154&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__118&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__151&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__118&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__152&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__118&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ld9PwEv9Eem_qa5hEGbw8Q" name="Trans__keyPressEx120" source="_qdGEQBNyEeiFubQUFHg6OA" target="_ldR6UEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_liUyYEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__154&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__151&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__152&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_leCvUEv9Eem_qa5hEGbw8Q" name="121" source="_5oJgABRgEeiFubQUFHg6OA" target="_ldR6UEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lh1qMEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo84&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__154&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo84&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__151&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo84&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__152&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo84&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_leCvUUv9Eem_qa5hEGbw8Q" name="122" source="_VhqWsBNzEeiFubQUFHg6OA" target="_ldR6UEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lhj9YEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo81&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__154&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo81&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__151&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo81&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__152&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo81&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_leDWYEv9Eem_qa5hEGbw8Q" name="123" source="_GT9dcBNzEeiFubQUFHg6OA" target="_ldR6UEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_liqwoEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo85&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__154&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo85&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__151&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo85&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__152&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo85&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_leD9cEv9Eem_qa5hEGbw8Q" name="124" source="_PmcG0BRiEeiFubQUFHg6OA" target="_ldR6UEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lilREEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo88&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__154&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo88&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__151&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo88&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__152&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo88&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_leFLkEv9Eem_qa5hEGbw8Q" name="From__WatchMode__125" source="_2NyEEBNyEeiFubQUFHg6OA" target="_ldR6UEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_liP54Ev9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WatchMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__154&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WatchMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__151&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__152&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_leHAwEv9Eem_qa5hEGbw8Q" name="PME_Trig126" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_leKEEEv9Eem_qa5hEGbw8Q" name="PME_Trig127" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lePjoEv9Eem_qa5hEGbw8Q" name="PME_Trig128" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_leTOAEv9Eem_qa5hEGbw8Q" name="PME_Trig129" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_leWRUEv9Eem_qa5hEGbw8Q" name="PME_Trig130" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_leZ7sEv9Eem_qa5hEGbw8Q" name="PME_Trig131" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lecX8Ev9Eem_qa5hEGbw8Q" name="PME_Trig132" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lefbQEv9Eem_qa5hEGbw8Q" name="PME_Trig133" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_leiekEv9Eem_qa5hEGbw8Q" name="PME_Trig134" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lek60Ev9Eem_qa5hEGbw8Q" name="PME_Trig135" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_len-IEv9Eem_qa5hEGbw8Q" name="PME_Trig136" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_lYaBYEv9Eem_qa5hEGbw8Q"/>
                <trigger xmi:id="_leqaYEv9Eem_qa5hEGbw8Q" name="PME_Trig137" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_leuEwEv9Eem_qa5hEGbw8Q" name="From__StopWatchMode__138" source="_34ui8BNyEeiFubQUFHg6OA" target="_ldR6UEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lhx_0Ev9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__154&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__151&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__152&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_lewhAEv9Eem_qa5hEGbw8Q" name="PME_Trig139" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_le0LYEv9Eem_qa5hEGbw8Q" name="PME_Trig140" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_le3OsEv9Eem_qa5hEGbw8Q" name="PME_Trig141" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lgRj8Ev9Eem_qa5hEGbw8Q" name="PME_Trig142" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lgUAMEv9Eem_qa5hEGbw8Q" name="PME_Trig143" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lgdKIEv9Eem_qa5hEGbw8Q" name="PME_Trig144" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lgg0gEv9Eem_qa5hEGbw8Q" name="PME_Trig145" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lgsasEv9Eem_qa5hEGbw8Q" name="PME_Trig146" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lg09kEv9Eem_qa5hEGbw8Q" name="PME_Trig147" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lg4A4Ev9Eem_qa5hEGbw8Q" name="PME_Trig148" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lg7rQEv9Eem_qa5hEGbw8Q" name="PME_Trig149" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_lYaBYEv9Eem_qa5hEGbw8Q"/>
                <trigger xmi:id="_lhE1MEv9Eem_qa5hEGbw8Q" name="PME_Trig150" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_lhKUwEv9Eem_qa5hEGbw8Q" name="To__WatchMode__151" guard="_li8dcUv9Eem_qa5hEGbw8Q" source="_ldR6UEv9Eem_qa5hEGbw8Q" target="_2NyEEBNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_li8dcUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion156">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_li8dcEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion156">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__WatchMode__151&quot;,&quot;WatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_lhKUwUv9Eem_qa5hEGbw8Q" name="To__StopWatchMode__152" guard="_li9rkUv9Eem_qa5hEGbw8Q" source="_ldR6UEv9Eem_qa5hEGbw8Q" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_li9rkUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion157">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_li9rkEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion157">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__StopWatchMode__152&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_lhOmMEv9Eem_qa5hEGbw8Q" name="From__Parnet__StateMachine__153" source="_ldNo4Ev9Eem_qa5hEGbw8Q" target="_ldR6UEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_liGv8Ev9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__154&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__151&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__152&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_lhed0Ev9Eem_qa5hEGbw8Q" name="To__Parent__StateMachine__154" guard="_li72YUv9Eem_qa5hEGbw8Q" source="_ldR6UEv9Eem_qa5hEGbw8Q" target="_ldPeEEv9Eem_qa5hEGbw8Q">
                <ownedRule xmi:id="_li72YUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion155">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_li72YEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion155">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__154&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_2NyEEBNyEeiFubQUFHg6OA" name="WatchMode"/>
              <subvertex xmi:type="uml:State" xmi:id="_34ui8BNyEeiFubQUFHg6OA" name="StopWatchMode"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_GT9dcBNzEeiFubQUFHg6OA" name="Pseudo85" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_VhqWsBNzEeiFubQUFHg6OA" name="Pseudo81" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_5oJgABRgEeiFubQUFHg6OA" name="Pseudo84" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_PmcG0BRiEeiFubQUFHg6OA" name="Pseudo88" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_OEEIEBgmEeiSBIpf1RqKYQ" name="Pseudo86" kind="junction"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_ldR6UEv9Eem_qa5hEGbw8Q" name="DecesionPoint__117" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_ldbEQEv9Eem_qa5hEGbw8Q" name="Init__State__118"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_m0-1cBNvEeiFubQUFHg6OA" name="SetAlarm">
            <connectionPoint xmi:id="_GFOZ0BRjEeiFubQUFHg6OA" name="Pseudo87" kind="exitPoint"/>
            <connectionPoint xmi:id="_ljBV8Ev9Eem_qa5hEGbw8Q" name="From__Parent__159" kind="entryPoint"/>
            <connectionPoint xmi:id="_ljEZQEv9Eem_qa5hEGbw8Q" name="To__Parent__161" kind="exitPoint"/>
            <region xmi:id="_GFF28BRjEeiFubQUFHg6OA" name="Region1">
              <ownedComment xmi:id="_PbsboBghEei-ccFu-OwT7Q"/>
              <transition xmi:id="_L6OeUBRjEeiFubQUFHg6OA" name="readHourResult" source="_G6Ch8BRjEeiFubQUFHg6OA" target="_HQIGsBRjEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_AByssBgREei-ccFu-OwT7Q">
                  <language>C++</language>
                  <body>    ////
    this->alarmHour=InputInt;
    buttonsP.ReadInt(&quot;Enter Minute: &quot;).send();

</body>
                </effect>
                <trigger xmi:id="_v232YBRkEeiFubQUFHg6OA" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_TD2MYBRjEeiFubQUFHg6OA" name="readMinResult" source="_HQIGsBRjEeiFubQUFHg6OA" target="_GFOZ0BRjEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_FL2WwBgREei-ccFu-OwT7Q">
                  <language>C++</language>
                  <body>////
	this->alarmMinute=InputInt;
	alarmP.SetAlarm(this->alarmHour,this->alarmMinute,0).send();
	displayGateKeeperP.ShowText(0,&quot;Alarm Is Set&quot;).send();</body>
                </effect>
                <trigger xmi:id="_8FyqUBRkEeiFubQUFHg6OA" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_y76_4BeSEei-ccFu-OwT7Q" name="readHour__Pseudo83__90" source="_G6Ch8BRjEeiFubQUFHg6OA" target="_smhkEBeSEei-ccFu-OwT7Q">
                <trigger xmi:id="_A-higBeUEei-ccFu-OwT7Q" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_4LBiABeSEei-ccFu-OwT7Q" name="Pseudo83__Pseudo87__91" guard="_7-wA8BgDEei-ccFu-OwT7Q" source="_smhkEBeSEei-ccFu-OwT7Q" target="_GFOZ0BRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_7-wA8BgDEei-ccFu-OwT7Q">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_7-wA8RgDEei-ccFu-OwT7Q">
                    <language>C++</language>
                    <body>////
	if (ButtonID!='3')
		return true;
	else
		return false;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_DwyrQBeTEei-ccFu-OwT7Q" name="Pseudo83__readHour__93" source="_smhkEBeSEei-ccFu-OwT7Q" target="_G6Ch8BRjEeiFubQUFHg6OA"/>
              <transition xmi:id="_ljWGEEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo87165" source="_GFOZ0BRjEeiFubQUFHg6OA" target="_ljGOcEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_llroYEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readMinute&quot;,&quot;To__readMinute__193&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readHour&quot;,&quot;To__readHour__194&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ljWtIEv9Eem_qa5hEGbw8Q" name="Trans__Init__State__164166" source="_ljIqsEv9Eem_qa5hEGbw8Q" target="_ljGOcEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lmF4EEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__164&quot;,&quot;readMinute&quot;,&quot;To__readMinute__193&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__164&quot;,&quot;readHour&quot;,&quot;To__readHour__194&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__164&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__164&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ljkvkEv9Eem_qa5hEGbw8Q" name="167" source="_smhkEBeSEei-ccFu-OwT7Q" target="_ljGOcEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_llmv4Ev9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo83&quot;,&quot;readMinute&quot;,&quot;To__readMinute__193&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo83&quot;,&quot;readHour&quot;,&quot;To__readHour__194&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo83&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo83&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ljmkwEv9Eem_qa5hEGbw8Q" name="From__readMinute__168" source="_HQIGsBRjEeiFubQUFHg6OA" target="_ljGOcEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ll8uIEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;readMinute&quot;,&quot;To__readMinute__193&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;readHour&quot;,&quot;To__readHour__194&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;readMinute&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_ljoZ8Ev9Eem_qa5hEGbw8Q" name="PME_Trig169" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ljw80Ev9Eem_qa5hEGbw8Q" name="PME_Trig170" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lj11UEv9Eem_qa5hEGbw8Q" name="PME_Trig171" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lj7U4Ev9Eem_qa5hEGbw8Q" name="PME_Trig172" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lkJXUEv9Eem_qa5hEGbw8Q" name="PME_Trig173" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lkR6MEv9Eem_qa5hEGbw8Q" name="PME_Trig174" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lkWysEv9Eem_qa5hEGbw8Q" name="PME_Trig175" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lkadEEv9Eem_qa5hEGbw8Q" name="PME_Trig176" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lkkOEEv9Eem_qa5hEGbw8Q" name="PME_Trig177" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lkpGkEv9Eem_qa5hEGbw8Q" name="PME_Trig178" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lksJ4Ev9Eem_qa5hEGbw8Q" name="PME_Trig179" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_lYaBYEv9Eem_qa5hEGbw8Q"/>
                <trigger xmi:id="_lkvNMEv9Eem_qa5hEGbw8Q" name="PME_Trig180" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_lkyQgEv9Eem_qa5hEGbw8Q" name="From__readHour__181" source="_G6Ch8BRjEeiFubQUFHg6OA" target="_ljGOcEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ll5DwEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;readMinute&quot;,&quot;To__readMinute__193&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;readHour&quot;,&quot;To__readHour__194&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;readHour&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_lk0swEv9Eem_qa5hEGbw8Q" name="PME_Trig182" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lk3wEEv9Eem_qa5hEGbw8Q" name="PME_Trig183" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_lk7acEv9Eem_qa5hEGbw8Q" name="PME_Trig184" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_llCIIEv9Eem_qa5hEGbw8Q" name="PME_Trig185" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_llFLcEv9Eem_qa5hEGbw8Q" name="PME_Trig186" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_llI10Ev9Eem_qa5hEGbw8Q" name="PME_Trig187" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_llL5IEv9Eem_qa5hEGbw8Q" name="PME_Trig188" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_llO8cEv9Eem_qa5hEGbw8Q" name="PME_Trig189" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_llR_wEv9Eem_qa5hEGbw8Q" name="PME_Trig190" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_llVqIEv9Eem_qa5hEGbw8Q" name="PME_Trig191" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_lYaBYEv9Eem_qa5hEGbw8Q"/>
                <trigger xmi:id="_llYGYEv9Eem_qa5hEGbw8Q" name="PME_Trig192" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_lldl8Ev9Eem_qa5hEGbw8Q" name="To__readMinute__193" guard="_lmHGMUv9Eem_qa5hEGbw8Q" source="_ljGOcEv9Eem_qa5hEGbw8Q" target="_HQIGsBRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_lmHGMUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion197">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_lmHGMEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion197">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__readMinute__193&quot;,&quot;readMinute&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_lleNAEv9Eem_qa5hEGbw8Q" name="To__readHour__194" guard="_lmIUUUv9Eem_qa5hEGbw8Q" source="_ljGOcEv9Eem_qa5hEGbw8Q" target="_G6Ch8BRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_lmIUUUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion198">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_lmIUUEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion198">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__readHour__194&quot;,&quot;readHour&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_llhQUEv9Eem_qa5hEGbw8Q" name="From__Parnet__StateMachine__195" source="_ljBV8Ev9Eem_qa5hEGbw8Q" target="_ljGOcEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lmAYgEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readMinute&quot;,&quot;To__readMinute__193&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readHour&quot;,&quot;To__readHour__194&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_llh3YEv9Eem_qa5hEGbw8Q" name="To__Parent__StateMachine__196" guard="_lmJicUv9Eem_qa5hEGbw8Q" source="_ljGOcEv9Eem_qa5hEGbw8Q" target="_ljEZQEv9Eem_qa5hEGbw8Q">
                <ownedRule xmi:id="_lmJicUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion199">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_lmJicEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion199">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__196&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_G6Ch8BRjEeiFubQUFHg6OA" name="readHour"/>
              <subvertex xmi:type="uml:State" xmi:id="_HQIGsBRjEeiFubQUFHg6OA" name="readMinute"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_smhkEBeSEei-ccFu-OwT7Q" name="Pseudo83" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_ljGOcEv9Eem_qa5hEGbw8Q" name="DecesionPoint__163" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_ljIqsEv9Eem_qa5hEGbw8Q" name="Init__State__164"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_lbB3kEv9Eem_qa5hEGbw8Q" name="DecesionPoint__94" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_lbET0Ev9Eem_qa5hEGbw8Q" name="New__State__95"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lZBscUv9Eem_qa5hEGbw8Q" name="loadHeap" specification="_lZBscEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lZDhoUv9Eem_qa5hEGbw8Q" name="unLoadHeap" specification="_lZDhoEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lZ4BAUv9Eem_qa5hEGbw8Q" name="sendMessage" specification="_lZ4BAEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ReadInt&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadInt( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;TextToShow&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;RemAlarm&quot;) {
   if(message.payload.size()==1){
    alarmP.RemAlarm( boost::any_cast&lt;int>(message.payload[&quot;alarmID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;viewAlarmReq&quot;) {
   if(message.payload.size()==0){
    alarmP.viewAlarmReq().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;SetAlarm&quot;) {
   if(message.payload.size()==3){
    alarmP.SetAlarm( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;oneShot&quot;])).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Toggle&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Toggle().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Reset&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Reset().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Deactivate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Resume&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Resume().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Deactivate().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_laEOQEv9Eem_qa5hEGbw8Q" name="sendInternalMessage" specification="_laDnMEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_la3fgEv9Eem_qa5hEGbw8Q" name="initForPMD" specification="_la24cEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_WatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_WatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_lZBscEv9Eem_qa5hEGbw8Q" name="loadHeap" visibility="private" method="_lZBscUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lZDhoEv9Eem_qa5hEGbw8Q" name="unLoadHeap" visibility="private" method="_lZDhoUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lZ4BAEv9Eem_qa5hEGbw8Q" name="sendMessage" visibility="private" method="_lZ4BAUv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lZ5PIEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_laCZEEv9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_laDnMEv9Eem_qa5hEGbw8Q" name="sendInternalMessage" visibility="private" method="_laEOQEv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_laFcYEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_laGqgEv9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_la24cEv9Eem_qa5hEGbw8Q" name="initForPMD" visibility="private" method="_la3fgEv9Eem_qa5hEGbw8Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_EUMt0AqvEeiwdpidSbDb2g" name="TimeTracker" classifierBehavior="_f9DS0Ar0EeiwdpidSbDb2g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="__kPLsArjEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_7dRcsArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_-6GrwAryEeiwdpidSbDb2g" name="timeTrackingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_L22PAArzEeiwdpidSbDb2g" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yQcqUAr3EeiwdpidSbDb2g" name="showTimeTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KsSnIBKYEeiBE_x0ZD7_9g" name="clockResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_UKWdABKYEeiBE_x0ZD7_9g" value="500"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_7xV-8BbCEei-ccFu-OwT7Q" name="showTimeTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_loMJ0Ev9Eem_qa5hEGbw8Q" name="dbgPortForTimeTracker" visibility="protected" type="_lGys8Ev9Eem_qa5hEGbw8Q" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_loMw4Ev9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_loMw4Uv9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_f9DS0Ar0EeiwdpidSbDb2g" name="TimeTrackerSM" isReentrant="false">
        <region xmi:id="_gAJqIAr0EeiwdpidSbDb2g" name="Region">
          <transition xmi:id="_hUWAcAr1EeiwdpidSbDb2g" name="updateTime" source="_hUNdkAr1EeiwdpidSbDb2g" target="_hUSWEAr1EeiwdpidSbDb2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ZSxQsBKKEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>milliTime= milliTime+clockResolution;
</body>
            </effect>
            <trigger xmi:id="_8R-qkAsAEeiwdpidSbDb2g" port="_-6GrwAryEeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_pbEP8Ar1EeiwdpidSbDb2g" name="init " source="_gAMtcAr0EeiwdpidSbDb2g" target="_pbBzsAr1EeiwdpidSbDb2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_0z3DoBKJEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>initForPMD();
displayGateKeeperP.ShowText(0,&quot;TimeTracker capsule is started&quot;).send();
timeTrackingTimer.informEvery(UMLRTTimespec(0,clockResolution*1000000),0);
showTimeTimerID=showTimeTimer.informEvery(UMLRTTimespec(1,0),0);

</body>
            </effect>
          </transition>
          <transition xmi:id="_lrqUkEv9Eem_qa5hEGbw8Q" name="From__New__State__220__221" source="_lrhKoEv9Eem_qa5hEGbw8Q" target="_lrUWUEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_luPugEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__220&quot;,&quot;New__State__220&quot;,&quot;To__New__State__220__229&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__220&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__232&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__220&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_lrtX4Ev9Eem_qa5hEGbw8Q" name="PME_Trig222" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_loMJ0Ev9Eem_qa5hEGbw8Q"/>
            <trigger xmi:id="_lrwbMEv9Eem_qa5hEGbw8Q" name="PME_Trig223" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lry3cEv9Eem_qa5hEGbw8Q" name="PME_Trig224" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lr_rwEv9Eem_qa5hEGbw8Q" name="PME_Trig225" port="_-6GrwAryEeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_lsDWIEv9Eem_qa5hEGbw8Q" name="PME_Trig226" port="_yQcqUAr3EeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_lsFyYEv9Eem_qa5hEGbw8Q" name="PME_Trig227" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_lsI1sEv9Eem_qa5hEGbw8Q" name="PME_Trig228" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_lsL5AEv9Eem_qa5hEGbw8Q" name="To__New__State__220__229" guard="_luQVkUv9Eem_qa5hEGbw8Q" source="_lrUWUEv9Eem_qa5hEGbw8Q" target="_lrhKoEv9Eem_qa5hEGbw8Q">
            <ownedRule xmi:id="_luQVkUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion250">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_luQVkEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion250">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__220__229&quot;,&quot;New__State__220&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_lsVqAEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo213230" source="_hUNdkAr1EeiwdpidSbDb2g" target="_lrUWUEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_luNSQEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__220&quot;,&quot;To__New__State__220__229&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__232&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_lsc-wUv9Eem_qa5hEGbw8Q" name="To__Substates__TrackingTime__232" guard="_ludw8Uv9Eem_qa5hEGbw8Q" source="_lrUWUEv9Eem_qa5hEGbw8Q" target="_lsVqAUv9Eem_qa5hEGbw8Q">
            <ownedRule xmi:id="_ludw8Uv9Eem_qa5hEGbw8Q" name="PME_checkDecesion251">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ludw8Ev9Eem_qa5hEGbw8Q" name="PME_checkDecesion251">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__TrackingTime__232&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_lsez8Uv9Eem_qa5hEGbw8Q" name="From__Substates__TrackingTime__234" source="_lsdl0Ev9Eem_qa5hEGbw8Q" target="_lrUWUEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_luKO8Ev9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__220&quot;,&quot;To__New__State__220__229&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__232&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_gAMtcAr0EeiwdpidSbDb2g" name="Pseudo216"/>
          <subvertex xmi:type="uml:State" xmi:id="_gARl8Ar0EeiwdpidSbDb2g" name="TrackingTime">
            <connectionPoint xmi:id="_hUNdkAr1EeiwdpidSbDb2g" name="Pseudo213" kind="exitPoint"/>
            <connectionPoint xmi:id="_hUSWEAr1EeiwdpidSbDb2g" name="Pseudo214" kind="entryPoint"/>
            <connectionPoint xmi:id="_pbBzsAr1EeiwdpidSbDb2g" name="Pseudo215" kind="entryPoint"/>
            <connectionPoint xmi:id="_lsVqAUv9Eem_qa5hEGbw8Q" name="From__Parent__231" kind="entryPoint"/>
            <connectionPoint xmi:id="_lsdl0Ev9Eem_qa5hEGbw8Q" name="To__Parent__233" kind="exitPoint"/>
            <region xmi:id="_BISvsAr1EeiwdpidSbDb2g" name="Region1">
              <transition xmi:id="_PY02EAr1EeiwdpidSbDb2g" name="Pseudo217__Active__218" source="_CEn1EAr1EeiwdpidSbDb2g" target="_DTbxkAr1EeiwdpidSbDb2g"/>
              <transition xmi:id="_RrrNAAr2EeiwdpidSbDb2g" name="ignoreActive" source="_DTbxkAr1EeiwdpidSbDb2g" target="_DTbxkAr1EeiwdpidSbDb2g">
                <trigger xmi:id="_iP6wgAr4EeiwdpidSbDb2g" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_otIWcAr2EeiwdpidSbDb2g" name="showTime" source="_DTbxkAr1EeiwdpidSbDb2g" target="_DTbxkAr1EeiwdpidSbDb2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_XpX0gBKLEeiEEYKmuRZPIg">
                  <language>C++</language>
                  <body>int hour=    milliTime/(1000*60*60);
int minute= milliTime % (1000*60*60) / (1000*60);
int second= milliTime % (1000*60) / 1000;
displayGateKeeperP.ShowTime(hour,minute,second ).send();
</body>
                </effect>
                <trigger xmi:id="_brsOgAr4EeiwdpidSbDb2g" port="_yQcqUAr3EeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:id="_lsmIsEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo213236" source="_hUNdkAr1EeiwdpidSbDb2g" target="_lsfbAEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_luBFAEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;Active&quot;,&quot;To__Active__245&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__247&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_lsmvwEv9Eem_qa5hEGbw8Q" name="Trans__Pseudo214237" source="_hUSWEAr1EeiwdpidSbDb2g" target="_lsfbAEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ltpRkEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;Active&quot;,&quot;To__Active__245&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__247&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_lsnW0Ev9Eem_qa5hEGbw8Q" name="Trans__Pseudo215238" source="_pbBzsAr1EeiwdpidSbDb2g" target="_lsfbAEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ltgusEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;Active&quot;,&quot;To__Active__245&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__247&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_lsrBMEv9Eem_qa5hEGbw8Q" name="From__Active__239" source="_DTbxkAr1EeiwdpidSbDb2g" target="_lsfbAEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ltjyAEv9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;Active&quot;,&quot;To__Active__245&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__247&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Active&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_ls5DoEv9Eem_qa5hEGbw8Q" name="PME_Trig240" event="_lHQnAEv9Eem_qa5hEGbw8Q" port="_loMJ0Ev9Eem_qa5hEGbw8Q"/>
                <trigger xmi:id="_ls8G8Ev9Eem_qa5hEGbw8Q" name="PME_Trig241" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ls_KQEv9Eem_qa5hEGbw8Q" name="PME_Trig242" port="_-6GrwAryEeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_ltCNkEv9Eem_qa5hEGbw8Q" name="PME_Trig243" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ltFQ4Ev9Eem_qa5hEGbw8Q" name="PME_Trig244" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_ltWWoEv9Eem_qa5hEGbw8Q" name="To__Active__245" guard="_luCTIUv9Eem_qa5hEGbw8Q" source="_lsfbAEv9Eem_qa5hEGbw8Q" target="_DTbxkAr1EeiwdpidSbDb2g">
                <ownedRule xmi:id="_luCTIUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion248">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_luCTIEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion248">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Active__245&quot;,&quot;Active&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_ltYy4Ev9Eem_qa5hEGbw8Q" name="From__Parnet__TimeTrackerSM__246" source="_lsVqAUv9Eem_qa5hEGbw8Q" target="_lsfbAEv9Eem_qa5hEGbw8Q">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ltsU4Ev9Eem_qa5hEGbw8Q">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;Active&quot;,&quot;To__Active__245&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__247&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ltZZ8Ev9Eem_qa5hEGbw8Q" name="To__Parent__TimeTrackerSM__247" guard="_luEvYUv9Eem_qa5hEGbw8Q" source="_lsfbAEv9Eem_qa5hEGbw8Q" target="_lsdl0Ev9Eem_qa5hEGbw8Q">
                <ownedRule xmi:id="_luEvYUv9Eem_qa5hEGbw8Q" name="PME_checkDecesion249">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_luEvYEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion249">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__TimeTrackerSM__247&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_CEn1EAr1EeiwdpidSbDb2g" name="Pseudo217"/>
              <subvertex xmi:type="uml:State" xmi:id="_DTbxkAr1EeiwdpidSbDb2g" name="Active"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_lsfbAEv9Eem_qa5hEGbw8Q" name="DecesionPoint__235" kind="choice"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_lrUWUEv9Eem_qa5hEGbw8Q" name="DecesionPoint__219" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_lrhKoEv9Eem_qa5hEGbw8Q" name="New__State__220"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_log58Uv9Eem_qa5hEGbw8Q" name="loadHeap" specification="_log58Ev9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.clockResolution&quot;,this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_loj9QUv9Eem_qa5hEGbw8Q" name="unLoadHeap" specification="_loj9QEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.clockResolution&quot;,&amp;this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lo57gUv9Eem_qa5hEGbw8Q" name="sendMessage" specification="_lo57gEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lo9l4Uv9Eem_qa5hEGbw8Q" name="sendInternalMessage" specification="_lo9l4Ev9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lrGT4Uv9Eem_qa5hEGbw8Q" name="initForPMD" specification="_lrGT4Ev9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_TimeTracker::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_TimeTracker::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;showTimeTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForTimeTracker&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_log58Ev9Eem_qa5hEGbw8Q" name="loadHeap" visibility="private" method="_log58Uv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_loj9QEv9Eem_qa5hEGbw8Q" name="unLoadHeap" visibility="private" method="_loj9QUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lo57gEv9Eem_qa5hEGbw8Q" name="sendMessage" visibility="private" method="_lo57gUv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lo7JoEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_lo8XwUv9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_lo9l4Ev9Eem_qa5hEGbw8Q" name="sendInternalMessage" visibility="private" method="_lo9l4Uv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lo-0AEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_lpApMEv9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_lrGT4Ev9Eem_qa5hEGbw8Q" name="initForPMD" visibility="private" method="_lrGT4Uv9Eem_qa5hEGbw8Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_OX25MAqxEeiwdpidSbDb2g" name="ButtonsP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_OXynwAqxEeiwdpidSbDb2g" name="ButtonsP">
        <interfaceRealization xmi:id="_OX_cEAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OX7KoAqxEeiwdpidSbDb2g" contract="_OX7KoAqxEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_OYLCQAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g" contract="_OYH-8AqxEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OX7KoAqxEeiwdpidSbDb2g" name="ButtonsP">
        <ownedOperation xmi:id="_-aZWABFKEeibZqndpu8erg" name="ReadInt">
          <ownedParameter xmi:id="_EERNMBgdEei-ccFu-OwT7Q" name="TextToShow">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYB4UAqxEeiwdpidSbDb2g" name="ButtonsP~">
        <ownedOperation xmi:id="_SXAPUAqxEeiwdpidSbDb2g" name="ButtonPressed">
          <ownedParameter xmi:id="_n9--0AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrus.designer.languages.cpp.library_1.0.4.jar!/models/AnsiCLibrary.uml#_5lVhgBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_XpIQQAqxEeiwdpidSbDb2g" name="ButtonHold">
          <ownedParameter xmi:id="_nYJt4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_cpytwAqxEeiwdpidSbDb2g" name="ButtonReleased">
          <ownedParameter xmi:id="_jp9k4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_nYfEIBFLEeibZqndpu8erg" name="ReadIntResult">
          <ownedParameter xmi:id="_nYfEIRFLEeibZqndpu8erg" name="InputInt">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYGJwAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYB4UAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_OYGw0AqxEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYH-8AqxEeiwdpidSbDb2g" name="ButtonsPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYLpUAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_SXXbsAqxEeiwdpidSbDb2g" operation="_SXAPUAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_XpPlAAqxEeiwdpidSbDb2g" operation="_XpIQQAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_cp40YAqxEeiwdpidSbDb2g" operation="_cpytwAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_-anYcBFKEeibZqndpu8erg" operation="_-aZWABFKEeibZqndpu8erg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_nYhgYBFLEeibZqndpu8erg" operation="_nYfEIBFLEeibZqndpu8erg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_atLzIArdEeiwdpidSbDb2g" name="AlarmP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_atHhsArdEeiwdpidSbDb2g" name="AlarmP">
        <interfaceRealization xmi:id="_atTH4ArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atQEkArdEeiwdpidSbDb2g" contract="_atQEkArdEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_ateHAArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g" contract="_atZ1kArdEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atQEkArdEeiwdpidSbDb2g" name="AlarmP">
        <ownedOperation xmi:id="_de5s0ArdEeiwdpidSbDb2g" name="SetAlarm">
          <ownedParameter xmi:id="_g8GMcArdEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_k_tL0ArdEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_n-OLYArdEeiwdpidSbDb2g" name="oneShot">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_suDXkArdEeiwdpidSbDb2g" name="RemAlarm">
          <ownedParameter xmi:id="_suDXkQrdEeiwdpidSbDb2g" name="alarmID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_0IE5IArdEeiwdpidSbDb2g" name="viewAlarmReq"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atU9EArdEeiwdpidSbDb2g" name="AlarmP~">
        <ownedOperation xmi:id="_d5y8QArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_d5y8QQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_d5zjUQrhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_d50KYArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atYncArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atU9EArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_atZOgArdEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atZ1kArdEeiwdpidSbDb2g" name="AlarmPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atfVIArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_dfgJwArdEeiwdpidSbDb2g" operation="_de5s0ArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_suGa4ArdEeiwdpidSbDb2g" operation="_suDXkArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_0IHVYArdEeiwdpidSbDb2g" operation="_0IE5IArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d5zjUArhEeiwdpidSbDb2g" operation="_d5y8QArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d50KYQrhEeiwdpidSbDb2g" operation="_d5zjUQrhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Viyf8ArfEeiwdpidSbDb2g" name="StopWatchP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Viyf8QrfEeiwdpidSbDb2g" name="StopWatchP">
        <interfaceRealization xmi:id="_Viyf8grfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf9ArfEeiwdpidSbDb2g" contract="_Viyf9ArfEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Viyf8wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g" contract="_ViygAQrfEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf9ArfEeiwdpidSbDb2g" name="StopWatchP">
        <ownedOperation xmi:id="_Viyf9QrfEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Viyf-QrfEeiwdpidSbDb2g" name="Reset"/>
        <ownedOperation xmi:id="_Viyf-wrfEeiwdpidSbDb2g" name="Deactivate"/>
        <ownedOperation xmi:id="_Viyf_ArfEeiwdpidSbDb2g" name="Resume"/>
        <ownedOperation xmi:id="_mM4pQArgEeiwdpidSbDb2g" name="Toggle"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf_grfEeiwdpidSbDb2g" name="StopWatchP~">
        <ownedOperation xmi:id="_RNPKEArhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_WQpZkArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_bGjYkArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_bGjYkQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Viyf_wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf_grfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_ViygAArfEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ViygAQrfEeiwdpidSbDb2g" name="StopWatchPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ViygAgrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygAwrfEeiwdpidSbDb2g" operation="_Viyf9QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBArfEeiwdpidSbDb2g" operation="_Viyf-QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBQrfEeiwdpidSbDb2g" operation="_Viyf-wrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBgrfEeiwdpidSbDb2g" operation="_Viyf_ArfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_mM5QUArgEeiwdpidSbDb2g" operation="_mM4pQArgEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_RNQYMArhEeiwdpidSbDb2g" operation="_RNPKEArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bGjYkgrhEeiwdpidSbDb2g" operation="_bGjYkArhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Lo6JYAriEeiwdpidSbDb2g" name="TimeTrackerP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Lo6JYQriEeiwdpidSbDb2g" name="TimeTrackerP">
        <interfaceRealization xmi:id="_Lo6JYgriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JZAriEeiwdpidSbDb2g" contract="_Lo6JZAriEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Lo6JYwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g" contract="_Lo6JcgriEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JZAriEeiwdpidSbDb2g" name="TimeTrackerP">
        <ownedOperation xmi:id="_Lo6JaQriEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Lo6JagriEeiwdpidSbDb2g" name="Deactivate"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JawriEeiwdpidSbDb2g" name="TimeTrackerP~">
        <ownedOperation xmi:id="_Lo6JbAriEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_Lo6JbQriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Lo6JbgriEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_Lo6JbwriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcAriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JawriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_Lo6JcQriEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JcgriEeiwdpidSbDb2g" name="TimeTrackerPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeAriEeiwdpidSbDb2g" operation="_Lo6JaQriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeQriEeiwdpidSbDb2g" operation="_Lo6JagriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JegriEeiwdpidSbDb2g" operation="_Lo6JbAriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JewriEeiwdpidSbDb2g" operation="_Lo6JbgriEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="__mIMoArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="__mIMoQrkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <interfaceRealization xmi:id="__mIMogrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMpArkEeiwdpidSbDb2g" contract="__mIMpArkEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="__mIMowrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g" contract="__mIMtQrkEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMpArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <ownedOperation xmi:id="__mIMpQrkEeiwdpidSbDb2g" name="ShowTime">
          <ownedParameter xmi:id="__mIMpgrkEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMpwrkEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMqArkEeiwdpidSbDb2g" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqQrkEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="__mIMqgrkEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_SddfAArlEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqwrkEeiwdpidSbDb2g" name="ShowCounter">
          <ownedParameter xmi:id="_gD0nAArlEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xd8cBKIEeiEEYKmuRZPIg" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xt0EBKIEeiEEYKmuRZPIg" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_3cTiABKIEeiEEYKmuRZPIg" name="milli">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMrgrkEeiwdpidSbDb2g" name="DisplayGateKeeperP~">
        <ownedOperation xmi:id="__mIMrwrkEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="__mIMsArkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMsQrkEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="__mIMsgrkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMswrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMrgrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="__mIMtArkEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMtQrkEeiwdpidSbDb2g" name="DisplayGateKeeperPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMtgrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMtwrkEeiwdpidSbDb2g" operation="__mIMpQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuArkEeiwdpidSbDb2g" operation="__mIMqQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuQrkEeiwdpidSbDb2g" operation="__mIMqwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuwrkEeiwdpidSbDb2g" operation="__mIMrwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMvArkEeiwdpidSbDb2g" operation="__mIMsQrkEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_EOr9EAruEeiwdpidSbDb2g" name="DisplayP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_EOqu8AruEeiwdpidSbDb2g" name="DisplayP">
        <interfaceRealization xmi:id="_EOw1kAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOuZUAruEeiwdpidSbDb2g" contract="_EOuZUAruEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_EO5YcAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g" contract="_EO2VIAruEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOuZUAruEeiwdpidSbDb2g" name="DisplayP">
        <ownedOperation xmi:id="_gYfq8ArvEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="_gYfq8QrvEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gYfq8grvEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOyDsAruEeiwdpidSbDb2g" name="DisplayP~"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO1HAAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOyDsAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_EO1uEAruEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EO2VIAruEeiwdpidSbDb2g" name="DisplayPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO6mkAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_gYhgIArvEeiwdpidSbDb2g" operation="_gYfq8ArvEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_lB4-0Ev9Eem_qa5hEGbw8Q" name="dbgAgent">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_lHScMEv9Eem_qa5hEGbw8Q" name="timing" visibility="protected">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_lHTqUEv9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_lHURYEv9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_lL8SsEv9Eem_qa5hEGbw8Q" name="dbgPortForAlarmsCapsule" visibility="public" type="_lGys8Ev9Eem_qa5hEGbw8Q" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_lL85wEv9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_lL9g0Ev9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_lQmwQEv9Eem_qa5hEGbw8Q" name="dbgPortForStopWatchCore" visibility="public" type="_lGys8Ev9Eem_qa5hEGbw8Q" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_lQpMgEv9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_lQqaoEv9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_lYdrwEv9Eem_qa5hEGbw8Q" name="dbgPortForWatchCore" visibility="public" type="_lGys8Ev9Eem_qa5hEGbw8Q" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_lYdrwUv9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_lYeS0Ev9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_lm034Ev9Eem_qa5hEGbw8Q" name="dbgPortForDisplayGateKeeper" visibility="public" type="_lGys8Ev9Eem_qa5hEGbw8Q" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_lm034Uv9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_lm034kv9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_loP0MEv9Eem_qa5hEGbw8Q" name="dbgPortForTimeTracker" visibility="public" type="_lGys8Ev9Eem_qa5hEGbw8Q" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_loQbQEv9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_loQbQUv9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_lumT0Ev9Eem_qa5hEGbw8Q" name="dbgPortForButtonsReader" visibility="public" type="_lGys8Ev9Eem_qa5hEGbw8Q" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_lumT0Uv9Eem_qa5hEGbw8Q" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_lum64Ev9Eem_qa5hEGbw8Q" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_lGiOQEv9Eem_qa5hEGbw8Q" name="dbgAgent StateMachine">
        <region xmi:id="_lKv_4Ev9Eem_qa5hEGbw8Q" name="mainRegion">
          <transition xmi:id="_lK_3gEv9Eem_qa5hEGbw8Q" name="Trans__Init__State__34" source="_lK8NIEv9Eem_qa5hEGbw8Q" target="_lKzDMEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lLVOsEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__3&quot;,&quot;New__State__2&quot;,&quot;To__New__State__2__7&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__3&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_lLDh4Ev9Eem_qa5hEGbw8Q" name="From__New__State__2__5" source="_lK3UoEv9Eem_qa5hEGbw8Q" target="_lKzDMEv9Eem_qa5hEGbw8Q">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lLj4MEv9Eem_qa5hEGbw8Q">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__2&quot;,&quot;New__State__2&quot;,&quot;To__New__State__2__7&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__2&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_lLHMQEv9Eem_qa5hEGbw8Q" name="PME_Trig6" port="_lHScMEv9Eem_qa5hEGbw8Q">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_lLMr0Ev9Eem_qa5hEGbw8Q" name="To__New__State__2__7" guard="_lLp-0Ev9Eem_qa5hEGbw8Q" source="_lKzDMEv9Eem_qa5hEGbw8Q" target="_lK3UoEv9Eem_qa5hEGbw8Q">
            <ownedRule xmi:id="_lLp-0Ev9Eem_qa5hEGbw8Q" name="PME_checkDecesion8">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_lLpXwEv9Eem_qa5hEGbw8Q" name="PME_checkDecesion8">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__2__7&quot;,&quot;New__State__2&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_lKzDMEv9Eem_qa5hEGbw8Q" name="DecesionPoint__1" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_lK3UoEv9Eem_qa5hEGbw8Q" name="New__State__2">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_lyUWMEv9Eem_qa5hEGbw8Q" name="New__State__2">
              <language>C++</language>
              <body>timing.informIn(UMLRTTimespec(1,0));
</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_lK8NIEv9Eem_qa5hEGbw8Q" name="Init__State__3"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lJpMoUv9Eem_qa5hEGbw8Q" name="loadHeap" specification="_lJpMoEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lJxIcUv9Eem_qa5hEGbw8Q" name="unLoadHeap" specification="_lJxIcEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lJ4dMUv9Eem_qa5hEGbw8Q" name="sendMessage" specification="_lJ4dMEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>int result=-1;
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lKSF0Uv9Eem_qa5hEGbw8Q" name="sendInternalMessage" specification="_lKSF0Ev9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lKp5QUv9Eem_qa5hEGbw8Q" name="initForPMD" specification="_lKp5QEv9Eem_qa5hEGbw8Q">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_dbgAgent::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_dbgAgent::sendInternalMessage,this,std::placeholders::_1));
  this->execContext.addInputMessages(&quot;timing&quot;,&quot;timeout&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_lJpMoEv9Eem_qa5hEGbw8Q" name="loadHeap" visibility="private" method="_lJpMoUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lJxIcEv9Eem_qa5hEGbw8Q" name="unLoadHeap" visibility="private" method="_lJxIcUv9Eem_qa5hEGbw8Q"/>
      <ownedOperation xmi:id="_lJ4dMEv9Eem_qa5hEGbw8Q" name="sendMessage" visibility="private" method="_lJ4dMUv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lJ98wEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_lKObcEv9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_lKSF0Ev9Eem_qa5hEGbw8Q" name="sendInternalMessage" visibility="private" method="_lKSF0Uv9Eem_qa5hEGbw8Q">
        <ownedParameter xmi:id="_lKWXQEv9Eem_qa5hEGbw8Q" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_lKgvUEv9Eem_qa5hEGbw8Q" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_lKp5QEv9Eem_qa5hEGbw8Q" name="initForPMD" visibility="private" method="_lKp5QUv9Eem_qa5hEGbw8Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_lGvpoEv9Eem_qa5hEGbw8Q" name="dbgProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_lGys8Ev9Eem_qa5hEGbw8Q" name="dbgProtocol">
        <interfaceRealization xmi:id="_lHLugEv9Eem_qa5hEGbw8Q" client="_lGys8Ev9Eem_qa5hEGbw8Q" supplier="_lG4MgEv9Eem_qa5hEGbw8Q" contract="_lG4MgEv9Eem_qa5hEGbw8Q"/>
        <interfaceRealization xmi:id="_lHNjsEv9Eem_qa5hEGbw8Q" client="_lGys8Ev9Eem_qa5hEGbw8Q" supplier="_lG6owEv9Eem_qa5hEGbw8Q" contract="_lG6owEv9Eem_qa5hEGbw8Q"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_lG4MgEv9Eem_qa5hEGbw8Q" name="dbgProtocol">
        <ownedOperation xmi:id="_lHOx0Ev9Eem_qa5hEGbw8Q" name="dbg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_lG5aoEv9Eem_qa5hEGbw8Q" name="dbgProtocol~"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_lG6owEv9Eem_qa5hEGbw8Q" name="dbgProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_lG8d8Ev9Eem_qa5hEGbw8Q" client="_lGys8Ev9Eem_qa5hEGbw8Q" supplier="_lG5aoEv9Eem_qa5hEGbw8Q"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_lG-TIEv9Eem_qa5hEGbw8Q" client="_lGys8Ev9Eem_qa5hEGbw8Q" supplier="_lG6owEv9Eem_qa5hEGbw8Q"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_lHQnAEv9Eem_qa5hEGbw8Q" operation="_lHOx0Ev9Eem_qa5hEGbw8Q"/>
    </packagedElement>
    <profileApplication xmi:id="_GN1XswqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.profile_1.0.0.201707181432.jar!/umlProfile/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtQqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtgqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtwqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XuAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.codegen.cpp.profile_1.0.0.201707181457.jar!/profiles/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_pS-gAAqqEeiwdpidSbDb2g" base_Class="_pOYT4AqqEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_WFuLgAqrEeiwdpidSbDb2g" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_DFbqEAquEeiwdpidSbDb2g" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_J0BpAAquEeiwdpidSbDb2g" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_ZtYuYAquEeiwdpidSbDb2g" base_Class="_ZtPkcAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_xFmyAAquEeiwdpidSbDb2g" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_5crxsAquEeiwdpidSbDb2g" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_EUS0cAqvEeiwdpidSbDb2g" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_4mUU8AqvEeiwdpidSbDb2g" base_Property="_4mJV0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_7I7boAqvEeiwdpidSbDb2g" base_Property="_7I3xQAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_-Pye4AqvEeiwdpidSbDb2g" base_Property="_-PuNcAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Dab-0AqwEeiwdpidSbDb2g" base_Property="_DaXtYAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_K2YzAAqwEeiwdpidSbDb2g" base_Property="_K2VIoAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_QJj80AqwEeiwdpidSbDb2g" base_Property="_QJhgkAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Tqpd8AqwEeiwdpidSbDb2g" base_Property="_TqnowAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_OX4uYAqxEeiwdpidSbDb2g" base_Package="_OX25MAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OX9m4AqxEeiwdpidSbDb2g" base_Interface="_OX7KoAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYEUkAqxEeiwdpidSbDb2g" base_Interface="_OYB4UAqxEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYJ0IAqxEeiwdpidSbDb2g" base_Interface="_OYH-8AqxEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_OYM3cAqxEeiwdpidSbDb2g" base_Collaboration="_OXynwAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_qHisUAqxEeiwdpidSbDb2g" base_Port="_qHclsAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_wsb8sAqxEeiwdpidSbDb2g" base_Port="_wsY5YAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_4erJ8AqxEeiwdpidSbDb2g" base_Connector="_4edHgAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_atO2cArdEeiwdpidSbDb2g" base_Package="_atLzIArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atSg0ArdEeiwdpidSbDb2g" base_Interface="_atQEkArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atXZUArdEeiwdpidSbDb2g" base_Interface="_atU9EArdEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_atc44ArdEeiwdpidSbDb2g" base_Interface="_atZ1kArdEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_atgjQArdEeiwdpidSbDb2g" base_Collaboration="_atHhsArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_y_qqIAreEeiwdpidSbDb2g" base_Port="_y_nm0AreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_2AUXsAreEeiwdpidSbDb2g" base_Port="_2ASigAreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_8aUmsAreEeiwdpidSbDb2g" base_Connector="_8aQ8UAreEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_VizuEArfEeiwdpidSbDb2g" base_Package="_Viyf8ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Vi1jQArfEeiwdpidSbDb2g" base_Collaboration="_Viyf8QrfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2KUArfEeiwdpidSbDb2g" base_Interface="_Viyf9ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2xYArfEeiwdpidSbDb2g" base_Interface="_Viyf_grfEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi3_gArfEeiwdpidSbDb2g" base_Interface="_ViygAQrfEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_mHFGwArhEeiwdpidSbDb2g" base_Port="_mHDRkArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ppHqIArhEeiwdpidSbDb2g" base_Port="_ppFN4ArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ws7rIArhEeiwdpidSbDb2g" base_Connector="_ws4AwArhEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_Lo7XgAriEeiwdpidSbDb2g" base_Package="_Lo6JYAriEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Lo7-kAriEeiwdpidSbDb2g" base_Collaboration="_Lo6JYQriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo8loAriEeiwdpidSbDb2g" base_Interface="_Lo6JZAriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsAriEeiwdpidSbDb2g" base_Interface="_Lo6JawriEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsQriEeiwdpidSbDb2g" base_Interface="_Lo6JcgriEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="__kRn8ArjEeiwdpidSbDb2g" base_Port="__kPLsArjEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_IaHnQArkEeiwdpidSbDb2g" base_Port="_IaFLAArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_OI_1oArkEeiwdpidSbDb2g" base_Connector="_OI7kMArkEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="__mKB0ArkEeiwdpidSbDb2g" base_Package="__mIMoArkEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="__mLP8ArkEeiwdpidSbDb2g" base_Collaboration="__mIMoQrkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mMeEArkEeiwdpidSbDb2g" base_Interface="__mIMpArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mNsMArkEeiwdpidSbDb2g" base_Interface="__mIMrgrkEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="__mO6UArkEeiwdpidSbDb2g" base_Interface="__mIMtQrkEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_uB_LAArlEeiwdpidSbDb2g" base_Port="_uB7goArlEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_xFE50ArrEeiwdpidSbDb2g" base_Port="_xE8-AArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_28O6cArrEeiwdpidSbDb2g" base_Port="_28NFQArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_7dT48ArrEeiwdpidSbDb2g" base_Port="_7dRcsArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_-61vwArrEeiwdpidSbDb2g" base_Connector="_-6yscArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ALA-MArsEeiwdpidSbDb2g" base_Connector="_AK-h8ArsEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_A6ZzwArsEeiwdpidSbDb2g" base_Connector="_A6WwcArsEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_EOtyQAruEeiwdpidSbDb2g" base_Package="_EOr9EAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOwOgAruEeiwdpidSbDb2g" base_Interface="_EOuZUAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOz44AruEeiwdpidSbDb2g" base_Interface="_EOyDsAruEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_EO4KUAruEeiwdpidSbDb2g" base_Interface="_EO2VIAruEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_EO7NoAruEeiwdpidSbDb2g" base_Collaboration="_EOqu8AruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_LLyxwArxEeiwdpidSbDb2g" base_Port="_LLt5QArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_L9vzIArxEeiwdpidSbDb2g" base_Port="_L9t98ArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_WMsTYQrxEeiwdpidSbDb2g" base_Connector="_WMp3IArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_-6JIAAryEeiwdpidSbDb2g" isWired="false" base_Port="_-6GrwAryEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ka3XYArzEeiwdpidSbDb2g" base_Port="_ka0UEArzEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_qGzmgQrzEeiwdpidSbDb2g" base_Connector="_qGxKQArzEeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gAPwwAr0EeiwdpidSbDb2g" base_Pseudostate="_gAMtcAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_gATbIAr0EeiwdpidSbDb2g" base_State="_gARl8Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_gAV3YAr0EeiwdpidSbDb2g" base_Region="_gAJqIAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_gAaI0Ar0EeiwdpidSbDb2g" base_StateMachine="_f9DS0Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_BIUk4Ar1EeiwdpidSbDb2g" base_Region="_BISvsAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CErfcAr1EeiwdpidSbDb2g" base_Pseudostate="_CEn1EAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_DTdmwAr1EeiwdpidSbDb2g" base_State="_DTbxkAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_FtbHwAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUQg4Ar1EeiwdpidSbDb2g" base_Pseudostate="_hUNdkAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUUyUAr1EeiwdpidSbDb2g" base_Pseudostate="_hUSWEAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_pbDo4Ar1EeiwdpidSbDb2g" base_Pseudostate="_pbBzsAr1EeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_yQefgAr3EeiwdpidSbDb2g" isWired="false" base_Port="_yQcqUAr3EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hU-BcA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_hVdJoA-pEeijktysABpT4g" base_State="_hVXqEA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_hVipMA-pEeijktysABpT4g" base_Region="_hUncIA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_hWGp4A-pEeijktysABpT4g" base_StateMachine="_hUDbcA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OK1ngA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_OK7uIA-sEeijktysABpT4g" base_State="_OK4DwA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_OK-xcA-sEeijktysABpT4g" base_Region="_OKuSwA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_OLDp8A-sEeijktysABpT4g" base_StateMachine="_OKhecA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_kB4zUA-sEeijktysABpT4g" base_State="_kBSWYA-sEeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_Xb2N8A-uEeijktysABpT4g" isWired="false" base_Port="_XbRmMA-uEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_U9XDMA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_U9b7sA-3EeijktysABpT4g" base_State="_U9Y4YA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_U9dw4A-3EeijktysABpT4g" base_Region="_U9SKsA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_U9ipYA-3EeijktysABpT4g" base_StateMachine="_U9KO4A-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_e549wA-3EeijktysABpT4g" base_State="_e52hgA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_O4nAkA-5EeijktysABpT4g" base_Region="_O4jWMA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_P93_gA-5EeijktysABpT4g" base_State="_P908MA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_R-Zs0A-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Uez0EA-5EeijktysABpT4g" base_Pseudostate="_UevioA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2izAA-6EeijktysABpT4g" base_Pseudostate="_P2fvsA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2oSkA-6EeijktysABpT4g" base_Pseudostate="_P2koMA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KalrMA-7EeijktysABpT4g" base_Pseudostate="_Kaj2AA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KarKwA-7EeijktysABpT4g" base_Region="_KahZwA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_Kau1IA-7EeijktysABpT4g" base_StateMachine="_Kab6MA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_bC7WcA-7EeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_xHS7gBE6EeiaCPCnhevAQQ" isWired="false" base_Port="_xB-9sBE6EeiaCPCnhevAQQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_5O9OkBKMEeiEEYKmuRZPIg" headerPreface="#include &lt;iostream>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_WFgwIAqrEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRealTime:RTPort xmi:id="_fwhSABNgEeiFubQUFHg6OA" isWired="false" base_Port="_fwJekBNgEeiFubQUFHg6OA"/>
  <UMLRealTime:RTPort xmi:id="_DarBUBNhEeiFubQUFHg6OA" isWired="false" base_Port="_Dan-ABNhEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gmdUIBNjEeiFubQUFHg6OA" base_Pseudostate="_gmZCsBNjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5USJsBNsEeiFubQUFHg6OA" base_Pseudostate="_5UPGYBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_5Ub6sBNsEeiFubQUFHg6OA" base_State="_5UY3YBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5Ue-ABNsEeiFubQUFHg6OA" base_Region="_5UK08BNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_5VCXoBNsEeiFubQUFHg6OA" base_StateMachine="_5TyacBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_m1DG4BNvEeiFubQUFHg6OA" base_State="_m0-1cBNvEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_qcuQ0BNyEeiFubQUFHg6OA" base_Region="_qcoxQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qc4o4BNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qdJuoBNyEeiFubQUFHg6OA" base_Pseudostate="_qdGEQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_2N0gUBNyEeiFubQUFHg6OA" base_State="_2NyEEBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_34xmQBNyEeiFubQUFHg6OA" base_State="_34ui8BNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GUGnYBNzEeiFubQUFHg6OA" base_Pseudostate="_GT9dcBNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_VhtaABNzEeiFubQUFHg6OA" base_Pseudostate="_VhqWsBNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5oRb0BRgEeiFubQUFHg6OA" base_Pseudostate="_5oJgABRgEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_PmfKIBRiEeiFubQUFHg6OA" base_Pseudostate="_PmcG0BRiEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_GFHsIBRjEeiFubQUFHg6OA" base_Region="_GFF28BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GFQ2EBRjEeiFubQUFHg6OA" base_Pseudostate="_GFOZ0BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_G6EXIBRjEeiFubQUFHg6OA" base_State="_G6Ch8BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_HQJU0BRjEeiFubQUFHg6OA" base_State="_HQIGsBRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzA6ABUeEeiYy9niOG6dTw" base_Pseudostate="_wy9PoBUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzRYsBUeEeiYy9niOG6dTw" base_Pseudostate="_wzEkYBUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_2-fvYBUfEeiYy9niOG6dTw" base_Pseudostate="_2-cFABUfEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_bAe6cBUhEeiYy9niOG6dTw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_huQNUBa-Eei-ccFu-OwT7Q" headerPreface="#include &lt;termios.h>&#xA;#include &lt;iostream>&#xA;#include &lt;unistd.h>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_xFgrYAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lMfYBeHEei-ccFu-OwT7Q" base_Pseudostate="_6lDVcBeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lcXABeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_smoRwBeSEei-ccFu-OwT7Q" base_Pseudostate="_smhkEBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tthoYBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OMmZABgmEeiSBIpf1RqKYQ" base_Pseudostate="_OEEIEBgmEeiSBIpf1RqKYQ"/>
  <UMLRealTime:Capsule xmi:id="_lGhnMEv9Eem_qa5hEGbw8Q" base_Class="_lB4-0Ev9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_lGvCkEv9Eem_qa5hEGbw8Q" base_StateMachine="_lGiOQEv9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:ProtocolContainer xmi:id="_lGyF4Ev9Eem_qa5hEGbw8Q" base_Package="_lGvpoEv9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:Protocol xmi:id="_lG3lcEv9Eem_qa5hEGbw8Q" base_Collaboration="_lGys8Ev9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTMessageSet xmi:id="_lHBWcEv9Eem_qa5hEGbw8Q" base_Interface="_lG4MgEv9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTMessageSet xmi:id="_lHFA0Ev9Eem_qa5hEGbw8Q" base_Interface="_lG5aoEv9Eem_qa5hEGbw8Q" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_lHIEIEv9Eem_qa5hEGbw8Q" base_Interface="_lG6owEv9Eem_qa5hEGbw8Q" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_lHZJ4Ev9Eem_qa5hEGbw8Q" base_Port="_lHScMEv9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lJeNgEv9Eem_qa5hEGbw8Q" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_lB4-0Ev9Eem_qa5hEGbw8Q" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lJkUIEv9Eem_qa5hEGbw8Q" base_Class="_lB4-0Ev9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_lKKxEEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lJ98wEv9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_lKaBoEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lKWXQEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTRegion xmi:id="_lKycIEv9Eem_qa5hEGbw8Q" base_Region="_lKv_4Ev9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lK2GgEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lKzDMEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTState xmi:id="_lK6_AEv9Eem_qa5hEGbw8Q" base_State="_lK3UoEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lK-CUEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lK8NIEv9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTPort xmi:id="_lL4oUEv9Eem_qa5hEGbw8Q" isWired="false" base_Port="_lLzv0Ev9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTPort xmi:id="_lL_WAEv9Eem_qa5hEGbw8Q" isPublish="true" isWired="false" base_Port="_lL8SsEv9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lMRp4Ev9Eem_qa5hEGbw8Q" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_DFR5EAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lMUtMEv9Eem_qa5hEGbw8Q" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_lMtuwEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lMr5kEv9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_lMzOUEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lMyAMEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lO6uMEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lO2cwEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lO8jYEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lO78UEv9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTPort xmi:id="_lQkUAEv9Eem_qa5hEGbw8Q" isWired="false" base_Port="_lQie0Ev9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTPort xmi:id="_lQs24Ev9Eem_qa5hEGbw8Q" isPublish="true" isWired="false" base_Port="_lQmwQEv9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lQ3O8Ev9Eem_qa5hEGbw8Q" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_Jz5GIAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lRKJ4Ev9Eem_qa5hEGbw8Q" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_lR-CMEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lR8NAEv9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_lSCToEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lSBFgEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lSuQIEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lSsa8Ev9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lSwFUEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lSveQEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lTtuoEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lTtHkEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lTvj0Ev9Eem_qa5hEGbw8Q" base_Pseudostate="_lTu8wEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lTyAEEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lTwx8Ev9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTPort xmi:id="_lYcdoEv9Eem_qa5hEGbw8Q" isWired="false" base_Port="_lYaBYEv9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTPort xmi:id="_lYe54Ev9Eem_qa5hEGbw8Q" isPublish="true" isWired="false" base_Port="_lYdrwEv9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lY-pIEv9Eem_qa5hEGbw8Q" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_5cgykAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lZAeUEv9Eem_qa5hEGbw8Q" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_laByAEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lZ5PIEv9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_laGDcEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_laFcYEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lbDFsEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lbB3kEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTState xmi:id="_lbFh8Ev9Eem_qa5hEGbw8Q" base_State="_lbET0Ev9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ldOP8Ev9Eem_qa5hEGbw8Q" base_Pseudostate="_ldNo4Ev9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ldQsMEv9Eem_qa5hEGbw8Q" base_Pseudostate="_ldPeEEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ldYoAEv9Eem_qa5hEGbw8Q" base_Pseudostate="_ldR6UEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ldcSYEv9Eem_qa5hEGbw8Q" base_Pseudostate="_ldbEQEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ljB9AEv9Eem_qa5hEGbw8Q" base_Pseudostate="_ljBV8Ev9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ljFAUEv9Eem_qa5hEGbw8Q" base_Pseudostate="_ljEZQEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ljG1gEv9Eem_qa5hEGbw8Q" base_Pseudostate="_ljGOcEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ljJ40Ev9Eem_qa5hEGbw8Q" base_Pseudostate="_ljIqsEv9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTPort xmi:id="_lmzpwEv9Eem_qa5hEGbw8Q" isWired="false" base_Port="_lmx0kEv9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTPort xmi:id="_lm2GAEv9Eem_qa5hEGbw8Q" isPublish="true" isWired="false" base_Port="_lm034Ev9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lm8MoEv9Eem_qa5hEGbw8Q" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lm_P8Ev9Eem_qa5hEGbw8Q" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_lnUnIEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lnTZAEv9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_lnb74Ev9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lnatwEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lnyhMEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lnxTEEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ln09cEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lnzvUEv9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTPort xmi:id="_loN_AEv9Eem_qa5hEGbw8Q" isWired="false" base_Port="_loMJ0Ev9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTPort xmi:id="_loSQcEv9Eem_qa5hEGbw8Q" isPublish="true" isWired="false" base_Port="_loP0MEv9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_locogEv9Eem_qa5hEGbw8Q" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_EUMt0AqvEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lofEwEv9Eem_qa5hEGbw8Q" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_lo8XwEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lo7JoEv9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_lpACIEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lo-0AEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lreHUEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lrUWUEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTState xmi:id="_lrjm4Ev9Eem_qa5hEGbw8Q" base_State="_lrhKoEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lsc-wEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lsVqAUv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lsez8Ev9Eem_qa5hEGbw8Q" base_Pseudostate="_lsdl0Ev9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lsgCEEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lsfbAEv9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTPort xmi:id="_lulFsEv9Eem_qa5hEGbw8Q" isWired="false" base_Port="_luj3kEv9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:RTPort xmi:id="_lutokEv9Eem_qa5hEGbw8Q" isPublish="true" isWired="false" base_Port="_lumT0Ev9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lux6AEv9Eem_qa5hEGbw8Q" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_lu09UEv9Eem_qa5hEGbw8Q" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_lvMwwEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lvLioEv9Eem_qa5hEGbw8Q"/>
  <RTCppProperties:ParameterProperties xmi:id="_lvnAcEv9Eem_qa5hEGbw8Q" type="pmd::Message" base_Parameter="_lvgSwEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_lwaRsEv9Eem_qa5hEGbw8Q" base_Pseudostate="_lwZDkEv9Eem_qa5hEGbw8Q"/>
  <UMLRTStateMachines:RTState xmi:id="_lwdVAEv9Eem_qa5hEGbw8Q" base_State="_lwa4wEv9Eem_qa5hEGbw8Q"/>
  <UMLRealTime:CapsulePart xmi:id="_lyR58Ev9Eem_qa5hEGbw8Q" base_Property="_lyRS4Ev9Eem_qa5hEGbw8Q"/>
</xmi:XMI>
