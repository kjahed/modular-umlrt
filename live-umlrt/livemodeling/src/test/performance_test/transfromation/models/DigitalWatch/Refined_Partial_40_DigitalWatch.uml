<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_GN1XsAqpEeiwdpidSbDb2g" name="DigitalWatch">
    <eAnnotations xmi:id="_GN1XsQqpEeiwdpidSbDb2g" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_GN1XsgqpEeiwdpidSbDb2g" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_r_6AUAqqEeiwdpidSbDb2g" source="UMLRT_Default_top">
      <details xmi:id="_r_6nYAqqEeiwdpidSbDb2g" key="top_name" value="DigitalWatch"/>
    </eAnnotations>
    <eAnnotations xmi:id="_sN8hkEwYEem-6OAxk0ivsA" source="dummy"/>
    <eAnnotations xmi:id="_QbiZsExcEemnOv3kapE4Jw" source="dummy"/>
    <eAnnotations xmi:id="_BlsDIEyFEemkcMK5eeJuCA" source="dummy"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_pOYT4AqqEeiwdpidSbDb2g" name="DigitalWatch" isActive="true">
      <ownedAttribute xmi:id="_4mJV0AqvEeiwdpidSbDb2g" name="displayGateKeeper" visibility="protected" type="_WFgwIAqrEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_7I3xQAqvEeiwdpidSbDb2g" name="alarmsCapsule" visibility="protected" type="_DFR5EAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_-PuNcAqvEeiwdpidSbDb2g" name="stopWatchController" visibility="protected" type="_Jz5GIAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_DaXtYAqwEeiwdpidSbDb2g" name="display" visibility="protected" type="_ZtPkcAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_K2VIoAqwEeiwdpidSbDb2g" name="buttonsReader" visibility="protected" type="_xFgrYAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_QJhgkAqwEeiwdpidSbDb2g" name="watchCore" visibility="protected" type="_5cgykAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_TqnowAqwEeiwdpidSbDb2g" name="timeTracker" visibility="protected" type="_EUMt0AqvEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_q_nhgEv9EemUDNyOZuPHRw" name="dbgAgent" type="_qK3q0Ev9EemUDNyOZuPHRw">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_q_ovoUv9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_q_ovokv9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedConnector xmi:id="_4edHgAqxEeiwdpidSbDb2g" name="RTConnector1">
        <end xmi:id="_4eoGoAqxEeiwdpidSbDb2g" partWithPort="_K2VIoAqwEeiwdpidSbDb2g" role="_qHclsAqxEeiwdpidSbDb2g"/>
        <end xmi:id="_4epUwAqxEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_wsY5YAqxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_8aQ8UAreEeiwdpidSbDb2g" name="RTConnector2">
        <end xmi:id="_8aT_oAreEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_2ASigAreEeiwdpidSbDb2g"/>
        <end xmi:id="_8aT_oQreEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_y_nm0AreEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_ws4AwArhEeiwdpidSbDb2g" name="RTConnector3">
        <end xmi:id="_ws6dAArhEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_mHDRkArhEeiwdpidSbDb2g"/>
        <end xmi:id="_ws7EEArhEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ppFN4ArhEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_OI7kMArkEeiwdpidSbDb2g" name="RTConnector4">
        <end xmi:id="_OI-ngArkEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_IaFLAArkEeiwdpidSbDb2g"/>
        <end xmi:id="_OI_OkArkEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="__kPLsArjEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-6yscArrEeiwdpidSbDb2g" name="RTConnector5">
        <end xmi:id="_-61IsArrEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="_7dRcsArrEeiwdpidSbDb2g"/>
        <end xmi:id="_-61IsQrrEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_AK-h8ArsEeiwdpidSbDb2g" name="RTConnector6">
        <end xmi:id="_ALAXIArsEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_xE8-AArrEeiwdpidSbDb2g"/>
        <end xmi:id="_ALAXIQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_A6WwcArsEeiwdpidSbDb2g" name="RTConnector7">
        <end xmi:id="_A6ZMsArsEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_28NFQArrEeiwdpidSbDb2g"/>
        <end xmi:id="_A6ZMsQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_WMp3IArxEeiwdpidSbDb2g" name="RTConnector8">
        <end xmi:id="_WMrsUArxEeiwdpidSbDb2g" partWithPort="_DaXtYAqwEeiwdpidSbDb2g" role="_LLt5QArxEeiwdpidSbDb2g"/>
        <end xmi:id="_WMsTYArxEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_L9t98ArxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_qGxKQArzEeiwdpidSbDb2g" name="RTConnector9">
        <end xmi:id="_qGy_cArzEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ka0UEArzEeiwdpidSbDb2g"/>
        <end xmi:id="_qGzmgArzEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_WFgwIAqrEeiwdpidSbDb2g" name="DisplayGateKeeper" classifierBehavior="_hUDbcA-pEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uB7goArlEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yMSoQArlEeiwdpidSbDb2g" value="4"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_yNBoEArlEeiwdpidSbDb2g" value="4"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_L9t98ArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qvurYEv9EemUDNyOZuPHRw" name="dbgPortForDisplayGateKeeper" visibility="protected" type="_qMGZ4Ev9EemUDNyOZuPHRw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qv2AIEv9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_qv2AIUv9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_hUDbcA-pEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_hUncIA-pEeijktysABpT4g" name="Region">
          <transition xmi:id="_qxNSEEv9EemUDNyOZuPHRw" name="Trans__Pseudo146149" source="_hUybQA-pEeijktysABpT4g" target="_qxIZkEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qxpW8Ev9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo146&quot;,&quot;New__State__148&quot;,&quot;To__New__State__148__155&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo146&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_qxOgMEv9EemUDNyOZuPHRw" name="From__New__State__148__150" source="_qxKOwEv9EemUDNyOZuPHRw" target="_qxIZkEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qxm6sEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__148&quot;,&quot;New__State__148&quot;,&quot;To__New__State__148__155&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__148&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_qxbUgEv9EemUDNyOZuPHRw" name="PME_Trig151" event="_qNAY0Ev9EemUDNyOZuPHRw" port="_qvurYEv9EemUDNyOZuPHRw"/>
            <trigger xmi:id="_qxdJsEv9EemUDNyOZuPHRw" name="PME_Trig152" event="__mIMuQrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qxfl8Ev9EemUDNyOZuPHRw" name="PME_Trig153" event="__mIMtwrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qxhbIEv9EemUDNyOZuPHRw" name="PME_Trig154" event="__mIMuArkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_qxkecEv9EemUDNyOZuPHRw" name="To__New__State__148__155" guard="_qxp-AUv9EemUDNyOZuPHRw" source="_qxIZkEv9EemUDNyOZuPHRw" target="_qxKOwEv9EemUDNyOZuPHRw">
            <ownedRule xmi:id="_qxp-AUv9EemUDNyOZuPHRw" name="PME_checkDecesion156">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_qxp-AEv9EemUDNyOZuPHRw" name="PME_checkDecesion156">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__148__155&quot;,&quot;New__State__148&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_hUybQA-pEeijktysABpT4g" name="Pseudo146"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_qxIZkEv9EemUDNyOZuPHRw" name="DecesionPoint__147" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_qxKOwEv9EemUDNyOZuPHRw" name="New__State__148"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qwDbgUv9EemUDNyOZuPHRw" name="loadHeap" specification="_qwDbgEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qwFQsUv9EemUDNyOZuPHRw" name="unLoadHeap" specification="_qwFQsEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qwbO8Uv9EemUDNyOZuPHRw" name="sendMessage" specification="_qwbO8Ev9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayP&quot;) {
  if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qwfgYEv9EemUDNyOZuPHRw" name="sendInternalMessage" specification="_qwe5UEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qxC6AEv9EemUDNyOZuPHRw" name="initForPMD" specification="_qxCS8Ev9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForDisplayGateKeeper&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_qwDbgEv9EemUDNyOZuPHRw" name="loadHeap" visibility="private" method="_qwDbgUv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_qwFQsEv9EemUDNyOZuPHRw" name="unLoadHeap" visibility="private" method="_qwFQsUv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_qwbO8Ev9EemUDNyOZuPHRw" name="sendMessage" visibility="private" method="_qwbO8Uv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_qwcdEEv9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_qwdrMEv9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_qwe5UEv9EemUDNyOZuPHRw" name="sendInternalMessage" visibility="private" method="_qwfgYEv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_qwgugEv9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_qwijsUv9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_qxCS8Ev9EemUDNyOZuPHRw" name="initForPMD" visibility="private" method="_qxC6AEv9EemUDNyOZuPHRw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_DFR5EAquEeiwdpidSbDb2g" name="AlarmsCapsule" classifierBehavior="_OKhecA-sEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_y_nm0AreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xE8-AArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_XbRmMA-uEeijktysABpT4g" name="alarmTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_nHqHMBgMEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_3pL_0BgMEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_v-uwIBi9EeiSBIpf1RqKYQ" name="alarmTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_q7wVMEv9EemUDNyOZuPHRw" name="dbgPortForAlarmsCapsule" visibility="protected" type="_qMGZ4Ev9EemUDNyOZuPHRw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_q7w8QEv9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_q7w8QUv9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_OKhecA-sEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_OKuSwA-sEeijktysABpT4g" name="Region">
          <transition xmi:id="_QJSFoA-2EeijktysABpT4g" name="NoAlarm__NoAlarm__221" source="_OK4DwA-sEeijktysABpT4g" target="_OK4DwA-sEeijktysABpT4g">
            <trigger xmi:id="_X9BuwA-2EeijktysABpT4g" event="_0IHVYArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_q-anoEv9EemUDNyOZuPHRw" name="Trans__Init__State__223224" source="_q-YycEv9EemUDNyOZuPHRw" target="_q-VvIEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q_b7UEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__223&quot;,&quot;NoAlarm&quot;,&quot;To__NoAlarm__232&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__223&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_q-dD4Ev9EemUDNyOZuPHRw" name="From__NoAlarm__225" source="_OK4DwA-sEeijktysABpT4g" target="_q-VvIEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q_ha4Ev9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;NoAlarm&quot;,&quot;NoAlarm&quot;,&quot;To__NoAlarm__232&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;NoAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_q-rGUEv9EemUDNyOZuPHRw" name="PME_Trig226" event="_qNAY0Ev9EemUDNyOZuPHRw" port="_q7wVMEv9EemUDNyOZuPHRw"/>
            <trigger xmi:id="_q-uJoEv9EemUDNyOZuPHRw" name="PME_Trig227" event="_suGa4ArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_q-xM8Ev9EemUDNyOZuPHRw" name="PME_Trig228" event="_dfgJwArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_q-8zIEv9EemUDNyOZuPHRw" name="PME_Trig229" port="_XbRmMA-uEeijktysABpT4g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_q_BroEv9EemUDNyOZuPHRw" name="PME_Trig230" event="__mIMuwrkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_q_EH4Ev9EemUDNyOZuPHRw" name="PME_Trig231" event="__mIMvArkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_q_HLMEv9EemUDNyOZuPHRw" name="To__NoAlarm__232" guard="_q_j3IUv9EemUDNyOZuPHRw" source="_q-VvIEv9EemUDNyOZuPHRw" target="_OK4DwA-sEeijktysABpT4g">
            <ownedRule xmi:id="_q_j3IUv9EemUDNyOZuPHRw" name="PME_checkDecesion233">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_q_j3IEv9EemUDNyOZuPHRw" name="PME_checkDecesion233">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__NoAlarm__232&quot;,&quot;NoAlarm&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:State" xmi:id="_OK4DwA-sEeijktysABpT4g" name="NoAlarm"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_q-VvIEv9EemUDNyOZuPHRw" name="DecesionPoint__222" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_q-YycEv9EemUDNyOZuPHRw" name="Init__State__223"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_q8df0Uv9EemUDNyOZuPHRw" name="loadHeap" specification="_q8df0Ev9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_q8f8EUv9EemUDNyOZuPHRw" name="unLoadHeap" specification="_q8f8EEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_q9MfoUv9EemUDNyOZuPHRw" name="sendMessage" specification="_q9MfoEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    alarmP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    alarmP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_q9aiEEv9EemUDNyOZuPHRw" name="sendInternalMessage" specification="_q9Z7AEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_q-LXEUv9EemUDNyOZuPHRw" name="initForPMD" specification="_q-LXEEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForAlarmsCapsule&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_q8df0Ev9EemUDNyOZuPHRw" name="loadHeap" visibility="private" method="_q8df0Uv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_q8f8EEv9EemUDNyOZuPHRw" name="unLoadHeap" visibility="private" method="_q8f8EUv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_q9MfoEv9EemUDNyOZuPHRw" name="sendMessage" visibility="private" method="_q9MfoUv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_q9NtwEv9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_q9Ys4Ev9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_q9Z7AEv9EemUDNyOZuPHRw" name="sendInternalMessage" visibility="private" method="_q9aiEEv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_q9bJIEv9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_q9dlYEv9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_q-LXEEv9EemUDNyOZuPHRw" name="initForPMD" visibility="private" method="_q-LXEUv9EemUDNyOZuPHRw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_Jz5GIAquEeiwdpidSbDb2g" name="StopWatchCore" classifierBehavior="_U9KO4A-3EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_mHDRkArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_28NFQArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_fwJekBNgEeiFubQUFHg6OA" name="showCounterTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Dan-ABNhEeiFubQUFHg6OA" name="timeCountingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2KcBNhEeiFubQUFHg6OA" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2xgBNhEeiFubQUFHg6OA" name="stopWatchResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_OM2xgRNhEeiFubQUFHg6OA" value="200"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_XYKbwBNnEeiFubQUFHg6OA" name="timeCountingTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_dK4oUBNnEeiFubQUFHg6OA" name="showCounterTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qx4ngEv9EemUDNyOZuPHRw" name="dbgPortForStopWatchCore" visibility="protected" type="_qMGZ4Ev9EemUDNyOZuPHRw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qx5OkEv9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_qx5OkUv9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_U9KO4A-3EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_U9SKsA-3EeijktysABpT4g" name="Region">
          <transition xmi:id="_U9dJ0A-3EeijktysABpT4g" name="Initial" source="_U9Um8A-3EeijktysABpT4g" target="_U9Y4YA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_rrHbwBNgEeiFubQUFHg6OA">
              <language>C++</language>
              <body>initForPMD();
    displayGateKeeperP.ShowText(0,&quot;StopWatch capsule is started&quot;).send();
    milliTime=0;
</body>
            </effect>
          </transition>
          <transition xmi:id="_1-9b4A-3EeijktysABpT4g" name="stopWatchActivate" source="_U9Y4YA-3EeijktysABpT4g" target="_e52hgA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fmruoBNiEeiFubQUFHg6OA">
              <language>C++</language>
              <body>showCounterTimerID=showCounterTimer.informEvery(UMLRTTimespec(0,50000000),0);</body>
            </effect>
            <trigger xmi:id="_MT8SoBNiEeiFubQUFHg6OA" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_iH0K8A-6EeijktysABpT4g" name="stopWatchDeactivate" source="_wy9PoBUeEeiYy9niOG6dTw" target="_U9Y4YA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JUqWsBNlEeiFubQUFHg6OA">
              <language>C++</language>
              <body> showCounterTimer.cancelTimer(showCounterTimerID);
</body>
            </effect>
            <trigger xmi:id="_YlDe8BNiEeiFubQUFHg6OA" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_tgpzYBd5Eei-ccFu-OwT7Q" name="countTime1" source="_U9Y4YA-3EeijktysABpT4g" target="_U9Y4YA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fdIY0Bd6Eei-ccFu-OwT7Q">
              <language>C++</language>
              <body>milliTime=milliTime+stopWatchResolution;</body>
            </effect>
            <trigger xmi:id="_1r-PABd5Eei-ccFu-OwT7Q" port="_Dan-ABNhEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_q0R0MEv9EemUDNyOZuPHRw" name="From__Idle__162" source="_U9Y4YA-3EeijktysABpT4g" target="_qz5ZsEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q4Q8UEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Idle&quot;,&quot;Idle&quot;,&quot;To__Idle__171&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Idle&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__176&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Idle&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_q0UQcEv9EemUDNyOZuPHRw" name="PME_Trig163" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_q0X60Ev9EemUDNyOZuPHRw" name="PME_Trig164" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_q0daYEv9EemUDNyOZuPHRw" name="PME_Trig165" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_q0f2oEv9EemUDNyOZuPHRw" name="PME_Trig166" event="_qNAY0Ev9EemUDNyOZuPHRw" port="_qx4ngEv9EemUDNyOZuPHRw"/>
            <trigger xmi:id="_q0i58Ev9EemUDNyOZuPHRw" name="PME_Trig167" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_q0q1wEv9EemUDNyOZuPHRw" name="PME_Trig168" port="_fwJekBNgEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_q0yKgEv9EemUDNyOZuPHRw" name="PME_Trig169" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_q00mwEv9EemUDNyOZuPHRw" name="PME_Trig170" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_q04RIEv9EemUDNyOZuPHRw" name="To__Idle__171" guard="_q4nhoEv9EemUDNyOZuPHRw" source="_qz5ZsEv9EemUDNyOZuPHRw" target="_U9Y4YA-3EeijktysABpT4g">
            <ownedRule xmi:id="_q4nhoEv9EemUDNyOZuPHRw" name="PME_checkDecesion212">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_q4m6kEv9EemUDNyOZuPHRw" name="PME_checkDecesion212">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Idle__171&quot;,&quot;Idle&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_q1BbEEv9EemUDNyOZuPHRw" name="Trans__Pseudo157172" source="_wzEkYBUeEeiYy9niOG6dTw" target="_qz5ZsEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q4j3QEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__171&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__176&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_q1BbEUv9EemUDNyOZuPHRw" name="Trans__Pseudo158173" source="_wy9PoBUeEeiYy9niOG6dTw" target="_qz5ZsEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q4XC8Ev9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__171&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__176&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_q1CCIEv9EemUDNyOZuPHRw" name="Trans__Pseudo159174" source="_P2fvsA-6EeijktysABpT4g" target="_qz5ZsEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q4NR8Ev9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__171&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__176&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_q1FsgEv9EemUDNyOZuPHRw" name="To__Substates__StopWatchMode__176" guard="_q4ovwUv9EemUDNyOZuPHRw" source="_qz5ZsEv9EemUDNyOZuPHRw" target="_q1CpMEv9EemUDNyOZuPHRw">
            <ownedRule xmi:id="_q4ovwUv9EemUDNyOZuPHRw" name="PME_checkDecesion213">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_q4ovwEv9EemUDNyOZuPHRw" name="PME_checkDecesion213">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__StopWatchMode__176&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_q1JW4Ev9EemUDNyOZuPHRw" name="From__Substates__StopWatchMode__178" source="_q1G6oEv9EemUDNyOZuPHRw" target="_qz5ZsEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q4b7cEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__171&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__176&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_U9Um8A-3EeijktysABpT4g" name="Pseudo160"/>
          <subvertex xmi:type="uml:State" xmi:id="_U9Y4YA-3EeijktysABpT4g" name="Idle"/>
          <subvertex xmi:type="uml:State" xmi:id="_e52hgA-3EeijktysABpT4g" name="StopWatchMode">
            <connectionPoint xmi:id="_P2fvsA-6EeijktysABpT4g" name="Pseudo159" kind="exitPoint"/>
            <connectionPoint xmi:id="_wy9PoBUeEeiYy9niOG6dTw" name="Pseudo158" kind="exitPoint"/>
            <connectionPoint xmi:id="_wzEkYBUeEeiYy9niOG6dTw" name="Pseudo157" kind="exitPoint"/>
            <connectionPoint xmi:id="_q1CpMEv9EemUDNyOZuPHRw" name="From__Parent__175" kind="entryPoint"/>
            <connectionPoint xmi:id="_q1G6oEv9EemUDNyOZuPHRw" name="To__Parent__177" kind="exitPoint"/>
            <region xmi:id="_O4jWMA-5EeijktysABpT4g" name="Region1">
              <transition xmi:id="_W2EmYA-5EeijktysABpT4g" name="start" source="_P908MA-5EeijktysABpT4g" target="_R-XQkA-5EeijktysABpT4g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_zbNpEBNiEeiFubQUFHg6OA">
                  <language>C++</language>
                  <body>timeCountingTimerID =timeCountingTimer.informEvery(UMLRTTimespec(0,stopWatchResolution*1000000),0);</body>
                </effect>
                <trigger xmi:id="_7buYUBNhEeiFubQUFHg6OA" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_dNliEA-5EeijktysABpT4g" name="pause" source="_R-XQkA-5EeijktysABpT4g" target="_P908MA-5EeijktysABpT4g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_B3qEgBNjEeiFubQUFHg6OA">
                  <language>C++</language>
                  <body>timeCountingTimer.cancelTimer(timeCountingTimerID);
</body>
                </effect>
                <trigger xmi:id="_9-n9cBNiEeiFubQUFHg6OA" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_q1UWAEv9EemUDNyOZuPHRw" name="Trans__Init__State__180181" source="_q1PdgEv9EemUDNyOZuPHRw" target="_q1LzIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q3mN8Ev9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__180&quot;,&quot;Pause&quot;,&quot;To__Pause__206&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__180&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__208&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__180&quot;,&quot;Active&quot;,&quot;To__Active__205&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__180&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_q1U9EEv9EemUDNyOZuPHRw" name="Trans__Pseudo157182" source="_wzEkYBUeEeiYy9niOG6dTw" target="_q1LzIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q3ZZoEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__206&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__208&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__205&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_q1VkIEv9EemUDNyOZuPHRw" name="Trans__Pseudo158183" source="_wy9PoBUeEeiYy9niOG6dTw" target="_q1LzIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q3h8gEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__206&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__208&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__205&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_q1WLMEv9EemUDNyOZuPHRw" name="Trans__Pseudo159184" source="_P2fvsA-6EeijktysABpT4g" target="_q1LzIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q3dEAEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__206&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__208&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__205&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_q1xpAEv9EemUDNyOZuPHRw" name="From__Active__185" source="_R-XQkA-5EeijktysABpT4g" target="_q1LzIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q3vX4Ev9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;Pause&quot;,&quot;To__Pause__206&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__208&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;Active&quot;,&quot;To__Active__205&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Active&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_q1zeMEv9EemUDNyOZuPHRw" name="PME_Trig186" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_q19PMEv9EemUDNyOZuPHRw" name="PME_Trig187" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_q2CHsEv9EemUDNyOZuPHRw" name="PME_Trig188" port="_Dan-ABNhEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_q2FLAEv9EemUDNyOZuPHRw" name="PME_Trig189" event="_qNAY0Ev9EemUDNyOZuPHRw" port="_qx4ngEv9EemUDNyOZuPHRw"/>
                <trigger xmi:id="_q2JccEv9EemUDNyOZuPHRw" name="PME_Trig190" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_q2NG0Ev9EemUDNyOZuPHRw" name="PME_Trig191" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_q2R_UEv9EemUDNyOZuPHRw" name="PME_Trig192" port="_fwJekBNgEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_q2VCoEv9EemUDNyOZuPHRw" name="PME_Trig193" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_q2YF8Ev9EemUDNyOZuPHRw" name="PME_Trig194" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_q2bwUEv9EemUDNyOZuPHRw" name="From__Pause__195" source="_P908MA-5EeijktysABpT4g" target="_q1LzIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q3qfYEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;Pause&quot;,&quot;To__Pause__206&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__208&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;Active&quot;,&quot;To__Active__205&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pause&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_q2fasEv9EemUDNyOZuPHRw" name="PME_Trig196" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_q2jFEEv9EemUDNyOZuPHRw" name="PME_Trig197" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_q2xukEv9EemUDNyOZuPHRw" name="PME_Trig198" port="_Dan-ABNhEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_q20x4Ev9EemUDNyOZuPHRw" name="PME_Trig199" event="_qNAY0Ev9EemUDNyOZuPHRw" port="_qx4ngEv9EemUDNyOZuPHRw"/>
                <trigger xmi:id="_q231MEv9EemUDNyOZuPHRw" name="PME_Trig200" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_q28tsEv9EemUDNyOZuPHRw" name="PME_Trig201" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_q3A_IEv9EemUDNyOZuPHRw" name="PME_Trig202" port="_fwJekBNgEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_q3GesEv9EemUDNyOZuPHRw" name="PME_Trig203" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_q3KJEEv9EemUDNyOZuPHRw" name="PME_Trig204" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_q3PBkEv9EemUDNyOZuPHRw" name="To__Active__205" guard="_q4GkQEv9EemUDNyOZuPHRw" source="_q1LzIEv9EemUDNyOZuPHRw" target="_R-XQkA-5EeijktysABpT4g">
                <ownedRule xmi:id="_q4GkQEv9EemUDNyOZuPHRw" name="PME_checkDecesion211">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_q4F9MEv9EemUDNyOZuPHRw" name="PME_checkDecesion211">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Active__205&quot;,&quot;Active&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_q3PooEv9EemUDNyOZuPHRw" name="To__Pause__206" guard="_q38MMUv9EemUDNyOZuPHRw" source="_q1LzIEv9EemUDNyOZuPHRw" target="_P908MA-5EeijktysABpT4g">
                <ownedRule xmi:id="_q38MMUv9EemUDNyOZuPHRw" name="PME_checkDecesion209">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_q38MMEv9EemUDNyOZuPHRw" name="PME_checkDecesion209">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Pause__206&quot;,&quot;Pause&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_q3TTAEv9EemUDNyOZuPHRw" name="From__Parnet__StateMachine__207" source="_q1CpMEv9EemUDNyOZuPHRw" target="_q1LzIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q36-EEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__206&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__208&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__205&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_q3T6EEv9EemUDNyOZuPHRw" name="To__Parent__StateMachine__208" guard="_q4Dg8Uv9EemUDNyOZuPHRw" source="_q1LzIEv9EemUDNyOZuPHRw" target="_q1G6oEv9EemUDNyOZuPHRw">
                <ownedRule xmi:id="_q4Dg8Uv9EemUDNyOZuPHRw" name="PME_checkDecesion210">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_q4Dg8Ev9EemUDNyOZuPHRw" name="PME_checkDecesion210">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__208&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_P908MA-5EeijktysABpT4g" name="Pause"/>
              <subvertex xmi:type="uml:State" xmi:id="_R-XQkA-5EeijktysABpT4g" name="Active"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_q1LzIEv9EemUDNyOZuPHRw" name="DecesionPoint__179" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_q1PdgEv9EemUDNyOZuPHRw" name="Init__State__180"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_qz5ZsEv9EemUDNyOZuPHRw" name="DecesionPoint__161" kind="choice"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qyMJgUv9EemUDNyOZuPHRw" name="loadHeap" specification="_qyMJgEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.stopWatchResolution&quot;,this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qyN-sUv9EemUDNyOZuPHRw" name="unLoadHeap" specification="_qyN-sEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.stopWatchResolution&quot;,&amp;this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qyr4wEv9EemUDNyOZuPHRw" name="sendMessage" specification="_qyiu0Ev9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qywKMUv9EemUDNyOZuPHRw" name="sendInternalMessage" specification="_qywKMEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qzvBoEv9EemUDNyOZuPHRw" name="initForPMD" specification="_qzuakEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_StopWatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_StopWatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;showCounterTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;timeCountingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForStopWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_qyMJgEv9EemUDNyOZuPHRw" name="loadHeap" visibility="private" method="_qyMJgUv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_qyN-sEv9EemUDNyOZuPHRw" name="unLoadHeap" visibility="private" method="_qyN-sUv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_qyiu0Ev9EemUDNyOZuPHRw" name="sendMessage" visibility="private" method="_qyr4wEv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_qytG4Ev9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_qyu8EEv9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_qywKMEv9EemUDNyOZuPHRw" name="sendInternalMessage" visibility="private" method="_qywKMUv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_qyxYUEv9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_qzCeEEv9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_qzuakEv9EemUDNyOZuPHRw" name="initForPMD" visibility="private" method="_qzvBoEv9EemUDNyOZuPHRw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_ZtPkcAquEeiwdpidSbDb2g" name="Display" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_LLt5QArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_xFgrYAquEeiwdpidSbDb2g" name="ButtonsReader" classifierBehavior="_Kab6MA-7EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qHclsAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xB-9sBE6EeiaCPCnhevAQQ" name="readKeyTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_q4qk8Ev9EemUDNyOZuPHRw" name="dbgPortForButtonsReader" visibility="protected" type="_qMGZ4Ev9EemUDNyOZuPHRw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_q4rMAEv9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_q4rMAUv9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_Kab6MA-7EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_KahZwA-7EeijktysABpT4g" name="Region">
          <transition xmi:id="_liwyYA-7EeijktysABpT4g" name="readButton" source="_bC4TIA-7EeijktysABpT4g" target="_bC4TIA-7EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_NRY38BLWEeiFubQUFHg6OA">
              <language>C++</language>
              <body>    //int r = rand()%4;
    //r = rand()%2+1;33
    //printf(&quot;&quot;);
    struct termios t;
    tcgetattr(STDIN_FILENO, &amp;t);
    t.c_lflag &amp;= ~ICANON;
    tcsetattr(STDIN_FILENO, TCSANOW, &amp;t);
    char key= std::cin.get();
    //printf(&quot;ReadButton: %c\n&quot;,key);
    if (key>='0' &amp;&amp; key &lt;='3' ){
    	buttonsP.ButtonPressed(key).send();
    	//std::cout&lt;&lt;&quot;Key sent to core\n&quot;;
    }

    readKeyTimer.informIn(UMLRTTimespec(0,200000000),0);
</body>
            </effect>
            <trigger xmi:id="_7hu8QBFJEeibZqndpu8erg" port="_xB-9sBE6EeiaCPCnhevAQQ">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_pMgG0BFIEeibZqndpu8erg" name="readInt" source="_bC4TIA-7EeijktysABpT4g" target="_bC4TIA-7EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_rujlABLWEeiFubQUFHg6OA">
              <language>C++</language>
              <body>    //int r = rand()%max;
    //r=r+min;
    int r=0;
    std::cout&lt;&lt;TextToShow;
    std::cin>>r;
    buttonsP.ReadIntResult(r).send();
</body>
            </effect>
            <trigger xmi:id="_qe0YYBFKEeibZqndpu8erg" event="_-anYcBFKEeibZqndpu8erg" port="_qHclsAqxEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_q5oOQEv9EemUDNyOZuPHRw" name="Trans__Init__State__215216" source="_q5jVwEv9EemUDNyOZuPHRw" target="_q5g5gEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q7aW8Ev9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__215&quot;,&quot;ReadKey&quot;,&quot;To__ReadKey__219&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__215&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_q5rRkEv9EemUDNyOZuPHRw" name="From__ReadKey__217" source="_bC4TIA-7EeijktysABpT4g" target="_q5g5gEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_q7nyUEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;ReadKey&quot;,&quot;ReadKey&quot;,&quot;To__ReadKey__219&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;ReadKey&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_q7OwwEv9EemUDNyOZuPHRw" name="PME_Trig218" event="_qNAY0Ev9EemUDNyOZuPHRw" port="_q4qk8Ev9EemUDNyOZuPHRw"/>
          </transition>
          <transition xmi:id="_q7U3YEv9EemUDNyOZuPHRw" name="To__ReadKey__219" guard="_q7q1oUv9EemUDNyOZuPHRw" source="_q5g5gEv9EemUDNyOZuPHRw" target="_bC4TIA-7EeijktysABpT4g">
            <ownedRule xmi:id="_q7q1oUv9EemUDNyOZuPHRw" name="PME_checkDecesion220">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_q7q1oEv9EemUDNyOZuPHRw" name="PME_checkDecesion220">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__ReadKey__219&quot;,&quot;ReadKey&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:State" xmi:id="_bC4TIA-7EeijktysABpT4g" name="ReadKey"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_q5g5gEv9EemUDNyOZuPHRw" name="DecesionPoint__214" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_q5jVwEv9EemUDNyOZuPHRw" name="Init__State__215"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_q451gUv9EemUDNyOZuPHRw" name="loadHeap" specification="_q451gEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_q47qsUv9EemUDNyOZuPHRw" name="unLoadHeap" specification="_q47qsEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_q5H38Uv9EemUDNyOZuPHRw" name="sendMessage" specification="_q5H38Ev9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ButtonHold&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonHold( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonPressed&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonPressed().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonReleased&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonReleased( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ReadIntResult&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadIntResult( boost::any_cast&lt;int>(message.payload[&quot;InputInt&quot;])).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_q5LiUUv9EemUDNyOZuPHRw" name="sendInternalMessage" specification="_q5LiUEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_q5ay4Ev9EemUDNyOZuPHRw" name="initForPMD" specification="_q5aL0Ev9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_ButtonsReader::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_ButtonsReader::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;readKeyTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForButtonsReader&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_q451gEv9EemUDNyOZuPHRw" name="loadHeap" visibility="private" method="_q451gUv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_q47qsEv9EemUDNyOZuPHRw" name="unLoadHeap" visibility="private" method="_q47qsUv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_q5H38Ev9EemUDNyOZuPHRw" name="sendMessage" visibility="private" method="_q5H38Uv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_q5JGEEv9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_q5KUMUv9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_q5LiUEv9EemUDNyOZuPHRw" name="sendInternalMessage" visibility="private" method="_q5LiUUv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_q5MwcEv9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_q5PMsEv9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_q5aL0Ev9EemUDNyOZuPHRw" name="initForPMD" visibility="private" method="_q5ay4Ev9EemUDNyOZuPHRw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_5cgykAquEeiwdpidSbDb2g" name="WatchCore" classifierBehavior="_5TyacBNsEeiFubQUFHg6OA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_wsY5YAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_2ASigAreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ppFN4ArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_IaFLAArkEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ka0UEArzEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_CpaG0BgfEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CpeYQBgfEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qi5JQEv9EemUDNyOZuPHRw" name="dbgPortForWatchCore" visibility="protected" type="_qMGZ4Ev9EemUDNyOZuPHRw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qi6XYEv9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_qi6-cEv9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_5TyacBNsEeiFubQUFHg6OA" name="StateMachine" isReentrant="false">
        <region xmi:id="_5UK08BNsEeiFubQUFHg6OA" name="Region">
          <transition xmi:id="_5Udv4BNsEeiFubQUFHg6OA" name="Initial" source="_5UPGYBNsEeiFubQUFHg6OA" target="_qc0-gBNyEeiFubQUFHg6OA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_76FHQBNsEeiFubQUFHg6OA">
              <language>C++</language>
              <body>initForPMD();
    displayGateKeeperP.ShowText(0,&quot;WatchCore capsule is started&quot;).send();
</body>
            </effect>
          </transition>
          <transition xmi:id="_3D6aoBW-EeikLqTX9lOhHA" name="adjustAlarm" source="_qdGEQBNyEeiFubQUFHg6OA" target="_bAapABUhEeiYy9niOG6dTw"/>
          <transition xmi:id="_qlVZQEv9EemUDNyOZuPHRw" name="From__New__State__53__54" source="_qlNdcEv9EemUDNyOZuPHRw" target="_qlJzEEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qvcXgEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__53&quot;,&quot;New__State__53&quot;,&quot;To__New__State__53__68&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__53&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__100&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__53&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__70&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__53&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_qlWnYEv9EemUDNyOZuPHRw" name="PME_Trig55" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qlcuAEv9EemUDNyOZuPHRw" name="PME_Trig56" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qlfxUEv9EemUDNyOZuPHRw" name="PME_Trig57" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qljbsEv9EemUDNyOZuPHRw" name="PME_Trig58" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qlmfAEv9EemUDNyOZuPHRw" name="PME_Trig59" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qlqJYEv9EemUDNyOZuPHRw" name="PME_Trig60" event="_qNAY0Ev9EemUDNyOZuPHRw" port="_qi5JQEv9EemUDNyOZuPHRw"/>
            <trigger xmi:id="_qltzwEv9EemUDNyOZuPHRw" name="PME_Trig61" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qlvo8Ev9EemUDNyOZuPHRw" name="PME_Trig62" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qlyFMEv9EemUDNyOZuPHRw" name="PME_Trig63" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_ql0hcEv9EemUDNyOZuPHRw" name="PME_Trig64" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_ql4y4Ev9EemUDNyOZuPHRw" name="PME_Trig65" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qmAHoEv9EemUDNyOZuPHRw" name="PME_Trig66" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qmG1UEv9EemUDNyOZuPHRw" name="PME_Trig67" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_qmJ4oEv9EemUDNyOZuPHRw" name="To__New__State__53__68" guard="_qvqZ8Uv9EemUDNyOZuPHRw" source="_qlJzEEv9EemUDNyOZuPHRw" target="_qlNdcEv9EemUDNyOZuPHRw">
            <ownedRule xmi:id="_qvqZ8Uv9EemUDNyOZuPHRw" name="PME_checkDecesion143">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_qvqZ8Ev9EemUDNyOZuPHRw" name="PME_checkDecesion143">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__53__68&quot;,&quot;New__State__53&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_qmSbgUv9EemUDNyOZuPHRw" name="To__Substates__SetAlarm__70" guard="_qvsPIUv9EemUDNyOZuPHRw" source="_qlJzEEv9EemUDNyOZuPHRw" target="_qmRNYEv9EemUDNyOZuPHRw">
            <ownedRule xmi:id="_qvsPIUv9EemUDNyOZuPHRw" name="PME_checkDecesion145">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_qvsPIEv9EemUDNyOZuPHRw" name="PME_checkDecesion145">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__SetAlarm__70&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_qmXUAEv9EemUDNyOZuPHRw" name="From__Substates__SetAlarm__72" source="_qmTpoEv9EemUDNyOZuPHRw" target="_qlJzEEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qvGZQEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;New__State__53&quot;,&quot;To__New__State__53__68&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__100&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__70&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_qoR_kEv9EemUDNyOZuPHRw" name="Trans__keyPressEx98" source="_qdGEQBNyEeiFubQUFHg6OA" target="_qlJzEEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qvT0oEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__53&quot;,&quot;To__New__State__53__68&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__100&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__70&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_qoVC4Ev9EemUDNyOZuPHRw" name="To__Substates__WorkingMode__100" guard="_qvrBAUv9EemUDNyOZuPHRw" source="_qlJzEEv9EemUDNyOZuPHRw" target="_qoTNsEv9EemUDNyOZuPHRw">
            <ownedRule xmi:id="_qvrBAUv9EemUDNyOZuPHRw" name="PME_checkDecesion144">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_qvrBAEv9EemUDNyOZuPHRw" name="PME_checkDecesion144">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__WorkingMode__100&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_qoW4EUv9EemUDNyOZuPHRw" name="From__Substates__WorkingMode__102" source="_qoVp8Ev9EemUDNyOZuPHRw" target="_qlJzEEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qvYGEEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__53&quot;,&quot;To__New__State__53__68&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__100&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__70&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5UPGYBNsEeiFubQUFHg6OA" name="Pseudo45"/>
          <subvertex xmi:type="uml:State" xmi:id="_5UY3YBNsEeiFubQUFHg6OA" name="WorkingMode">
            <connectionPoint xmi:id="_qc0-gBNyEeiFubQUFHg6OA" name="mainEn" kind="entryPoint"/>
            <connectionPoint xmi:id="_qdGEQBNyEeiFubQUFHg6OA" name="keyPressEx" kind="exitPoint"/>
            <connectionPoint xmi:id="_2-cFABUfEeiYy9niOG6dTw" name="backFromAlarmSet" kind="entryPoint"/>
            <connectionPoint xmi:id="_qoTNsEv9EemUDNyOZuPHRw" name="From__Parent__99" kind="entryPoint"/>
            <connectionPoint xmi:id="_qoVp8Ev9EemUDNyOZuPHRw" name="To__Parent__101" kind="exitPoint"/>
            <region xmi:id="_qcoxQBNyEeiFubQUFHg6OA" name="Region1">
              <transition xmi:id="_-sDQ4BNyEeiFubQUFHg6OA" name="Pseudo48__WatchMode__49" kind="local" source="_OEEIEBgmEeiSBIpf1RqKYQ" target="_2NyEEBNyEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_y0FDgBXGEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    /// send message to TimeTracker to be activated
	timeTrackerP.Activate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_Q0xw0BNzEeiFubQUFHg6OA" name="btnPressed1" source="_2NyEEBNyEeiFubQUFHg6OA" target="_GT9dcBNzEeiFubQUFHg6OA">
                <trigger xmi:id="_b8GCoBRnEeiFubQUFHg6OA" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_S87wIBNzEeiFubQUFHg6OA" name="ignoreBtn" source="_GT9dcBNzEeiFubQUFHg6OA" target="_2NyEEBNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_me648BWrEeiYy9niOG6dTw">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_me648RWrEeiYy9niOG6dTw">
                    <language>C++</language>
                    <body>    if (ButtonID!=3  &amp;&amp; ButtonID!=0)
    	return true;
    else
    	return false;
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_XGRkEBNzEeiFubQUFHg6OA" name="leaveWatchMode" guard="_Q1zukBXDEeikLqTX9lOhHA" source="_GT9dcBNzEeiFubQUFHg6OA" target="_VhqWsBNzEeiFubQUFHg6OA">
                <ownedRule xmi:id="_Q1zukBXDEeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Q1zukRXDEeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    if (ButtonID=='0' ||  ButtonID=='3')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yVuzQBXJEeio2qtoBBAMvw">
                  <language>C++</language>
                  <body>    // leave watch mode
	timeTrackerP.Deactivate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ZwRFIBNzEeiFubQUFHg6OA" name="goStopWatch" guard="_Da_hgBW-EeikLqTX9lOhHA" source="_VhqWsBNzEeiFubQUFHg6OA" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_Da_hgBW-EeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Da_hgRW-EeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    if (ButtonID=='0')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_4C1AUBXGEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    // activate stopwatch
	stopWatchP.Activate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_aosh8BNzEeiFubQUFHg6OA" name="alarmSet1" source="_VhqWsBNzEeiFubQUFHg6OA" target="_qdGEQBNyEeiFubQUFHg6OA"/>
              <transition xmi:id="_M1WfQBRiEeiFubQUFHg6OA" name="keyPressed2" source="_34ui8BNyEeiFubQUFHg6OA" target="_5oJgABRgEeiFubQUFHg6OA">
                <trigger xmi:id="_hoSycBbCEei-ccFu-OwT7Q" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_Tt5EYBRiEeiFubQUFHg6OA" name="ignoreBtn2" source="_5oJgABRgEeiFubQUFHg6OA" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_YAqlABW-EeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_YArMEBW-EeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>ButtonID!=0 &amp;&amp;  ButtonID!=3 </body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KDQf4BXHEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    // do reset and start of the stop watch here 
    #define ButtonID ( *(char *)msg->getParam( 0 ) )
    if (ButtonID=='1')
    stopWatchP.Toggle().send();
    else if (ButtonID=='2')
    stopWatchP.Reset().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_T8G5gBgmEeiSBIpf1RqKYQ" name="backFromAlarmSet__Pseudo48__51" kind="local" source="_2-cFABUfEeiYy9niOG6dTw" target="_OEEIEBgmEeiSBIpf1RqKYQ"/>
              <transition xmi:id="_YOTHcBgmEeiSBIpf1RqKYQ" name="mainEn__Pseudo48__50" kind="local" source="_qc0-gBNyEeiFubQUFHg6OA" target="_OEEIEBgmEeiSBIpf1RqKYQ"/>
              <transition xmi:id="_qqzvIEv9EemUDNyOZuPHRw" name="Trans__keyPressEx105" source="_qdGEQBNyEeiFubQUFHg6OA" target="_qoXfIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_quofMEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__139&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__136&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__137&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_qq3ZgEv9EemUDNyOZuPHRw" name="Trans__Init__State__104106" source="_qqrzUEv9EemUDNyOZuPHRw" target="_qoXfIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_quEegEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__104&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__139&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__104&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__136&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__104&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__137&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__104&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_qq9gIEv9EemUDNyOZuPHRw" name="107" source="_VhqWsBNzEeiFubQUFHg6OA" target="_qoXfIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_quWyYEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo43&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__139&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo43&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__136&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo43&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__137&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo43&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_qq-HMEv9EemUDNyOZuPHRw" name="108" source="_GT9dcBNzEeiFubQUFHg6OA" target="_qoXfIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qu4W0Ev9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo44&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__139&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo44&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__136&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo44&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__137&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo44&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_qq-uQEv9EemUDNyOZuPHRw" name="109" source="_5oJgABRgEeiFubQUFHg6OA" target="_qoXfIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_quO2kEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo47&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__139&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo47&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__136&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo47&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__137&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo47&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_qrBKgEv9EemUDNyOZuPHRw" name="From__WatchMode__110" source="_2NyEEBNyEeiFubQUFHg6OA" target="_qoXfIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qu8oQEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WatchMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__139&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WatchMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__136&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__137&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_qrazIEv9EemUDNyOZuPHRw" name="PME_Trig111" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qrfroEv9EemUDNyOZuPHRw" name="PME_Trig112" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qrjWAEv9EemUDNyOZuPHRw" name="PME_Trig113" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qruVIEv9EemUDNyOZuPHRw" name="PME_Trig114" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qrx_gEv9EemUDNyOZuPHRw" name="PME_Trig115" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qr0bwEv9EemUDNyOZuPHRw" name="PME_Trig116" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qr4GIEv9EemUDNyOZuPHRw" name="PME_Trig117" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qr57UEv9EemUDNyOZuPHRw" name="PME_Trig118" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qr_a4Ev9EemUDNyOZuPHRw" name="PME_Trig119" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qsE6cEv9EemUDNyOZuPHRw" name="PME_Trig120" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qsH9wEv9EemUDNyOZuPHRw" name="PME_Trig121" event="_qNAY0Ev9EemUDNyOZuPHRw" port="_qi5JQEv9EemUDNyOZuPHRw"/>
                <trigger xmi:id="_qsKaAEv9EemUDNyOZuPHRw" name="PME_Trig122" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_qsqwUEv9EemUDNyOZuPHRw" name="From__StopWatchMode__123" source="_34ui8BNyEeiFubQUFHg6OA" target="_qoXfIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_quTIAEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__139&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__136&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__137&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_qsvBwEv9EemUDNyOZuPHRw" name="PME_Trig124" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qsyFEEv9EemUDNyOZuPHRw" name="PME_Trig125" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qs0hUEv9EemUDNyOZuPHRw" name="PME_Trig126" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qs6n8Ev9EemUDNyOZuPHRw" name="PME_Trig127" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qs9rQEv9EemUDNyOZuPHRw" name="PME_Trig128" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qtAHgEv9EemUDNyOZuPHRw" name="PME_Trig129" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qtDK0Ev9EemUDNyOZuPHRw" name="PME_Trig130" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qtGOIEv9EemUDNyOZuPHRw" name="PME_Trig131" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qtdagEv9EemUDNyOZuPHRw" name="PME_Trig132" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qtfPsEv9EemUDNyOZuPHRw" name="PME_Trig133" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qtsEAEv9EemUDNyOZuPHRw" name="PME_Trig134" event="_qNAY0Ev9EemUDNyOZuPHRw" port="_qi5JQEv9EemUDNyOZuPHRw"/>
                <trigger xmi:id="_qtugQEv9EemUDNyOZuPHRw" name="PME_Trig135" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_qt0m4Ev9EemUDNyOZuPHRw" name="To__WatchMode__136" guard="_qvASoUv9EemUDNyOZuPHRw" source="_qoXfIEv9EemUDNyOZuPHRw" target="_2NyEEBNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_qvASoUv9EemUDNyOZuPHRw" name="PME_checkDecesion141">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_qvASoEv9EemUDNyOZuPHRw" name="PME_checkDecesion141">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__WatchMode__136&quot;,&quot;WatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_qt1N8Ev9EemUDNyOZuPHRw" name="To__StopWatchMode__137" guard="_qvBgwUv9EemUDNyOZuPHRw" source="_qoXfIEv9EemUDNyOZuPHRw" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_qvBgwUv9EemUDNyOZuPHRw" name="PME_checkDecesion142">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_qvBgwEv9EemUDNyOZuPHRw" name="PME_checkDecesion142">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__StopWatchMode__137&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_qt3qMEv9EemUDNyOZuPHRw" name="From__Parnet__StateMachine__138" source="_qoTNsEv9EemUDNyOZuPHRw" target="_qoXfIEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_quHh0Ev9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__139&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WatchMode&quot;,&quot;To__WatchMode__136&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__137&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_qt4RQEv9EemUDNyOZuPHRw" name="To__Parent__StateMachine__139" guard="_qu-dcUv9EemUDNyOZuPHRw" source="_qoXfIEv9EemUDNyOZuPHRw" target="_qoVp8Ev9EemUDNyOZuPHRw">
                <ownedRule xmi:id="_qu-dcUv9EemUDNyOZuPHRw" name="PME_checkDecesion140">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_qu-dcEv9EemUDNyOZuPHRw" name="PME_checkDecesion140">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__139&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_2NyEEBNyEeiFubQUFHg6OA" name="WatchMode"/>
              <subvertex xmi:type="uml:State" xmi:id="_34ui8BNyEeiFubQUFHg6OA" name="StopWatchMode"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_GT9dcBNzEeiFubQUFHg6OA" name="Pseudo44" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_VhqWsBNzEeiFubQUFHg6OA" name="Pseudo43" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_5oJgABRgEeiFubQUFHg6OA" name="Pseudo47" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_OEEIEBgmEeiSBIpf1RqKYQ" name="Pseudo48" kind="junction"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_qoXfIEv9EemUDNyOZuPHRw" name="DecesionPoint__103" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_qqrzUEv9EemUDNyOZuPHRw" name="Init__State__104"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_m0-1cBNvEeiFubQUFHg6OA" name="SetAlarm">
            <connectionPoint xmi:id="_bAapABUhEeiYy9niOG6dTw" name="Pseudo46" kind="entryPoint"/>
            <connectionPoint xmi:id="_qmRNYEv9EemUDNyOZuPHRw" name="From__Parent__69" kind="entryPoint"/>
            <connectionPoint xmi:id="_qmTpoEv9EemUDNyOZuPHRw" name="To__Parent__71" kind="exitPoint"/>
            <region xmi:id="_GFF28BRjEeiFubQUFHg6OA" name="Region1">
              <ownedComment xmi:id="_PbsboBghEei-ccFu-OwT7Q"/>
              <transition xmi:id="_qmugYEv9EemUDNyOZuPHRw" name="Trans__Pseudo4275" source="_smhkEBeSEei-ccFu-OwT7Q" target="_qmblcEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qn7aQEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo42&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__95&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo42&quot;,&quot;readMinute&quot;,&quot;To__readMinute__93&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo42&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_qmvHcEv9EemUDNyOZuPHRw" name="Trans__Init__State__7476" source="_qmkvYEv9EemUDNyOZuPHRw" target="_qmblcEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qn-dkEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__74&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__95&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__74&quot;,&quot;readMinute&quot;,&quot;To__readMinute__93&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__74&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_qmvugEv9EemUDNyOZuPHRw" name="Trans__Pseudo4677" source="_bAapABUhEeiYy9niOG6dTw" target="_qmblcEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qoA50Ev9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__95&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readMinute&quot;,&quot;To__readMinute__93&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_qmyKwEv9EemUDNyOZuPHRw" name="78" source="_smhkEBeSEei-ccFu-OwT7Q" target="_qmblcEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qoMgAEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo42&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__95&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo42&quot;,&quot;readMinute&quot;,&quot;To__readMinute__93&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo42&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_qmzY4Ev9EemUDNyOZuPHRw" name="From__readMinute__79" source="_HQIGsBRjEeiFubQUFHg6OA" target="_qmblcEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qoFLQEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__95&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;readMinute&quot;,&quot;To__readMinute__93&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;readMinute&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_qm0nAEv9EemUDNyOZuPHRw" name="PME_Trig80" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qnANMEv9EemUDNyOZuPHRw" name="PME_Trig81" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qnD3kEv9EemUDNyOZuPHRw" name="PME_Trig82" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qnFswEv9EemUDNyOZuPHRw" name="PME_Trig83" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qnHh8Ev9EemUDNyOZuPHRw" name="PME_Trig84" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qnQE0Ev9EemUDNyOZuPHRw" name="PME_Trig85" event="_qNAY0Ev9EemUDNyOZuPHRw" port="_qi5JQEv9EemUDNyOZuPHRw"/>
                <trigger xmi:id="_qnUWQEv9EemUDNyOZuPHRw" name="PME_Trig86" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qnYnsEv9EemUDNyOZuPHRw" name="PME_Trig87" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qnbD8Ev9EemUDNyOZuPHRw" name="PME_Trig88" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qnhxoEv9EemUDNyOZuPHRw" name="PME_Trig89" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qnn4QEv9EemUDNyOZuPHRw" name="PME_Trig90" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qnsJsEv9EemUDNyOZuPHRw" name="PME_Trig91" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qnv0EEv9EemUDNyOZuPHRw" name="PME_Trig92" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_qnzecEv9EemUDNyOZuPHRw" name="To__readMinute__93" guard="_qoO8QUv9EemUDNyOZuPHRw" source="_qmblcEv9EemUDNyOZuPHRw" target="_HQIGsBRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_qoO8QUv9EemUDNyOZuPHRw" name="PME_checkDecesion97">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_qoO8QEv9EemUDNyOZuPHRw" name="PME_checkDecesion97">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__readMinute__93&quot;,&quot;readMinute&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_qn3I0Ev9EemUDNyOZuPHRw" name="From__Parnet__StateMachine__94" source="_qmRNYEv9EemUDNyOZuPHRw" target="_qmblcEv9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qoI1oEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__95&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readMinute&quot;,&quot;To__readMinute__93&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_qn4W8Ev9EemUDNyOZuPHRw" name="To__Parent__StateMachine__95" guard="_qoNuIUv9EemUDNyOZuPHRw" source="_qmblcEv9EemUDNyOZuPHRw" target="_qmTpoEv9EemUDNyOZuPHRw">
                <ownedRule xmi:id="_qoNuIUv9EemUDNyOZuPHRw" name="PME_checkDecesion96">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_qoNuIEv9EemUDNyOZuPHRw" name="PME_checkDecesion96">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__95&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_HQIGsBRjEeiFubQUFHg6OA" name="readMinute"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_smhkEBeSEei-ccFu-OwT7Q" name="Pseudo42" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_qmblcEv9EemUDNyOZuPHRw" name="DecesionPoint__73" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_qmkvYEv9EemUDNyOZuPHRw" name="Init__State__74"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_qlJzEEv9EemUDNyOZuPHRw" name="DecesionPoint__52" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_qlNdcEv9EemUDNyOZuPHRw" name="New__State__53"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qjTY8Uv9EemUDNyOZuPHRw" name="loadHeap" specification="_qjTY8Ev9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qjVOIUv9EemUDNyOZuPHRw" name="unLoadHeap" specification="_qjVOIEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qj7rEEv9EemUDNyOZuPHRw" name="sendMessage" specification="_qj7EAEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ReadInt&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadInt( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;TextToShow&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;RemAlarm&quot;) {
   if(message.payload.size()==1){
    alarmP.RemAlarm( boost::any_cast&lt;int>(message.payload[&quot;alarmID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;viewAlarmReq&quot;) {
   if(message.payload.size()==0){
    alarmP.viewAlarmReq().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;SetAlarm&quot;) {
   if(message.payload.size()==3){
    alarmP.SetAlarm( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;oneShot&quot;])).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Toggle&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Toggle().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Reset&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Reset().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Deactivate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Resume&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Resume().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Deactivate().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qkE1AUv9EemUDNyOZuPHRw" name="sendInternalMessage" specification="_qkE1AEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qku8UEv9EemUDNyOZuPHRw" name="initForPMD" specification="_qkuVQEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_WatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_WatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_qjTY8Ev9EemUDNyOZuPHRw" name="loadHeap" visibility="private" method="_qjTY8Uv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_qjVOIEv9EemUDNyOZuPHRw" name="unLoadHeap" visibility="private" method="_qjVOIUv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_qj7EAEv9EemUDNyOZuPHRw" name="sendMessage" visibility="private" method="_qj7rEEv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_qj8SIEv9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_qkDm4Ev9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_qkE1AEv9EemUDNyOZuPHRw" name="sendInternalMessage" visibility="private" method="_qkE1AUv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_qkGDIEv9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_qkP0IEv9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_qkuVQEv9EemUDNyOZuPHRw" name="initForPMD" visibility="private" method="_qku8UEv9EemUDNyOZuPHRw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_EUMt0AqvEeiwdpidSbDb2g" name="TimeTracker" classifierBehavior="_f9DS0Ar0EeiwdpidSbDb2g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="__kPLsArjEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_7dRcsArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_-6GrwAryEeiwdpidSbDb2g" name="timeTrackingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_L22PAArzEeiwdpidSbDb2g" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yQcqUAr3EeiwdpidSbDb2g" name="showTimeTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KsSnIBKYEeiBE_x0ZD7_9g" name="clockResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_UKWdABKYEeiBE_x0ZD7_9g" value="500"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_7xV-8BbCEei-ccFu-OwT7Q" name="showTimeTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qaATAEv9EemUDNyOZuPHRw" name="dbgPortForTimeTracker" visibility="protected" type="_qMGZ4Ev9EemUDNyOZuPHRw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qaA6EEv9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_qaBhIEv9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_f9DS0Ar0EeiwdpidSbDb2g" name="TimeTrackerSM" isReentrant="false">
        <region xmi:id="_gAJqIAr0EeiwdpidSbDb2g" name="Region">
          <transition xmi:id="_qgc5QEv9EemUDNyOZuPHRw" name="Trans__Pseudo914" source="_gAMtcAr0EeiwdpidSbDb2g" target="_qgNBoEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qis8AEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo9&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__25&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo9&quot;,&quot;New__State__13&quot;,&quot;To__New__State__13__23&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo9&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_qghxwEv9EemUDNyOZuPHRw" name="From__New__State__13__15" source="_qgPd4Ev9EemUDNyOZuPHRw" target="_qgNBoEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qi0QwEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__13&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__25&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__13&quot;,&quot;New__State__13&quot;,&quot;To__New__State__13__23&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__13&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_qgnRUEv9EemUDNyOZuPHRw" name="PME_Trig16" event="_qNAY0Ev9EemUDNyOZuPHRw" port="_qaATAEv9EemUDNyOZuPHRw"/>
            <trigger xmi:id="_qgriwEv9EemUDNyOZuPHRw" name="PME_Trig17" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qgtX8Ev9EemUDNyOZuPHRw" name="PME_Trig18" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qg3wAEv9EemUDNyOZuPHRw" name="PME_Trig19" port="_-6GrwAryEeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_qg6MQEv9EemUDNyOZuPHRw" name="PME_Trig20" port="_yQcqUAr3EeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_qg9PkEv9EemUDNyOZuPHRw" name="PME_Trig21" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_qhAS4Ev9EemUDNyOZuPHRw" name="PME_Trig22" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_qhQKgEv9EemUDNyOZuPHRw" name="To__New__State__13__23" guard="_qi3UEUv9EemUDNyOZuPHRw" source="_qgNBoEv9EemUDNyOZuPHRw" target="_qgPd4Ev9EemUDNyOZuPHRw">
            <ownedRule xmi:id="_qi3UEUv9EemUDNyOZuPHRw" name="PME_checkDecesion41">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_qi3UEEv9EemUDNyOZuPHRw" name="PME_checkDecesion41">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__13__23&quot;,&quot;New__State__13&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_qhUb8Ev9EemUDNyOZuPHRw" name="To__Substates__TrackingTime__25" guard="_qi1e4Uv9EemUDNyOZuPHRw" source="_qgNBoEv9EemUDNyOZuPHRw" target="_qhSmwEv9EemUDNyOZuPHRw">
            <ownedRule xmi:id="_qi1e4Uv9EemUDNyOZuPHRw" name="PME_checkDecesion40">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_qi1e4Ev9EemUDNyOZuPHRw" name="PME_checkDecesion40">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__TrackingTime__25&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_qhVqEUv9EemUDNyOZuPHRw" name="From__Substates__TrackingTime__27" source="_qhVDAEv9EemUDNyOZuPHRw" target="_qgNBoEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qigHsEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__25&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__13&quot;,&quot;To__New__State__13__23&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_gAMtcAr0EeiwdpidSbDb2g" name="Pseudo9"/>
          <subvertex xmi:type="uml:State" xmi:id="_gARl8Ar0EeiwdpidSbDb2g" name="TrackingTime">
            <connectionPoint xmi:id="_qhSmwEv9EemUDNyOZuPHRw" name="From__Parent__24" kind="entryPoint"/>
            <connectionPoint xmi:id="_qhVDAEv9EemUDNyOZuPHRw" name="To__Parent__26" kind="exitPoint"/>
            <region xmi:id="_BISvsAr1EeiwdpidSbDb2g" name="Region1">
              <transition xmi:id="_PY02EAr1EeiwdpidSbDb2g" name="Pseudo10__Active__11" source="_CEn1EAr1EeiwdpidSbDb2g" target="_DTbxkAr1EeiwdpidSbDb2g"/>
              <transition xmi:id="_RrrNAAr2EeiwdpidSbDb2g" name="ignoreActive" source="_DTbxkAr1EeiwdpidSbDb2g" target="_DTbxkAr1EeiwdpidSbDb2g">
                <trigger xmi:id="_iP6wgAr4EeiwdpidSbDb2g" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_otIWcAr2EeiwdpidSbDb2g" name="showTime" source="_DTbxkAr1EeiwdpidSbDb2g" target="_DTbxkAr1EeiwdpidSbDb2g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_XpX0gBKLEeiEEYKmuRZPIg">
                  <language>C++</language>
                  <body>int hour=    milliTime/(1000*60*60);
int minute= milliTime % (1000*60*60) / (1000*60);
int second= milliTime % (1000*60) / 1000;
displayGateKeeperP.ShowTime(hour,minute,second ).send();
</body>
                </effect>
                <trigger xmi:id="_brsOgAr4EeiwdpidSbDb2g" port="_yQcqUAr3EeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:id="_qhpMEEv9EemUDNyOZuPHRw" name="From__Active__29" source="_DTbxkAr1EeiwdpidSbDb2g" target="_qhdl4Ev9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qiW9wEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__37&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;Active&quot;,&quot;To__Active__35&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Active&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_qhvSsEv9EemUDNyOZuPHRw" name="PME_Trig30" event="_qNAY0Ev9EemUDNyOZuPHRw" port="_qaATAEv9EemUDNyOZuPHRw"/>
                <trigger xmi:id="_qhzkIEv9EemUDNyOZuPHRw" name="PME_Trig31" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qh2ncEv9EemUDNyOZuPHRw" name="PME_Trig32" port="_-6GrwAryEeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_qh644Ev9EemUDNyOZuPHRw" name="PME_Trig33" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_qiCNoEv9EemUDNyOZuPHRw" name="PME_Trig34" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_qiQQEEv9EemUDNyOZuPHRw" name="To__Active__35" guard="_qidEYUv9EemUDNyOZuPHRw" source="_qhdl4Ev9EemUDNyOZuPHRw" target="_DTbxkAr1EeiwdpidSbDb2g">
                <ownedRule xmi:id="_qidEYUv9EemUDNyOZuPHRw" name="PME_checkDecesion39">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_qidEYEv9EemUDNyOZuPHRw" name="PME_checkDecesion39">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Active__35&quot;,&quot;Active&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_qiSFQEv9EemUDNyOZuPHRw" name="From__Parnet__TimeTrackerSM__36" source="_qhSmwEv9EemUDNyOZuPHRw" target="_qhdl4Ev9EemUDNyOZuPHRw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qiZaAEv9EemUDNyOZuPHRw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__37&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;Active&quot;,&quot;To__Active__35&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_qiTTYEv9EemUDNyOZuPHRw" name="To__Parent__TimeTrackerSM__37" guard="_qib2QUv9EemUDNyOZuPHRw" source="_qhdl4Ev9EemUDNyOZuPHRw" target="_qhVDAEv9EemUDNyOZuPHRw">
                <ownedRule xmi:id="_qib2QUv9EemUDNyOZuPHRw" name="PME_checkDecesion38">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_qib2QEv9EemUDNyOZuPHRw" name="PME_checkDecesion38">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__TimeTrackerSM__37&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_CEn1EAr1EeiwdpidSbDb2g" name="Pseudo10"/>
              <subvertex xmi:type="uml:State" xmi:id="_DTbxkAr1EeiwdpidSbDb2g" name="Active"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_qhdl4Ev9EemUDNyOZuPHRw" name="DecesionPoint__28" kind="choice"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_qgNBoEv9EemUDNyOZuPHRw" name="DecesionPoint__12" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_qgPd4Ev9EemUDNyOZuPHRw" name="New__State__13"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qbsVEUv9EemUDNyOZuPHRw" name="loadHeap" specification="_qbsVEEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.clockResolution&quot;,this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qb038Uv9EemUDNyOZuPHRw" name="unLoadHeap" specification="_qb038Ev9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.clockResolution&quot;,&amp;this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qd1qIEv9EemUDNyOZuPHRw" name="sendMessage" specification="_qd1DEEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qd6ioUv9EemUDNyOZuPHRw" name="sendInternalMessage" specification="_qd6ioEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qfa-gEv9EemUDNyOZuPHRw" name="initForPMD" specification="_qfaXcEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_TimeTracker::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_TimeTracker::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;showTimeTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForTimeTracker&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_qbsVEEv9EemUDNyOZuPHRw" name="loadHeap" visibility="private" method="_qbsVEUv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_qb038Ev9EemUDNyOZuPHRw" name="unLoadHeap" visibility="private" method="_qb038Uv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_qd1DEEv9EemUDNyOZuPHRw" name="sendMessage" visibility="private" method="_qd1qIEv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_qd24QEv9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_qd4tcEv9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_qd6ioEv9EemUDNyOZuPHRw" name="sendInternalMessage" visibility="private" method="_qd6ioUv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_qeH-AEv9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_qeMPcEv9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_qfaXcEv9EemUDNyOZuPHRw" name="initForPMD" visibility="private" method="_qfa-gEv9EemUDNyOZuPHRw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_OX25MAqxEeiwdpidSbDb2g" name="ButtonsP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_OXynwAqxEeiwdpidSbDb2g" name="ButtonsP">
        <interfaceRealization xmi:id="_OX_cEAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OX7KoAqxEeiwdpidSbDb2g" contract="_OX7KoAqxEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_OYLCQAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g" contract="_OYH-8AqxEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OX7KoAqxEeiwdpidSbDb2g" name="ButtonsP">
        <ownedOperation xmi:id="_-aZWABFKEeibZqndpu8erg" name="ReadInt">
          <ownedParameter xmi:id="_EERNMBgdEei-ccFu-OwT7Q" name="TextToShow">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYB4UAqxEeiwdpidSbDb2g" name="ButtonsP~">
        <ownedOperation xmi:id="_SXAPUAqxEeiwdpidSbDb2g" name="ButtonPressed">
          <ownedParameter xmi:id="_n9--0AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrus.designer.languages.cpp.library_1.0.4.jar!/models/AnsiCLibrary.uml#_5lVhgBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_XpIQQAqxEeiwdpidSbDb2g" name="ButtonHold">
          <ownedParameter xmi:id="_nYJt4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_cpytwAqxEeiwdpidSbDb2g" name="ButtonReleased">
          <ownedParameter xmi:id="_jp9k4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_nYfEIBFLEeibZqndpu8erg" name="ReadIntResult">
          <ownedParameter xmi:id="_nYfEIRFLEeibZqndpu8erg" name="InputInt">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYGJwAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYB4UAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_OYGw0AqxEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYH-8AqxEeiwdpidSbDb2g" name="ButtonsPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYLpUAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_SXXbsAqxEeiwdpidSbDb2g" operation="_SXAPUAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_XpPlAAqxEeiwdpidSbDb2g" operation="_XpIQQAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_cp40YAqxEeiwdpidSbDb2g" operation="_cpytwAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_-anYcBFKEeibZqndpu8erg" operation="_-aZWABFKEeibZqndpu8erg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_nYhgYBFLEeibZqndpu8erg" operation="_nYfEIBFLEeibZqndpu8erg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_atLzIArdEeiwdpidSbDb2g" name="AlarmP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_atHhsArdEeiwdpidSbDb2g" name="AlarmP">
        <interfaceRealization xmi:id="_atTH4ArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atQEkArdEeiwdpidSbDb2g" contract="_atQEkArdEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_ateHAArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g" contract="_atZ1kArdEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atQEkArdEeiwdpidSbDb2g" name="AlarmP">
        <ownedOperation xmi:id="_de5s0ArdEeiwdpidSbDb2g" name="SetAlarm">
          <ownedParameter xmi:id="_g8GMcArdEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_k_tL0ArdEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_n-OLYArdEeiwdpidSbDb2g" name="oneShot">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_suDXkArdEeiwdpidSbDb2g" name="RemAlarm">
          <ownedParameter xmi:id="_suDXkQrdEeiwdpidSbDb2g" name="alarmID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_0IE5IArdEeiwdpidSbDb2g" name="viewAlarmReq"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atU9EArdEeiwdpidSbDb2g" name="AlarmP~">
        <ownedOperation xmi:id="_d5y8QArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_d5y8QQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_d5zjUQrhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_d50KYArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atYncArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atU9EArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_atZOgArdEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atZ1kArdEeiwdpidSbDb2g" name="AlarmPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atfVIArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_dfgJwArdEeiwdpidSbDb2g" operation="_de5s0ArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_suGa4ArdEeiwdpidSbDb2g" operation="_suDXkArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_0IHVYArdEeiwdpidSbDb2g" operation="_0IE5IArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d5zjUArhEeiwdpidSbDb2g" operation="_d5y8QArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d50KYQrhEeiwdpidSbDb2g" operation="_d5zjUQrhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Viyf8ArfEeiwdpidSbDb2g" name="StopWatchP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Viyf8QrfEeiwdpidSbDb2g" name="StopWatchP">
        <interfaceRealization xmi:id="_Viyf8grfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf9ArfEeiwdpidSbDb2g" contract="_Viyf9ArfEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Viyf8wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g" contract="_ViygAQrfEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf9ArfEeiwdpidSbDb2g" name="StopWatchP">
        <ownedOperation xmi:id="_Viyf9QrfEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Viyf-QrfEeiwdpidSbDb2g" name="Reset"/>
        <ownedOperation xmi:id="_Viyf-wrfEeiwdpidSbDb2g" name="Deactivate"/>
        <ownedOperation xmi:id="_Viyf_ArfEeiwdpidSbDb2g" name="Resume"/>
        <ownedOperation xmi:id="_mM4pQArgEeiwdpidSbDb2g" name="Toggle"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf_grfEeiwdpidSbDb2g" name="StopWatchP~">
        <ownedOperation xmi:id="_RNPKEArhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_WQpZkArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_bGjYkArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_bGjYkQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Viyf_wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf_grfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_ViygAArfEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ViygAQrfEeiwdpidSbDb2g" name="StopWatchPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ViygAgrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygAwrfEeiwdpidSbDb2g" operation="_Viyf9QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBArfEeiwdpidSbDb2g" operation="_Viyf-QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBQrfEeiwdpidSbDb2g" operation="_Viyf-wrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBgrfEeiwdpidSbDb2g" operation="_Viyf_ArfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_mM5QUArgEeiwdpidSbDb2g" operation="_mM4pQArgEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_RNQYMArhEeiwdpidSbDb2g" operation="_RNPKEArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bGjYkgrhEeiwdpidSbDb2g" operation="_bGjYkArhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Lo6JYAriEeiwdpidSbDb2g" name="TimeTrackerP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Lo6JYQriEeiwdpidSbDb2g" name="TimeTrackerP">
        <interfaceRealization xmi:id="_Lo6JYgriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JZAriEeiwdpidSbDb2g" contract="_Lo6JZAriEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Lo6JYwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g" contract="_Lo6JcgriEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JZAriEeiwdpidSbDb2g" name="TimeTrackerP">
        <ownedOperation xmi:id="_Lo6JaQriEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Lo6JagriEeiwdpidSbDb2g" name="Deactivate"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JawriEeiwdpidSbDb2g" name="TimeTrackerP~">
        <ownedOperation xmi:id="_Lo6JbAriEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_Lo6JbQriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Lo6JbgriEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_Lo6JbwriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcAriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JawriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_Lo6JcQriEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JcgriEeiwdpidSbDb2g" name="TimeTrackerPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeAriEeiwdpidSbDb2g" operation="_Lo6JaQriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeQriEeiwdpidSbDb2g" operation="_Lo6JagriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JegriEeiwdpidSbDb2g" operation="_Lo6JbAriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JewriEeiwdpidSbDb2g" operation="_Lo6JbgriEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="__mIMoArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="__mIMoQrkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <interfaceRealization xmi:id="__mIMogrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMpArkEeiwdpidSbDb2g" contract="__mIMpArkEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="__mIMowrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g" contract="__mIMtQrkEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMpArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <ownedOperation xmi:id="__mIMpQrkEeiwdpidSbDb2g" name="ShowTime">
          <ownedParameter xmi:id="__mIMpgrkEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMpwrkEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMqArkEeiwdpidSbDb2g" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqQrkEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="__mIMqgrkEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_SddfAArlEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqwrkEeiwdpidSbDb2g" name="ShowCounter">
          <ownedParameter xmi:id="_gD0nAArlEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xd8cBKIEeiEEYKmuRZPIg" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xt0EBKIEeiEEYKmuRZPIg" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_3cTiABKIEeiEEYKmuRZPIg" name="milli">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMrgrkEeiwdpidSbDb2g" name="DisplayGateKeeperP~">
        <ownedOperation xmi:id="__mIMrwrkEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="__mIMsArkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMsQrkEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="__mIMsgrkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMswrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMrgrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="__mIMtArkEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMtQrkEeiwdpidSbDb2g" name="DisplayGateKeeperPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMtgrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMtwrkEeiwdpidSbDb2g" operation="__mIMpQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuArkEeiwdpidSbDb2g" operation="__mIMqQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuQrkEeiwdpidSbDb2g" operation="__mIMqwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuwrkEeiwdpidSbDb2g" operation="__mIMrwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMvArkEeiwdpidSbDb2g" operation="__mIMsQrkEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_EOr9EAruEeiwdpidSbDb2g" name="DisplayP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_EOqu8AruEeiwdpidSbDb2g" name="DisplayP">
        <interfaceRealization xmi:id="_EOw1kAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOuZUAruEeiwdpidSbDb2g" contract="_EOuZUAruEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_EO5YcAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g" contract="_EO2VIAruEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOuZUAruEeiwdpidSbDb2g" name="DisplayP">
        <ownedOperation xmi:id="_gYfq8ArvEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="_gYfq8QrvEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gYfq8grvEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOyDsAruEeiwdpidSbDb2g" name="DisplayP~"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO1HAAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOyDsAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_EO1uEAruEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EO2VIAruEeiwdpidSbDb2g" name="DisplayPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO6mkAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_gYhgIArvEeiwdpidSbDb2g" operation="_gYfq8ArvEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_qK3q0Ev9EemUDNyOZuPHRw" name="dbgAgent">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qNCOAEv9EemUDNyOZuPHRw" name="timing" visibility="protected">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qNC1EEv9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_qNDcIEv9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qaHnwEv9EemUDNyOZuPHRw" name="dbgPortForTimeTracker" visibility="public" type="_qMGZ4Ev9EemUDNyOZuPHRw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qaIO0Ev9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_qaI14Ev9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qi-BwEv9EemUDNyOZuPHRw" name="dbgPortForWatchCore" visibility="public" type="_qMGZ4Ev9EemUDNyOZuPHRw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qi-BwUv9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_qi-o0Ev9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qv4cYEv9EemUDNyOZuPHRw" name="dbgPortForDisplayGateKeeper" visibility="public" type="_qMGZ4Ev9EemUDNyOZuPHRw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qv5DcEv9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_qv5DcUv9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qx7DwEv9EemUDNyOZuPHRw" name="dbgPortForStopWatchCore" visibility="public" type="_qMGZ4Ev9EemUDNyOZuPHRw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qx7q0Ev9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_qx8R4Ev9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_q4toQEv9EemUDNyOZuPHRw" name="dbgPortForButtonsReader" visibility="public" type="_qMGZ4Ev9EemUDNyOZuPHRw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_q4uPUEv9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_q4uPUUv9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_q76tQEv9EemUDNyOZuPHRw" name="dbgPortForAlarmsCapsule" visibility="public" type="_qMGZ4Ev9EemUDNyOZuPHRw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_q76tQUv9EemUDNyOZuPHRw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_q77UUEv9EemUDNyOZuPHRw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_qLadYEv9EemUDNyOZuPHRw" name="dbgAgent StateMachine">
        <region xmi:id="_qUrHEEv9EemUDNyOZuPHRw" name="mainRegion">
          <transition xmi:id="_qVSyIEv9EemUDNyOZuPHRw" name="Trans__Init__State__34" source="_qVJBIEv9EemUDNyOZuPHRw" target="_qU0RAEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qWP0YEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__3&quot;,&quot;New__State__2&quot;,&quot;To__New__State__2__7&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__3&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_qVipwEv9EemUDNyOZuPHRw" name="From__New__State__2__5" source="_qU8z4Ev9EemUDNyOZuPHRw" target="_qU0RAEv9EemUDNyOZuPHRw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qWbakEv9EemUDNyOZuPHRw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__2&quot;,&quot;New__State__2&quot;,&quot;To__New__State__2__7&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__2&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_qVu3AEv9EemUDNyOZuPHRw" name="PME_Trig6" port="_qNCOAEv9EemUDNyOZuPHRw">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_qV6dMEv9EemUDNyOZuPHRw" name="To__New__State__2__7" guard="_qZ3JEEv9EemUDNyOZuPHRw" source="_qU0RAEv9EemUDNyOZuPHRw" target="_qU8z4Ev9EemUDNyOZuPHRw">
            <ownedRule xmi:id="_qZ3JEEv9EemUDNyOZuPHRw" name="PME_checkDecesion8">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_qZxpgEv9EemUDNyOZuPHRw" name="PME_checkDecesion8">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__2__7&quot;,&quot;New__State__2&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_qU0RAEv9EemUDNyOZuPHRw" name="DecesionPoint__1" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_qU8z4Ev9EemUDNyOZuPHRw" name="New__State__2">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_q_p9wEv9EemUDNyOZuPHRw" name="New__State__2">
              <language>C++</language>
              <body>timing.informIn(UMLRTTimespec(1,0));
</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_qVJBIEv9EemUDNyOZuPHRw" name="Init__State__3"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qRLHIEv9EemUDNyOZuPHRw" name="loadHeap" specification="_qQ-54Ev9EemUDNyOZuPHRw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qRP_oEv9EemUDNyOZuPHRw" name="unLoadHeap" specification="_qRPYkEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qRWGQUv9EemUDNyOZuPHRw" name="sendMessage" specification="_qRWGQEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>int result=-1;
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qTI2AUv9EemUDNyOZuPHRw" name="sendInternalMessage" specification="_qTI2AEv9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_qUVI0Uv9EemUDNyOZuPHRw" name="initForPMD" specification="_qUVI0Ev9EemUDNyOZuPHRw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_dbgAgent::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_dbgAgent::sendInternalMessage,this,std::placeholders::_1));
  this->execContext.addInputMessages(&quot;timing&quot;,&quot;timeout&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_qQ-54Ev9EemUDNyOZuPHRw" name="loadHeap" visibility="private" method="_qRLHIEv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_qRPYkEv9EemUDNyOZuPHRw" name="unLoadHeap" visibility="private" method="_qRP_oEv9EemUDNyOZuPHRw"/>
      <ownedOperation xmi:id="_qRWGQEv9EemUDNyOZuPHRw" name="sendMessage" visibility="private" method="_qRWGQUv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_qRvH0Ev9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_qSFtIEv9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_qTI2AEv9EemUDNyOZuPHRw" name="sendInternalMessage" visibility="private" method="_qTI2AUv9EemUDNyOZuPHRw">
        <ownedParameter xmi:id="_qT2AoEv9EemUDNyOZuPHRw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_qT_xoEv9EemUDNyOZuPHRw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_qUVI0Ev9EemUDNyOZuPHRw" name="initForPMD" visibility="private" method="_qUVI0Uv9EemUDNyOZuPHRw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_qMCIcEv9EemUDNyOZuPHRw" name="dbgProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_qMGZ4Ev9EemUDNyOZuPHRw" name="dbgProtocol">
        <interfaceRealization xmi:id="_qM5rIEv9EemUDNyOZuPHRw" client="_qMGZ4Ev9EemUDNyOZuPHRw" supplier="_qML5cEv9EemUDNyOZuPHRw" contract="_qML5cEv9EemUDNyOZuPHRw"/>
        <interfaceRealization xmi:id="_qM7gUEv9EemUDNyOZuPHRw" client="_qMGZ4Ev9EemUDNyOZuPHRw" supplier="_qMOVsEv9EemUDNyOZuPHRw" contract="_qMOVsEv9EemUDNyOZuPHRw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_qML5cEv9EemUDNyOZuPHRw" name="dbgProtocol">
        <ownedOperation xmi:id="_qM98kEv9EemUDNyOZuPHRw" name="dbg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_qMNHkEv9EemUDNyOZuPHRw" name="dbgProtocol~"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_qMOVsEv9EemUDNyOZuPHRw" name="dbgProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_qMPj0Ev9EemUDNyOZuPHRw" client="_qMGZ4Ev9EemUDNyOZuPHRw" supplier="_qMNHkEv9EemUDNyOZuPHRw"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_qMSAEEv9EemUDNyOZuPHRw" client="_qMGZ4Ev9EemUDNyOZuPHRw" supplier="_qMOVsEv9EemUDNyOZuPHRw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_qNAY0Ev9EemUDNyOZuPHRw" operation="_qM98kEv9EemUDNyOZuPHRw"/>
    </packagedElement>
    <profileApplication xmi:id="_GN1XswqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.profile_1.0.0.201707181432.jar!/umlProfile/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtQqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtgqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtwqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XuAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.codegen.cpp.profile_1.0.0.201707181457.jar!/profiles/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_pS-gAAqqEeiwdpidSbDb2g" base_Class="_pOYT4AqqEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_WFuLgAqrEeiwdpidSbDb2g" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_DFbqEAquEeiwdpidSbDb2g" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_J0BpAAquEeiwdpidSbDb2g" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_ZtYuYAquEeiwdpidSbDb2g" base_Class="_ZtPkcAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_xFmyAAquEeiwdpidSbDb2g" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_5crxsAquEeiwdpidSbDb2g" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_EUS0cAqvEeiwdpidSbDb2g" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_4mUU8AqvEeiwdpidSbDb2g" base_Property="_4mJV0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_7I7boAqvEeiwdpidSbDb2g" base_Property="_7I3xQAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_-Pye4AqvEeiwdpidSbDb2g" base_Property="_-PuNcAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Dab-0AqwEeiwdpidSbDb2g" base_Property="_DaXtYAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_K2YzAAqwEeiwdpidSbDb2g" base_Property="_K2VIoAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_QJj80AqwEeiwdpidSbDb2g" base_Property="_QJhgkAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Tqpd8AqwEeiwdpidSbDb2g" base_Property="_TqnowAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_OX4uYAqxEeiwdpidSbDb2g" base_Package="_OX25MAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OX9m4AqxEeiwdpidSbDb2g" base_Interface="_OX7KoAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYEUkAqxEeiwdpidSbDb2g" base_Interface="_OYB4UAqxEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYJ0IAqxEeiwdpidSbDb2g" base_Interface="_OYH-8AqxEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_OYM3cAqxEeiwdpidSbDb2g" base_Collaboration="_OXynwAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_qHisUAqxEeiwdpidSbDb2g" base_Port="_qHclsAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_wsb8sAqxEeiwdpidSbDb2g" base_Port="_wsY5YAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_4erJ8AqxEeiwdpidSbDb2g" base_Connector="_4edHgAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_atO2cArdEeiwdpidSbDb2g" base_Package="_atLzIArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atSg0ArdEeiwdpidSbDb2g" base_Interface="_atQEkArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atXZUArdEeiwdpidSbDb2g" base_Interface="_atU9EArdEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_atc44ArdEeiwdpidSbDb2g" base_Interface="_atZ1kArdEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_atgjQArdEeiwdpidSbDb2g" base_Collaboration="_atHhsArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_y_qqIAreEeiwdpidSbDb2g" base_Port="_y_nm0AreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_2AUXsAreEeiwdpidSbDb2g" base_Port="_2ASigAreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_8aUmsAreEeiwdpidSbDb2g" base_Connector="_8aQ8UAreEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_VizuEArfEeiwdpidSbDb2g" base_Package="_Viyf8ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Vi1jQArfEeiwdpidSbDb2g" base_Collaboration="_Viyf8QrfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2KUArfEeiwdpidSbDb2g" base_Interface="_Viyf9ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2xYArfEeiwdpidSbDb2g" base_Interface="_Viyf_grfEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi3_gArfEeiwdpidSbDb2g" base_Interface="_ViygAQrfEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_mHFGwArhEeiwdpidSbDb2g" base_Port="_mHDRkArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ppHqIArhEeiwdpidSbDb2g" base_Port="_ppFN4ArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ws7rIArhEeiwdpidSbDb2g" base_Connector="_ws4AwArhEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_Lo7XgAriEeiwdpidSbDb2g" base_Package="_Lo6JYAriEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Lo7-kAriEeiwdpidSbDb2g" base_Collaboration="_Lo6JYQriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo8loAriEeiwdpidSbDb2g" base_Interface="_Lo6JZAriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsAriEeiwdpidSbDb2g" base_Interface="_Lo6JawriEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsQriEeiwdpidSbDb2g" base_Interface="_Lo6JcgriEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="__kRn8ArjEeiwdpidSbDb2g" base_Port="__kPLsArjEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_IaHnQArkEeiwdpidSbDb2g" base_Port="_IaFLAArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_OI_1oArkEeiwdpidSbDb2g" base_Connector="_OI7kMArkEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="__mKB0ArkEeiwdpidSbDb2g" base_Package="__mIMoArkEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="__mLP8ArkEeiwdpidSbDb2g" base_Collaboration="__mIMoQrkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mMeEArkEeiwdpidSbDb2g" base_Interface="__mIMpArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mNsMArkEeiwdpidSbDb2g" base_Interface="__mIMrgrkEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="__mO6UArkEeiwdpidSbDb2g" base_Interface="__mIMtQrkEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_uB_LAArlEeiwdpidSbDb2g" base_Port="_uB7goArlEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_xFE50ArrEeiwdpidSbDb2g" base_Port="_xE8-AArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_28O6cArrEeiwdpidSbDb2g" base_Port="_28NFQArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_7dT48ArrEeiwdpidSbDb2g" base_Port="_7dRcsArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_-61vwArrEeiwdpidSbDb2g" base_Connector="_-6yscArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ALA-MArsEeiwdpidSbDb2g" base_Connector="_AK-h8ArsEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_A6ZzwArsEeiwdpidSbDb2g" base_Connector="_A6WwcArsEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_EOtyQAruEeiwdpidSbDb2g" base_Package="_EOr9EAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOwOgAruEeiwdpidSbDb2g" base_Interface="_EOuZUAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOz44AruEeiwdpidSbDb2g" base_Interface="_EOyDsAruEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_EO4KUAruEeiwdpidSbDb2g" base_Interface="_EO2VIAruEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_EO7NoAruEeiwdpidSbDb2g" base_Collaboration="_EOqu8AruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_LLyxwArxEeiwdpidSbDb2g" base_Port="_LLt5QArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_L9vzIArxEeiwdpidSbDb2g" base_Port="_L9t98ArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_WMsTYQrxEeiwdpidSbDb2g" base_Connector="_WMp3IArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_-6JIAAryEeiwdpidSbDb2g" isWired="false" base_Port="_-6GrwAryEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ka3XYArzEeiwdpidSbDb2g" base_Port="_ka0UEArzEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_qGzmgQrzEeiwdpidSbDb2g" base_Connector="_qGxKQArzEeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gAPwwAr0EeiwdpidSbDb2g" base_Pseudostate="_gAMtcAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_gATbIAr0EeiwdpidSbDb2g" base_State="_gARl8Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_gAV3YAr0EeiwdpidSbDb2g" base_Region="_gAJqIAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_gAaI0Ar0EeiwdpidSbDb2g" base_StateMachine="_f9DS0Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_BIUk4Ar1EeiwdpidSbDb2g" base_Region="_BISvsAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CErfcAr1EeiwdpidSbDb2g" base_Pseudostate="_CEn1EAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_DTdmwAr1EeiwdpidSbDb2g" base_State="_DTbxkAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_FtbHwAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUQg4Ar1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUUyUAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_pbDo4Ar1EeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_yQefgAr3EeiwdpidSbDb2g" isWired="false" base_Port="_yQcqUAr3EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hU-BcA-pEeijktysABpT4g" base_Pseudostate="_hUybQA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_hVdJoA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_hVipMA-pEeijktysABpT4g" base_Region="_hUncIA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_hWGp4A-pEeijktysABpT4g" base_StateMachine="_hUDbcA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OK1ngA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_OK7uIA-sEeijktysABpT4g" base_State="_OK4DwA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_OK-xcA-sEeijktysABpT4g" base_Region="_OKuSwA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_OLDp8A-sEeijktysABpT4g" base_StateMachine="_OKhecA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_kB4zUA-sEeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_Xb2N8A-uEeijktysABpT4g" isWired="false" base_Port="_XbRmMA-uEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_U9XDMA-3EeijktysABpT4g" base_Pseudostate="_U9Um8A-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_U9b7sA-3EeijktysABpT4g" base_State="_U9Y4YA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_U9dw4A-3EeijktysABpT4g" base_Region="_U9SKsA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_U9ipYA-3EeijktysABpT4g" base_StateMachine="_U9KO4A-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_e549wA-3EeijktysABpT4g" base_State="_e52hgA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_O4nAkA-5EeijktysABpT4g" base_Region="_O4jWMA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_P93_gA-5EeijktysABpT4g" base_State="_P908MA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_R-Zs0A-5EeijktysABpT4g" base_State="_R-XQkA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Uez0EA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2izAA-6EeijktysABpT4g" base_Pseudostate="_P2fvsA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2oSkA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KalrMA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KarKwA-7EeijktysABpT4g" base_Region="_KahZwA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_Kau1IA-7EeijktysABpT4g" base_StateMachine="_Kab6MA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_bC7WcA-7EeijktysABpT4g" base_State="_bC4TIA-7EeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_xHS7gBE6EeiaCPCnhevAQQ" isWired="false" base_Port="_xB-9sBE6EeiaCPCnhevAQQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_5O9OkBKMEeiEEYKmuRZPIg" headerPreface="#include &lt;iostream>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_WFgwIAqrEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRealTime:RTPort xmi:id="_fwhSABNgEeiFubQUFHg6OA" isWired="false" base_Port="_fwJekBNgEeiFubQUFHg6OA"/>
  <UMLRealTime:RTPort xmi:id="_DarBUBNhEeiFubQUFHg6OA" isWired="false" base_Port="_Dan-ABNhEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gmdUIBNjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5USJsBNsEeiFubQUFHg6OA" base_Pseudostate="_5UPGYBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_5Ub6sBNsEeiFubQUFHg6OA" base_State="_5UY3YBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5Ue-ABNsEeiFubQUFHg6OA" base_Region="_5UK08BNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_5VCXoBNsEeiFubQUFHg6OA" base_StateMachine="_5TyacBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_m1DG4BNvEeiFubQUFHg6OA" base_State="_m0-1cBNvEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_qcuQ0BNyEeiFubQUFHg6OA" base_Region="_qcoxQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qc4o4BNyEeiFubQUFHg6OA" base_Pseudostate="_qc0-gBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qdJuoBNyEeiFubQUFHg6OA" base_Pseudostate="_qdGEQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_2N0gUBNyEeiFubQUFHg6OA" base_State="_2NyEEBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_34xmQBNyEeiFubQUFHg6OA" base_State="_34ui8BNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GUGnYBNzEeiFubQUFHg6OA" base_Pseudostate="_GT9dcBNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_VhtaABNzEeiFubQUFHg6OA" base_Pseudostate="_VhqWsBNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5oRb0BRgEeiFubQUFHg6OA" base_Pseudostate="_5oJgABRgEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_PmfKIBRiEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_GFHsIBRjEeiFubQUFHg6OA" base_Region="_GFF28BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GFQ2EBRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_G6EXIBRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_HQJU0BRjEeiFubQUFHg6OA" base_State="_HQIGsBRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzA6ABUeEeiYy9niOG6dTw" base_Pseudostate="_wy9PoBUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzRYsBUeEeiYy9niOG6dTw" base_Pseudostate="_wzEkYBUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_2-fvYBUfEeiYy9niOG6dTw" base_Pseudostate="_2-cFABUfEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_bAe6cBUhEeiYy9niOG6dTw" base_Pseudostate="_bAapABUhEeiYy9niOG6dTw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_huQNUBa-Eei-ccFu-OwT7Q" headerPreface="#include &lt;termios.h>&#xA;#include &lt;iostream>&#xA;#include &lt;unistd.h>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_xFgrYAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lMfYBeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lcXABeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_smoRwBeSEei-ccFu-OwT7Q" base_Pseudostate="_smhkEBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tthoYBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OMmZABgmEeiSBIpf1RqKYQ" base_Pseudostate="_OEEIEBgmEeiSBIpf1RqKYQ"/>
  <UMLRealTime:Capsule xmi:id="_qLZ2UEv9EemUDNyOZuPHRw" base_Class="_qK3q0Ev9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_qMBhYEv9EemUDNyOZuPHRw" base_StateMachine="_qLadYEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:ProtocolContainer xmi:id="_qMFy0Ev9EemUDNyOZuPHRw" base_Package="_qMCIcEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:Protocol xmi:id="_qMKrUEv9EemUDNyOZuPHRw" base_Collaboration="_qMGZ4Ev9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTMessageSet xmi:id="_qMVDYEv9EemUDNyOZuPHRw" base_Interface="_qML5cEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTMessageSet xmi:id="_qMmJIEv9EemUDNyOZuPHRw" base_Interface="_qMNHkEv9EemUDNyOZuPHRw" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_qMpMcEv9EemUDNyOZuPHRw" base_Interface="_qMOVsEv9EemUDNyOZuPHRw" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_qNN0MEv9EemUDNyOZuPHRw" base_Port="_qNCOAEv9EemUDNyOZuPHRw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_qQ2XAEv9EemUDNyOZuPHRw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_qK3q0Ev9EemUDNyOZuPHRw" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_qQ8doEv9EemUDNyOZuPHRw" base_Class="_qK3q0Ev9EemUDNyOZuPHRw"/>
  <RTCppProperties:ParameterProperties xmi:id="_qSCp0Ev9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_qRvH0Ev9EemUDNyOZuPHRw"/>
  <RTCppProperties:ParameterProperties xmi:id="_qT8HQEv9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_qT2AoEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTRegion xmi:id="_qUzp8Ev9EemUDNyOZuPHRw" base_Region="_qUrHEEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qU7lwEv9EemUDNyOZuPHRw" base_Pseudostate="_qU0RAEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTState xmi:id="_qVF90Ev9EemUDNyOZuPHRw" base_State="_qU8z4Ev9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qVN5oEv9EemUDNyOZuPHRw" base_Pseudostate="_qVJBIEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTPort xmi:id="_qaDWUEv9EemUDNyOZuPHRw" isWired="false" base_Port="_qaATAEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTPort xmi:id="_qaKEAEv9EemUDNyOZuPHRw" isPublish="true" isWired="false" base_Port="_qaHnwEv9EemUDNyOZuPHRw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_qa8uMEv9EemUDNyOZuPHRw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_EUMt0AqvEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_qbgH0Ev9EemUDNyOZuPHRw" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_qd4GYEv9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_qd24QEv9EemUDNyOZuPHRw"/>
  <RTCppProperties:ParameterProperties xmi:id="_qeLoYEv9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_qeH-AEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qgOPwEv9EemUDNyOZuPHRw" base_Pseudostate="_qgNBoEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTState xmi:id="_qgQsAEv9EemUDNyOZuPHRw" base_State="_qgPd4Ev9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qhT04Ev9EemUDNyOZuPHRw" base_Pseudostate="_qhSmwEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qhVqEEv9EemUDNyOZuPHRw" base_Pseudostate="_qhVDAEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qhe0AEv9EemUDNyOZuPHRw" base_Pseudostate="_qhdl4Ev9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTPort xmi:id="_qi8zoEv9EemUDNyOZuPHRw" isWired="false" base_Port="_qi5JQEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTPort xmi:id="_qjBsIEv9EemUDNyOZuPHRw" isPublish="true" isWired="false" base_Port="_qi-BwEv9EemUDNyOZuPHRw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_qjQVoEv9EemUDNyOZuPHRw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_5cgykAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_qjSK0Ev9EemUDNyOZuPHRw" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_qj_VcEv9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_qj8SIEv9EemUDNyOZuPHRw"/>
  <RTCppProperties:ParameterProperties xmi:id="_qkPNEEv9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_qkGDIEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qlLoQEv9EemUDNyOZuPHRw" base_Pseudostate="_qlJzEEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTState xmi:id="_qlRH0Ev9EemUDNyOZuPHRw" base_State="_qlNdcEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qmSbgEv9EemUDNyOZuPHRw" base_Pseudostate="_qmRNYEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qmWs8Ev9EemUDNyOZuPHRw" base_Pseudostate="_qmTpoEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qmczkEv9EemUDNyOZuPHRw" base_Pseudostate="_qmblcEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qmnLoEv9EemUDNyOZuPHRw" base_Pseudostate="_qmkvYEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qoUb0Ev9EemUDNyOZuPHRw" base_Pseudostate="_qoTNsEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qoW4EEv9EemUDNyOZuPHRw" base_Pseudostate="_qoVp8Ev9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qqpXEEv9EemUDNyOZuPHRw" base_Pseudostate="_qoXfIEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qqsaYEv9EemUDNyOZuPHRw" base_Pseudostate="_qqrzUEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTPort xmi:id="_qv3OQEv9EemUDNyOZuPHRw" isWired="false" base_Port="_qvurYEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTPort xmi:id="_qv6RkEv9EemUDNyOZuPHRw" isPublish="true" isWired="false" base_Port="_qv4cYEv9EemUDNyOZuPHRw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_qv_KEEv9EemUDNyOZuPHRw" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_qwA_QEv9EemUDNyOZuPHRw" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_qwdEIEv9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_qwcdEEv9EemUDNyOZuPHRw"/>
  <RTCppProperties:ParameterProperties xmi:id="_qwijsEv9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_qwgugEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qxJnsEv9EemUDNyOZuPHRw" base_Pseudostate="_qxIZkEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTState xmi:id="_qxLc4Ev9EemUDNyOZuPHRw" base_State="_qxKOwEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTPort xmi:id="_qx6csEv9EemUDNyOZuPHRw" isWired="false" base_Port="_qx4ngEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTPort xmi:id="_qx848Ev9EemUDNyOZuPHRw" isPublish="true" isWired="false" base_Port="_qx7DwEv9EemUDNyOZuPHRw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_qyH4EEv9EemUDNyOZuPHRw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_Jz5GIAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_qyKUUEv9EemUDNyOZuPHRw" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_qyuVAEv9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_qytG4Ev9EemUDNyOZuPHRw"/>
  <RTCppProperties:ParameterProperties xmi:id="_qzB3AEv9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_qyxYUEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qz6n0Ev9EemUDNyOZuPHRw" base_Pseudostate="_qz5ZsEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_q1EeYEv9EemUDNyOZuPHRw" base_Pseudostate="_q1CpMEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_q1Iv0Ev9EemUDNyOZuPHRw" base_Pseudostate="_q1G6oEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_q1NoUEv9EemUDNyOZuPHRw" base_Pseudostate="_q1LzIEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_q1QroEv9EemUDNyOZuPHRw" base_Pseudostate="_q1PdgEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTPort xmi:id="_q4saIEv9EemUDNyOZuPHRw" isWired="false" base_Port="_q4qk8Ev9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTPort xmi:id="_q4wEgEv9EemUDNyOZuPHRw" isPublish="true" isWired="false" base_Port="_q4toQEv9EemUDNyOZuPHRw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_q42LIEv9EemUDNyOZuPHRw" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_q44nYEv9EemUDNyOZuPHRw" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_q5KUMEv9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_q5JGEEv9EemUDNyOZuPHRw"/>
  <RTCppProperties:ParameterProperties xmi:id="_q5OloEv9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_q5MwcEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_q5hgkEv9EemUDNyOZuPHRw" base_Pseudostate="_q5g5gEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_q5nAIEv9EemUDNyOZuPHRw" base_Pseudostate="_q5jVwEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTPort xmi:id="_q7yKYEv9EemUDNyOZuPHRw" isWired="false" base_Port="_q7wVMEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:RTPort xmi:id="_q7-XoEv9EemUDNyOZuPHRw" isPublish="true" isWired="false" base_Port="_q76tQEv9EemUDNyOZuPHRw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_q8RSkEv9EemUDNyOZuPHRw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_DFR5EAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_q8YAQEv9EemUDNyOZuPHRw" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_q9YF0Ev9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_q9NtwEv9EemUDNyOZuPHRw"/>
  <RTCppProperties:ParameterProperties xmi:id="_q9c-UEv9EemUDNyOZuPHRw" type="pmd::Message" base_Parameter="_q9bJIEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_q-XkUEv9EemUDNyOZuPHRw" base_Pseudostate="_q-VvIEv9EemUDNyOZuPHRw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_q-ZZgEv9EemUDNyOZuPHRw" base_Pseudostate="_q-YycEv9EemUDNyOZuPHRw"/>
  <UMLRealTime:CapsulePart xmi:id="_q_ovoEv9EemUDNyOZuPHRw" base_Property="_q_nhgEv9EemUDNyOZuPHRw"/>
</xmi:XMI>
