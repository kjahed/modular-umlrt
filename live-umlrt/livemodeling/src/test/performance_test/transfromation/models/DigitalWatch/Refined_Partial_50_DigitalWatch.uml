<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_GN1XsAqpEeiwdpidSbDb2g" name="DigitalWatch">
    <eAnnotations xmi:id="_GN1XsQqpEeiwdpidSbDb2g" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_GN1XsgqpEeiwdpidSbDb2g" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_r_6AUAqqEeiwdpidSbDb2g" source="UMLRT_Default_top">
      <details xmi:id="_r_6nYAqqEeiwdpidSbDb2g" key="top_name" value="DigitalWatch"/>
    </eAnnotations>
    <eAnnotations xmi:id="_65mdsEwYEemXHP8VWVqEMQ" source="dummy"/>
    <eAnnotations xmi:id="_mx1GQExcEemQO89L3h8Kmg" source="dummy"/>
    <eAnnotations xmi:id="_JGQ4oEyFEemKkvxpi_GFig" source="dummy"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_pOYT4AqqEeiwdpidSbDb2g" name="DigitalWatch" isActive="true">
      <ownedAttribute xmi:id="_4mJV0AqvEeiwdpidSbDb2g" name="displayGateKeeper" visibility="protected" type="_WFgwIAqrEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_7I3xQAqvEeiwdpidSbDb2g" name="alarmsCapsule" visibility="protected" type="_DFR5EAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_-PuNcAqvEeiwdpidSbDb2g" name="stopWatchController" visibility="protected" type="_Jz5GIAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_DaXtYAqwEeiwdpidSbDb2g" name="display" visibility="protected" type="_ZtPkcAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_K2VIoAqwEeiwdpidSbDb2g" name="buttonsReader" visibility="protected" type="_xFgrYAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_QJhgkAqwEeiwdpidSbDb2g" name="watchCore" visibility="protected" type="_5cgykAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_TqnowAqwEeiwdpidSbDb2g" name="timeTracker" visibility="protected" type="_EUMt0AqvEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_tvoyEEv9EemeQN7IdMXlbw" name="dbgAgent" type="_s_DpsEv9EemeQN7IdMXlbw">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tvqAMUv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_tvqnQEv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedConnector xmi:id="_4edHgAqxEeiwdpidSbDb2g" name="RTConnector1">
        <end xmi:id="_4eoGoAqxEeiwdpidSbDb2g" partWithPort="_K2VIoAqwEeiwdpidSbDb2g" role="_qHclsAqxEeiwdpidSbDb2g"/>
        <end xmi:id="_4epUwAqxEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_wsY5YAqxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_8aQ8UAreEeiwdpidSbDb2g" name="RTConnector2">
        <end xmi:id="_8aT_oAreEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_2ASigAreEeiwdpidSbDb2g"/>
        <end xmi:id="_8aT_oQreEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_y_nm0AreEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_ws4AwArhEeiwdpidSbDb2g" name="RTConnector3">
        <end xmi:id="_ws6dAArhEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_mHDRkArhEeiwdpidSbDb2g"/>
        <end xmi:id="_ws7EEArhEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ppFN4ArhEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_OI7kMArkEeiwdpidSbDb2g" name="RTConnector4">
        <end xmi:id="_OI-ngArkEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_IaFLAArkEeiwdpidSbDb2g"/>
        <end xmi:id="_OI_OkArkEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="__kPLsArjEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-6yscArrEeiwdpidSbDb2g" name="RTConnector5">
        <end xmi:id="_-61IsArrEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="_7dRcsArrEeiwdpidSbDb2g"/>
        <end xmi:id="_-61IsQrrEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_AK-h8ArsEeiwdpidSbDb2g" name="RTConnector6">
        <end xmi:id="_ALAXIArsEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_xE8-AArrEeiwdpidSbDb2g"/>
        <end xmi:id="_ALAXIQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_A6WwcArsEeiwdpidSbDb2g" name="RTConnector7">
        <end xmi:id="_A6ZMsArsEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_28NFQArrEeiwdpidSbDb2g"/>
        <end xmi:id="_A6ZMsQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_WMp3IArxEeiwdpidSbDb2g" name="RTConnector8">
        <end xmi:id="_WMrsUArxEeiwdpidSbDb2g" partWithPort="_DaXtYAqwEeiwdpidSbDb2g" role="_LLt5QArxEeiwdpidSbDb2g"/>
        <end xmi:id="_WMsTYArxEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_L9t98ArxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_qGxKQArzEeiwdpidSbDb2g" name="RTConnector9">
        <end xmi:id="_qGy_cArzEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ka0UEArzEeiwdpidSbDb2g"/>
        <end xmi:id="_qGzmgArzEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_WFgwIAqrEeiwdpidSbDb2g" name="DisplayGateKeeper" classifierBehavior="_hUDbcA-pEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uB7goArlEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yMSoQArlEeiwdpidSbDb2g" value="4"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_yNBoEArlEeiwdpidSbDb2g" value="4"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_L9t98ArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_tcU0gEv9EemeQN7IdMXlbw" name="dbgPortForDisplayGateKeeper" visibility="protected" type="_tCRVwEv9EemeQN7IdMXlbw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tcU0gUv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_tcVbkEv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_hUDbcA-pEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_hUncIA-pEeijktysABpT4g" name="Region">
          <transition xmi:id="_tderEEv9EemeQN7IdMXlbw" name="Trans__Init__State__120121" source="_tdcO0Ev9EemeQN7IdMXlbw" target="_tdVhIEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_td13cEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__120&quot;,&quot;New__State__119&quot;,&quot;To__New__State__119__127&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__120&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_tdhHUEv9EemeQN7IdMXlbw" name="From__New__State__119__122" source="_tdbAsEv9EemeQN7IdMXlbw" target="_tdVhIEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_td3soEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__119&quot;,&quot;New__State__119&quot;,&quot;To__New__State__119__127&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__119&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_tdkKoEv9EemeQN7IdMXlbw" name="PME_Trig123" event="_tCqXUEv9EemeQN7IdMXlbw" port="_tcU0gEv9EemeQN7IdMXlbw"/>
            <trigger xmi:id="_tdpqMEv9EemeQN7IdMXlbw" name="PME_Trig124" event="__mIMuQrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tdstgEv9EemeQN7IdMXlbw" name="PME_Trig125" event="__mIMtwrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tdvJwEv9EemeQN7IdMXlbw" name="PME_Trig126" event="__mIMuArkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_tdyNEEv9EemeQN7IdMXlbw" name="To__New__State__119__127" guard="_td5h0Uv9EemeQN7IdMXlbw" source="_tdVhIEv9EemeQN7IdMXlbw" target="_tdbAsEv9EemeQN7IdMXlbw">
            <ownedRule xmi:id="_td5h0Uv9EemeQN7IdMXlbw" name="PME_checkDecesion128">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_td5h0Ev9EemeQN7IdMXlbw" name="PME_checkDecesion128">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__119__127&quot;,&quot;New__State__119&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tdVhIEv9EemeQN7IdMXlbw" name="DecesionPoint__118" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_tdbAsEv9EemeQN7IdMXlbw" name="New__State__119"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tdcO0Ev9EemeQN7IdMXlbw" name="Init__State__120"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tciP4Uv9EemeQN7IdMXlbw" name="loadHeap" specification="_tciP4Ev9EemeQN7IdMXlbw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tckFEUv9EemeQN7IdMXlbw" name="unLoadHeap" specification="_tckFEEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tc2Y8Ev9EemeQN7IdMXlbw" name="sendMessage" specification="_tc1x4Ev9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayP&quot;) {
  if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tc8fkUv9EemeQN7IdMXlbw" name="sendInternalMessage" specification="_tc8fkEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tdNlUEv9EemeQN7IdMXlbw" name="initForPMD" specification="_tdM-QEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForDisplayGateKeeper&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_tciP4Ev9EemeQN7IdMXlbw" name="loadHeap" visibility="private" method="_tciP4Uv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_tckFEEv9EemeQN7IdMXlbw" name="unLoadHeap" visibility="private" method="_tckFEUv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_tc1x4Ev9EemeQN7IdMXlbw" name="sendMessage" visibility="private" method="_tc2Y8Ev9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_tc41MEv9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_tc7RcEv9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_tc8fkEv9EemeQN7IdMXlbw" name="sendInternalMessage" visibility="private" method="_tc8fkUv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_tc9tsEv9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_tc-70Uv9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_tdM-QEv9EemeQN7IdMXlbw" name="initForPMD" visibility="private" method="_tdNlUEv9EemeQN7IdMXlbw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_DFR5EAquEeiwdpidSbDb2g" name="AlarmsCapsule" classifierBehavior="_OKhecA-sEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_y_nm0AreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xE8-AArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_XbRmMA-uEeijktysABpT4g" name="alarmTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_nHqHMBgMEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_3pL_0BgMEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_v-uwIBi9EeiSBIpf1RqKYQ" name="alarmTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_teG9MEv9EemeQN7IdMXlbw" name="dbgPortForAlarmsCapsule" visibility="protected" type="_tCRVwEv9EemeQN7IdMXlbw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_teHkQEv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_teHkQUv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_OKhecA-sEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_OKuSwA-sEeijktysABpT4g" name="Region">
          <transition xmi:id="_OK9jUA-sEeijktysABpT4g" name="Initial" source="_OKx9IA-sEeijktysABpT4g" target="_OK4DwA-sEeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lvbNgBNtEeiFubQUFHg6OA">
              <language>C++</language>
              <body>initForPMD();
    displayGateKeeperP.ShowText(0,&quot;Alarm capsule is started&quot;).send();
</body>
            </effect>
          </transition>
          <transition xmi:id="_QJSFoA-2EeijktysABpT4g" name="NoAlarm__NoAlarm__130" source="_OK4DwA-sEeijktysABpT4g" target="_OK4DwA-sEeijktysABpT4g">
            <trigger xmi:id="_X9BuwA-2EeijktysABpT4g" event="_0IHVYArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_tf1bgEv9EemeQN7IdMXlbw" name="From__NoAlarm__132" source="_OK4DwA-sEeijktysABpT4g" target="_tfs4oEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tgN2AEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;NoAlarm&quot;,&quot;NoAlarm&quot;,&quot;To__NoAlarm__139&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;NoAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_tf5s8Ev9EemeQN7IdMXlbw" name="PME_Trig133" event="_tCqXUEv9EemeQN7IdMXlbw" port="_teG9MEv9EemeQN7IdMXlbw"/>
            <trigger xmi:id="_tf8JMEv9EemeQN7IdMXlbw" name="PME_Trig134" event="_suGa4ArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tf-lcEv9EemeQN7IdMXlbw" name="PME_Trig135" event="_dfgJwArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tgBBsEv9EemeQN7IdMXlbw" name="PME_Trig136" port="_XbRmMA-uEeijktysABpT4g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_tgDd8Ev9EemeQN7IdMXlbw" name="PME_Trig137" event="__mIMuwrkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tgGhQEv9EemeQN7IdMXlbw" name="PME_Trig138" event="__mIMvArkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_tgJkkEv9EemeQN7IdMXlbw" name="To__NoAlarm__139" guard="_tgRgYEv9EemeQN7IdMXlbw" source="_tfs4oEv9EemeQN7IdMXlbw" target="_OK4DwA-sEeijktysABpT4g">
            <ownedRule xmi:id="_tgRgYEv9EemeQN7IdMXlbw" name="PME_checkDecesion140">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tgQ5UEv9EemeQN7IdMXlbw" name="PME_checkDecesion140">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__NoAlarm__139&quot;,&quot;NoAlarm&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_OKx9IA-sEeijktysABpT4g" name="Pseudo129"/>
          <subvertex xmi:type="uml:State" xmi:id="_OK4DwA-sEeijktysABpT4g" name="NoAlarm"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tfs4oEv9EemeQN7IdMXlbw" name="DecesionPoint__131" kind="choice"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_teafMUv9EemeQN7IdMXlbw" name="loadHeap" specification="_teafMEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tefXsEv9EemeQN7IdMXlbw" name="unLoadHeap" specification="_teewoEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_te0H0Uv9EemeQN7IdMXlbw" name="sendMessage" specification="_te0H0Ev9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    alarmP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    alarmP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_te4ZQUv9EemeQN7IdMXlbw" name="sendInternalMessage" specification="_te4ZQEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tfjHoUv9EemeQN7IdMXlbw" name="initForPMD" specification="_tfjHoEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForAlarmsCapsule&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_teafMEv9EemeQN7IdMXlbw" name="loadHeap" visibility="private" method="_teafMUv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_teewoEv9EemeQN7IdMXlbw" name="unLoadHeap" visibility="private" method="_tefXsEv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_te0H0Ev9EemeQN7IdMXlbw" name="sendMessage" visibility="private" method="_te0H0Uv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_te1V8Ev9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_te3LIEv9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_te4ZQEv9EemeQN7IdMXlbw" name="sendInternalMessage" visibility="private" method="_te4ZQUv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_te5AUEv9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_te61gEv9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_tfjHoEv9EemeQN7IdMXlbw" name="initForPMD" visibility="private" method="_tfjHoUv9EemeQN7IdMXlbw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_Jz5GIAquEeiwdpidSbDb2g" name="StopWatchCore" classifierBehavior="_U9KO4A-3EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_mHDRkArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_28NFQArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_fwJekBNgEeiFubQUFHg6OA" name="showCounterTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Dan-ABNhEeiFubQUFHg6OA" name="timeCountingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2KcBNhEeiFubQUFHg6OA" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2xgBNhEeiFubQUFHg6OA" name="stopWatchResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_OM2xgRNhEeiFubQUFHg6OA" value="200"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_XYKbwBNnEeiFubQUFHg6OA" name="timeCountingTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_dK4oUBNnEeiFubQUFHg6OA" name="showCounterTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_tF54kEv9EemeQN7IdMXlbw" name="dbgPortForStopWatchCore" visibility="protected" type="_tCRVwEv9EemeQN7IdMXlbw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tF7GsEv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_tF7GsUv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_U9KO4A-3EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_U9SKsA-3EeijktysABpT4g" name="Region">
          <transition xmi:id="_1-9b4A-3EeijktysABpT4g" name="stopWatchActivate" source="_U9Y4YA-3EeijktysABpT4g" target="_e52hgA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fmruoBNiEeiFubQUFHg6OA">
              <language>C++</language>
              <body>showCounterTimerID=showCounterTimer.informEvery(UMLRTTimespec(0,50000000),0);</body>
            </effect>
            <trigger xmi:id="_MT8SoBNiEeiFubQUFHg6OA" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_tgpzYBd5Eei-ccFu-OwT7Q" name="countTime1" source="_U9Y4YA-3EeijktysABpT4g" target="_U9Y4YA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fdIY0Bd6Eei-ccFu-OwT7Q">
              <language>C++</language>
              <body>milliTime=milliTime+stopWatchResolution;</body>
            </effect>
            <trigger xmi:id="_1r-PABd5Eei-ccFu-OwT7Q" port="_Dan-ABNhEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_6lezQBeHEei-ccFu-OwT7Q" name="reset" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_e52hgA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_PYz4QBeIEei-ccFu-OwT7Q">
              <language>C++</language>
              <body>milliTime=0;</body>
            </effect>
            <trigger xmi:id="_Mb5bMBeIEei-ccFu-OwT7Q" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_tNE3kEv9EemeQN7IdMXlbw" name="Trans__Init__State__56" source="_tNBNMEv9EemeQN7IdMXlbw" target="_tMoLoEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tTGnEEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__5&quot;,&quot;Idle&quot;,&quot;To__Idle__16&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__5&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__20&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__5&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_tNQdwEv9EemeQN7IdMXlbw" name="From__Idle__7" source="_U9Y4YA-3EeijktysABpT4g" target="_tMoLoEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tTJDUEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Idle&quot;,&quot;Idle&quot;,&quot;To__Idle__16&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Idle&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__20&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Idle&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_tNqGYEv9EemeQN7IdMXlbw" name="PME_Trig8" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tN9BUEv9EemeQN7IdMXlbw" name="PME_Trig9" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tOBSwEv9EemeQN7IdMXlbw" name="PME_Trig10" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tOiQIEv9EemeQN7IdMXlbw" name="PME_Trig11" event="_tCqXUEv9EemeQN7IdMXlbw" port="_tF54kEv9EemeQN7IdMXlbw"/>
            <trigger xmi:id="_tOqL8Ev9EemeQN7IdMXlbw" name="PME_Trig12" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tO41cEv9EemeQN7IdMXlbw" name="PME_Trig13" port="_fwJekBNgEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_tPNlkEv9EemeQN7IdMXlbw" name="PME_Trig14" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tP2ewEv9EemeQN7IdMXlbw" name="PME_Trig15" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_tP7-UEv9EemeQN7IdMXlbw" name="To__Idle__16" guard="_tTK4gUv9EemeQN7IdMXlbw" source="_tMoLoEv9EemeQN7IdMXlbw" target="_U9Y4YA-3EeijktysABpT4g">
            <ownedRule xmi:id="_tTK4gUv9EemeQN7IdMXlbw" name="PME_checkDecesion56">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tTK4gEv9EemeQN7IdMXlbw" name="PME_checkDecesion56">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Idle__16&quot;,&quot;Idle&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_tP_osEv9EemeQN7IdMXlbw" name="Trans__Pseudo117" source="_P2fvsA-6EeijktysABpT4g" target="_tMoLoEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tS-EMEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__16&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__20&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_tQAPwEv9EemeQN7IdMXlbw" name="Trans__Pseudo218" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_tMoLoEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tTDjwEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__16&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__20&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_tQKn0Uv9EemeQN7IdMXlbw" name="To__Substates__StopWatchMode__20" guard="_tTMtsUv9EemeQN7IdMXlbw" source="_tMoLoEv9EemeQN7IdMXlbw" target="_tQA20Ev9EemeQN7IdMXlbw">
            <ownedRule xmi:id="_tTMtsUv9EemeQN7IdMXlbw" name="PME_checkDecesion57">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tTMtsEv9EemeQN7IdMXlbw" name="PME_checkDecesion57">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__StopWatchMode__20&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_tQNrIEv9EemeQN7IdMXlbw" name="From__Substates__StopWatchMode__22" source="_tQL18Ev9EemeQN7IdMXlbw" target="_tMoLoEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tS5ywEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Idle&quot;,&quot;To__Idle__16&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__20&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:State" xmi:id="_U9Y4YA-3EeijktysABpT4g" name="Idle"/>
          <subvertex xmi:type="uml:State" xmi:id="_e52hgA-3EeijktysABpT4g" name="StopWatchMode">
            <connectionPoint xmi:id="_P2fvsA-6EeijktysABpT4g" name="Pseudo1" kind="exitPoint"/>
            <connectionPoint xmi:id="_P2koMA-6EeijktysABpT4g" name="Pseudo3" kind="entryPoint"/>
            <connectionPoint xmi:id="_6lDVcBeHEei-ccFu-OwT7Q" name="Pseudo2" kind="exitPoint"/>
            <connectionPoint xmi:id="_tQA20Ev9EemeQN7IdMXlbw" name="From__Parent__19" kind="entryPoint"/>
            <connectionPoint xmi:id="_tQL18Ev9EemeQN7IdMXlbw" name="To__Parent__21" kind="exitPoint"/>
            <region xmi:id="_O4jWMA-5EeijktysABpT4g" name="Region1">
              <transition xmi:id="_W2EmYA-5EeijktysABpT4g" name="start" source="_P908MA-5EeijktysABpT4g" target="_R-XQkA-5EeijktysABpT4g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_zbNpEBNiEeiFubQUFHg6OA">
                  <language>C++</language>
                  <body>timeCountingTimerID =timeCountingTimer.informEvery(UMLRTTimespec(0,stopWatchResolution*1000000),0);</body>
                </effect>
                <trigger xmi:id="_7buYUBNhEeiFubQUFHg6OA" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_dNliEA-5EeijktysABpT4g" name="pause" source="_R-XQkA-5EeijktysABpT4g" target="_P908MA-5EeijktysABpT4g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_B3qEgBNjEeiFubQUFHg6OA">
                  <language>C++</language>
                  <body>timeCountingTimer.cancelTimer(timeCountingTimerID);
</body>
                </effect>
                <trigger xmi:id="_9-n9cBNiEeiFubQUFHg6OA" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_tQbtkEv9EemeQN7IdMXlbw" name="Trans__Init__State__2425" source="_tQR8kEv9EemeQN7IdMXlbw" target="_tQO5QEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tSmQwEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__24&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__52&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__24&quot;,&quot;Pause&quot;,&quot;To__Pause__49&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__24&quot;,&quot;Active&quot;,&quot;To__Active__50&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__24&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tQcUoEv9EemeQN7IdMXlbw" name="Trans__Pseudo126" source="_P2fvsA-6EeijktysABpT4g" target="_tQO5QEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tSXAMEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__52&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__49&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__50&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tQc7sEv9EemeQN7IdMXlbw" name="Trans__Pseudo227" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_tQO5QEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tSp7IEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__52&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__49&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__50&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tQdiwEv9EemeQN7IdMXlbw" name="Trans__Pseudo328" source="_P2koMA-6EeijktysABpT4g" target="_tQO5QEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tSMoIEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__52&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__49&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__50&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tQh0MEv9EemeQN7IdMXlbw" name="From__Pause__29" source="_P908MA-5EeijktysABpT4g" target="_tQO5QEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tSe8AEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__52&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;Pause&quot;,&quot;To__Pause__49&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;Active&quot;,&quot;To__Active__50&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pause&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_tQjpYEv9EemeQN7IdMXlbw" name="PME_Trig30" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tQlekEv9EemeQN7IdMXlbw" name="PME_Trig31" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tQy58Ev9EemeQN7IdMXlbw" name="PME_Trig32" port="_Dan-ABNhEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_tQ0vIEv9EemeQN7IdMXlbw" name="PME_Trig33" event="_tCqXUEv9EemeQN7IdMXlbw" port="_tF54kEv9EemeQN7IdMXlbw"/>
                <trigger xmi:id="_tQ-gIEv9EemeQN7IdMXlbw" name="PME_Trig34" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tRA8YEv9EemeQN7IdMXlbw" name="PME_Trig35" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tRDYoEv9EemeQN7IdMXlbw" name="PME_Trig36" port="_fwJekBNgEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_tRKtYEv9EemeQN7IdMXlbw" name="PME_Trig37" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tRNwsEv9EemeQN7IdMXlbw" name="PME_Trig38" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_tRW6oEv9EemeQN7IdMXlbw" name="From__Active__39" source="_R-XQkA-5EeijktysABpT4g" target="_tQO5QEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tSs-cEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__52&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;Pause&quot;,&quot;To__Pause__49&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Active&quot;,&quot;Active&quot;,&quot;To__Active__50&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Active&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_tRYv0Ev9EemeQN7IdMXlbw" name="PME_Trig40" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tRbzIEv9EemeQN7IdMXlbw" name="PME_Trig41" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tRePYEv9EemeQN7IdMXlbw" name="PME_Trig42" port="_Dan-ABNhEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_tRgEkEv9EemeQN7IdMXlbw" name="PME_Trig43" event="_tCqXUEv9EemeQN7IdMXlbw" port="_tF54kEv9EemeQN7IdMXlbw"/>
                <trigger xmi:id="_tRqcoEv9EemeQN7IdMXlbw" name="PME_Trig44" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tRsR0Ev9EemeQN7IdMXlbw" name="PME_Trig45" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tRvVIEv9EemeQN7IdMXlbw" name="PME_Trig46" port="_fwJekBNgEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_tRy_gEv9EemeQN7IdMXlbw" name="PME_Trig47" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tR2p4Ev9EemeQN7IdMXlbw" name="PME_Trig48" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_tR5tMEv9EemeQN7IdMXlbw" name="To__Pause__49" guard="_tSx28Uv9EemeQN7IdMXlbw" source="_tQO5QEv9EemeQN7IdMXlbw" target="_P908MA-5EeijktysABpT4g">
                <ownedRule xmi:id="_tSx28Uv9EemeQN7IdMXlbw" name="PME_checkDecesion54">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_tSx28Ev9EemeQN7IdMXlbw" name="PME_checkDecesion54">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Pause__49&quot;,&quot;Pause&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_tR6UQEv9EemeQN7IdMXlbw" name="To__Active__50" guard="_tSyeAUv9EemeQN7IdMXlbw" source="_tQO5QEv9EemeQN7IdMXlbw" target="_R-XQkA-5EeijktysABpT4g">
                <ownedRule xmi:id="_tSyeAUv9EemeQN7IdMXlbw" name="PME_checkDecesion55">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_tSyeAEv9EemeQN7IdMXlbw" name="PME_checkDecesion55">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Active__50&quot;,&quot;Active&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_tSIWsEv9EemeQN7IdMXlbw" name="From__Parnet__StateMachine__51" source="_tQA20Ev9EemeQN7IdMXlbw" target="_tQO5QEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tSZccEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__52&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__49&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Active&quot;,&quot;To__Active__50&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tSI9wEv9EemeQN7IdMXlbw" name="To__Parent__StateMachine__52" guard="_tSvasUv9EemeQN7IdMXlbw" source="_tQO5QEv9EemeQN7IdMXlbw" target="_tQL18Ev9EemeQN7IdMXlbw">
                <ownedRule xmi:id="_tSvasUv9EemeQN7IdMXlbw" name="PME_checkDecesion53">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_tSvasEv9EemeQN7IdMXlbw" name="PME_checkDecesion53">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__52&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_P908MA-5EeijktysABpT4g" name="Pause"/>
              <subvertex xmi:type="uml:State" xmi:id="_R-XQkA-5EeijktysABpT4g" name="Active"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_tQO5QEv9EemeQN7IdMXlbw" name="DecesionPoint__23" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_tQR8kEv9EemeQN7IdMXlbw" name="Init__State__24"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tMoLoEv9EemeQN7IdMXlbw" name="DecesionPoint__4" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tNBNMEv9EemeQN7IdMXlbw" name="Init__State__5"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tHX4MUv9EemeQN7IdMXlbw" name="loadHeap" specification="_tHX4MEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.stopWatchResolution&quot;,this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tHt2cUv9EemeQN7IdMXlbw" name="unLoadHeap" specification="_tHt2cEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.stopWatchResolution&quot;,&amp;this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tJmFwEv9EemeQN7IdMXlbw" name="sendMessage" specification="_tJlesEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tKWTsUv9EemeQN7IdMXlbw" name="sendInternalMessage" specification="_tKWTsEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tMdzkEv9EemeQN7IdMXlbw" name="initForPMD" specification="_tMdMgEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_StopWatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_StopWatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;showCounterTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;timeCountingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForStopWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_tHX4MEv9EemeQN7IdMXlbw" name="loadHeap" visibility="private" method="_tHX4MUv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_tHt2cEv9EemeQN7IdMXlbw" name="unLoadHeap" visibility="private" method="_tHt2cUv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_tJlesEv9EemeQN7IdMXlbw" name="sendMessage" visibility="private" method="_tJmFwEv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_tJrlUEv9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_tKD_0Ev9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_tKWTsEv9EemeQN7IdMXlbw" name="sendInternalMessage" visibility="private" method="_tKWTsUv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_tKzmsEv9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_tK-l0Ev9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_tMdMgEv9EemeQN7IdMXlbw" name="initForPMD" visibility="private" method="_tMdzkEv9EemeQN7IdMXlbw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_ZtPkcAquEeiwdpidSbDb2g" name="Display" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_LLt5QArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_xFgrYAquEeiwdpidSbDb2g" name="ButtonsReader" classifierBehavior="_Kab6MA-7EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qHclsAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xB-9sBE6EeiaCPCnhevAQQ" name="readKeyTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_tTRmMEv9EemeQN7IdMXlbw" name="dbgPortForButtonsReader" visibility="protected" type="_tCRVwEv9EemeQN7IdMXlbw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tTSNQEv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_tTSNQUv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_Kab6MA-7EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_KahZwA-7EeijktysABpT4g" name="Region">
          <transition xmi:id="_tUfHIEv9EemeQN7IdMXlbw" name="Trans__Pseudo5861" source="_Kaj2AA-7EeijktysABpT4g" target="_tUYZcEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tU1FYEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo58&quot;,&quot;New__State__60&quot;,&quot;To__New__State__60__66&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo58&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_tUj_oEv9EemeQN7IdMXlbw" name="From__New__State__60__62" source="_tUaOoEv9EemeQN7IdMXlbw" target="_tUYZcEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tUzQMEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__60&quot;,&quot;New__State__60&quot;,&quot;To__New__State__60__66&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__60&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_tUmb4Ev9EemeQN7IdMXlbw" name="PME_Trig63" event="_-anYcBFKEeibZqndpu8erg" port="_qHclsAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tUo4IEv9EemeQN7IdMXlbw" name="PME_Trig64" event="_tCqXUEv9EemeQN7IdMXlbw" port="_tTRmMEv9EemeQN7IdMXlbw"/>
            <trigger xmi:id="_tUr7cEv9EemeQN7IdMXlbw" name="PME_Trig65" port="_xB-9sBE6EeiaCPCnhevAQQ">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tUwM4Ev9EemeQN7IdMXlbw" name="To__New__State__60__66" guard="_tU26kEv9EemeQN7IdMXlbw" source="_tUYZcEv9EemeQN7IdMXlbw" target="_tUaOoEv9EemeQN7IdMXlbw">
            <ownedRule xmi:id="_tU26kEv9EemeQN7IdMXlbw" name="PME_checkDecesion67">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tU2TgEv9EemeQN7IdMXlbw" name="PME_checkDecesion67">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__60__66&quot;,&quot;New__State__60&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Kaj2AA-7EeijktysABpT4g" name="Pseudo58"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tUYZcEv9EemeQN7IdMXlbw" name="DecesionPoint__59" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_tUaOoEv9EemeQN7IdMXlbw" name="New__State__60"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tTfBkUv9EemeQN7IdMXlbw" name="loadHeap" specification="_tTfBkEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tTjTAUv9EemeQN7IdMXlbw" name="unLoadHeap" specification="_tTjTAEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tTzKoUv9EemeQN7IdMXlbw" name="sendMessage" specification="_tTzKoEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ButtonHold&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonHold( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonPressed&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonPressed().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonReleased&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonReleased( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ReadIntResult&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadIntResult( boost::any_cast&lt;int>(message.payload[&quot;InputInt&quot;])).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tT4qMUv9EemeQN7IdMXlbw" name="sendInternalMessage" specification="_tT4qMEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tUPPgUv9EemeQN7IdMXlbw" name="initForPMD" specification="_tUPPgEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_ButtonsReader::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_ButtonsReader::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;readKeyTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForButtonsReader&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_tTfBkEv9EemeQN7IdMXlbw" name="loadHeap" visibility="private" method="_tTfBkUv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_tTjTAEv9EemeQN7IdMXlbw" name="unLoadHeap" visibility="private" method="_tTjTAUv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_tTzKoEv9EemeQN7IdMXlbw" name="sendMessage" visibility="private" method="_tTzKoUv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_tT0_0Ev9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_tT21AEv9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_tT4qMEv9EemeQN7IdMXlbw" name="sendInternalMessage" visibility="private" method="_tT4qMUv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_tT54UEv9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_tT8UkEv9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_tUPPgEv9EemeQN7IdMXlbw" name="initForPMD" visibility="private" method="_tUPPgUv9EemeQN7IdMXlbw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_5cgykAquEeiwdpidSbDb2g" name="WatchCore" classifierBehavior="_5TyacBNsEeiFubQUFHg6OA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_wsY5YAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_2ASigAreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ppFN4ArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_IaFLAArkEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ka0UEArzEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_CpaG0BgfEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CpeYQBgfEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_tgTVkEv9EemeQN7IdMXlbw" name="dbgPortForWatchCore" visibility="protected" type="_tCRVwEv9EemeQN7IdMXlbw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tgT8oEv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_tgT8oUv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_5TyacBNsEeiFubQUFHg6OA" name="StateMachine" isReentrant="false">
        <region xmi:id="_5UK08BNsEeiFubQUFHg6OA" name="Region">
          <transition xmi:id="_5Udv4BNsEeiFubQUFHg6OA" name="Initial" source="_5UPGYBNsEeiFubQUFHg6OA" target="_qc0-gBNyEeiFubQUFHg6OA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_76FHQBNsEeiFubQUFHg6OA">
              <language>C++</language>
              <body>initForPMD();
    displayGateKeeperP.ShowText(0,&quot;WatchCore capsule is started&quot;).send();
</body>
            </effect>
          </transition>
          <transition xmi:id="_tljB8Ev9EemeQN7IdMXlbw" name="From__New__State__151__152" source="_tleJcEv9EemeQN7IdMXlbw" target="_tlcUQEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tvMGIEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__151&quot;,&quot;New__State__151&quot;,&quot;To__New__State__151__166&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__151&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__169&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__151&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__201&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__151&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_tlk3IEv9EemeQN7IdMXlbw" name="PME_Trig153" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tlnTYEv9EemeQN7IdMXlbw" name="PME_Trig154" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tl5nQEv9EemeQN7IdMXlbw" name="PME_Trig155" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tl8qkEv9EemeQN7IdMXlbw" name="PME_Trig156" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tl_G0Ev9EemeQN7IdMXlbw" name="PME_Trig157" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tmCKIEv9EemeQN7IdMXlbw" name="PME_Trig158" event="_tCqXUEv9EemeQN7IdMXlbw" port="_tgTVkEv9EemeQN7IdMXlbw"/>
            <trigger xmi:id="_tmD_UEv9EemeQN7IdMXlbw" name="PME_Trig159" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tmHCoEv9EemeQN7IdMXlbw" name="PME_Trig160" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tmJe4Ev9EemeQN7IdMXlbw" name="PME_Trig161" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tmePAEv9EemeQN7IdMXlbw" name="PME_Trig162" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tmgrQEv9EemeQN7IdMXlbw" name="PME_Trig163" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tmjHgEv9EemeQN7IdMXlbw" name="PME_Trig164" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tm_MYEv9EemeQN7IdMXlbw" name="PME_Trig165" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_tnQSIEv9EemeQN7IdMXlbw" name="To__New__State__151__166" guard="_tvj5kUv9EemeQN7IdMXlbw" source="_tlcUQEv9EemeQN7IdMXlbw" target="_tleJcEv9EemeQN7IdMXlbw">
            <ownedRule xmi:id="_tvj5kUv9EemeQN7IdMXlbw" name="PME_checkDecesion228">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tvj5kEv9EemeQN7IdMXlbw" name="PME_checkDecesion228">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__151__166&quot;,&quot;New__State__151&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_tneUkEv9EemeQN7IdMXlbw" name="Trans__keyPressEx167" source="_qdGEQBNyEeiFubQUFHg6OA" target="_tlcUQEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tvb9wEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__151&quot;,&quot;To__New__State__151__166&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__169&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__201&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_tnfisUv9EemeQN7IdMXlbw" name="To__Substates__WorkingMode__169" guard="_tvluwUv9EemeQN7IdMXlbw" source="_tlcUQEv9EemeQN7IdMXlbw" target="_tne7oEv9EemeQN7IdMXlbw">
            <ownedRule xmi:id="_tvluwUv9EemeQN7IdMXlbw" name="PME_checkDecesion229">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tvluwEv9EemeQN7IdMXlbw" name="PME_checkDecesion229">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__WorkingMode__169&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_tnh-8Uv9EemeQN7IdMXlbw" name="From__Substates__WorkingMode__171" source="_tngw0Ev9EemeQN7IdMXlbw" target="_tlcUQEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tvSz0Ev9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__151&quot;,&quot;To__New__State__151__166&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__169&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__201&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_tsBdYEv9EemeQN7IdMXlbw" name="Trans__Pseudo144199" source="_GFOZ0BRjEeiFubQUFHg6OA" target="_tlcUQEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tvFYcEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;New__State__151&quot;,&quot;To__New__State__151__166&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__169&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__201&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_tsDSkEv9EemeQN7IdMXlbw" name="To__Substates__SetAlarm__201" guard="_tvm84Uv9EemeQN7IdMXlbw" source="_tlcUQEv9EemeQN7IdMXlbw" target="_tsCEcEv9EemeQN7IdMXlbw">
            <ownedRule xmi:id="_tvm84Uv9EemeQN7IdMXlbw" name="PME_checkDecesion230">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tvm84Ev9EemeQN7IdMXlbw" name="PME_checkDecesion230">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__SetAlarm__201&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_tsG88Ev9EemeQN7IdMXlbw" name="From__Substates__SetAlarm__203" source="_tsD5oEv9EemeQN7IdMXlbw" target="_tlcUQEv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tviEYEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;New__State__151&quot;,&quot;To__New__State__151__166&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__169&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__201&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5UPGYBNsEeiFubQUFHg6OA" name="Pseudo142"/>
          <subvertex xmi:type="uml:State" xmi:id="_5UY3YBNsEeiFubQUFHg6OA" name="WorkingMode">
            <connectionPoint xmi:id="_qc0-gBNyEeiFubQUFHg6OA" name="mainEn" kind="entryPoint"/>
            <connectionPoint xmi:id="_qdGEQBNyEeiFubQUFHg6OA" name="keyPressEx" kind="exitPoint"/>
            <connectionPoint xmi:id="_tne7oEv9EemeQN7IdMXlbw" name="From__Parent__168" kind="entryPoint"/>
            <connectionPoint xmi:id="_tngw0Ev9EemeQN7IdMXlbw" name="To__Parent__170" kind="exitPoint"/>
            <region xmi:id="_qcoxQBNyEeiFubQUFHg6OA" name="Region1">
              <transition xmi:id="_XGRkEBNzEeiFubQUFHg6OA" name="leaveWatchMode" guard="_Q1zukBXDEeikLqTX9lOhHA" source="_GT9dcBNzEeiFubQUFHg6OA" target="_VhqWsBNzEeiFubQUFHg6OA">
                <ownedRule xmi:id="_Q1zukBXDEeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Q1zukRXDEeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    if (ButtonID=='0' ||  ButtonID=='3')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yVuzQBXJEeio2qtoBBAMvw">
                  <language>C++</language>
                  <body>    // leave watch mode
	timeTrackerP.Deactivate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_ZwRFIBNzEeiFubQUFHg6OA" name="goStopWatch" guard="_Da_hgBW-EeikLqTX9lOhHA" source="_VhqWsBNzEeiFubQUFHg6OA" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_Da_hgBW-EeikLqTX9lOhHA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Da_hgRW-EeikLqTX9lOhHA">
                    <language>C++</language>
                    <body>    if (ButtonID=='0')
    return true;
    else
    return false;
</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_4C1AUBXGEeikLqTX9lOhHA">
                  <language>C++</language>
                  <body>    // activate stopwatch
	stopWatchP.Activate().send();
</body>
                </effect>
              </transition>
              <transition xmi:id="_aosh8BNzEeiFubQUFHg6OA" name="alarmSet1" source="_VhqWsBNzEeiFubQUFHg6OA" target="_qdGEQBNyEeiFubQUFHg6OA"/>
              <transition xmi:id="_bwAgsBRiEeiFubQUFHg6OA" name="alarmSet2" source="_PmcG0BRiEeiFubQUFHg6OA" target="_qdGEQBNyEeiFubQUFHg6OA"/>
              <transition xmi:id="_YOTHcBgmEeiSBIpf1RqKYQ" name="mainEn__Pseudo147__148" kind="local" source="_qc0-gBNyEeiFubQUFHg6OA" target="_OEEIEBgmEeiSBIpf1RqKYQ"/>
              <transition xmi:id="_toCVQEv9EemeQN7IdMXlbw" name="Trans__Init__State__173174" source="_tn8OoEv9EemeQN7IdMXlbw" target="_tnjNEEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_trMW8Ev9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__173&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__173&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__194&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__173&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_toC8UEv9EemeQN7IdMXlbw" name="Trans__Pseudo147175" source="_OEEIEBgmEeiSBIpf1RqKYQ" target="_tnjNEEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_trQBUEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo147&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo147&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__194&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo147&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_toDjYEv9EemeQN7IdMXlbw" name="Trans__keyPressEx176" source="_qdGEQBNyEeiFubQUFHg6OA" target="_tnjNEEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tqyuUEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__194&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_toeaIEv9EemeQN7IdMXlbw" name="177" source="_GT9dcBNzEeiFubQUFHg6OA" target="_tnjNEEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_trTEoEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo141&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo141&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__194&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo141&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tofoQEv9EemeQN7IdMXlbw" name="178" source="_PmcG0BRiEeiFubQUFHg6OA" target="_tnjNEEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tq4N4Ev9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo143&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo143&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__194&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo143&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_togPUEv9EemeQN7IdMXlbw" name="179" source="_VhqWsBNzEeiFubQUFHg6OA" target="_tnjNEEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tql6AEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo146&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo146&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__194&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo146&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tohdcEv9EemeQN7IdMXlbw" name="From__StopWatchMode__180" source="_34ui8BNyEeiFubQUFHg6OA" target="_tnjNEEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_trt7YEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__194&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_tokgwEv9EemeQN7IdMXlbw" name="PME_Trig181" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_to0YYEv9EemeQN7IdMXlbw" name="PME_Trig182" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_to20oEv9EemeQN7IdMXlbw" name="PME_Trig183" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_to_XgEv9EemeQN7IdMXlbw" name="PME_Trig184" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tpDo8Ev9EemeQN7IdMXlbw" name="PME_Trig185" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tpUHoEv9EemeQN7IdMXlbw" name="PME_Trig186" event="_tCqXUEv9EemeQN7IdMXlbw" port="_tgTVkEv9EemeQN7IdMXlbw"/>
                <trigger xmi:id="_tpXyAEv9EemeQN7IdMXlbw" name="PME_Trig187" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tpdRkEv9EemeQN7IdMXlbw" name="PME_Trig188" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tpl0cEv9EemeQN7IdMXlbw" name="PME_Trig189" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tp1sEEv9EemeQN7IdMXlbw" name="PME_Trig190" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tp8ZwEv9EemeQN7IdMXlbw" name="PME_Trig191" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tp_dEEv9EemeQN7IdMXlbw" name="PME_Trig192" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tqMRYEv9EemeQN7IdMXlbw" name="PME_Trig193" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_tqRJ4Ev9EemeQN7IdMXlbw" name="To__StopWatchMode__194" guard="_tr4TcUv9EemeQN7IdMXlbw" source="_tnjNEEv9EemeQN7IdMXlbw" target="_34ui8BNyEeiFubQUFHg6OA">
                <ownedRule xmi:id="_tr4TcUv9EemeQN7IdMXlbw" name="PME_checkDecesion198">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_tr4TcEv9EemeQN7IdMXlbw" name="PME_checkDecesion198">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__StopWatchMode__194&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_tqbh8Ev9EemeQN7IdMXlbw" name="From__Parnet__StateMachine__195" source="_tne7oEv9EemeQN7IdMXlbw" target="_tnjNEEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_trX9IEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__196&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;StopWatchMode&quot;,&quot;To__StopWatchMode__194&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tqbh8Uv9EemeQN7IdMXlbw" name="To__Parent__StateMachine__196" guard="_trw-sUv9EemeQN7IdMXlbw" source="_tnjNEEv9EemeQN7IdMXlbw" target="_tngw0Ev9EemeQN7IdMXlbw">
                <ownedRule xmi:id="_trw-sUv9EemeQN7IdMXlbw" name="PME_checkDecesion197">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_trw-sEv9EemeQN7IdMXlbw" name="PME_checkDecesion197">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__196&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_34ui8BNyEeiFubQUFHg6OA" name="StopWatchMode"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_GT9dcBNzEeiFubQUFHg6OA" name="Pseudo141" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_VhqWsBNzEeiFubQUFHg6OA" name="Pseudo146" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_PmcG0BRiEeiFubQUFHg6OA" name="Pseudo143" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_OEEIEBgmEeiSBIpf1RqKYQ" name="Pseudo147" kind="junction"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_tnjNEEv9EemeQN7IdMXlbw" name="DecesionPoint__172" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_tn8OoEv9EemeQN7IdMXlbw" name="Init__State__173"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_m0-1cBNvEeiFubQUFHg6OA" name="SetAlarm">
            <connectionPoint xmi:id="_GFOZ0BRjEeiFubQUFHg6OA" name="Pseudo144" kind="exitPoint"/>
            <connectionPoint xmi:id="_tsCEcEv9EemeQN7IdMXlbw" name="From__Parent__200" kind="entryPoint"/>
            <connectionPoint xmi:id="_tsD5oEv9EemeQN7IdMXlbw" name="To__Parent__202" kind="exitPoint"/>
            <region xmi:id="_GFF28BRjEeiFubQUFHg6OA" name="Region1">
              <ownedComment xmi:id="_PbsboBghEei-ccFu-OwT7Q"/>
              <transition xmi:id="_-WovsBeSEei-ccFu-OwT7Q" name="Pseudo145__Pseudo144__149" guard="_QFFdEBgEEei-ccFu-OwT7Q" source="_ttfMIBeSEei-ccFu-OwT7Q" target="_GFOZ0BRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_QFFdEBgEEei-ccFu-OwT7Q">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_QFFdERgEEei-ccFu-OwT7Q">
                    <language>C++</language>
                    <body>////
	if (ButtonID!='3')
		return true;
	else
		return false;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_tsU_YEv9EemeQN7IdMXlbw" name="Trans__Init__State__205206" source="_tsKnUEv9EemeQN7IdMXlbw" target="_tsHkAEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tu39EEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__205&quot;,&quot;readHour&quot;,&quot;To__readHour__223&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__205&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__225&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__205&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tsVmcEv9EemeQN7IdMXlbw" name="Trans__Pseudo144207" source="_GFOZ0BRjEeiFubQUFHg6OA" target="_tsHkAEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tu8OgEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readHour&quot;,&quot;To__readHour__223&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__225&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tsYCsEv9EemeQN7IdMXlbw" name="208" source="_ttfMIBeSEei-ccFu-OwT7Q" target="_tsHkAEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tuydgEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo145&quot;,&quot;readHour&quot;,&quot;To__readHour__223&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo145&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__225&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo145&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tsbGAEv9EemeQN7IdMXlbw" name="From__readHour__209" source="_G6Ch8BRjEeiFubQUFHg6OA" target="_tsHkAEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tus98Ev9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;readHour&quot;,&quot;To__readHour__223&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__225&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;readHour&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_tscUIEv9EemeQN7IdMXlbw" name="PME_Trig210" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tshMoEv9EemeQN7IdMXlbw" name="PME_Trig211" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ts8qcEv9EemeQN7IdMXlbw" name="PME_Trig212" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ttA74Ev9EemeQN7IdMXlbw" name="PME_Trig213" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ttZWYEv9EemeQN7IdMXlbw" name="PME_Trig214" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ttcZsEv9EemeQN7IdMXlbw" name="PME_Trig215" event="_tCqXUEv9EemeQN7IdMXlbw" port="_tgTVkEv9EemeQN7IdMXlbw"/>
                <trigger xmi:id="_ttigUEv9EemeQN7IdMXlbw" name="PME_Trig216" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ttljoEv9EemeQN7IdMXlbw" name="PME_Trig217" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ttp1EEv9EemeQN7IdMXlbw" name="PME_Trig218" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_ttutkEv9EemeQN7IdMXlbw" name="PME_Trig219" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tt2pYEv9EemeQN7IdMXlbw" name="PME_Trig220" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tt6TwEv9EemeQN7IdMXlbw" name="PME_Trig221" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tt9-IEv9EemeQN7IdMXlbw" name="PME_Trig222" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_tuFS4Ev9EemeQN7IdMXlbw" name="To__readHour__223" guard="_tu9coUv9EemeQN7IdMXlbw" source="_tsHkAEv9EemeQN7IdMXlbw" target="_G6Ch8BRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_tu9coUv9EemeQN7IdMXlbw" name="PME_checkDecesion226">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_tu9coEv9EemeQN7IdMXlbw" name="PME_checkDecesion226">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__readHour__223&quot;,&quot;readHour&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_tuJkUEv9EemeQN7IdMXlbw" name="From__Parnet__StateMachine__224" source="_tsCEcEv9EemeQN7IdMXlbw" target="_tsHkAEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tuQ5EEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readHour&quot;,&quot;To__readHour__223&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__225&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tuKLYEv9EemeQN7IdMXlbw" name="To__Parent__StateMachine__225" guard="_tu_44Uv9EemeQN7IdMXlbw" source="_tsHkAEv9EemeQN7IdMXlbw" target="_tsD5oEv9EemeQN7IdMXlbw">
                <ownedRule xmi:id="_tu_44Uv9EemeQN7IdMXlbw" name="PME_checkDecesion227">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_tu_44Ev9EemeQN7IdMXlbw" name="PME_checkDecesion227">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__225&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_G6Ch8BRjEeiFubQUFHg6OA" name="readHour"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_ttfMIBeSEei-ccFu-OwT7Q" name="Pseudo145" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_tsHkAEv9EemeQN7IdMXlbw" name="DecesionPoint__204" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_tsKnUEv9EemeQN7IdMXlbw" name="Init__State__205"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tlcUQEv9EemeQN7IdMXlbw" name="DecesionPoint__150" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_tleJcEv9EemeQN7IdMXlbw" name="New__State__151"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tg06AEv9EemeQN7IdMXlbw" name="loadHeap" specification="_tg0S8Ev9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tg3WQUv9EemeQN7IdMXlbw" name="unLoadHeap" specification="_tg3WQEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tjkE8Uv9EemeQN7IdMXlbw" name="sendMessage" specification="_tjkE8Ev9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ReadInt&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadInt( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;TextToShow&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;RemAlarm&quot;) {
   if(message.payload.size()==1){
    alarmP.RemAlarm( boost::any_cast&lt;int>(message.payload[&quot;alarmID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;viewAlarmReq&quot;) {
   if(message.payload.size()==0){
    alarmP.viewAlarmReq().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;SetAlarm&quot;) {
   if(message.payload.size()==3){
    alarmP.SetAlarm( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;oneShot&quot;])).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Toggle&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Toggle().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Reset&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Reset().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Deactivate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Resume&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Resume().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Deactivate().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tjo9cEv9EemeQN7IdMXlbw" name="sendInternalMessage" specification="_tjnvUEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tk46oUv9EemeQN7IdMXlbw" name="initForPMD" specification="_tk46oEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_WatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_WatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_tg0S8Ev9EemeQN7IdMXlbw" name="loadHeap" visibility="private" method="_tg06AEv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_tg3WQEv9EemeQN7IdMXlbw" name="unLoadHeap" visibility="private" method="_tg3WQUv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_tjkE8Ev9EemeQN7IdMXlbw" name="sendMessage" visibility="private" method="_tjkE8Uv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_tjlTEEv9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_tjmhMUv9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_tjnvUEv9EemeQN7IdMXlbw" name="sendInternalMessage" visibility="private" method="_tjo9cEv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_tjqLkEv9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_tjvEEEv9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_tk46oEv9EemeQN7IdMXlbw" name="initForPMD" visibility="private" method="_tk46oUv9EemeQN7IdMXlbw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_EUMt0AqvEeiwdpidSbDb2g" name="TimeTracker" classifierBehavior="_f9DS0Ar0EeiwdpidSbDb2g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="__kPLsArjEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_7dRcsArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_-6GrwAryEeiwdpidSbDb2g" name="timeTrackingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_L22PAArzEeiwdpidSbDb2g" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yQcqUAr3EeiwdpidSbDb2g" name="showTimeTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KsSnIBKYEeiBE_x0ZD7_9g" name="clockResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_UKWdABKYEeiBE_x0ZD7_9g" value="500"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_7xV-8BbCEei-ccFu-OwT7Q" name="showTimeTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_tU6k8Ev9EemeQN7IdMXlbw" name="dbgPortForTimeTracker" visibility="protected" type="_tCRVwEv9EemeQN7IdMXlbw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tU7MAEv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_tU8aIEv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_f9DS0Ar0EeiwdpidSbDb2g" name="TimeTrackerSM" isReentrant="false">
        <region xmi:id="_gAJqIAr0EeiwdpidSbDb2g" name="Region">
          <transition xmi:id="_hUWAcAr1EeiwdpidSbDb2g" name="updateTime" source="_hUNdkAr1EeiwdpidSbDb2g" target="_hUSWEAr1EeiwdpidSbDb2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ZSxQsBKKEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>milliTime= milliTime+clockResolution;
</body>
            </effect>
            <trigger xmi:id="_8R-qkAsAEeiwdpidSbDb2g" port="_-6GrwAryEeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_pbEP8Ar1EeiwdpidSbDb2g" name="init " source="_gAMtcAr0EeiwdpidSbDb2g" target="_pbBzsAr1EeiwdpidSbDb2g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_0z3DoBKJEeiEEYKmuRZPIg">
              <language>C++</language>
              <body>initForPMD();
displayGateKeeperP.ShowText(0,&quot;TimeTracker capsule is started&quot;).send();
timeTrackingTimer.informEvery(UMLRTTimespec(0,clockResolution*1000000),0);
showTimeTimerID=showTimeTimer.informEvery(UMLRTTimespec(1,0),0);

</body>
            </effect>
          </transition>
          <transition xmi:id="_tV41UEv9EemeQN7IdMXlbw" name="From__New__State__74__75" source="_tV1K8Ev9EemeQN7IdMXlbw" target="_tVz80Ev9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tZRggEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__74&quot;,&quot;New__State__74&quot;,&quot;To__New__State__74__83&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__74&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__86&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__74&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_tV74oEv9EemeQN7IdMXlbw" name="PME_Trig76" event="_tCqXUEv9EemeQN7IdMXlbw" port="_tU6k8Ev9EemeQN7IdMXlbw"/>
            <trigger xmi:id="_tV_jAEv9EemeQN7IdMXlbw" name="PME_Trig77" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tWBYMEv9EemeQN7IdMXlbw" name="PME_Trig78" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tWEbgEv9EemeQN7IdMXlbw" name="PME_Trig79" port="_-6GrwAryEeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_tWFpoEv9EemeQN7IdMXlbw" name="PME_Trig80" port="_yQcqUAr3EeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_tXKnsEv9EemeQN7IdMXlbw" name="PME_Trig81" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_tXQHQEv9EemeQN7IdMXlbw" name="PME_Trig82" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_tXZRMEv9EemeQN7IdMXlbw" name="To__New__State__74__83" guard="_tZdtwUv9EemeQN7IdMXlbw" source="_tVz80Ev9EemeQN7IdMXlbw" target="_tV1K8Ev9EemeQN7IdMXlbw">
            <ownedRule xmi:id="_tZdtwUv9EemeQN7IdMXlbw" name="PME_checkDecesion108">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tZdtwEv9EemeQN7IdMXlbw" name="PME_checkDecesion108">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__74__83&quot;,&quot;New__State__74&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_tXc7kEv9EemeQN7IdMXlbw" name="Trans__Pseudo7284" source="_hUNdkAr1EeiwdpidSbDb2g" target="_tVz80Ev9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tZPrUEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__74&quot;,&quot;To__New__State__74__83&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__86&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_tXfX0Uv9EemeQN7IdMXlbw" name="To__Substates__TrackingTime__86" guard="_tZfi8Uv9EemeQN7IdMXlbw" source="_tVz80Ev9EemeQN7IdMXlbw" target="_tXdioEv9EemeQN7IdMXlbw">
            <ownedRule xmi:id="_tZfi8Uv9EemeQN7IdMXlbw" name="PME_checkDecesion109">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tZfi8Ev9EemeQN7IdMXlbw" name="PME_checkDecesion109">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__TrackingTime__86&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_tXkQUUv9EemeQN7IdMXlbw" name="From__Substates__TrackingTime__88" source="_tXjpQEv9EemeQN7IdMXlbw" target="_tVz80Ev9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tZcfoEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__74&quot;,&quot;To__New__State__74__83&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__86&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_gAMtcAr0EeiwdpidSbDb2g" name="Pseudo71"/>
          <subvertex xmi:type="uml:State" xmi:id="_gARl8Ar0EeiwdpidSbDb2g" name="TrackingTime">
            <connectionPoint xmi:id="_hUNdkAr1EeiwdpidSbDb2g" name="Pseudo72" kind="exitPoint"/>
            <connectionPoint xmi:id="_hUSWEAr1EeiwdpidSbDb2g" name="Pseudo68" kind="entryPoint"/>
            <connectionPoint xmi:id="_pbBzsAr1EeiwdpidSbDb2g" name="Pseudo70" kind="entryPoint"/>
            <connectionPoint xmi:id="_tXdioEv9EemeQN7IdMXlbw" name="From__Parent__85" kind="entryPoint"/>
            <connectionPoint xmi:id="_tXjpQEv9EemeQN7IdMXlbw" name="To__Parent__87" kind="exitPoint"/>
            <region xmi:id="_BISvsAr1EeiwdpidSbDb2g" name="Region1">
              <transition xmi:id="_tX0vAEv9EemeQN7IdMXlbw" name="Trans__Pseudo6891" source="_hUSWEAr1EeiwdpidSbDb2g" target="_tXk3YEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tYrDkEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__105&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__90&quot;,&quot;To__New__State__90__103&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tX1WEEv9EemeQN7IdMXlbw" name="Trans__Pseudo6992" source="_CEn1EAr1EeiwdpidSbDb2g" target="_tXk3YEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tY2pwEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo69&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__105&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo69&quot;,&quot;New__State__90&quot;,&quot;To__New__State__90__103&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo69&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tX3LQEv9EemeQN7IdMXlbw" name="Trans__Pseudo7093" source="_pbBzsAr1EeiwdpidSbDb2g" target="_tXk3YEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tY7iQEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__105&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__90&quot;,&quot;To__New__State__90__103&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tX3yUEv9EemeQN7IdMXlbw" name="Trans__Pseudo7294" source="_hUNdkAr1EeiwdpidSbDb2g" target="_tXk3YEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tY5GAEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__105&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__90&quot;,&quot;To__New__State__90__103&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tX6OkEv9EemeQN7IdMXlbw" name="From__New__State__90__95" source="_tXmFgEv9EemeQN7IdMXlbw" target="_tXk3YEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tY9-gEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__90&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__105&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__90&quot;,&quot;New__State__90&quot;,&quot;To__New__State__90__103&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__90&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_tX7csEv9EemeQN7IdMXlbw" name="PME_Trig96" event="_tCqXUEv9EemeQN7IdMXlbw" port="_tU6k8Ev9EemeQN7IdMXlbw"/>
                <trigger xmi:id="_tX9R4Ev9EemeQN7IdMXlbw" name="PME_Trig97" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tYHC4Ev9EemeQN7IdMXlbw" name="PME_Trig98" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tYI4EEv9EemeQN7IdMXlbw" name="PME_Trig99" port="_-6GrwAryEeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_tYL7YEv9EemeQN7IdMXlbw" name="PME_Trig100" port="_yQcqUAr3EeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_tYNwkEv9EemeQN7IdMXlbw" name="PME_Trig101" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_tYQz4Ev9EemeQN7IdMXlbw" name="PME_Trig102" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_tYVFUEv9EemeQN7IdMXlbw" name="To__New__State__90__103" guard="_tZNPEUv9EemeQN7IdMXlbw" source="_tXk3YEv9EemeQN7IdMXlbw" target="_tXmFgEv9EemeQN7IdMXlbw">
                <ownedRule xmi:id="_tZNPEUv9EemeQN7IdMXlbw" name="PME_checkDecesion107">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_tZNPEEv9EemeQN7IdMXlbw" name="PME_checkDecesion107">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__New__State__90__103&quot;,&quot;New__State__90&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_tYXhkEv9EemeQN7IdMXlbw" name="From__Parnet__TimeTrackerSM__104" source="_tXdioEv9EemeQN7IdMXlbw" target="_tXk3YEv9EemeQN7IdMXlbw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tY0NgEv9EemeQN7IdMXlbw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__105&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__90&quot;,&quot;To__New__State__90__103&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_tYnZMEv9EemeQN7IdMXlbw" name="To__Parent__TimeTrackerSM__105" guard="_tZMA8Uv9EemeQN7IdMXlbw" source="_tXk3YEv9EemeQN7IdMXlbw" target="_tXjpQEv9EemeQN7IdMXlbw">
                <ownedRule xmi:id="_tZMA8Uv9EemeQN7IdMXlbw" name="PME_checkDecesion106">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_tZMA8Ev9EemeQN7IdMXlbw" name="PME_checkDecesion106">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__TimeTrackerSM__105&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_CEn1EAr1EeiwdpidSbDb2g" name="Pseudo69"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_tXk3YEv9EemeQN7IdMXlbw" name="DecesionPoint__89" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_tXmFgEv9EemeQN7IdMXlbw" name="New__State__90"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tVz80Ev9EemeQN7IdMXlbw" name="DecesionPoint__73" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_tV1K8Ev9EemeQN7IdMXlbw" name="New__State__74"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tVJ1gUv9EemeQN7IdMXlbw" name="loadHeap" specification="_tVJ1gEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.clockResolution&quot;,this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tVLqsUv9EemeQN7IdMXlbw" name="unLoadHeap" specification="_tVLqsEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.clockResolution&quot;,&amp;this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tVXQ4Uv9EemeQN7IdMXlbw" name="sendMessage" specification="_tVXQ4Ev9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tVbiUUv9EemeQN7IdMXlbw" name="sendInternalMessage" specification="_tVbiUEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tVudQUv9EemeQN7IdMXlbw" name="initForPMD" specification="_tVudQEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_TimeTracker::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_TimeTracker::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;showTimeTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForTimeTracker&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_tVJ1gEv9EemeQN7IdMXlbw" name="loadHeap" visibility="private" method="_tVJ1gUv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_tVLqsEv9EemeQN7IdMXlbw" name="unLoadHeap" visibility="private" method="_tVLqsUv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_tVXQ4Ev9EemeQN7IdMXlbw" name="sendMessage" visibility="private" method="_tVXQ4Uv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_tVYfAEv9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_tVaUMEv9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_tVbiUEv9EemeQN7IdMXlbw" name="sendInternalMessage" visibility="private" method="_tVbiUUv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_tVcwcEv9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_tVd-kUv9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_tVudQEv9EemeQN7IdMXlbw" name="initForPMD" visibility="private" method="_tVudQUv9EemeQN7IdMXlbw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_OX25MAqxEeiwdpidSbDb2g" name="ButtonsP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_OXynwAqxEeiwdpidSbDb2g" name="ButtonsP">
        <interfaceRealization xmi:id="_OX_cEAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OX7KoAqxEeiwdpidSbDb2g" contract="_OX7KoAqxEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_OYLCQAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g" contract="_OYH-8AqxEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OX7KoAqxEeiwdpidSbDb2g" name="ButtonsP">
        <ownedOperation xmi:id="_-aZWABFKEeibZqndpu8erg" name="ReadInt">
          <ownedParameter xmi:id="_EERNMBgdEei-ccFu-OwT7Q" name="TextToShow">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYB4UAqxEeiwdpidSbDb2g" name="ButtonsP~">
        <ownedOperation xmi:id="_SXAPUAqxEeiwdpidSbDb2g" name="ButtonPressed">
          <ownedParameter xmi:id="_n9--0AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrus.designer.languages.cpp.library_1.0.4.jar!/models/AnsiCLibrary.uml#_5lVhgBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_XpIQQAqxEeiwdpidSbDb2g" name="ButtonHold">
          <ownedParameter xmi:id="_nYJt4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_cpytwAqxEeiwdpidSbDb2g" name="ButtonReleased">
          <ownedParameter xmi:id="_jp9k4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_nYfEIBFLEeibZqndpu8erg" name="ReadIntResult">
          <ownedParameter xmi:id="_nYfEIRFLEeibZqndpu8erg" name="InputInt">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYGJwAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYB4UAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_OYGw0AqxEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYH-8AqxEeiwdpidSbDb2g" name="ButtonsPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYLpUAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_SXXbsAqxEeiwdpidSbDb2g" operation="_SXAPUAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_XpPlAAqxEeiwdpidSbDb2g" operation="_XpIQQAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_cp40YAqxEeiwdpidSbDb2g" operation="_cpytwAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_-anYcBFKEeibZqndpu8erg" operation="_-aZWABFKEeibZqndpu8erg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_nYhgYBFLEeibZqndpu8erg" operation="_nYfEIBFLEeibZqndpu8erg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_atLzIArdEeiwdpidSbDb2g" name="AlarmP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_atHhsArdEeiwdpidSbDb2g" name="AlarmP">
        <interfaceRealization xmi:id="_atTH4ArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atQEkArdEeiwdpidSbDb2g" contract="_atQEkArdEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_ateHAArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g" contract="_atZ1kArdEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atQEkArdEeiwdpidSbDb2g" name="AlarmP">
        <ownedOperation xmi:id="_de5s0ArdEeiwdpidSbDb2g" name="SetAlarm">
          <ownedParameter xmi:id="_g8GMcArdEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_k_tL0ArdEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_n-OLYArdEeiwdpidSbDb2g" name="oneShot">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_suDXkArdEeiwdpidSbDb2g" name="RemAlarm">
          <ownedParameter xmi:id="_suDXkQrdEeiwdpidSbDb2g" name="alarmID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_0IE5IArdEeiwdpidSbDb2g" name="viewAlarmReq"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atU9EArdEeiwdpidSbDb2g" name="AlarmP~">
        <ownedOperation xmi:id="_d5y8QArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_d5y8QQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_d5zjUQrhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_d50KYArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atYncArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atU9EArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_atZOgArdEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atZ1kArdEeiwdpidSbDb2g" name="AlarmPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atfVIArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_dfgJwArdEeiwdpidSbDb2g" operation="_de5s0ArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_suGa4ArdEeiwdpidSbDb2g" operation="_suDXkArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_0IHVYArdEeiwdpidSbDb2g" operation="_0IE5IArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d5zjUArhEeiwdpidSbDb2g" operation="_d5y8QArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d50KYQrhEeiwdpidSbDb2g" operation="_d5zjUQrhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Viyf8ArfEeiwdpidSbDb2g" name="StopWatchP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Viyf8QrfEeiwdpidSbDb2g" name="StopWatchP">
        <interfaceRealization xmi:id="_Viyf8grfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf9ArfEeiwdpidSbDb2g" contract="_Viyf9ArfEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Viyf8wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g" contract="_ViygAQrfEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf9ArfEeiwdpidSbDb2g" name="StopWatchP">
        <ownedOperation xmi:id="_Viyf9QrfEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Viyf-QrfEeiwdpidSbDb2g" name="Reset"/>
        <ownedOperation xmi:id="_Viyf-wrfEeiwdpidSbDb2g" name="Deactivate"/>
        <ownedOperation xmi:id="_Viyf_ArfEeiwdpidSbDb2g" name="Resume"/>
        <ownedOperation xmi:id="_mM4pQArgEeiwdpidSbDb2g" name="Toggle"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf_grfEeiwdpidSbDb2g" name="StopWatchP~">
        <ownedOperation xmi:id="_RNPKEArhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_WQpZkArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_bGjYkArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_bGjYkQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Viyf_wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf_grfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_ViygAArfEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ViygAQrfEeiwdpidSbDb2g" name="StopWatchPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ViygAgrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygAwrfEeiwdpidSbDb2g" operation="_Viyf9QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBArfEeiwdpidSbDb2g" operation="_Viyf-QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBQrfEeiwdpidSbDb2g" operation="_Viyf-wrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBgrfEeiwdpidSbDb2g" operation="_Viyf_ArfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_mM5QUArgEeiwdpidSbDb2g" operation="_mM4pQArgEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_RNQYMArhEeiwdpidSbDb2g" operation="_RNPKEArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bGjYkgrhEeiwdpidSbDb2g" operation="_bGjYkArhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Lo6JYAriEeiwdpidSbDb2g" name="TimeTrackerP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Lo6JYQriEeiwdpidSbDb2g" name="TimeTrackerP">
        <interfaceRealization xmi:id="_Lo6JYgriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JZAriEeiwdpidSbDb2g" contract="_Lo6JZAriEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Lo6JYwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g" contract="_Lo6JcgriEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JZAriEeiwdpidSbDb2g" name="TimeTrackerP">
        <ownedOperation xmi:id="_Lo6JaQriEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Lo6JagriEeiwdpidSbDb2g" name="Deactivate"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JawriEeiwdpidSbDb2g" name="TimeTrackerP~">
        <ownedOperation xmi:id="_Lo6JbAriEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_Lo6JbQriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Lo6JbgriEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_Lo6JbwriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcAriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JawriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_Lo6JcQriEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JcgriEeiwdpidSbDb2g" name="TimeTrackerPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeAriEeiwdpidSbDb2g" operation="_Lo6JaQriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeQriEeiwdpidSbDb2g" operation="_Lo6JagriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JegriEeiwdpidSbDb2g" operation="_Lo6JbAriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JewriEeiwdpidSbDb2g" operation="_Lo6JbgriEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="__mIMoArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="__mIMoQrkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <interfaceRealization xmi:id="__mIMogrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMpArkEeiwdpidSbDb2g" contract="__mIMpArkEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="__mIMowrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g" contract="__mIMtQrkEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMpArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <ownedOperation xmi:id="__mIMpQrkEeiwdpidSbDb2g" name="ShowTime">
          <ownedParameter xmi:id="__mIMpgrkEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMpwrkEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMqArkEeiwdpidSbDb2g" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqQrkEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="__mIMqgrkEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_SddfAArlEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqwrkEeiwdpidSbDb2g" name="ShowCounter">
          <ownedParameter xmi:id="_gD0nAArlEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xd8cBKIEeiEEYKmuRZPIg" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xt0EBKIEeiEEYKmuRZPIg" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_3cTiABKIEeiEEYKmuRZPIg" name="milli">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMrgrkEeiwdpidSbDb2g" name="DisplayGateKeeperP~">
        <ownedOperation xmi:id="__mIMrwrkEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="__mIMsArkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMsQrkEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="__mIMsgrkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMswrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMrgrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="__mIMtArkEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMtQrkEeiwdpidSbDb2g" name="DisplayGateKeeperPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMtgrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMtwrkEeiwdpidSbDb2g" operation="__mIMpQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuArkEeiwdpidSbDb2g" operation="__mIMqQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuQrkEeiwdpidSbDb2g" operation="__mIMqwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuwrkEeiwdpidSbDb2g" operation="__mIMrwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMvArkEeiwdpidSbDb2g" operation="__mIMsQrkEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_EOr9EAruEeiwdpidSbDb2g" name="DisplayP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_EOqu8AruEeiwdpidSbDb2g" name="DisplayP">
        <interfaceRealization xmi:id="_EOw1kAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOuZUAruEeiwdpidSbDb2g" contract="_EOuZUAruEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_EO5YcAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g" contract="_EO2VIAruEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOuZUAruEeiwdpidSbDb2g" name="DisplayP">
        <ownedOperation xmi:id="_gYfq8ArvEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="_gYfq8QrvEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gYfq8grvEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOyDsAruEeiwdpidSbDb2g" name="DisplayP~"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO1HAAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOyDsAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_EO1uEAruEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EO2VIAruEeiwdpidSbDb2g" name="DisplayPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO6mkAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_gYhgIArvEeiwdpidSbDb2g" operation="_gYfq8ArvEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_s_DpsEv9EemeQN7IdMXlbw" name="dbgAgent">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_tCsMgEv9EemeQN7IdMXlbw" name="timing" visibility="protected">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tCtaoEv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_tCuBsEv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_tGBNUEv9EemeQN7IdMXlbw" name="dbgPortForStopWatchCore" visibility="public" type="_tCRVwEv9EemeQN7IdMXlbw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tGB0YEv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_tGB0YUv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_tTUpgEv9EemeQN7IdMXlbw" name="dbgPortForButtonsReader" visibility="public" type="_tCRVwEv9EemeQN7IdMXlbw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tTVQkEv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_tTVQkUv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_tU-PUEv9EemeQN7IdMXlbw" name="dbgPortForTimeTracker" visibility="public" type="_tCRVwEv9EemeQN7IdMXlbw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tU_dcEv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_tU_dcUv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_tcXQwEv9EemeQN7IdMXlbw" name="dbgPortForDisplayGateKeeper" visibility="public" type="_tCRVwEv9EemeQN7IdMXlbw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tcX30Ev9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_tcX30Uv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_teKnkEv9EemeQN7IdMXlbw" name="dbgPortForAlarmsCapsule" visibility="public" type="_tCRVwEv9EemeQN7IdMXlbw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_teLOoEv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_teL1sEv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_tgY1IEv9EemeQN7IdMXlbw" name="dbgPortForWatchCore" visibility="public" type="_tCRVwEv9EemeQN7IdMXlbw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_tgaDQEv9EemeQN7IdMXlbw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_tgaqUEv9EemeQN7IdMXlbw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_tCCFMEv9EemeQN7IdMXlbw" name="dbgAgent StateMachine">
        <region xmi:id="_tbZncEv9EemeQN7IdMXlbw" name="mainRegion">
          <transition xmi:id="_tbzQEEv9EemeQN7IdMXlbw" name="Trans__Init__State__112113" source="_tbnp4Ev9EemeQN7IdMXlbw" target="_tba1kUv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tcRKIEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__112&quot;,&quot;New__State__111&quot;,&quot;To__New__State__111__116&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__112&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_tb1FQEv9EemeQN7IdMXlbw" name="From__New__State__111__114" source="_tbcqwEv9EemeQN7IdMXlbw" target="_tba1kUv9EemeQN7IdMXlbw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_tcMRoEv9EemeQN7IdMXlbw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__111&quot;,&quot;New__State__111&quot;,&quot;To__New__State__111__116&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__111&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_tb3hgEv9EemeQN7IdMXlbw" name="PME_Trig115" port="_tCsMgEv9EemeQN7IdMXlbw">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_tb_dUEv9EemeQN7IdMXlbw" name="To__New__State__111__116" guard="_tcRxMUv9EemeQN7IdMXlbw" source="_tba1kUv9EemeQN7IdMXlbw" target="_tbcqwEv9EemeQN7IdMXlbw">
            <ownedRule xmi:id="_tcRxMUv9EemeQN7IdMXlbw" name="PME_checkDecesion117">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_tcRxMEv9EemeQN7IdMXlbw" name="PME_checkDecesion117">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__111__116&quot;,&quot;New__State__111&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tba1kUv9EemeQN7IdMXlbw" name="DecesionPoint__110" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_tbcqwEv9EemeQN7IdMXlbw" name="New__State__111">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tvr1YEv9EemeQN7IdMXlbw" name="New__State__111">
              <language>C++</language>
              <body>timing.informIn(UMLRTTimespec(1,0));
</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_tbnp4Ev9EemeQN7IdMXlbw" name="Init__State__112"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tZ1hMUv9EemeQN7IdMXlbw" name="loadHeap" specification="_tZ1hMEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tZ2vUUv9EemeQN7IdMXlbw" name="unLoadHeap" specification="_tZ2vUEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_taY60Uv9EemeQN7IdMXlbw" name="sendMessage" specification="_taY60Ev9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;dbgPortForStopWatchCore&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForStopWatchCore.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForButtonsReader&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForButtonsReader.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForTimeTracker&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForTimeTracker.dbg().sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_taclMUv9EemeQN7IdMXlbw" name="sendInternalMessage" specification="_taclMEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tbEQQUv9EemeQN7IdMXlbw" name="initForPMD" specification="_tbEQQEv9EemeQN7IdMXlbw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_dbgAgent::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_dbgAgent::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;dbgPortForStopWatchCore&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForButtonsReader&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForTimeTracker&quot;,&quot;dbg&quot;,{});
 this->execContext.addInputMessages(&quot;timing&quot;,&quot;timeout&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_tZ1hMEv9EemeQN7IdMXlbw" name="loadHeap" visibility="private" method="_tZ1hMUv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_tZ2vUEv9EemeQN7IdMXlbw" name="unLoadHeap" visibility="private" method="_tZ2vUUv9EemeQN7IdMXlbw"/>
      <ownedOperation xmi:id="_taY60Ev9EemeQN7IdMXlbw" name="sendMessage" visibility="private" method="_taY60Uv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_taZh4Ev9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_tabXEEv9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_taclMEv9EemeQN7IdMXlbw" name="sendInternalMessage" visibility="private" method="_taclMUv9EemeQN7IdMXlbw">
        <ownedParameter xmi:id="_tadMQEv9EemeQN7IdMXlbw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_tag2oEv9EemeQN7IdMXlbw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_tbEQQEv9EemeQN7IdMXlbw" name="initForPMD" visibility="private" method="_tbEQQUv9EemeQN7IdMXlbw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_tCOScEv9EemeQN7IdMXlbw" name="dbgProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_tCRVwEv9EemeQN7IdMXlbw" name="dbgProtocol">
        <interfaceRealization xmi:id="_tCjpoEv9EemeQN7IdMXlbw" client="_tCRVwEv9EemeQN7IdMXlbw" supplier="_tCVnMEv9EemeQN7IdMXlbw" contract="_tCVnMEv9EemeQN7IdMXlbw"/>
        <interfaceRealization xmi:id="_tCmF4Ev9EemeQN7IdMXlbw" client="_tCRVwEv9EemeQN7IdMXlbw" supplier="_tCXcYEv9EemeQN7IdMXlbw" contract="_tCXcYEv9EemeQN7IdMXlbw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_tCVnMEv9EemeQN7IdMXlbw" name="dbgProtocol">
        <ownedOperation xmi:id="_tCn7EEv9EemeQN7IdMXlbw" name="dbg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_tCW1UEv9EemeQN7IdMXlbw" name="dbgProtocol~"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_tCXcYEv9EemeQN7IdMXlbw" name="dbgProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_tCYqgEv9EemeQN7IdMXlbw" client="_tCRVwEv9EemeQN7IdMXlbw" supplier="_tCW1UEv9EemeQN7IdMXlbw"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_tCZ4oEv9EemeQN7IdMXlbw" client="_tCRVwEv9EemeQN7IdMXlbw" supplier="_tCXcYEv9EemeQN7IdMXlbw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_tCqXUEv9EemeQN7IdMXlbw" operation="_tCn7EEv9EemeQN7IdMXlbw"/>
    </packagedElement>
    <profileApplication xmi:id="_GN1XswqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.profile_1.0.0.201707181432.jar!/umlProfile/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtQqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtgqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtwqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XuAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.codegen.cpp.profile_1.0.0.201707181457.jar!/profiles/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_pS-gAAqqEeiwdpidSbDb2g" base_Class="_pOYT4AqqEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_WFuLgAqrEeiwdpidSbDb2g" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_DFbqEAquEeiwdpidSbDb2g" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_J0BpAAquEeiwdpidSbDb2g" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_ZtYuYAquEeiwdpidSbDb2g" base_Class="_ZtPkcAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_xFmyAAquEeiwdpidSbDb2g" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_5crxsAquEeiwdpidSbDb2g" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_EUS0cAqvEeiwdpidSbDb2g" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_4mUU8AqvEeiwdpidSbDb2g" base_Property="_4mJV0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_7I7boAqvEeiwdpidSbDb2g" base_Property="_7I3xQAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_-Pye4AqvEeiwdpidSbDb2g" base_Property="_-PuNcAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Dab-0AqwEeiwdpidSbDb2g" base_Property="_DaXtYAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_K2YzAAqwEeiwdpidSbDb2g" base_Property="_K2VIoAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_QJj80AqwEeiwdpidSbDb2g" base_Property="_QJhgkAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Tqpd8AqwEeiwdpidSbDb2g" base_Property="_TqnowAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_OX4uYAqxEeiwdpidSbDb2g" base_Package="_OX25MAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OX9m4AqxEeiwdpidSbDb2g" base_Interface="_OX7KoAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYEUkAqxEeiwdpidSbDb2g" base_Interface="_OYB4UAqxEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYJ0IAqxEeiwdpidSbDb2g" base_Interface="_OYH-8AqxEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_OYM3cAqxEeiwdpidSbDb2g" base_Collaboration="_OXynwAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_qHisUAqxEeiwdpidSbDb2g" base_Port="_qHclsAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_wsb8sAqxEeiwdpidSbDb2g" base_Port="_wsY5YAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_4erJ8AqxEeiwdpidSbDb2g" base_Connector="_4edHgAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_atO2cArdEeiwdpidSbDb2g" base_Package="_atLzIArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atSg0ArdEeiwdpidSbDb2g" base_Interface="_atQEkArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atXZUArdEeiwdpidSbDb2g" base_Interface="_atU9EArdEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_atc44ArdEeiwdpidSbDb2g" base_Interface="_atZ1kArdEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_atgjQArdEeiwdpidSbDb2g" base_Collaboration="_atHhsArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_y_qqIAreEeiwdpidSbDb2g" base_Port="_y_nm0AreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_2AUXsAreEeiwdpidSbDb2g" base_Port="_2ASigAreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_8aUmsAreEeiwdpidSbDb2g" base_Connector="_8aQ8UAreEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_VizuEArfEeiwdpidSbDb2g" base_Package="_Viyf8ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Vi1jQArfEeiwdpidSbDb2g" base_Collaboration="_Viyf8QrfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2KUArfEeiwdpidSbDb2g" base_Interface="_Viyf9ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2xYArfEeiwdpidSbDb2g" base_Interface="_Viyf_grfEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi3_gArfEeiwdpidSbDb2g" base_Interface="_ViygAQrfEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_mHFGwArhEeiwdpidSbDb2g" base_Port="_mHDRkArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ppHqIArhEeiwdpidSbDb2g" base_Port="_ppFN4ArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ws7rIArhEeiwdpidSbDb2g" base_Connector="_ws4AwArhEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_Lo7XgAriEeiwdpidSbDb2g" base_Package="_Lo6JYAriEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Lo7-kAriEeiwdpidSbDb2g" base_Collaboration="_Lo6JYQriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo8loAriEeiwdpidSbDb2g" base_Interface="_Lo6JZAriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsAriEeiwdpidSbDb2g" base_Interface="_Lo6JawriEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsQriEeiwdpidSbDb2g" base_Interface="_Lo6JcgriEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="__kRn8ArjEeiwdpidSbDb2g" base_Port="__kPLsArjEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_IaHnQArkEeiwdpidSbDb2g" base_Port="_IaFLAArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_OI_1oArkEeiwdpidSbDb2g" base_Connector="_OI7kMArkEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="__mKB0ArkEeiwdpidSbDb2g" base_Package="__mIMoArkEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="__mLP8ArkEeiwdpidSbDb2g" base_Collaboration="__mIMoQrkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mMeEArkEeiwdpidSbDb2g" base_Interface="__mIMpArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mNsMArkEeiwdpidSbDb2g" base_Interface="__mIMrgrkEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="__mO6UArkEeiwdpidSbDb2g" base_Interface="__mIMtQrkEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_uB_LAArlEeiwdpidSbDb2g" base_Port="_uB7goArlEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_xFE50ArrEeiwdpidSbDb2g" base_Port="_xE8-AArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_28O6cArrEeiwdpidSbDb2g" base_Port="_28NFQArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_7dT48ArrEeiwdpidSbDb2g" base_Port="_7dRcsArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_-61vwArrEeiwdpidSbDb2g" base_Connector="_-6yscArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ALA-MArsEeiwdpidSbDb2g" base_Connector="_AK-h8ArsEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_A6ZzwArsEeiwdpidSbDb2g" base_Connector="_A6WwcArsEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_EOtyQAruEeiwdpidSbDb2g" base_Package="_EOr9EAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOwOgAruEeiwdpidSbDb2g" base_Interface="_EOuZUAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOz44AruEeiwdpidSbDb2g" base_Interface="_EOyDsAruEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_EO4KUAruEeiwdpidSbDb2g" base_Interface="_EO2VIAruEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_EO7NoAruEeiwdpidSbDb2g" base_Collaboration="_EOqu8AruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_LLyxwArxEeiwdpidSbDb2g" base_Port="_LLt5QArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_L9vzIArxEeiwdpidSbDb2g" base_Port="_L9t98ArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_WMsTYQrxEeiwdpidSbDb2g" base_Connector="_WMp3IArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_-6JIAAryEeiwdpidSbDb2g" isWired="false" base_Port="_-6GrwAryEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ka3XYArzEeiwdpidSbDb2g" base_Port="_ka0UEArzEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_qGzmgQrzEeiwdpidSbDb2g" base_Connector="_qGxKQArzEeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gAPwwAr0EeiwdpidSbDb2g" base_Pseudostate="_gAMtcAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_gATbIAr0EeiwdpidSbDb2g" base_State="_gARl8Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_gAV3YAr0EeiwdpidSbDb2g" base_Region="_gAJqIAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_gAaI0Ar0EeiwdpidSbDb2g" base_StateMachine="_f9DS0Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_BIUk4Ar1EeiwdpidSbDb2g" base_Region="_BISvsAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CErfcAr1EeiwdpidSbDb2g" base_Pseudostate="_CEn1EAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_DTdmwAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_FtbHwAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUQg4Ar1EeiwdpidSbDb2g" base_Pseudostate="_hUNdkAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUUyUAr1EeiwdpidSbDb2g" base_Pseudostate="_hUSWEAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_pbDo4Ar1EeiwdpidSbDb2g" base_Pseudostate="_pbBzsAr1EeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_yQefgAr3EeiwdpidSbDb2g" isWired="false" base_Port="_yQcqUAr3EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hU-BcA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_hVdJoA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_hVipMA-pEeijktysABpT4g" base_Region="_hUncIA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_hWGp4A-pEeijktysABpT4g" base_StateMachine="_hUDbcA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OK1ngA-sEeijktysABpT4g" base_Pseudostate="_OKx9IA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_OK7uIA-sEeijktysABpT4g" base_State="_OK4DwA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_OK-xcA-sEeijktysABpT4g" base_Region="_OKuSwA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_OLDp8A-sEeijktysABpT4g" base_StateMachine="_OKhecA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_kB4zUA-sEeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_Xb2N8A-uEeijktysABpT4g" isWired="false" base_Port="_XbRmMA-uEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_U9XDMA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_U9b7sA-3EeijktysABpT4g" base_State="_U9Y4YA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_U9dw4A-3EeijktysABpT4g" base_Region="_U9SKsA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_U9ipYA-3EeijktysABpT4g" base_StateMachine="_U9KO4A-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_e549wA-3EeijktysABpT4g" base_State="_e52hgA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_O4nAkA-5EeijktysABpT4g" base_Region="_O4jWMA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_P93_gA-5EeijktysABpT4g" base_State="_P908MA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_R-Zs0A-5EeijktysABpT4g" base_State="_R-XQkA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Uez0EA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2izAA-6EeijktysABpT4g" base_Pseudostate="_P2fvsA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2oSkA-6EeijktysABpT4g" base_Pseudostate="_P2koMA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KalrMA-7EeijktysABpT4g" base_Pseudostate="_Kaj2AA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KarKwA-7EeijktysABpT4g" base_Region="_KahZwA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_Kau1IA-7EeijktysABpT4g" base_StateMachine="_Kab6MA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_bC7WcA-7EeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_xHS7gBE6EeiaCPCnhevAQQ" isWired="false" base_Port="_xB-9sBE6EeiaCPCnhevAQQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_5O9OkBKMEeiEEYKmuRZPIg" headerPreface="#include &lt;iostream>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_WFgwIAqrEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRealTime:RTPort xmi:id="_fwhSABNgEeiFubQUFHg6OA" isWired="false" base_Port="_fwJekBNgEeiFubQUFHg6OA"/>
  <UMLRealTime:RTPort xmi:id="_DarBUBNhEeiFubQUFHg6OA" isWired="false" base_Port="_Dan-ABNhEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gmdUIBNjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5USJsBNsEeiFubQUFHg6OA" base_Pseudostate="_5UPGYBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_5Ub6sBNsEeiFubQUFHg6OA" base_State="_5UY3YBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5Ue-ABNsEeiFubQUFHg6OA" base_Region="_5UK08BNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_5VCXoBNsEeiFubQUFHg6OA" base_StateMachine="_5TyacBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_m1DG4BNvEeiFubQUFHg6OA" base_State="_m0-1cBNvEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_qcuQ0BNyEeiFubQUFHg6OA" base_Region="_qcoxQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qc4o4BNyEeiFubQUFHg6OA" base_Pseudostate="_qc0-gBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qdJuoBNyEeiFubQUFHg6OA" base_Pseudostate="_qdGEQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_2N0gUBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_34xmQBNyEeiFubQUFHg6OA" base_State="_34ui8BNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GUGnYBNzEeiFubQUFHg6OA" base_Pseudostate="_GT9dcBNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_VhtaABNzEeiFubQUFHg6OA" base_Pseudostate="_VhqWsBNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5oRb0BRgEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_PmfKIBRiEeiFubQUFHg6OA" base_Pseudostate="_PmcG0BRiEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_GFHsIBRjEeiFubQUFHg6OA" base_Region="_GFF28BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GFQ2EBRjEeiFubQUFHg6OA" base_Pseudostate="_GFOZ0BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_G6EXIBRjEeiFubQUFHg6OA" base_State="_G6Ch8BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_HQJU0BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzA6ABUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzRYsBUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_2-fvYBUfEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_bAe6cBUhEeiYy9niOG6dTw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_huQNUBa-Eei-ccFu-OwT7Q" headerPreface="#include &lt;termios.h>&#xA;#include &lt;iostream>&#xA;#include &lt;unistd.h>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_xFgrYAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lMfYBeHEei-ccFu-OwT7Q" base_Pseudostate="_6lDVcBeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lcXABeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_smoRwBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tthoYBeSEei-ccFu-OwT7Q" base_Pseudostate="_ttfMIBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OMmZABgmEeiSBIpf1RqKYQ" base_Pseudostate="_OEEIEBgmEeiSBIpf1RqKYQ"/>
  <UMLRealTime:Capsule xmi:id="_tCAQAEv9EemeQN7IdMXlbw" base_Class="_s_DpsEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_tCNrYEv9EemeQN7IdMXlbw" base_StateMachine="_tCCFMEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:ProtocolContainer xmi:id="_tCQusEv9EemeQN7IdMXlbw" base_Package="_tCOScEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:Protocol xmi:id="_tCVAIEv9EemeQN7IdMXlbw" base_Collaboration="_tCRVwEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTMessageSet xmi:id="_tCcU4Ev9EemeQN7IdMXlbw" base_Interface="_tCVnMEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTMessageSet xmi:id="_tCgmUEv9EemeQN7IdMXlbw" base_Interface="_tCW1UEv9EemeQN7IdMXlbw" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_tCibgEv9EemeQN7IdMXlbw" base_Interface="_tCXcYEv9EemeQN7IdMXlbw" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_tC62AEv9EemeQN7IdMXlbw" base_Port="_tCsMgEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTPort xmi:id="_tF874Ev9EemeQN7IdMXlbw" isWired="false" base_Port="_tF54kEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTPort xmi:id="_tGMzgEv9EemeQN7IdMXlbw" isPublish="true" isWired="false" base_Port="_tGBNUEv9EemeQN7IdMXlbw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_tHChAEv9EemeQN7IdMXlbw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_Jz5GIAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_tHUN0Ev9EemeQN7IdMXlbw" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_tKA8gEv9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_tJrlUEv9EemeQN7IdMXlbw"/>
  <RTCppProperties:ParameterProperties xmi:id="_tK8woEv9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_tKzmsEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tMpZwEv9EemeQN7IdMXlbw" base_Pseudostate="_tMoLoEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tNDCYEv9EemeQN7IdMXlbw" base_Pseudostate="_tNBNMEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tQKn0Ev9EemeQN7IdMXlbw" base_Pseudostate="_tQA20Ev9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tQNEEEv9EemeQN7IdMXlbw" base_Pseudostate="_tQL18Ev9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tQPgUEv9EemeQN7IdMXlbw" base_Pseudostate="_tQO5QEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tQTKsEv9EemeQN7IdMXlbw" base_Pseudostate="_tQR8kEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTPort xmi:id="_tTTbYEv9EemeQN7IdMXlbw" isWired="false" base_Port="_tTRmMEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTPort xmi:id="_tTWesEv9EemeQN7IdMXlbw" isPublish="true" isWired="false" base_Port="_tTUpgEv9EemeQN7IdMXlbw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_tTawIEv9EemeQN7IdMXlbw" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_tTdzcEv9EemeQN7IdMXlbw" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_tT2N8Ev9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_tT0_0Ev9EemeQN7IdMXlbw"/>
  <RTCppProperties:ParameterProperties xmi:id="_tT7GcEv9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_tT54UEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tUZnkEv9EemeQN7IdMXlbw" base_Pseudostate="_tUYZcEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTState xmi:id="_tUcD0Ev9EemeQN7IdMXlbw" base_State="_tUaOoEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTPort xmi:id="_tU9oQEv9EemeQN7IdMXlbw" isWired="false" base_Port="_tU6k8Ev9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTPort xmi:id="_tVAEgEv9EemeQN7IdMXlbw" isPublish="true" isWired="false" base_Port="_tU-PUEv9EemeQN7IdMXlbw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_tVE9AEv9EemeQN7IdMXlbw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_EUMt0AqvEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_tVHZQEv9EemeQN7IdMXlbw" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_tVZtIEv9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_tVYfAEv9EemeQN7IdMXlbw"/>
  <RTCppProperties:ParameterProperties xmi:id="_tVd-kEv9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_tVcwcEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tV0j4Ev9EemeQN7IdMXlbw" base_Pseudostate="_tVz80Ev9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTState xmi:id="_tV2ZEEv9EemeQN7IdMXlbw" base_State="_tV1K8Ev9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tXfX0Ev9EemeQN7IdMXlbw" base_Pseudostate="_tXdioEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tXkQUEv9EemeQN7IdMXlbw" base_Pseudostate="_tXjpQEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tXlecEv9EemeQN7IdMXlbw" base_Pseudostate="_tXk3YEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTState xmi:id="_tXtaQEv9EemeQN7IdMXlbw" base_State="_tXmFgEv9EemeQN7IdMXlbw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_tZkbcEv9EemeQN7IdMXlbw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_s_DpsEv9EemeQN7IdMXlbw" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_tZmQoEv9EemeQN7IdMXlbw" base_Class="_s_DpsEv9EemeQN7IdMXlbw"/>
  <RTCppProperties:ParameterProperties xmi:id="_taawAEv9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_taZh4Ev9EemeQN7IdMXlbw"/>
  <RTCppProperties:ParameterProperties xmi:id="_tagPkEv9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_tadMQEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTRegion xmi:id="_tba1kEv9EemeQN7IdMXlbw" base_Region="_tbZncEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tbbcoEv9EemeQN7IdMXlbw" base_Pseudostate="_tba1kUv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTState xmi:id="_tbkmkEv9EemeQN7IdMXlbw" base_State="_tbcqwEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tbo4AEv9EemeQN7IdMXlbw" base_Pseudostate="_tbnp4Ev9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTPort xmi:id="_tcWCoEv9EemeQN7IdMXlbw" isWired="false" base_Port="_tcU0gEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTPort xmi:id="_tcZF8Ev9EemeQN7IdMXlbw" isPublish="true" isWired="false" base_Port="_tcXQwEv9EemeQN7IdMXlbw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_tcdXYEv9EemeQN7IdMXlbw" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_tcgasEv9EemeQN7IdMXlbw" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_tc6DUEv9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_tc41MEv9EemeQN7IdMXlbw"/>
  <RTCppProperties:ParameterProperties xmi:id="_tc-70Ev9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_tc9tsEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tdZykEv9EemeQN7IdMXlbw" base_Pseudostate="_tdVhIEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTState xmi:id="_tdbnwEv9EemeQN7IdMXlbw" base_State="_tdbAsEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tddc8Ev9EemeQN7IdMXlbw" base_Pseudostate="_tdcO0Ev9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTPort xmi:id="_teIyYEv9EemeQN7IdMXlbw" isWired="false" base_Port="_teG9MEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTPort xmi:id="_teMcwEv9EemeQN7IdMXlbw" isPublish="true" isWired="false" base_Port="_teKnkEv9EemeQN7IdMXlbw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_teWNwEv9EemeQN7IdMXlbw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_DFR5EAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_teYqAEv9EemeQN7IdMXlbw" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_te2kEEv9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_te1V8Ev9EemeQN7IdMXlbw"/>
  <RTCppProperties:ParameterProperties xmi:id="_te6OcEv9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_te5AUEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tfut0Ev9EemeQN7IdMXlbw" base_Pseudostate="_tfs4oEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTPort xmi:id="_tgW_8Ev9EemeQN7IdMXlbw" isWired="false" base_Port="_tgTVkEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:RTPort xmi:id="_tgbRYEv9EemeQN7IdMXlbw" isPublish="true" isWired="false" base_Port="_tgY1IEv9EemeQN7IdMXlbw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_tguzYEv9EemeQN7IdMXlbw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_5cgykAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_tgx2sEv9EemeQN7IdMXlbw" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_tjmhMEv9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_tjlTEEv9EemeQN7IdMXlbw"/>
  <RTCppProperties:ParameterProperties xmi:id="_tjrZsEv9EemeQN7IdMXlbw" type="pmd::Message" base_Parameter="_tjqLkEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tlc7UEv9EemeQN7IdMXlbw" base_Pseudostate="_tlcUQEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTState xmi:id="_tlewgEv9EemeQN7IdMXlbw" base_State="_tleJcEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tnfisEv9EemeQN7IdMXlbw" base_Pseudostate="_tne7oEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tnh-8Ev9EemeQN7IdMXlbw" base_Pseudostate="_tngw0Ev9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tnkbMEv9EemeQN7IdMXlbw" base_Pseudostate="_tnjNEEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tn81sEv9EemeQN7IdMXlbw" base_Pseudostate="_tn8OoEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tsCrgEv9EemeQN7IdMXlbw" base_Pseudostate="_tsCEcEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tsGV4Ev9EemeQN7IdMXlbw" base_Pseudostate="_tsD5oEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tsIyIEv9EemeQN7IdMXlbw" base_Pseudostate="_tsHkAEv9EemeQN7IdMXlbw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tsLOYEv9EemeQN7IdMXlbw" base_Pseudostate="_tsKnUEv9EemeQN7IdMXlbw"/>
  <UMLRealTime:CapsulePart xmi:id="_tvqAMEv9EemeQN7IdMXlbw" base_Property="_tvoyEEv9EemeQN7IdMXlbw"/>
</xmi:XMI>
