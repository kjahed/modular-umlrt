<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_GN1XsAqpEeiwdpidSbDb2g" name="DigitalWatch">
    <eAnnotations xmi:id="_GN1XsQqpEeiwdpidSbDb2g" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_GN1XsgqpEeiwdpidSbDb2g" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_r_6AUAqqEeiwdpidSbDb2g" source="UMLRT_Default_top">
      <details xmi:id="_r_6nYAqqEeiwdpidSbDb2g" key="top_name" value="DigitalWatch"/>
    </eAnnotations>
    <eAnnotations xmi:id="_TzoSUEwZEemFQdZUqy-TBw" source="dummy"/>
    <eAnnotations xmi:id="_YGRbUExdEem0dKgVvbeiGg" source="dummy"/>
    <eAnnotations xmi:id="_WN1L0EyFEemb7uhXLsclUA" source="dummy"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_pOYT4AqqEeiwdpidSbDb2g" name="DigitalWatch" isActive="true">
      <ownedAttribute xmi:id="_4mJV0AqvEeiwdpidSbDb2g" name="displayGateKeeper" visibility="protected" type="_WFgwIAqrEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_7I3xQAqvEeiwdpidSbDb2g" name="alarmsCapsule" visibility="protected" type="_DFR5EAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_-PuNcAqvEeiwdpidSbDb2g" name="stopWatchController" visibility="protected" type="_Jz5GIAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_DaXtYAqwEeiwdpidSbDb2g" name="display" visibility="protected" type="_ZtPkcAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_K2VIoAqwEeiwdpidSbDb2g" name="buttonsReader" visibility="protected" type="_xFgrYAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_QJhgkAqwEeiwdpidSbDb2g" name="watchCore" visibility="protected" type="_5cgykAquEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_TqnowAqwEeiwdpidSbDb2g" name="timeTracker" visibility="protected" type="_EUMt0AqvEeiwdpidSbDb2g" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_yraIgEv9EemhOoNL4S6HQw" name="dbgAgent" type="_x2D04Ev9EemhOoNL4S6HQw">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yrbWoEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_yrbWoUv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedConnector xmi:id="_4edHgAqxEeiwdpidSbDb2g" name="RTConnector1">
        <end xmi:id="_4eoGoAqxEeiwdpidSbDb2g" partWithPort="_K2VIoAqwEeiwdpidSbDb2g" role="_qHclsAqxEeiwdpidSbDb2g"/>
        <end xmi:id="_4epUwAqxEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_wsY5YAqxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_8aQ8UAreEeiwdpidSbDb2g" name="RTConnector2">
        <end xmi:id="_8aT_oAreEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_2ASigAreEeiwdpidSbDb2g"/>
        <end xmi:id="_8aT_oQreEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_y_nm0AreEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_ws4AwArhEeiwdpidSbDb2g" name="RTConnector3">
        <end xmi:id="_ws6dAArhEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_mHDRkArhEeiwdpidSbDb2g"/>
        <end xmi:id="_ws7EEArhEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ppFN4ArhEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_OI7kMArkEeiwdpidSbDb2g" name="RTConnector4">
        <end xmi:id="_OI-ngArkEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_IaFLAArkEeiwdpidSbDb2g"/>
        <end xmi:id="_OI_OkArkEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="__kPLsArjEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_-6yscArrEeiwdpidSbDb2g" name="RTConnector5">
        <end xmi:id="_-61IsArrEeiwdpidSbDb2g" partWithPort="_TqnowAqwEeiwdpidSbDb2g" role="_7dRcsArrEeiwdpidSbDb2g"/>
        <end xmi:id="_-61IsQrrEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_AK-h8ArsEeiwdpidSbDb2g" name="RTConnector6">
        <end xmi:id="_ALAXIArsEeiwdpidSbDb2g" partWithPort="_7I3xQAqvEeiwdpidSbDb2g" role="_xE8-AArrEeiwdpidSbDb2g"/>
        <end xmi:id="_ALAXIQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_A6WwcArsEeiwdpidSbDb2g" name="RTConnector7">
        <end xmi:id="_A6ZMsArsEeiwdpidSbDb2g" partWithPort="_-PuNcAqvEeiwdpidSbDb2g" role="_28NFQArrEeiwdpidSbDb2g"/>
        <end xmi:id="_A6ZMsQrsEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_WMp3IArxEeiwdpidSbDb2g" name="RTConnector8">
        <end xmi:id="_WMrsUArxEeiwdpidSbDb2g" partWithPort="_DaXtYAqwEeiwdpidSbDb2g" role="_LLt5QArxEeiwdpidSbDb2g"/>
        <end xmi:id="_WMsTYArxEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_L9t98ArxEeiwdpidSbDb2g"/>
      </ownedConnector>
      <ownedConnector xmi:id="_qGxKQArzEeiwdpidSbDb2g" name="RTConnector9">
        <end xmi:id="_qGy_cArzEeiwdpidSbDb2g" partWithPort="_QJhgkAqwEeiwdpidSbDb2g" role="_ka0UEArzEeiwdpidSbDb2g"/>
        <end xmi:id="_qGzmgArzEeiwdpidSbDb2g" partWithPort="_4mJV0AqvEeiwdpidSbDb2g" role="_uB7goArlEeiwdpidSbDb2g"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_WFgwIAqrEeiwdpidSbDb2g" name="DisplayGateKeeper" classifierBehavior="_hUDbcA-pEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uB7goArlEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yMSoQArlEeiwdpidSbDb2g" value="4"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_yNBoEArlEeiwdpidSbDb2g" value="4"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_L9t98ArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ycqh4Ev9EemhOoNL4S6HQw" name="dbgPortForDisplayGateKeeper" visibility="protected" type="_x52IsEv9EemhOoNL4S6HQw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ycrwAEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_ycs-IEv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_hUDbcA-pEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_hUncIA-pEeijktysABpT4g" name="Region">
          <transition xmi:id="_yexasEv9EemhOoNL4S6HQw" name="Trans__Init__State__185186" source="_yeuXYEv9EemhOoNL4S6HQw" target="_yeixMEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yfkr8Ev9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__185&quot;,&quot;New__State__184&quot;,&quot;To__New__State__184__192&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__185&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_ye0eAEv9EemhOoNL4S6HQw" name="From__New__State__184__187" source="_yer7IUv9EemhOoNL4S6HQw" target="_yeixMEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yfiPsEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__184&quot;,&quot;New__State__184&quot;,&quot;To__New__State__184__192&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__184&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_ye2TMEv9EemhOoNL4S6HQw" name="PME_Trig188" event="_x6cloEv9EemhOoNL4S6HQw" port="_ycqh4Ev9EemhOoNL4S6HQw"/>
            <trigger xmi:id="_ye5WgEv9EemhOoNL4S6HQw" name="PME_Trig189" event="__mIMuQrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
            <trigger xmi:id="_ye-2EEv9EemhOoNL4S6HQw" name="PME_Trig190" event="__mIMtwrkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yfCgcEv9EemhOoNL4S6HQw" name="PME_Trig191" event="__mIMuArkEeiwdpidSbDb2g" port="_uB7goArlEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_yfGK0Ev9EemhOoNL4S6HQw" name="To__New__State__184__192" guard="_yflTAUv9EemhOoNL4S6HQw" source="_yeixMEv9EemhOoNL4S6HQw" target="_yer7IUv9EemhOoNL4S6HQw">
            <ownedRule xmi:id="_yflTAUv9EemhOoNL4S6HQw" name="PME_checkDecesion193">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_yflTAEv9EemhOoNL4S6HQw" name="PME_checkDecesion193">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__184__192&quot;,&quot;New__State__184&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_yeixMEv9EemhOoNL4S6HQw" name="DecesionPoint__183" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_yer7IUv9EemhOoNL4S6HQw" name="New__State__184"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_yeuXYEv9EemhOoNL4S6HQw" name="Init__State__185"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ydF_sUv9EemhOoNL4S6HQw" name="loadHeap" specification="_ydF_sEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ydIb8Uv9EemhOoNL4S6HQw" name="unLoadHeap" specification="_ydIb8Ev9EemhOoNL4S6HQw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ydoyQUv9EemhOoNL4S6HQw" name="sendMessage" specification="_ydoyQEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    displayGateKeeperP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayP&quot;) {
  if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ydtDsUv9EemhOoNL4S6HQw" name="sendInternalMessage" specification="_ydtDsEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yecqkUv9EemhOoNL4S6HQw" name="initForPMD" specification="_yecqkEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_DisplayGateKeeper::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForDisplayGateKeeper&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_ydF_sEv9EemhOoNL4S6HQw" name="loadHeap" visibility="private" method="_ydF_sUv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_ydIb8Ev9EemhOoNL4S6HQw" name="unLoadHeap" visibility="private" method="_ydIb8Uv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_ydoyQEv9EemhOoNL4S6HQw" name="sendMessage" visibility="private" method="_ydoyQUv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_ydqAYEv9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ydqncEv9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ydtDsEv9EemhOoNL4S6HQw" name="sendInternalMessage" visibility="private" method="_ydtDsUv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_ydu44Ev9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ydvf8Ev9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_yecqkEv9EemhOoNL4S6HQw" name="initForPMD" visibility="private" method="_yecqkUv9EemhOoNL4S6HQw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_DFR5EAquEeiwdpidSbDb2g" name="AlarmsCapsule" classifierBehavior="_OKhecA-sEeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_y_nm0AreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xE8-AArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_XbRmMA-uEeijktysABpT4g" name="alarmTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_nHqHMBgMEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_3pL_0BgMEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_v-uwIBi9EeiSBIpf1RqKYQ" name="alarmTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yfpkcEv9EemhOoNL4S6HQw" name="dbgPortForAlarmsCapsule" visibility="protected" type="_x52IsEv9EemhOoNL4S6HQw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yfqLgEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_yfqLgUv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_OKhecA-sEeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_OKuSwA-sEeijktysABpT4g" name="Region">
          <transition xmi:id="_QJSFoA-2EeijktysABpT4g" name="NoAlarm__NoAlarm__194" source="_OK4DwA-sEeijktysABpT4g" target="_OK4DwA-sEeijktysABpT4g">
            <trigger xmi:id="_X9BuwA-2EeijktysABpT4g" event="_0IHVYArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_yiutoEv9EemhOoNL4S6HQw" name="Trans__Init__State__196197" source="_yisRYEv9EemhOoNL4S6HQw" target="_yiqcMEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yjUjgEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__196&quot;,&quot;NoAlarm&quot;,&quot;To__NoAlarm__205&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__196&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_yixw8Ev9EemhOoNL4S6HQw" name="From__NoAlarm__198" source="_OK4DwA-sEeijktysABpT4g" target="_yiqcMEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yjWYsEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;NoAlarm&quot;,&quot;NoAlarm&quot;,&quot;To__NoAlarm__205&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;NoAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_yi00QEv9EemhOoNL4S6HQw" name="PME_Trig199" event="_x6cloEv9EemhOoNL4S6HQw" port="_yfpkcEv9EemhOoNL4S6HQw"/>
            <trigger xmi:id="_yi33kEv9EemhOoNL4S6HQw" name="PME_Trig200" event="_suGa4ArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yi8wEEv9EemhOoNL4S6HQw" name="PME_Trig201" event="_dfgJwArdEeiwdpidSbDb2g" port="_y_nm0AreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yi_zYEv9EemhOoNL4S6HQw" name="PME_Trig202" port="_XbRmMA-uEeijktysABpT4g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_yjCPoEv9EemhOoNL4S6HQw" name="PME_Trig203" event="__mIMuwrkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yjI9UEv9EemhOoNL4S6HQw" name="PME_Trig204" event="__mIMvArkEeiwdpidSbDb2g" port="_xE8-AArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_yjNOwEv9EemhOoNL4S6HQw" name="To__NoAlarm__205" guard="_yjYN4Uv9EemhOoNL4S6HQw" source="_yiqcMEv9EemhOoNL4S6HQw" target="_OK4DwA-sEeijktysABpT4g">
            <ownedRule xmi:id="_yjYN4Uv9EemhOoNL4S6HQw" name="PME_checkDecesion206">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_yjYN4Ev9EemhOoNL4S6HQw" name="PME_checkDecesion206">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__NoAlarm__205&quot;,&quot;NoAlarm&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:State" xmi:id="_OK4DwA-sEeijktysABpT4g" name="NoAlarm"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_yiqcMEv9EemhOoNL4S6HQw" name="DecesionPoint__195" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_yisRYEv9EemhOoNL4S6HQw" name="Init__State__196"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ygEbMUv9EemhOoNL4S6HQw" name="loadHeap" specification="_ygEbMEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ygGQYUv9EemhOoNL4S6HQw" name="unLoadHeap" specification="_ygGQYEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yhO40Uv9EemhOoNL4S6HQw" name="sendMessage" specification="_yhO40Ev9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    alarmP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    alarmP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yhdiUUv9EemhOoNL4S6HQw" name="sendInternalMessage" specification="_yhdiUEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yihSQUv9EemhOoNL4S6HQw" name="initForPMD" specification="_yihSQEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_AlarmsCapsule::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForAlarmsCapsule&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_ygEbMEv9EemhOoNL4S6HQw" name="loadHeap" visibility="private" method="_ygEbMUv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_ygGQYEv9EemhOoNL4S6HQw" name="unLoadHeap" visibility="private" method="_ygGQYUv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_yhO40Ev9EemhOoNL4S6HQw" name="sendMessage" visibility="private" method="_yhO40Uv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_yhQuAEv9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_yhZ38Ev9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_yhdiUEv9EemhOoNL4S6HQw" name="sendInternalMessage" visibility="private" method="_yhdiUUv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_yhfXgEv9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_yhhzwEv9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_yihSQEv9EemhOoNL4S6HQw" name="initForPMD" visibility="private" method="_yihSQUv9EemhOoNL4S6HQw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_Jz5GIAquEeiwdpidSbDb2g" name="StopWatchCore" classifierBehavior="_U9KO4A-3EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_mHDRkArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_28NFQArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_fwJekBNgEeiFubQUFHg6OA" name="showCounterTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Dan-ABNhEeiFubQUFHg6OA" name="timeCountingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2KcBNhEeiFubQUFHg6OA" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_OM2xgBNhEeiFubQUFHg6OA" name="stopWatchResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_OM2xgRNhEeiFubQUFHg6OA" value="200"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_XYKbwBNnEeiFubQUFHg6OA" name="timeCountingTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_dK4oUBNnEeiFubQUFHg6OA" name="showCounterTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yFpwEEv9EemhOoNL4S6HQw" name="dbgPortForStopWatchCore" visibility="protected" type="_x52IsEv9EemhOoNL4S6HQw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yFqXIEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_yFrlQEv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_U9KO4A-3EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_U9SKsA-3EeijktysABpT4g" name="Region">
          <transition xmi:id="_6lezQBeHEei-ccFu-OwT7Q" name="reset" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_e52hgA-3EeijktysABpT4g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_PYz4QBeIEei-ccFu-OwT7Q">
              <language>C++</language>
              <body>milliTime=0;</body>
            </effect>
            <trigger xmi:id="_Mb5bMBeIEei-ccFu-OwT7Q" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_yI4DMEv9EemhOoNL4S6HQw" name="Trans__Init__State__4041" source="_yIoyoEv9EemhOoNL4S6HQw" target="_yIlvUEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yMKAsEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__40&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__56&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__40&quot;,&quot;New__State__39&quot;,&quot;To__New__State__39__53&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__40&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_yJB0MEv9EemhOoNL4S6HQw" name="From__New__State__39__42" source="_yInkgEv9EemhOoNL4S6HQw" target="_yIlvUEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yMCr8Ev9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__39&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__56&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__39&quot;,&quot;New__State__39&quot;,&quot;To__New__State__39__53&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__39&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_yJGssEv9EemhOoNL4S6HQw" name="PME_Trig43" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yJKXEEv9EemhOoNL4S6HQw" name="PME_Trig44" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yJMMQEv9EemhOoNL4S6HQw" name="PME_Trig45" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yJPPkEv9EemhOoNL4S6HQw" name="PME_Trig46" port="_Dan-ABNhEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_yJcD4Ev9EemhOoNL4S6HQw" name="PME_Trig47" event="_x6cloEv9EemhOoNL4S6HQw" port="_yFpwEEv9EemhOoNL4S6HQw"/>
            <trigger xmi:id="_yJjYoEv9EemhOoNL4S6HQw" name="PME_Trig48" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yJnDAEv9EemhOoNL4S6HQw" name="PME_Trig49" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yJrUcEv9EemhOoNL4S6HQw" name="PME_Trig50" port="_fwJekBNgEeiFubQUFHg6OA">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_yJtwsEv9EemhOoNL4S6HQw" name="PME_Trig51" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yJxbEEv9EemhOoNL4S6HQw" name="PME_Trig52" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_yJ3hsEv9EemhOoNL4S6HQw" name="To__New__State__39__53" guard="_yMc7oUv9EemhOoNL4S6HQw" source="_yIlvUEv9EemhOoNL4S6HQw" target="_yInkgEv9EemhOoNL4S6HQw">
            <ownedRule xmi:id="_yMc7oUv9EemhOoNL4S6HQw" name="PME_checkDecesion82">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_yMc7oEv9EemhOoNL4S6HQw" name="PME_checkDecesion82">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__39__53&quot;,&quot;New__State__39&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_yKAroEv9EemhOoNL4S6HQw" name="Trans__Pseudo3754" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_yIlvUEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yL_ooEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__56&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;New__State__39&quot;,&quot;To__New__State__39__53&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_yKDH4Uv9EemhOoNL4S6HQw" name="To__Substates__StopWatchMode__56" guard="_yMcUkUv9EemhOoNL4S6HQw" source="_yIlvUEv9EemhOoNL4S6HQw" target="_yKB5wEv9EemhOoNL4S6HQw">
            <ownedRule xmi:id="_yMcUkUv9EemhOoNL4S6HQw" name="PME_checkDecesion81">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_yMcUkEv9EemhOoNL4S6HQw" name="PME_checkDecesion81">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__StopWatchMode__56&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_yKGLMEv9EemhOoNL4S6HQw" name="From__Substates__StopWatchMode__58" source="_yKEWAEv9EemhOoNL4S6HQw" target="_yIlvUEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yMGWUEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Substates__StopWatchMode__56&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;New__State__39&quot;,&quot;To__New__State__39__53&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:State" xmi:id="_e52hgA-3EeijktysABpT4g" name="StopWatchMode">
            <connectionPoint xmi:id="_P2koMA-6EeijktysABpT4g" name="Pseudo36" kind="entryPoint"/>
            <connectionPoint xmi:id="_gmZCsBNjEeiFubQUFHg6OA" name="Pseudo35" kind="entryPoint"/>
            <connectionPoint xmi:id="_6lDVcBeHEei-ccFu-OwT7Q" name="Pseudo37" kind="exitPoint"/>
            <connectionPoint xmi:id="_yKB5wEv9EemhOoNL4S6HQw" name="From__Parent__55" kind="entryPoint"/>
            <connectionPoint xmi:id="_yKEWAEv9EemhOoNL4S6HQw" name="To__Parent__57" kind="exitPoint"/>
            <region xmi:id="_O4jWMA-5EeijktysABpT4g" name="Region1">
              <transition xmi:id="_yKP8MEv9EemhOoNL4S6HQw" name="Trans__Init__State__6061" source="_yKMR0Ev9EemhOoNL4S6HQw" target="_yKJ1kEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yLqRcEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__60&quot;,&quot;Pause&quot;,&quot;To__Pause__76&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__60&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__78&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__60&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yKRKUEv9EemhOoNL4S6HQw" name="Trans__Pseudo3562" source="_gmZCsBNjEeiFubQUFHg6OA" target="_yKJ1kEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yLc2EEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__76&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__78&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yKU0sEv9EemhOoNL4S6HQw" name="Trans__Pseudo3663" source="_P2koMA-6EeijktysABpT4g" target="_yKJ1kEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yLwYEEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__76&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__78&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yKX4AEv9EemhOoNL4S6HQw" name="Trans__Pseudo3764" source="_6lDVcBeHEei-ccFu-OwT7Q" target="_yKJ1kEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yLkx4Ev9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__76&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__78&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yKd-oEv9EemhOoNL4S6HQw" name="From__Pause__65" source="_P908MA-5EeijktysABpT4g" target="_yKJ1kEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yLf5YEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;Pause&quot;,&quot;To__Pause__76&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pause&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__78&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pause&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_yKhpAEv9EemhOoNL4S6HQw" name="PME_Trig66" event="_ViygBArfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yKlTYEv9EemhOoNL4S6HQw" name="PME_Trig67" event="_mM5QUArgEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yKraAEv9EemhOoNL4S6HQw" name="PME_Trig68" event="_ViygBgrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yK0j8Ev9EemhOoNL4S6HQw" name="PME_Trig69" port="_Dan-ABNhEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_yK41YEv9EemhOoNL4S6HQw" name="PME_Trig70" event="_x6cloEv9EemhOoNL4S6HQw" port="_yFpwEEv9EemhOoNL4S6HQw"/>
                <trigger xmi:id="_yK7RoEv9EemhOoNL4S6HQw" name="PME_Trig71" event="_ViygAwrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yK-8AEv9EemhOoNL4S6HQw" name="PME_Trig72" event="_ViygBQrfEeiwdpidSbDb2g" port="_mHDRkArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yLG30Ev9EemhOoNL4S6HQw" name="PME_Trig73" port="_fwJekBNgEeiFubQUFHg6OA">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_yLJUEEv9EemhOoNL4S6HQw" name="PME_Trig74" event="__mIMuwrkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yLNlgEv9EemhOoNL4S6HQw" name="PME_Trig75" event="__mIMvArkEeiwdpidSbDb2g" port="_28NFQArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_yLTFEEv9EemhOoNL4S6HQw" name="To__Pause__76" guard="_yL5iAUv9EemhOoNL4S6HQw" source="_yKJ1kEv9EemhOoNL4S6HQw" target="_P908MA-5EeijktysABpT4g">
                <ownedRule xmi:id="_yL5iAUv9EemhOoNL4S6HQw" name="PME_checkDecesion79">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_yL5iAEv9EemhOoNL4S6HQw" name="PME_checkDecesion79">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Pause__76&quot;,&quot;Pause&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_yLXWgEv9EemhOoNL4S6HQw" name="From__Parnet__StateMachine__77" source="_yKB5wEv9EemhOoNL4S6HQw" target="_yKJ1kEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yL2esEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;Pause&quot;,&quot;To__Pause__76&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;StopWatchMode&quot;,&quot;StopWatchMode&quot;,&quot;To__Parent__StateMachine__78&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;StopWatchMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yLX9kEv9EemhOoNL4S6HQw" name="To__Parent__StateMachine__78" guard="_yL7XMUv9EemhOoNL4S6HQw" source="_yKJ1kEv9EemhOoNL4S6HQw" target="_yKEWAEv9EemhOoNL4S6HQw">
                <ownedRule xmi:id="_yL7XMUv9EemhOoNL4S6HQw" name="PME_checkDecesion80">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_yL7XMEv9EemhOoNL4S6HQw" name="PME_checkDecesion80">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__78&quot;,&quot;StopWatchMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_P908MA-5EeijktysABpT4g" name="Pause"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_yKJ1kEv9EemhOoNL4S6HQw" name="DecesionPoint__59" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_yKMR0Ev9EemhOoNL4S6HQw" name="Init__State__60"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_yIlvUEv9EemhOoNL4S6HQw" name="DecesionPoint__38" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_yInkgEv9EemhOoNL4S6HQw" name="New__State__39"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_yIoyoEv9EemhOoNL4S6HQw" name="Init__State__40"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yG00wUv9EemhOoNL4S6HQw" name="loadHeap" specification="_yG00wEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.stopWatchResolution&quot;,this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yHBCAUv9EemhOoNL4S6HQw" name="unLoadHeap" specification="_yHBCAEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.stopWatchResolution&quot;,&amp;this->stopWatchResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yHvawEv9EemhOoNL4S6HQw" name="sendMessage" specification="_yHuzsEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    stopWatchP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yHzsMUv9EemhOoNL4S6HQw" name="sendInternalMessage" specification="_yHzsMEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yIdzgUv9EemhOoNL4S6HQw" name="initForPMD" specification="_yIdzgEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_StopWatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_StopWatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;showCounterTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;timeCountingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForStopWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_yG00wEv9EemhOoNL4S6HQw" name="loadHeap" visibility="private" method="_yG00wUv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_yHBCAEv9EemhOoNL4S6HQw" name="unLoadHeap" visibility="private" method="_yHBCAUv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_yHuzsEv9EemhOoNL4S6HQw" name="sendMessage" visibility="private" method="_yHvawEv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_yHxP8Ev9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_yHx3AEv9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_yHzsMEv9EemhOoNL4S6HQw" name="sendInternalMessage" visibility="private" method="_yHzsMUv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_yH1hYEv9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_yH2vgEv9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_yIdzgEv9EemhOoNL4S6HQw" name="initForPMD" visibility="private" method="_yIdzgUv9EemhOoNL4S6HQw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_ZtPkcAquEeiwdpidSbDb2g" name="Display" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_LLt5QArxEeiwdpidSbDb2g" name="displayP" visibility="public" type="_EOqu8AruEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_xFgrYAquEeiwdpidSbDb2g" name="ButtonsReader" classifierBehavior="_Kab6MA-7EeijktysABpT4g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_qHclsAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xB-9sBE6EeiaCPCnhevAQQ" name="readKeyTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yn7WsEv9EemhOoNL4S6HQw" name="dbgPortForButtonsReader" visibility="protected" type="_x52IsEv9EemhOoNL4S6HQw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yn79wEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_yn79wUv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_Kab6MA-7EeijktysABpT4g" name="StateMachine" isReentrant="false">
        <region xmi:id="_KahZwA-7EeijktysABpT4g" name="Region">
          <transition xmi:id="_yqsW0Ev9EemhOoNL4S6HQw" name="Trans__Pseudo215218" source="_Kaj2AA-7EeijktysABpT4g" target="_yqoscEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yrJCwEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo215&quot;,&quot;New__State__217&quot;,&quot;To__New__State__217__223&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo215&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_yqzEgEv9EemhOoNL4S6HQw" name="From__New__State__217__219" source="_yqp6kEv9EemhOoNL4S6HQw" target="_yqoscEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yrNUMEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__217&quot;,&quot;New__State__217&quot;,&quot;To__New__State__217__223&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__217&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_yq05sEv9EemhOoNL4S6HQw" name="PME_Trig220" event="_-anYcBFKEeibZqndpu8erg" port="_qHclsAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yq3V8Ev9EemhOoNL4S6HQw" name="PME_Trig221" event="_x6cloEv9EemhOoNL4S6HQw" port="_yn7WsEv9EemhOoNL4S6HQw"/>
            <trigger xmi:id="_yq-DoEv9EemhOoNL4S6HQw" name="PME_Trig222" port="_xB-9sBE6EeiaCPCnhevAQQ">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_yrAf4Ev9EemhOoNL4S6HQw" name="To__New__State__217__223" guard="_yrQXgUv9EemhOoNL4S6HQw" source="_yqoscEv9EemhOoNL4S6HQw" target="_yqp6kEv9EemhOoNL4S6HQw">
            <ownedRule xmi:id="_yrQXgUv9EemhOoNL4S6HQw" name="PME_checkDecesion224">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_yrQXgEv9EemhOoNL4S6HQw" name="PME_checkDecesion224">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__217__223&quot;,&quot;New__State__217&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Kaj2AA-7EeijktysABpT4g" name="Pseudo215"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_yqoscEv9EemhOoNL4S6HQw" name="DecesionPoint__216" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_yqp6kEv9EemhOoNL4S6HQw" name="New__State__217"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yoW0gUv9EemhOoNL4S6HQw" name="loadHeap" specification="_yoW0gEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yoYpsUv9EemhOoNL4S6HQw" name="unLoadHeap" specification="_yoYpsEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yok28Ev9EemhOoNL4S6HQw" name="sendMessage" specification="_yokP4Ev9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ButtonHold&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonHold( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonPressed&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonPressed().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ButtonReleased&quot;) {
   if(message.payload.size()==1){
    buttonsP.ButtonReleased( boost::any_cast&lt;int>(message.payload[&quot;ButtonID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ReadIntResult&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadIntResult( boost::any_cast&lt;int>(message.payload[&quot;InputInt&quot;])).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yphSIUv9EemhOoNL4S6HQw" name="sendInternalMessage" specification="_yphSIEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yqil0Uv9EemhOoNL4S6HQw" name="initForPMD" specification="_yqil0Ev9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_ButtonsReader::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_ButtonsReader::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;readKeyTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForButtonsReader&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_yoW0gEv9EemhOoNL4S6HQw" name="loadHeap" visibility="private" method="_yoW0gUv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_yoYpsEv9EemhOoNL4S6HQw" name="unLoadHeap" visibility="private" method="_yoYpsUv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_yokP4Ev9EemhOoNL4S6HQw" name="sendMessage" visibility="private" method="_yok28Ev9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_yomFEEv9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_yomsIEv9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_yphSIEv9EemhOoNL4S6HQw" name="sendInternalMessage" visibility="private" method="_yphSIUv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_ypjHUEv9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ypk8gEv9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_yqil0Ev9EemhOoNL4S6HQw" name="initForPMD" visibility="private" method="_yqil0Uv9EemhOoNL4S6HQw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_5cgykAquEeiwdpidSbDb2g" name="WatchCore" classifierBehavior="_5TyacBNsEeiFubQUFHg6OA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_wsY5YAqxEeiwdpidSbDb2g" name="buttonsP" visibility="public" type="_OXynwAqxEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_2ASigAreEeiwdpidSbDb2g" name="alarmP" visibility="public" type="_atHhsArdEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ppFN4ArhEeiwdpidSbDb2g" name="stopWatchP" visibility="public" type="_Viyf8QrfEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_IaFLAArkEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ka0UEArzEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_CpaG0BgfEei-ccFu-OwT7Q" name="alarmHour" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_CpeYQBgfEei-ccFu-OwT7Q" name="alarmMinute" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yMmsoEv9EemhOoNL4S6HQw" name="dbgPortForWatchCore" visibility="protected" type="_x52IsEv9EemhOoNL4S6HQw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yM61sEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_yM61sUv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_5TyacBNsEeiFubQUFHg6OA" name="StateMachine" isReentrant="false">
        <region xmi:id="_5UK08BNsEeiFubQUFHg6OA" name="Region">
          <transition xmi:id="_yPb-MEv9EemhOoNL4S6HQw" name="Trans__Pseudo8592" source="_5UPGYBNsEeiFubQUFHg6OA" target="_yPXFsEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ybzmQEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo85&quot;,&quot;New__State__91&quot;,&quot;To__New__State__91__107&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo85&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__110&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo85&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__140&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo85&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_yPjS8Ev9EemhOoNL4S6HQw" name="From__New__State__91__93" source="_yPZh8Ev9EemhOoNL4S6HQw" target="_yPXFsEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ybqcUEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__91&quot;,&quot;New__State__91&quot;,&quot;To__New__State__91__107&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__91&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__110&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__91&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__140&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__91&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_yPkhEEv9EemhOoNL4S6HQw" name="PME_Trig94" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yPm9UEv9EemhOoNL4S6HQw" name="PME_Trig95" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yPqnsEv9EemhOoNL4S6HQw" name="PME_Trig96" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yPvgMEv9EemhOoNL4S6HQw" name="PME_Trig97" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yPyjgEv9EemhOoNL4S6HQw" name="PME_Trig98" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yP9ioEv9EemhOoNL4S6HQw" name="PME_Trig99" event="_x6cloEv9EemhOoNL4S6HQw" port="_yMmsoEv9EemhOoNL4S6HQw"/>
            <trigger xmi:id="_yQB0EEv9EemhOoNL4S6HQw" name="PME_Trig100" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yQFecEv9EemhOoNL4S6HQw" name="PME_Trig101" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yQWkMEv9EemhOoNL4S6HQw" name="PME_Trig102" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yQaOkEv9EemhOoNL4S6HQw" name="PME_Trig103" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yQdR4Ev9EemhOoNL4S6HQw" name="PME_Trig104" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yQiKYEv9EemhOoNL4S6HQw" name="PME_Trig105" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yQqGMEv9EemhOoNL4S6HQw" name="PME_Trig106" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_ySQosEv9EemhOoNL4S6HQw" name="To__New__State__91__107" guard="_ycYOAUv9EemhOoNL4S6HQw" source="_yPXFsEv9EemhOoNL4S6HQw" target="_yPZh8Ev9EemhOoNL4S6HQw">
            <ownedRule xmi:id="_ycYOAUv9EemhOoNL4S6HQw" name="PME_checkDecesion180">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ycYOAEv9EemhOoNL4S6HQw" name="PME_checkDecesion180">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__91__107&quot;,&quot;New__State__91&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_yScO4Ev9EemhOoNL4S6HQw" name="Trans__keyPressEx108" source="_qdGEQBNyEeiFubQUFHg6OA" target="_yPXFsEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ycSucEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__91&quot;,&quot;To__New__State__91__107&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__110&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__140&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_ySeEEEv9EemhOoNL4S6HQw" name="To__Substates__WorkingMode__110" guard="_ycb4YUv9EemhOoNL4S6HQw" source="_yPXFsEv9EemhOoNL4S6HQw" target="_ySc18Ev9EemhOoNL4S6HQw">
            <ownedRule xmi:id="_ycb4YUv9EemhOoNL4S6HQw" name="PME_checkDecesion181">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ycb4YEv9EemhOoNL4S6HQw" name="PME_checkDecesion181">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__WorkingMode__110&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_ySggUUv9EemhOoNL4S6HQw" name="From__Substates__WorkingMode__112" source="_ySfSMEv9EemhOoNL4S6HQw" target="_yPXFsEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ybutwEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__91&quot;,&quot;To__New__State__91__107&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__110&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__140&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_yV8O0Ev9EemhOoNL4S6HQw" name="Trans__Pseudo86138" source="_GFOZ0BRjEeiFubQUFHg6OA" target="_yPXFsEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ycW_4Ev9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;New__State__91&quot;,&quot;To__New__State__91__107&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__110&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__140&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_yV-EAEv9EemhOoNL4S6HQw" name="To__Substates__SetAlarm__140" guard="_ycdGgUv9EemhOoNL4S6HQw" source="_yPXFsEv9EemhOoNL4S6HQw" target="_yV814Ev9EemhOoNL4S6HQw">
            <ownedRule xmi:id="_ycdGgUv9EemhOoNL4S6HQw" name="PME_checkDecesion182">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_ycdGgEv9EemhOoNL4S6HQw" name="PME_checkDecesion182">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__SetAlarm__140&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_yV_SIUv9EemhOoNL4S6HQw" name="From__Substates__SetAlarm__142" source="_yV-rEEv9EemhOoNL4S6HQw" target="_yPXFsEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ycLZsEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;New__State__91&quot;,&quot;To__New__State__91__107&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;WorkingMode&quot;,&quot;To__Substates__WorkingMode__110&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Substates__SetAlarm__140&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_5UPGYBNsEeiFubQUFHg6OA" name="Pseudo85"/>
          <subvertex xmi:type="uml:State" xmi:id="_5UY3YBNsEeiFubQUFHg6OA" name="WorkingMode">
            <connectionPoint xmi:id="_qdGEQBNyEeiFubQUFHg6OA" name="keyPressEx" kind="exitPoint"/>
            <connectionPoint xmi:id="_ySc18Ev9EemhOoNL4S6HQw" name="From__Parent__109" kind="entryPoint"/>
            <connectionPoint xmi:id="_ySfSMEv9EemhOoNL4S6HQw" name="To__Parent__111" kind="exitPoint"/>
            <region xmi:id="_qcoxQBNyEeiFubQUFHg6OA" name="Region1">
              <transition xmi:id="_yS3ssEv9EemhOoNL4S6HQw" name="Trans__Pseudo84116" source="_OEEIEBgmEeiSBIpf1RqKYQ" target="_ySuiwEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yVYOIEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo84&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__135&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo84&quot;,&quot;New__State__114&quot;,&quot;To__New__State__114__133&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo84&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yS4TwEv9EemhOoNL4S6HQw" name="Trans__Init__State__115117" source="_yS0pYEv9EemhOoNL4S6HQw" target="_ySuiwEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yV1hIEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__115&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__135&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__115&quot;,&quot;New__State__114&quot;,&quot;To__New__State__114__133&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__115&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yS6I8Ev9EemhOoNL4S6HQw" name="Trans__keyPressEx118" source="_qdGEQBNyEeiFubQUFHg6OA" target="_ySuiwEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yVUjwEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__135&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__114&quot;,&quot;To__New__State__114__133&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yS_ogEv9EemhOoNL4S6HQw" name="From__New__State__114__119" source="_ySw_AEv9EemhOoNL4S6HQw" target="_ySuiwEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yVx2wEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__114&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__135&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__114&quot;,&quot;New__State__114&quot;,&quot;To__New__State__114__133&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__114&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_yTBdsEv9EemhOoNL4S6HQw" name="PME_Trig120" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yTFvIEv9EemhOoNL4S6HQw" name="PME_Trig121" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yTJZgEv9EemhOoNL4S6HQw" name="PME_Trig122" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yTMc0Ev9EemhOoNL4S6HQw" name="PME_Trig123" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yTPgIEv9EemhOoNL4S6HQw" name="PME_Trig124" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yTTxkEv9EemhOoNL4S6HQw" name="PME_Trig125" event="_x6cloEv9EemhOoNL4S6HQw" port="_yMmsoEv9EemhOoNL4S6HQw"/>
                <trigger xmi:id="_yTW04Ev9EemhOoNL4S6HQw" name="PME_Trig126" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yTZ4MEv9EemhOoNL4S6HQw" name="PME_Trig127" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yUNJcEv9EemhOoNL4S6HQw" name="PME_Trig128" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yUSpAEv9EemhOoNL4S6HQw" name="PME_Trig129" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yUWTYEv9EemhOoNL4S6HQw" name="PME_Trig130" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yU1bkEv9EemhOoNL4S6HQw" name="PME_Trig131" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yU5F8Ev9EemhOoNL4S6HQw" name="PME_Trig132" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_yVI9kEv9EemhOoNL4S6HQw" name="To__New__State__114__133" guard="_yV6ZoEv9EemhOoNL4S6HQw" source="_ySuiwEv9EemhOoNL4S6HQw" target="_ySw_AEv9EemhOoNL4S6HQw">
                <ownedRule xmi:id="_yV6ZoEv9EemhOoNL4S6HQw" name="PME_checkDecesion137">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_yV5ykEv9EemhOoNL4S6HQw" name="PME_checkDecesion137">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__New__State__114__133&quot;,&quot;New__State__114&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_yVMA4Ev9EemhOoNL4S6HQw" name="From__Parnet__StateMachine__134" source="_ySc18Ev9EemhOoNL4S6HQw" target="_ySuiwEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yVlpgEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;WorkingMode&quot;,&quot;To__Parent__StateMachine__135&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;WorkingMode&quot;,&quot;New__State__114&quot;,&quot;To__New__State__114__133&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;WorkingMode&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yVMn8Ev9EemhOoNL4S6HQw" name="To__Parent__StateMachine__135" guard="_yV3WUUv9EemhOoNL4S6HQw" source="_ySuiwEv9EemhOoNL4S6HQw" target="_ySfSMEv9EemhOoNL4S6HQw">
                <ownedRule xmi:id="_yV3WUUv9EemhOoNL4S6HQw" name="PME_checkDecesion136">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_yV3WUEv9EemhOoNL4S6HQw" name="PME_checkDecesion136">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__135&quot;,&quot;WorkingMode&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_OEEIEBgmEeiSBIpf1RqKYQ" name="Pseudo84" kind="junction"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_ySuiwEv9EemhOoNL4S6HQw" name="DecesionPoint__113" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_ySw_AEv9EemhOoNL4S6HQw" name="New__State__114"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_yS0pYEv9EemhOoNL4S6HQw" name="Init__State__115"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_m0-1cBNvEeiFubQUFHg6OA" name="SetAlarm">
            <connectionPoint xmi:id="_GFOZ0BRjEeiFubQUFHg6OA" name="Pseudo86" kind="exitPoint"/>
            <connectionPoint xmi:id="_yV814Ev9EemhOoNL4S6HQw" name="From__Parent__139" kind="entryPoint"/>
            <connectionPoint xmi:id="_yV-rEEv9EemhOoNL4S6HQw" name="To__Parent__141" kind="exitPoint"/>
            <region xmi:id="_GFF28BRjEeiFubQUFHg6OA" name="Region1">
              <ownedComment xmi:id="_PbsboBghEei-ccFu-OwT7Q"/>
              <transition xmi:id="_L6OeUBRjEeiFubQUFHg6OA" name="readHourResult" source="_G6Ch8BRjEeiFubQUFHg6OA" target="_HQIGsBRjEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_AByssBgREei-ccFu-OwT7Q">
                  <language>C++</language>
                  <body>    ////
    this->alarmHour=InputInt;
    buttonsP.ReadInt(&quot;Enter Minute: &quot;).send();

</body>
                </effect>
                <trigger xmi:id="_v232YBRkEeiFubQUFHg6OA" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_TD2MYBRjEeiFubQUFHg6OA" name="readMinResult" source="_HQIGsBRjEeiFubQUFHg6OA" target="_GFOZ0BRjEeiFubQUFHg6OA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_FL2WwBgREei-ccFu-OwT7Q">
                  <language>C++</language>
                  <body>////
	this->alarmMinute=InputInt;
	alarmP.SetAlarm(this->alarmHour,this->alarmMinute,0).send();
	displayGateKeeperP.ShowText(0,&quot;Alarm Is Set&quot;).send();</body>
                </effect>
                <trigger xmi:id="_8FyqUBRkEeiFubQUFHg6OA" event="_nYhgYBFLEeibZqndpu8erg" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_61UlEBeSEei-ccFu-OwT7Q" name="readMinute__Pseudo83__89" source="_HQIGsBRjEeiFubQUFHg6OA" target="_ttfMIBeSEei-ccFu-OwT7Q">
                <trigger xmi:id="_GnFtgBeUEei-ccFu-OwT7Q" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_-WovsBeSEei-ccFu-OwT7Q" name="Pseudo83__Pseudo86__87" guard="_QFFdEBgEEei-ccFu-OwT7Q" source="_ttfMIBeSEei-ccFu-OwT7Q" target="_GFOZ0BRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_QFFdEBgEEei-ccFu-OwT7Q">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_QFFdERgEEei-ccFu-OwT7Q">
                    <language>C++</language>
                    <body>////
	if (ButtonID!='3')
		return true;
	else
		return false;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_F-QBUBeTEei-ccFu-OwT7Q" name="Pseudo83__readMinute__88" source="_ttfMIBeSEei-ccFu-OwT7Q" target="_HQIGsBRjEeiFubQUFHg6OA"/>
              <transition xmi:id="_yWUCQEv9EemhOoNL4S6HQw" name="Trans__Init__State__144145" source="_yWPw0Ev9EemhOoNL4S6HQw" target="_yV_5MEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yaszAEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__144&quot;,&quot;readMinute&quot;,&quot;To__readMinute__174&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__144&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__176&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Init__State__144&quot;,&quot;readHour&quot;,&quot;To__readHour__173&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__144&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yWav8Ev9EemhOoNL4S6HQw" name="Trans__Pseudo86146" source="_GFOZ0BRjEeiFubQUFHg6OA" target="_yV_5MEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yamsYEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readMinute&quot;,&quot;To__readMinute__174&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__176&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readHour&quot;,&quot;To__readHour__173&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yWlvEEv9EemhOoNL4S6HQw" name="147" source="_ttfMIBeSEei-ccFu-OwT7Q" target="_yV_5MEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ybBjIEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo83&quot;,&quot;readMinute&quot;,&quot;To__readMinute__174&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo83&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__176&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo83&quot;,&quot;readHour&quot;,&quot;To__readHour__173&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo83&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yWm9MEv9EemhOoNL4S6HQw" name="From__readHour__148" source="_G6Ch8BRjEeiFubQUFHg6OA" target="_yV_5MEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ybKGAEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;readMinute&quot;,&quot;To__readMinute__174&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__176&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readHour&quot;,&quot;readHour&quot;,&quot;To__readHour__173&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;readHour&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_yW0YkEv9EemhOoNL4S6HQw" name="PME_Trig149" event="_SXXbsAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yW3b4Ev9EemhOoNL4S6HQw" name="PME_Trig150" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yXBM4Ev9EemhOoNL4S6HQw" name="PME_Trig151" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yXGFYEv9EemhOoNL4S6HQw" name="PME_Trig152" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yXKW0Ev9EemhOoNL4S6HQw" name="PME_Trig153" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yXZnYEv9EemhOoNL4S6HQw" name="PME_Trig154" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yXiKQEv9EemhOoNL4S6HQw" name="PME_Trig155" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yXlNkEv9EemhOoNL4S6HQw" name="PME_Trig156" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yXo38Ev9EemhOoNL4S6HQw" name="PME_Trig157" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yX2TUEv9EemhOoNL4S6HQw" name="PME_Trig158" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yYKcYEv9EemhOoNL4S6HQw" name="PME_Trig159" event="_x6cloEv9EemhOoNL4S6HQw" port="_yMmsoEv9EemhOoNL4S6HQw"/>
                <trigger xmi:id="_yYU0cEv9EemhOoNL4S6HQw" name="PME_Trig160" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_yYelcEv9EemhOoNL4S6HQw" name="From__readMinute__161" source="_HQIGsBRjEeiFubQUFHg6OA" target="_yV_5MEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yaxEcEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;readMinute&quot;,&quot;To__readMinute__174&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__176&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;readMinute&quot;,&quot;readHour&quot;,&quot;To__readHour__173&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;readMinute&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_yYiP0Ev9EemhOoNL4S6HQw" name="PME_Trig162" event="_RNQYMArhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yYzVkEv9EemhOoNL4S6HQw" name="PME_Trig163" event="_d50KYQrhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yY3nAEv9EemhOoNL4S6HQw" name="PME_Trig164" event="_bGjYkgrhEeiwdpidSbDb2g" port="_ppFN4ArhEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yZBYAEv9EemhOoNL4S6HQw" name="PME_Trig165" event="_cp40YAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yZEbUEv9EemhOoNL4S6HQw" name="PME_Trig166" event="_d5zjUArhEeiwdpidSbDb2g" port="_2ASigAreEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yZKh8Ev9EemhOoNL4S6HQw" name="PME_Trig167" event="_XpPlAAqxEeiwdpidSbDb2g" port="_wsY5YAqxEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yZNlQEv9EemhOoNL4S6HQw" name="PME_Trig168" event="_Lo6JewriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yZkKkEv9EemhOoNL4S6HQw" name="PME_Trig169" event="_Lo6JegriEeiwdpidSbDb2g" port="_IaFLAArkEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yZn08Ev9EemhOoNL4S6HQw" name="PME_Trig170" event="__mIMuwrkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yZ1QUEv9EemhOoNL4S6HQw" name="PME_Trig171" event="_x6cloEv9EemhOoNL4S6HQw" port="_yMmsoEv9EemhOoNL4S6HQw"/>
                <trigger xmi:id="_yZ4ToEv9EemhOoNL4S6HQw" name="PME_Trig172" event="__mIMvArkEeiwdpidSbDb2g" port="_ka0UEArzEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_yaQHEEv9EemhOoNL4S6HQw" name="To__readHour__173" guard="_ybjuoUv9EemhOoNL4S6HQw" source="_yV_5MEv9EemhOoNL4S6HQw" target="_G6Ch8BRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_ybjuoUv9EemhOoNL4S6HQw" name="PME_checkDecesion179">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_ybjuoEv9EemhOoNL4S6HQw" name="PME_checkDecesion179">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__readHour__173&quot;,&quot;readHour&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_yaQuIEv9EemhOoNL4S6HQw" name="To__readMinute__174" guard="_ybgrUUv9EemhOoNL4S6HQw" source="_yV_5MEv9EemhOoNL4S6HQw" target="_HQIGsBRjEeiFubQUFHg6OA">
                <ownedRule xmi:id="_ybgrUUv9EemhOoNL4S6HQw" name="PME_checkDecesion177">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_ybgrUEv9EemhOoNL4S6HQw" name="PME_checkDecesion177">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__readMinute__174&quot;,&quot;readMinute&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_yabGMEv9EemhOoNL4S6HQw" name="From__Parnet__StateMachine__175" source="_yV814Ev9EemhOoNL4S6HQw" target="_yV_5MEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ybePEEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readMinute&quot;,&quot;To__readMinute__174&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;SetAlarm&quot;,&quot;To__Parent__StateMachine__176&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;SetAlarm&quot;,&quot;readHour&quot;,&quot;To__readHour__173&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;SetAlarm&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yacUUEv9EemhOoNL4S6HQw" name="To__Parent__StateMachine__176" guard="_ybjHkEv9EemhOoNL4S6HQw" source="_yV_5MEv9EemhOoNL4S6HQw" target="_yV-rEEv9EemhOoNL4S6HQw">
                <ownedRule xmi:id="_ybjHkEv9EemhOoNL4S6HQw" name="PME_checkDecesion178">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_ybiggEv9EemhOoNL4S6HQw" name="PME_checkDecesion178">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__StateMachine__176&quot;,&quot;SetAlarm&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_G6Ch8BRjEeiFubQUFHg6OA" name="readHour"/>
              <subvertex xmi:type="uml:State" xmi:id="_HQIGsBRjEeiFubQUFHg6OA" name="readMinute"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_ttfMIBeSEei-ccFu-OwT7Q" name="Pseudo83" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_yV_5MEv9EemhOoNL4S6HQw" name="DecesionPoint__143" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_yWPw0Ev9EemhOoNL4S6HQw" name="Init__State__144"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_yPXFsEv9EemhOoNL4S6HQw" name="DecesionPoint__90" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_yPZh8Ev9EemhOoNL4S6HQw" name="New__State__91"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yNkV8Uv9EemhOoNL4S6HQw" name="loadHeap" specification="_yNkV8Ev9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.alarmHour&quot;,this->alarmHour);
heap.setVarValue(&quot;this.alarmMinute&quot;,this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yNmyMUv9EemhOoNL4S6HQw" name="unLoadHeap" specification="_yNmyMEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.alarmHour&quot;,&amp;this->alarmHour);
heap.loadVarFromHeap(&quot;this.alarmMinute&quot;,&amp;this->alarmMinute);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yOPrYEv9EemhOoNL4S6HQw" name="sendMessage" specification="_yOPEUEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;buttonsP&quot;) {
  if(message.signal==&quot;ReadInt&quot;) {
   if(message.payload.size()==1){
    buttonsP.ReadInt( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;TextToShow&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;alarmP&quot;) {
  if(message.signal==&quot;RemAlarm&quot;) {
   if(message.payload.size()==1){
    alarmP.RemAlarm( boost::any_cast&lt;int>(message.payload[&quot;alarmID&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;viewAlarmReq&quot;) {
   if(message.payload.size()==0){
    alarmP.viewAlarmReq().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;SetAlarm&quot;) {
   if(message.payload.size()==3){
    alarmP.SetAlarm( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;oneShot&quot;])).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;stopWatchP&quot;) {
  if(message.signal==&quot;Toggle&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Toggle().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Reset&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Reset().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Deactivate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Resume&quot;) {
   if(message.payload.size()==0){
    stopWatchP.Resume().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Activate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Activate().sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Deactivate&quot;) {
   if(message.payload.size()==0){
    timeTrackerP.Deactivate().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yOT80Uv9EemhOoNL4S6HQw" name="sendInternalMessage" specification="_yOT80Ev9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yPJqUUv9EemhOoNL4S6HQw" name="initForPMD" specification="_yPJqUEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_WatchCore::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_WatchCore::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;buttonsP&quot;,&quot;ReadInt&quot;,{ {&quot;TextToShow&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;RemAlarm&quot;,{ {&quot;alarmID&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;viewAlarmReq&quot;,{});
this->execContext.addOutPutMessages(&quot;alarmP&quot;,&quot;SetAlarm&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;oneShot&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Toggle&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Reset&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;stopWatchP&quot;,&quot;Resume&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonHold&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonPressed&quot;,{});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ButtonReleased&quot;,{ {&quot;ButtonID&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;buttonsP&quot;,&quot;ReadIntResult&quot;,{ {&quot;InputInt&quot;,&quot;Integer&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;alarmP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;stopWatchP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;dbgPortForWatchCore&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_yNkV8Ev9EemhOoNL4S6HQw" name="loadHeap" visibility="private" method="_yNkV8Uv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_yNmyMEv9EemhOoNL4S6HQw" name="unLoadHeap" visibility="private" method="_yNmyMUv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_yOPEUEv9EemhOoNL4S6HQw" name="sendMessage" visibility="private" method="_yOPrYEv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_yOQ5gEv9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_yOSHoEv9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_yOT80Ev9EemhOoNL4S6HQw" name="sendInternalMessage" visibility="private" method="_yOT80Uv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_yOUj4Ev9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_yOVK8Ev9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_yPJqUEv9EemhOoNL4S6HQw" name="initForPMD" visibility="private" method="_yPJqUUv9EemhOoNL4S6HQw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_EUMt0AqvEeiwdpidSbDb2g" name="TimeTracker" classifierBehavior="_f9DS0Ar0EeiwdpidSbDb2g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="__kPLsArjEeiwdpidSbDb2g" name="timeTrackerP" visibility="public" type="_Lo6JYQriEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_7dRcsArrEeiwdpidSbDb2g" name="displayGateKeeperP" visibility="public" type="__mIMoQrkEeiwdpidSbDb2g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_-6GrwAryEeiwdpidSbDb2g" name="timeTrackingTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_L22PAArzEeiwdpidSbDb2g" name="milliTime" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yQcqUAr3EeiwdpidSbDb2g" name="showTimeTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KsSnIBKYEeiBE_x0ZD7_9g" name="clockResolution" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_UKWdABKYEeiBE_x0ZD7_9g" value="500"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_7xV-8BbCEei-ccFu-OwT7Q" name="showTimeTimerID" visibility="public">
        <type xmi:type="uml:Class" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_x88gAEv9EemhOoNL4S6HQw" name="dbgPortForTimeTracker" visibility="protected" type="_x52IsEv9EemhOoNL4S6HQw" isBehavior="true" isService="false">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_x8-VMEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_x8-8QEv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_f9DS0Ar0EeiwdpidSbDb2g" name="TimeTrackerSM" isReentrant="false">
        <region xmi:id="_gAJqIAr0EeiwdpidSbDb2g" name="Region">
          <transition xmi:id="_yBAgoEv9EemhOoNL4S6HQw" name="Trans__Pseudo25" source="_gAMtcAr0EeiwdpidSbDb2g" target="_yA7BEEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yE7-YEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo2&quot;,&quot;New__State__4&quot;,&quot;To__New__State__4__14&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo2&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__16&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo2&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_yBHOUEv9EemhOoNL4S6HQw" name="From__New__State__4__6" source="_yA9dUEv9EemhOoNL4S6HQw" target="_yA7BEEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yFZ4cEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__4&quot;,&quot;New__State__4&quot;,&quot;To__New__State__4__14&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;New__State__4&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__16&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__4&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_yBIccEv9EemhOoNL4S6HQw" name="PME_Trig7" event="_x6cloEv9EemhOoNL4S6HQw" port="_x88gAEv9EemhOoNL4S6HQw"/>
            <trigger xmi:id="_yBKRoEv9EemhOoNL4S6HQw" name="PME_Trig8" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yBMt4Ev9EemhOoNL4S6HQw" name="PME_Trig9" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yBQYQEv9EemhOoNL4S6HQw" name="PME_Trig10" port="_-6GrwAryEeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_yBSNcEv9EemhOoNL4S6HQw" name="PME_Trig11" port="_yQcqUAr3EeiwdpidSbDb2g">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
            <trigger xmi:id="_yBUCoEv9EemhOoNL4S6HQw" name="PME_Trig12" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
            <trigger xmi:id="_yBYUEEv9EemhOoNL4S6HQw" name="PME_Trig13" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
          </transition>
          <transition xmi:id="_yBclgEv9EemhOoNL4S6HQw" name="To__New__State__4__14" guard="_yFbtoUv9EemhOoNL4S6HQw" source="_yA7BEEv9EemhOoNL4S6HQw" target="_yA9dUEv9EemhOoNL4S6HQw">
            <ownedRule xmi:id="_yFbtoUv9EemhOoNL4S6HQw" name="PME_checkDecesion33">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_yFbtoEv9EemhOoNL4S6HQw" name="PME_checkDecesion33">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__4__14&quot;,&quot;New__State__4&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_yBnkoEv9EemhOoNL4S6HQw" name="To__Substates__TrackingTime__16" guard="_yFew8Ev9EemhOoNL4S6HQw" source="_yA7BEEv9EemhOoNL4S6HQw" target="_yBlvcEv9EemhOoNL4S6HQw">
            <ownedRule xmi:id="_yFew8Ev9EemhOoNL4S6HQw" name="PME_checkDecesion34">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_yFeJ4Ev9EemhOoNL4S6HQw" name="PME_checkDecesion34">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__Substates__TrackingTime__16&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <transition xmi:id="_yBwHgEv9EemhOoNL4S6HQw" name="From__Substates__TrackingTime__18" source="_yBoywEv9EemhOoNL4S6HQw" target="_yA7BEEv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yFRVkEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;New__State__4&quot;,&quot;To__New__State__4__14&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Substates__TrackingTime__16&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_gAMtcAr0EeiwdpidSbDb2g" name="Pseudo2"/>
          <subvertex xmi:type="uml:State" xmi:id="_gARl8Ar0EeiwdpidSbDb2g" name="TrackingTime">
            <connectionPoint xmi:id="_yBlvcEv9EemhOoNL4S6HQw" name="From__Parent__15" kind="entryPoint"/>
            <connectionPoint xmi:id="_yBoywEv9EemhOoNL4S6HQw" name="To__Parent__17" kind="exitPoint"/>
            <region xmi:id="_BISvsAr1EeiwdpidSbDb2g" name="Region1">
              <transition xmi:id="_JpwlAAr2EeiwdpidSbDb2g" name="ignoreDeActive" source="_FtZSkAr1EeiwdpidSbDb2g" target="_FtZSkAr1EeiwdpidSbDb2g">
                <trigger xmi:id="_v3INEAr4EeiwdpidSbDb2g" event="_Lo6JeQriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_yB-xAEv9EemhOoNL4S6HQw" name="Trans__Pseudo120" source="_CEn1EAr1EeiwdpidSbDb2g" target="_yBx8sEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yDnvwEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Pseudo1&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__30&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;Pseudo1&quot;,&quot;DeActive&quot;,&quot;To__DeActive__28&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Pseudo1&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yCIiAEv9EemhOoNL4S6HQw" name="From__DeActive__21" source="_FtZSkAr1EeiwdpidSbDb2g" target="_yBx8sEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yEqRkEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;DeActive&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__30&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;DeActive&quot;,&quot;DeActive&quot;,&quot;To__DeActive__28&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;DeActive&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
                <trigger xmi:id="_yCPPsEv9EemhOoNL4S6HQw" name="PME_Trig22" event="_x6cloEv9EemhOoNL4S6HQw" port="_x88gAEv9EemhOoNL4S6HQw"/>
                <trigger xmi:id="_yCUIMEv9EemhOoNL4S6HQw" name="PME_Trig23" event="_Lo6JeAriEeiwdpidSbDb2g" port="__kPLsArjEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yCZnwEv9EemhOoNL4S6HQw" name="PME_Trig24" port="_-6GrwAryEeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_yDBS0Ev9EemhOoNL4S6HQw" name="PME_Trig25" port="_yQcqUAr3EeiwdpidSbDb2g">
                  <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
                <trigger xmi:id="_yDEWIEv9EemhOoNL4S6HQw" name="PME_Trig26" event="__mIMuwrkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
                <trigger xmi:id="_yDGLUEv9EemhOoNL4S6HQw" name="PME_Trig27" event="__mIMvArkEeiwdpidSbDb2g" port="_7dRcsArrEeiwdpidSbDb2g"/>
              </transition>
              <transition xmi:id="_yDZGQEv9EemhOoNL4S6HQw" name="To__DeActive__28" guard="_yEzbgUv9EemhOoNL4S6HQw" source="_yBx8sEv9EemhOoNL4S6HQw" target="_FtZSkAr1EeiwdpidSbDb2g">
                <ownedRule xmi:id="_yEzbgUv9EemhOoNL4S6HQw" name="PME_checkDecesion32">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_yEzbgEv9EemhOoNL4S6HQw" name="PME_checkDecesion32">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__DeActive__28&quot;,&quot;DeActive&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:id="_yDa7cEv9EemhOoNL4S6HQw" name="From__Parnet__TimeTrackerSM__29" source="_yBlvcEv9EemhOoNL4S6HQw" target="_yBx8sEv9EemhOoNL4S6HQw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yDkscEv9EemhOoNL4S6HQw">
                  <language>C++</language>
                  <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;TrackingTime&quot;,&quot;To__Parent__TimeTrackerSM__30&quot;,msg->getSignalName());
this->execContext.addPossibleExecPath(&quot;TrackingTime&quot;,&quot;DeActive&quot;,&quot;To__DeActive__28&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;TrackingTime&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
                </effect>
              </transition>
              <transition xmi:id="_yDbigEv9EemhOoNL4S6HQw" name="To__Parent__TimeTrackerSM__30" guard="_yEw_QUv9EemhOoNL4S6HQw" source="_yBx8sEv9EemhOoNL4S6HQw" target="_yBoywEv9EemhOoNL4S6HQw">
                <ownedRule xmi:id="_yEw_QUv9EemhOoNL4S6HQw" name="PME_checkDecesion31">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_yEw_QEv9EemhOoNL4S6HQw" name="PME_checkDecesion31">
                    <language>C++</language>
                    <body>return execContext.checkUserDecesion({&quot;To__Parent__TimeTrackerSM__30&quot;,&quot;TrackingTime&quot;, execContext.getExecLocation().locName});
</body>
                  </specification>
                </ownedRule>
              </transition>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_CEn1EAr1EeiwdpidSbDb2g" name="Pseudo1"/>
              <subvertex xmi:type="uml:State" xmi:id="_FtZSkAr1EeiwdpidSbDb2g" name="DeActive"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_yBx8sEv9EemhOoNL4S6HQw" name="DecesionPoint__19" kind="choice"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_yA7BEEv9EemhOoNL4S6HQw" name="DecesionPoint__3" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_yA9dUEv9EemhOoNL4S6HQw" name="New__State__4"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_x-FIcEv9EemhOoNL4S6HQw" name="loadHeap" specification="_x-EhYEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>heap.setVarValue(&quot;this.milliTime&quot;,this->milliTime);
heap.setVarValue(&quot;this.clockResolution&quot;,this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_x-R8wUv9EemhOoNL4S6HQw" name="unLoadHeap" specification="_x-R8wEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>heap.loadVarFromHeap(&quot;this.milliTime&quot;,&amp;this->milliTime);
heap.loadVarFromHeap(&quot;this.clockResolution&quot;,&amp;this->clockResolution);
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_x_2DAUv9EemhOoNL4S6HQw" name="sendMessage" specification="_x_2DAEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;timeTrackerP&quot;) {
  if(message.signal==&quot;Nack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Nack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;Ack&quot;) {
   if(message.payload.size()==1){
    timeTrackerP.Ack( const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;currentState&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;displayGateKeeperP&quot;) {
  if(message.signal==&quot;ShowTime&quot;) {
   if(message.payload.size()==3){
    displayGateKeeperP.ShowTime( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowCounter&quot;) {
   if(message.payload.size()==4){
    displayGateKeeperP.ShowCounter( boost::any_cast&lt;int>(message.payload[&quot;hour&quot;]),boost::any_cast&lt;int>(message.payload[&quot;minute&quot;]),boost::any_cast&lt;int>(message.payload[&quot;second&quot;]),boost::any_cast&lt;int>(message.payload[&quot;milli&quot;])).sendAt(message.index);
result=1;
}
  }
  else if(message.signal==&quot;ShowText&quot;) {
   if(message.payload.size()==2){
    displayGateKeeperP.ShowText( boost::any_cast&lt;int>(message.payload[&quot;position&quot;]),const_cast&lt;char *>((boost::any_cast&lt;std::string>(message.payload[&quot;text&quot;])).c_str())).sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yAFTkUv9EemhOoNL4S6HQw" name="sendInternalMessage" specification="_yAFTkEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yAyeMUv9EemhOoNL4S6HQw" name="initForPMD" specification="_yAyeMEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_TimeTracker::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_TimeTracker::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;timeTrackerP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowTime&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowCounter&quot;,{ {&quot;hour&quot;,&quot;Integer&quot;},{&quot;minute&quot;,&quot;Integer&quot;},{&quot;second&quot;,&quot;Integer&quot;},{&quot;milli&quot;,&quot;Integer&quot;}});
this->execContext.addOutPutMessages(&quot;displayGateKeeperP&quot;,&quot;ShowText&quot;,{ {&quot;position&quot;,&quot;Integer&quot;},{&quot;text&quot;,&quot;String&quot;}});
 this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Activate&quot;,{});
this->execContext.addInputMessages(&quot;timeTrackerP&quot;,&quot;Deactivate&quot;,{});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Nack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;displayGateKeeperP&quot;,&quot;Ack&quot;,{ {&quot;currentState&quot;,&quot;String&quot;}});
this->execContext.addInputMessages(&quot;timeTrackingTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;showTimeTimer&quot;,&quot;timeout&quot;,{});
this->execContext.addInputMessages(&quot;dbgPortForTimeTracker&quot;,&quot;dbg&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_x-EhYEv9EemhOoNL4S6HQw" name="loadHeap" visibility="private" method="_x-FIcEv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_x-R8wEv9EemhOoNL4S6HQw" name="unLoadHeap" visibility="private" method="_x-R8wUv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_x_2DAEv9EemhOoNL4S6HQw" name="sendMessage" visibility="private" method="_x_2DAUv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_x_4fQEv9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_x_-l4Ev9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_yAFTkEv9EemhOoNL4S6HQw" name="sendInternalMessage" visibility="private" method="_yAFTkUv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_yAHv0Ev9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_yAI98Ev9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_yAyeMEv9EemhOoNL4S6HQw" name="initForPMD" visibility="private" method="_yAyeMUv9EemhOoNL4S6HQw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_OX25MAqxEeiwdpidSbDb2g" name="ButtonsP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_OXynwAqxEeiwdpidSbDb2g" name="ButtonsP">
        <interfaceRealization xmi:id="_OX_cEAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OX7KoAqxEeiwdpidSbDb2g" contract="_OX7KoAqxEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_OYLCQAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g" contract="_OYH-8AqxEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OX7KoAqxEeiwdpidSbDb2g" name="ButtonsP">
        <ownedOperation xmi:id="_-aZWABFKEeibZqndpu8erg" name="ReadInt">
          <ownedParameter xmi:id="_EERNMBgdEei-ccFu-OwT7Q" name="TextToShow">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYB4UAqxEeiwdpidSbDb2g" name="ButtonsP~">
        <ownedOperation xmi:id="_SXAPUAqxEeiwdpidSbDb2g" name="ButtonPressed">
          <ownedParameter xmi:id="_n9--0AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrus.designer.languages.cpp.library_1.0.4.jar!/models/AnsiCLibrary.uml#_5lVhgBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_XpIQQAqxEeiwdpidSbDb2g" name="ButtonHold">
          <ownedParameter xmi:id="_nYJt4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_cpytwAqxEeiwdpidSbDb2g" name="ButtonReleased">
          <ownedParameter xmi:id="_jp9k4AqxEeiwdpidSbDb2g" name="ButtonID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_nYfEIBFLEeibZqndpu8erg" name="ReadIntResult">
          <ownedParameter xmi:id="_nYfEIRFLEeibZqndpu8erg" name="InputInt">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYGJwAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYB4UAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_OYGw0AqxEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_OYH-8AqxEeiwdpidSbDb2g" name="ButtonsPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_OYLpUAqxEeiwdpidSbDb2g" client="_OXynwAqxEeiwdpidSbDb2g" supplier="_OYH-8AqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_SXXbsAqxEeiwdpidSbDb2g" operation="_SXAPUAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_XpPlAAqxEeiwdpidSbDb2g" operation="_XpIQQAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_cp40YAqxEeiwdpidSbDb2g" operation="_cpytwAqxEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_-anYcBFKEeibZqndpu8erg" operation="_-aZWABFKEeibZqndpu8erg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_nYhgYBFLEeibZqndpu8erg" operation="_nYfEIBFLEeibZqndpu8erg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_atLzIArdEeiwdpidSbDb2g" name="AlarmP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_atHhsArdEeiwdpidSbDb2g" name="AlarmP">
        <interfaceRealization xmi:id="_atTH4ArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atQEkArdEeiwdpidSbDb2g" contract="_atQEkArdEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_ateHAArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g" contract="_atZ1kArdEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atQEkArdEeiwdpidSbDb2g" name="AlarmP">
        <ownedOperation xmi:id="_de5s0ArdEeiwdpidSbDb2g" name="SetAlarm">
          <ownedParameter xmi:id="_g8GMcArdEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_k_tL0ArdEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_n-OLYArdEeiwdpidSbDb2g" name="oneShot">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_suDXkArdEeiwdpidSbDb2g" name="RemAlarm">
          <ownedParameter xmi:id="_suDXkQrdEeiwdpidSbDb2g" name="alarmID">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_0IE5IArdEeiwdpidSbDb2g" name="viewAlarmReq"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atU9EArdEeiwdpidSbDb2g" name="AlarmP~">
        <ownedOperation xmi:id="_d5y8QArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_d5y8QQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_d5zjUQrhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_d50KYArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atYncArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atU9EArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_atZOgArdEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_atZ1kArdEeiwdpidSbDb2g" name="AlarmPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_atfVIArdEeiwdpidSbDb2g" client="_atHhsArdEeiwdpidSbDb2g" supplier="_atZ1kArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_dfgJwArdEeiwdpidSbDb2g" operation="_de5s0ArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_suGa4ArdEeiwdpidSbDb2g" operation="_suDXkArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_0IHVYArdEeiwdpidSbDb2g" operation="_0IE5IArdEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d5zjUArhEeiwdpidSbDb2g" operation="_d5y8QArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_d50KYQrhEeiwdpidSbDb2g" operation="_d5zjUQrhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Viyf8ArfEeiwdpidSbDb2g" name="StopWatchP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Viyf8QrfEeiwdpidSbDb2g" name="StopWatchP">
        <interfaceRealization xmi:id="_Viyf8grfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf9ArfEeiwdpidSbDb2g" contract="_Viyf9ArfEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Viyf8wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g" contract="_ViygAQrfEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf9ArfEeiwdpidSbDb2g" name="StopWatchP">
        <ownedOperation xmi:id="_Viyf9QrfEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Viyf-QrfEeiwdpidSbDb2g" name="Reset"/>
        <ownedOperation xmi:id="_Viyf-wrfEeiwdpidSbDb2g" name="Deactivate"/>
        <ownedOperation xmi:id="_Viyf_ArfEeiwdpidSbDb2g" name="Resume"/>
        <ownedOperation xmi:id="_mM4pQArgEeiwdpidSbDb2g" name="Toggle"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Viyf_grfEeiwdpidSbDb2g" name="StopWatchP~">
        <ownedOperation xmi:id="_RNPKEArhEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_WQpZkArhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_bGjYkArhEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_bGjYkQrhEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Viyf_wrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_Viyf_grfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_ViygAArfEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ViygAQrfEeiwdpidSbDb2g" name="StopWatchPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ViygAgrfEeiwdpidSbDb2g" client="_Viyf8QrfEeiwdpidSbDb2g" supplier="_ViygAQrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygAwrfEeiwdpidSbDb2g" operation="_Viyf9QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBArfEeiwdpidSbDb2g" operation="_Viyf-QrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBQrfEeiwdpidSbDb2g" operation="_Viyf-wrfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_ViygBgrfEeiwdpidSbDb2g" operation="_Viyf_ArfEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_mM5QUArgEeiwdpidSbDb2g" operation="_mM4pQArgEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_RNQYMArhEeiwdpidSbDb2g" operation="_RNPKEArhEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bGjYkgrhEeiwdpidSbDb2g" operation="_bGjYkArhEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Lo6JYAriEeiwdpidSbDb2g" name="TimeTrackerP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_Lo6JYQriEeiwdpidSbDb2g" name="TimeTrackerP">
        <interfaceRealization xmi:id="_Lo6JYgriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JZAriEeiwdpidSbDb2g" contract="_Lo6JZAriEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_Lo6JYwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g" contract="_Lo6JcgriEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JZAriEeiwdpidSbDb2g" name="TimeTrackerP">
        <ownedOperation xmi:id="_Lo6JaQriEeiwdpidSbDb2g" name="Activate"/>
        <ownedOperation xmi:id="_Lo6JagriEeiwdpidSbDb2g" name="Deactivate"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JawriEeiwdpidSbDb2g" name="TimeTrackerP~">
        <ownedOperation xmi:id="_Lo6JbAriEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="_Lo6JbQriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Lo6JbgriEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="_Lo6JbwriEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcAriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JawriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_Lo6JcQriEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Lo6JcgriEeiwdpidSbDb2g" name="TimeTrackerPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Lo6JcwriEeiwdpidSbDb2g" client="_Lo6JYQriEeiwdpidSbDb2g" supplier="_Lo6JcgriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeAriEeiwdpidSbDb2g" operation="_Lo6JaQriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JeQriEeiwdpidSbDb2g" operation="_Lo6JagriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JegriEeiwdpidSbDb2g" operation="_Lo6JbAriEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Lo6JewriEeiwdpidSbDb2g" operation="_Lo6JbgriEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="__mIMoArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="__mIMoQrkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <interfaceRealization xmi:id="__mIMogrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMpArkEeiwdpidSbDb2g" contract="__mIMpArkEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="__mIMowrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g" contract="__mIMtQrkEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMpArkEeiwdpidSbDb2g" name="DisplayGateKeeperP">
        <ownedOperation xmi:id="__mIMpQrkEeiwdpidSbDb2g" name="ShowTime">
          <ownedParameter xmi:id="__mIMpgrkEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMpwrkEeiwdpidSbDb2g" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="__mIMqArkEeiwdpidSbDb2g" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqQrkEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="__mIMqgrkEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_SddfAArlEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMqwrkEeiwdpidSbDb2g" name="ShowCounter">
          <ownedParameter xmi:id="_gD0nAArlEeiwdpidSbDb2g" name="hour">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xd8cBKIEeiEEYKmuRZPIg" name="minute">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_1Xt0EBKIEeiEEYKmuRZPIg" name="second">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_3cTiABKIEeiEEYKmuRZPIg" name="milli">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMrgrkEeiwdpidSbDb2g" name="DisplayGateKeeperP~">
        <ownedOperation xmi:id="__mIMrwrkEeiwdpidSbDb2g" name="Nack">
          <ownedParameter xmi:id="__mIMsArkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="__mIMsQrkEeiwdpidSbDb2g" name="Ack">
          <ownedParameter xmi:id="__mIMsgrkEeiwdpidSbDb2g" name="currentState">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMswrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMrgrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="__mIMtArkEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="__mIMtQrkEeiwdpidSbDb2g" name="DisplayGateKeeperPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="__mIMtgrkEeiwdpidSbDb2g" client="__mIMoQrkEeiwdpidSbDb2g" supplier="__mIMtQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMtwrkEeiwdpidSbDb2g" operation="__mIMpQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuArkEeiwdpidSbDb2g" operation="__mIMqQrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuQrkEeiwdpidSbDb2g" operation="__mIMqwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMuwrkEeiwdpidSbDb2g" operation="__mIMrwrkEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="__mIMvArkEeiwdpidSbDb2g" operation="__mIMsQrkEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_EOr9EAruEeiwdpidSbDb2g" name="DisplayP">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_EOqu8AruEeiwdpidSbDb2g" name="DisplayP">
        <interfaceRealization xmi:id="_EOw1kAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOuZUAruEeiwdpidSbDb2g" contract="_EOuZUAruEeiwdpidSbDb2g"/>
        <interfaceRealization xmi:id="_EO5YcAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g" contract="_EO2VIAruEeiwdpidSbDb2g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOuZUAruEeiwdpidSbDb2g" name="DisplayP">
        <ownedOperation xmi:id="_gYfq8ArvEeiwdpidSbDb2g" name="ShowText">
          <ownedParameter xmi:id="_gYfq8QrvEeiwdpidSbDb2g" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gYfq8grvEeiwdpidSbDb2g" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EOyDsAruEeiwdpidSbDb2g" name="DisplayP~"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO1HAAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EOyDsAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_EO1uEAruEeiwdpidSbDb2g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_EO2VIAruEeiwdpidSbDb2g" name="DisplayPIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_EO6mkAruEeiwdpidSbDb2g" client="_EOqu8AruEeiwdpidSbDb2g" supplier="_EO2VIAruEeiwdpidSbDb2g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_gYhgIArvEeiwdpidSbDb2g" operation="_gYfq8ArvEeiwdpidSbDb2g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_x2D04Ev9EemhOoNL4S6HQw" name="dbgAgent">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_x6gQAEv9EemhOoNL4S6HQw" name="timing" visibility="protected">
        <type xmi:type="uml:Collaboration" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_x6heIEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_x6isQEv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_x9Eb0Ev9EemhOoNL4S6HQw" name="dbgPortForTimeTracker" visibility="public" type="_x52IsEv9EemhOoNL4S6HQw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_x9LwkEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_x9MXoEv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yFuokEv9EemhOoNL4S6HQw" name="dbgPortForStopWatchCore" visibility="public" type="_x52IsEv9EemhOoNL4S6HQw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yFv2sEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_yFv2sUv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yND_oEv9EemhOoNL4S6HQw" name="dbgPortForWatchCore" visibility="public" type="_x52IsEv9EemhOoNL4S6HQw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yND_oUv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_yND_okv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ycwBcEv9EemhOoNL4S6HQw" name="dbgPortForDisplayGateKeeper" visibility="public" type="_x52IsEv9EemhOoNL4S6HQw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ycwogEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_ycxPkEv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yfw5MEv9EemhOoNL4S6HQw" name="dbgPortForAlarmsCapsule" visibility="public" type="_x52IsEv9EemhOoNL4S6HQw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yfxgQEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_yfxgQUv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yoEgoEv9EemhOoNL4S6HQw" name="dbgPortForButtonsReader" visibility="public" type="_x52IsEv9EemhOoNL4S6HQw" isBehavior="true" isConjugated="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yoFHsEv9EemhOoNL4S6HQw" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_yoFHsUv9EemhOoNL4S6HQw" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_x5fjYEv9EemhOoNL4S6HQw" name="dbgAgent StateMachine">
        <region xmi:id="_ym0jcEv9EemhOoNL4S6HQw" name="mainRegion">
          <transition xmi:id="_yncOgEv9EemhOoNL4S6HQw" name="Trans__Init__State__209210" source="_ynYkIEv9EemhOoNL4S6HQw" target="_ym1xkUv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_yn4TYEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>initForPMD();
this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;Init__State__209&quot;,&quot;New__State__208&quot;,&quot;To__New__State__208__213&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;Init__State__209&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
          </transition>
          <transition xmi:id="_yneDsEv9EemhOoNL4S6HQw" name="From__New__State__208__211" source="_ym5b8Ev9EemhOoNL4S6HQw" target="_ym1xkUv9EemhOoNL4S6HQw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ynstMEv9EemhOoNL4S6HQw">
              <language>C++</language>
              <body>this->loadHeap();
this->execContext.clearPossibleExecPath();
this->execContext.addPossibleExecPath(&quot;New__State__208&quot;,&quot;New__State__208&quot;,&quot;To__New__State__208__213&quot;,msg->getSignalName());
this->execContext.setlastMsg(msg);
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC,&quot;New__State__208&quot;);
this->execContext.setPartialityPattern(pmd::PartialityPattern::NOTRIGER);
execHelper.getUserDecesion(&amp;execContext);
this->unLoadHeap();
</body>
            </effect>
            <trigger xmi:id="_yni8MEv9EemhOoNL4S6HQw" name="PME_Trig212" port="_x6gQAEv9EemhOoNL4S6HQw">
              <event xmi:type="uml:CallEvent" href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.common.rts.library_1.0.0.201707181445.jar!/libraries/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_ynpp4Ev9EemhOoNL4S6HQw" name="To__New__State__208__213" guard="_yn5hgUv9EemhOoNL4S6HQw" source="_ym1xkUv9EemhOoNL4S6HQw" target="_ym5b8Ev9EemhOoNL4S6HQw">
            <ownedRule xmi:id="_yn5hgUv9EemhOoNL4S6HQw" name="PME_checkDecesion214">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_yn5hgEv9EemhOoNL4S6HQw" name="PME_checkDecesion214">
                <language>C++</language>
                <body>return execContext.checkUserDecesion({&quot;To__New__State__208__213&quot;,&quot;New__State__208&quot;, execContext.getExecLocation().locName});
</body>
              </specification>
            </ownedRule>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ym1xkUv9EemhOoNL4S6HQw" name="DecesionPoint__207" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_ym5b8Ev9EemhOoNL4S6HQw" name="New__State__208">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_yrb9sEv9EemhOoNL4S6HQw" name="New__State__208">
              <language>C++</language>
              <body>timing.informIn(UMLRTTimespec(1,0));
</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_ynYkIEv9EemhOoNL4S6HQw" name="Init__State__209"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yjkbIUv9EemhOoNL4S6HQw" name="loadHeap" specification="_yjkbIEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_yjzEoEv9EemhOoNL4S6HQw" name="unLoadHeap" specification="_yjydkEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body></body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ykPJgUv9EemhOoNL4S6HQw" name="sendMessage" specification="_ykPJgEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>int result=-1;
 if(message.portName==&quot;dbgPortForTimeTracker&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForTimeTracker.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForStopWatchCore&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForStopWatchCore.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForWatchCore&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForWatchCore.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForDisplayGateKeeper&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForDisplayGateKeeper.dbg().sendAt(message.index);
result=1;
}
  }
 }
 else if(message.portName==&quot;dbgPortForAlarmsCapsule&quot;) {
  if(message.signal==&quot;dbg&quot;) {
   if(message.payload.size()==0){
    dbgPortForAlarmsCapsule.dbg().sendAt(message.index);
result=1;
}
  }
 }
return result;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ykUCAUv9EemhOoNL4S6HQw" name="sendInternalMessage" specification="_ykUCAEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>// will do it as next work</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ymkEwUv9EemhOoNL4S6HQw" name="initForPMD" specification="_ymkEwEv9EemhOoNL4S6HQw">
        <language>C++</language>
        <body>execHelper.readExecConfig();
//this->execHelper.loadExecRules();
this->execContext.setCapsuleHeap(&amp;this->heap);
this->execContext.setCapsuleType(this->getTypeName());
this->execContext.setCapsuleInstanceID(this->getIndex());
this->execContext.setExecLocation(pmd::ExecLocationType::STATELOC, this->getCurrentStateString());
this->execContext.setCallBackMethodSendMessage(std::bind(&amp;Capsule_dbgAgent::sendMessage, this,std::placeholders::_1));
this->execContext.setCallBackMethodSendInternalMessage(std::bind(&amp;Capsule_dbgAgent::sendInternalMessage,this,std::placeholders::_1));
 this->execContext.addOutPutMessages(&quot;dbgPortForTimeTracker&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForStopWatchCore&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForWatchCore&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForDisplayGateKeeper&quot;,&quot;dbg&quot;,{});
this->execContext.addOutPutMessages(&quot;dbgPortForAlarmsCapsule&quot;,&quot;dbg&quot;,{});
 this->execContext.addInputMessages(&quot;timing&quot;,&quot;timeout&quot;,{});
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_yjkbIEv9EemhOoNL4S6HQw" name="loadHeap" visibility="private" method="_yjkbIUv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_yjydkEv9EemhOoNL4S6HQw" name="unLoadHeap" visibility="private" method="_yjzEoEv9EemhOoNL4S6HQw"/>
      <ownedOperation xmi:id="_ykPJgEv9EemhOoNL4S6HQw" name="sendMessage" visibility="private" method="_ykPJgUv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_ykRlwEv9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ykSM0Ev9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ykUCAEv9EemhOoNL4S6HQw" name="sendInternalMessage" visibility="private" method="_ykUCAUv9EemhOoNL4S6HQw">
        <ownedParameter xmi:id="_ykbWwEv9EemhOoNL4S6HQw" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_ykck4Ev9EemhOoNL4S6HQw" name="message">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_ymkEwEv9EemhOoNL4S6HQw" name="initForPMD" visibility="private" method="_ymkEwUv9EemhOoNL4S6HQw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_x5zFYEv9EemhOoNL4S6HQw" name="dbgProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_x52IsEv9EemhOoNL4S6HQw" name="dbgProtocol">
        <interfaceRealization xmi:id="_x6MuAEv9EemhOoNL4S6HQw" client="_x52IsEv9EemhOoNL4S6HQw" supplier="_x54k8Ev9EemhOoNL4S6HQw" contract="_x54k8Ev9EemhOoNL4S6HQw"/>
        <interfaceRealization xmi:id="_x6OjMEv9EemhOoNL4S6HQw" client="_x52IsEv9EemhOoNL4S6HQw" supplier="_x5-EgEv9EemhOoNL4S6HQw" contract="_x5-EgEv9EemhOoNL4S6HQw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_x54k8Ev9EemhOoNL4S6HQw" name="dbgProtocol">
        <ownedOperation xmi:id="_x6QYYEv9EemhOoNL4S6HQw" name="dbg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_x55zEEv9EemhOoNL4S6HQw" name="dbgProtocol~"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_x5-EgEv9EemhOoNL4S6HQw" name="dbgProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_x5_SoEv9EemhOoNL4S6HQw" client="_x52IsEv9EemhOoNL4S6HQw" supplier="_x55zEEv9EemhOoNL4S6HQw"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_x6BH0Ev9EemhOoNL4S6HQw" client="_x52IsEv9EemhOoNL4S6HQw" supplier="_x5-EgEv9EemhOoNL4S6HQw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_x6cloEv9EemhOoNL4S6HQw" operation="_x6QYYEv9EemhOoNL4S6HQw"/>
    </packagedElement>
    <profileApplication xmi:id="_GN1XswqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.umlrt.profile_1.0.0.201707181432.jar!/umlProfile/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtQqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XtgqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_GN1XtwqpEeiwdpidSbDb2g">
      <eAnnotations xmi:id="_GN1XuAqpEeiwdpidSbDb2g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="jar:file:///Users/mojtababagherzadeh/Desktop/Papyrus-RT.app/Contents/Eclipse/plugins/org.eclipse.papyrusrt.codegen.cpp.profile_1.0.0.201707181457.jar!/profiles/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_pS-gAAqqEeiwdpidSbDb2g" base_Class="_pOYT4AqqEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_WFuLgAqrEeiwdpidSbDb2g" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_DFbqEAquEeiwdpidSbDb2g" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_J0BpAAquEeiwdpidSbDb2g" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_ZtYuYAquEeiwdpidSbDb2g" base_Class="_ZtPkcAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_xFmyAAquEeiwdpidSbDb2g" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_5crxsAquEeiwdpidSbDb2g" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <UMLRealTime:Capsule xmi:id="_EUS0cAqvEeiwdpidSbDb2g" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_4mUU8AqvEeiwdpidSbDb2g" base_Property="_4mJV0AqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_7I7boAqvEeiwdpidSbDb2g" base_Property="_7I3xQAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_-Pye4AqvEeiwdpidSbDb2g" base_Property="_-PuNcAqvEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Dab-0AqwEeiwdpidSbDb2g" base_Property="_DaXtYAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_K2YzAAqwEeiwdpidSbDb2g" base_Property="_K2VIoAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_QJj80AqwEeiwdpidSbDb2g" base_Property="_QJhgkAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:CapsulePart xmi:id="_Tqpd8AqwEeiwdpidSbDb2g" base_Property="_TqnowAqwEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_OX4uYAqxEeiwdpidSbDb2g" base_Package="_OX25MAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OX9m4AqxEeiwdpidSbDb2g" base_Interface="_OX7KoAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYEUkAqxEeiwdpidSbDb2g" base_Interface="_OYB4UAqxEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_OYJ0IAqxEeiwdpidSbDb2g" base_Interface="_OYH-8AqxEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_OYM3cAqxEeiwdpidSbDb2g" base_Collaboration="_OXynwAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_qHisUAqxEeiwdpidSbDb2g" base_Port="_qHclsAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_wsb8sAqxEeiwdpidSbDb2g" base_Port="_wsY5YAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_4erJ8AqxEeiwdpidSbDb2g" base_Connector="_4edHgAqxEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_atO2cArdEeiwdpidSbDb2g" base_Package="_atLzIArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atSg0ArdEeiwdpidSbDb2g" base_Interface="_atQEkArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_atXZUArdEeiwdpidSbDb2g" base_Interface="_atU9EArdEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_atc44ArdEeiwdpidSbDb2g" base_Interface="_atZ1kArdEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_atgjQArdEeiwdpidSbDb2g" base_Collaboration="_atHhsArdEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_y_qqIAreEeiwdpidSbDb2g" base_Port="_y_nm0AreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_2AUXsAreEeiwdpidSbDb2g" base_Port="_2ASigAreEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_8aUmsAreEeiwdpidSbDb2g" base_Connector="_8aQ8UAreEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_VizuEArfEeiwdpidSbDb2g" base_Package="_Viyf8ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Vi1jQArfEeiwdpidSbDb2g" base_Collaboration="_Viyf8QrfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2KUArfEeiwdpidSbDb2g" base_Interface="_Viyf9ArfEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi2xYArfEeiwdpidSbDb2g" base_Interface="_Viyf_grfEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Vi3_gArfEeiwdpidSbDb2g" base_Interface="_ViygAQrfEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_mHFGwArhEeiwdpidSbDb2g" base_Port="_mHDRkArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ppHqIArhEeiwdpidSbDb2g" base_Port="_ppFN4ArhEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ws7rIArhEeiwdpidSbDb2g" base_Connector="_ws4AwArhEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_Lo7XgAriEeiwdpidSbDb2g" base_Package="_Lo6JYAriEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="_Lo7-kAriEeiwdpidSbDb2g" base_Collaboration="_Lo6JYQriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo8loAriEeiwdpidSbDb2g" base_Interface="_Lo6JZAriEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsAriEeiwdpidSbDb2g" base_Interface="_Lo6JawriEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Lo9MsQriEeiwdpidSbDb2g" base_Interface="_Lo6JcgriEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="__kRn8ArjEeiwdpidSbDb2g" base_Port="__kPLsArjEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_IaHnQArkEeiwdpidSbDb2g" base_Port="_IaFLAArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_OI_1oArkEeiwdpidSbDb2g" base_Connector="_OI7kMArkEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="__mKB0ArkEeiwdpidSbDb2g" base_Package="__mIMoArkEeiwdpidSbDb2g"/>
  <UMLRealTime:Protocol xmi:id="__mLP8ArkEeiwdpidSbDb2g" base_Collaboration="__mIMoQrkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mMeEArkEeiwdpidSbDb2g" base_Interface="__mIMpArkEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="__mNsMArkEeiwdpidSbDb2g" base_Interface="__mIMrgrkEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="__mO6UArkEeiwdpidSbDb2g" base_Interface="__mIMtQrkEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_uB_LAArlEeiwdpidSbDb2g" base_Port="_uB7goArlEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_xFE50ArrEeiwdpidSbDb2g" base_Port="_xE8-AArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_28O6cArrEeiwdpidSbDb2g" base_Port="_28NFQArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_7dT48ArrEeiwdpidSbDb2g" base_Port="_7dRcsArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_-61vwArrEeiwdpidSbDb2g" base_Connector="_-6yscArrEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_ALA-MArsEeiwdpidSbDb2g" base_Connector="_AK-h8ArsEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_A6ZzwArsEeiwdpidSbDb2g" base_Connector="_A6WwcArsEeiwdpidSbDb2g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_EOtyQAruEeiwdpidSbDb2g" base_Package="_EOr9EAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOwOgAruEeiwdpidSbDb2g" base_Interface="_EOuZUAruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTMessageSet xmi:id="_EOz44AruEeiwdpidSbDb2g" base_Interface="_EOyDsAruEeiwdpidSbDb2g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_EO4KUAruEeiwdpidSbDb2g" base_Interface="_EO2VIAruEeiwdpidSbDb2g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_EO7NoAruEeiwdpidSbDb2g" base_Collaboration="_EOqu8AruEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_LLyxwArxEeiwdpidSbDb2g" base_Port="_LLt5QArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_L9vzIArxEeiwdpidSbDb2g" base_Port="_L9t98ArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_WMsTYQrxEeiwdpidSbDb2g" base_Connector="_WMp3IArxEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_-6JIAAryEeiwdpidSbDb2g" isWired="false" base_Port="_-6GrwAryEeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_ka3XYArzEeiwdpidSbDb2g" base_Port="_ka0UEArzEeiwdpidSbDb2g"/>
  <UMLRealTime:RTConnector xmi:id="_qGzmgQrzEeiwdpidSbDb2g" base_Connector="_qGxKQArzEeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gAPwwAr0EeiwdpidSbDb2g" base_Pseudostate="_gAMtcAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_gATbIAr0EeiwdpidSbDb2g" base_State="_gARl8Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_gAV3YAr0EeiwdpidSbDb2g" base_Region="_gAJqIAr0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_gAaI0Ar0EeiwdpidSbDb2g" base_StateMachine="_f9DS0Ar0EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_BIUk4Ar1EeiwdpidSbDb2g" base_Region="_BISvsAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CErfcAr1EeiwdpidSbDb2g" base_Pseudostate="_CEn1EAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_DTdmwAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTState xmi:id="_FtbHwAr1EeiwdpidSbDb2g" base_State="_FtZSkAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUQg4Ar1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hUUyUAr1EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_pbDo4Ar1EeiwdpidSbDb2g"/>
  <UMLRealTime:RTPort xmi:id="_yQefgAr3EeiwdpidSbDb2g" isWired="false" base_Port="_yQcqUAr3EeiwdpidSbDb2g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_hU-BcA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_hVdJoA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_hVipMA-pEeijktysABpT4g" base_Region="_hUncIA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_hWGp4A-pEeijktysABpT4g" base_StateMachine="_hUDbcA-pEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OK1ngA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_OK7uIA-sEeijktysABpT4g" base_State="_OK4DwA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_OK-xcA-sEeijktysABpT4g" base_Region="_OKuSwA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_OLDp8A-sEeijktysABpT4g" base_StateMachine="_OKhecA-sEeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_kB4zUA-sEeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_Xb2N8A-uEeijktysABpT4g" isWired="false" base_Port="_XbRmMA-uEeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_U9XDMA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_U9b7sA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_U9dw4A-3EeijktysABpT4g" base_Region="_U9SKsA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_U9ipYA-3EeijktysABpT4g" base_StateMachine="_U9KO4A-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_e549wA-3EeijktysABpT4g" base_State="_e52hgA-3EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_O4nAkA-5EeijktysABpT4g" base_Region="_O4jWMA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_P93_gA-5EeijktysABpT4g" base_State="_P908MA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_R-Zs0A-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Uez0EA-5EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2izAA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_P2oSkA-6EeijktysABpT4g" base_Pseudostate="_P2koMA-6EeijktysABpT4g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KalrMA-7EeijktysABpT4g" base_Pseudostate="_Kaj2AA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KarKwA-7EeijktysABpT4g" base_Region="_KahZwA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_Kau1IA-7EeijktysABpT4g" base_StateMachine="_Kab6MA-7EeijktysABpT4g"/>
  <UMLRTStateMachines:RTState xmi:id="_bC7WcA-7EeijktysABpT4g"/>
  <UMLRealTime:RTPort xmi:id="_xHS7gBE6EeiaCPCnhevAQQ" isWired="false" base_Port="_xB-9sBE6EeiaCPCnhevAQQ"/>
  <RTCppProperties:CapsuleProperties xmi:id="_5O9OkBKMEeiEEYKmuRZPIg" headerPreface="#include &lt;iostream>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_WFgwIAqrEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRealTime:RTPort xmi:id="_fwhSABNgEeiFubQUFHg6OA" isWired="false" base_Port="_fwJekBNgEeiFubQUFHg6OA"/>
  <UMLRealTime:RTPort xmi:id="_DarBUBNhEeiFubQUFHg6OA" isWired="false" base_Port="_Dan-ABNhEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gmdUIBNjEeiFubQUFHg6OA" base_Pseudostate="_gmZCsBNjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5USJsBNsEeiFubQUFHg6OA" base_Pseudostate="_5UPGYBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_5Ub6sBNsEeiFubQUFHg6OA" base_State="_5UY3YBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5Ue-ABNsEeiFubQUFHg6OA" base_Region="_5UK08BNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_5VCXoBNsEeiFubQUFHg6OA" base_StateMachine="_5TyacBNsEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_m1DG4BNvEeiFubQUFHg6OA" base_State="_m0-1cBNvEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_qcuQ0BNyEeiFubQUFHg6OA" base_Region="_qcoxQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qc4o4BNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_qdJuoBNyEeiFubQUFHg6OA" base_Pseudostate="_qdGEQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_2N0gUBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_34xmQBNyEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GUGnYBNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_VhtaABNzEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5oRb0BRgEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_PmfKIBRiEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_GFHsIBRjEeiFubQUFHg6OA" base_Region="_GFF28BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_GFQ2EBRjEeiFubQUFHg6OA" base_Pseudostate="_GFOZ0BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_G6EXIBRjEeiFubQUFHg6OA" base_State="_G6Ch8BRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTState xmi:id="_HQJU0BRjEeiFubQUFHg6OA" base_State="_HQIGsBRjEeiFubQUFHg6OA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzA6ABUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_wzRYsBUeEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_2-fvYBUfEeiYy9niOG6dTw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_bAe6cBUhEeiYy9niOG6dTw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_huQNUBa-Eei-ccFu-OwT7Q" headerPreface="#include &lt;termios.h>&#xA;#include &lt;iostream>&#xA;#include &lt;unistd.h>&#xA;#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_xFgrYAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lMfYBeHEei-ccFu-OwT7Q" base_Pseudostate="_6lDVcBeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6lcXABeHEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_smoRwBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_tthoYBeSEei-ccFu-OwT7Q" base_Pseudostate="_ttfMIBeSEei-ccFu-OwT7Q"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OMmZABgmEeiSBIpf1RqKYQ" base_Pseudostate="_OEEIEBgmEeiSBIpf1RqKYQ"/>
  <UMLRealTime:Capsule xmi:id="_x5e8UEv9EemhOoNL4S6HQw" base_Class="_x2D04Ev9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_x5yeUEv9EemhOoNL4S6HQw" base_StateMachine="_x5fjYEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:ProtocolContainer xmi:id="_x51hoEv9EemhOoNL4S6HQw" base_Package="_x5zFYEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:Protocol xmi:id="_x5394Ev9EemhOoNL4S6HQw" base_Collaboration="_x52IsEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTMessageSet xmi:id="_x6DkEEv9EemhOoNL4S6HQw" base_Interface="_x54k8Ev9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTMessageSet xmi:id="_x6JqsEv9EemhOoNL4S6HQw" base_Interface="_x55zEEv9EemhOoNL4S6HQw" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_x6MG8Ev9EemhOoNL4S6HQw" base_Interface="_x5-EgEv9EemhOoNL4S6HQw" rtMsgKind="inOut"/>
  <UMLRealTime:RTPort xmi:id="_x64DcEv9EemhOoNL4S6HQw" base_Port="_x6gQAEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTPort xmi:id="_x8_jUEv9EemhOoNL4S6HQw" isWired="false" base_Port="_x88gAEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTPort xmi:id="_x9R3MEv9EemhOoNL4S6HQw" isPublish="true" isWired="false" base_Port="_x9Eb0Ev9EemhOoNL4S6HQw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_x9ggsEv9EemhOoNL4S6HQw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_EUMt0AqvEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_x9sG4Ev9EemhOoNL4S6HQw" base_Class="_EUMt0AqvEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_yABpMEv9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_x_-l4Ev9EemhOoNL4S6HQw"/>
  <RTCppProperties:ParameterProperties xmi:id="_yAKzIEv9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_yAI98Ev9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yA82QEv9EemhOoNL4S6HQw" base_Pseudostate="_yA7BEEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTState xmi:id="_yA-rcEv9EemhOoNL4S6HQw" base_State="_yA9dUEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yBm9kEv9EemhOoNL4S6HQw" base_Pseudostate="_yBlvcEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yBvgcEv9EemhOoNL4S6HQw" base_Pseudostate="_yBoywEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yBzK0Ev9EemhOoNL4S6HQw" base_Pseudostate="_yBx8sEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTPort xmi:id="_yFuBgEv9EemhOoNL4S6HQw" isWired="false" base_Port="_yFpwEEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTPort xmi:id="_yFxE0Ev9EemhOoNL4S6HQw" isPublish="true" isWired="false" base_Port="_yFuokEv9EemhOoNL4S6HQw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_yGjvAEv9EemhOoNL4S6HQw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_Jz5GIAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_yGmyUEv9EemhOoNL4S6HQw" base_Class="_Jz5GIAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_yHzFIEv9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_yHx3AEv9EemhOoNL4S6HQw"/>
  <RTCppProperties:ParameterProperties xmi:id="_yH39oEv9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_yH2vgEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yIm9cEv9EemhOoNL4S6HQw" base_Pseudostate="_yIlvUEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTState xmi:id="_yIoLkEv9EemhOoNL4S6HQw" base_State="_yInkgEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yIqAwEv9EemhOoNL4S6HQw" base_Pseudostate="_yIoyoEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yKDH4Ev9EemhOoNL4S6HQw" base_Pseudostate="_yKB5wEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yKFkIEv9EemhOoNL4S6HQw" base_Pseudostate="_yKEWAEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yKLDsEv9EemhOoNL4S6HQw" base_Pseudostate="_yKJ1kEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yKNf8Ev9EemhOoNL4S6HQw" base_Pseudostate="_yKMR0Ev9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTPort xmi:id="_yNCxgEv9EemhOoNL4S6HQw" isWired="false" base_Port="_yMmsoEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTPort xmi:id="_yNEmsEv9EemhOoNL4S6HQw" isPublish="true" isWired="false" base_Port="_yND_oEv9EemhOoNL4S6HQw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_yNgEgEv9EemhOoNL4S6HQw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_5cgykAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_yNigwEv9EemhOoNL4S6HQw" base_Class="_5cgykAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_yOSusEv9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_yOSHoEv9EemhOoNL4S6HQw"/>
  <RTCppProperties:ParameterProperties xmi:id="_yOWZEEv9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_yOVK8Ev9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yPY64Ev9EemhOoNL4S6HQw" base_Pseudostate="_yPXFsEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTState xmi:id="_yPawEEv9EemhOoNL4S6HQw" base_State="_yPZh8Ev9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ySddAEv9EemhOoNL4S6HQw" base_Pseudostate="_ySc18Ev9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ySggUEv9EemhOoNL4S6HQw" base_Pseudostate="_ySfSMEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ySwX8Ev9EemhOoNL4S6HQw" base_Pseudostate="_ySuiwEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTState xmi:id="_ySzbQEv9EemhOoNL4S6HQw" base_State="_ySw_AEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yS13gEv9EemhOoNL4S6HQw" base_Pseudostate="_yS0pYEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yV9c8Ev9EemhOoNL4S6HQw" base_Pseudostate="_yV814Ev9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yV_SIEv9EemhOoNL4S6HQw" base_Pseudostate="_yV-rEEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yWH1AEv9EemhOoNL4S6HQw" base_Pseudostate="_yV_5MEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yWQX4Ev9EemhOoNL4S6HQw" base_Pseudostate="_yWPw0Ev9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTPort xmi:id="_yctlMEv9EemhOoNL4S6HQw" isWired="false" base_Port="_ycqh4Ev9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTPort xmi:id="_ycx2oEv9EemhOoNL4S6HQw" isPublish="true" isWired="false" base_Port="_ycwBcEv9EemhOoNL4S6HQw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_yc3WMEv9EemhOoNL4S6HQw" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_yc8OsEv9EemhOoNL4S6HQw" base_Class="_WFgwIAqrEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_ydr1kEv9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_ydqncEv9EemhOoNL4S6HQw"/>
  <RTCppProperties:ParameterProperties xmi:id="_ydxVIEv9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_ydvf8Ev9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yer7IEv9EemhOoNL4S6HQw" base_Pseudostate="_yeixMEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTState xmi:id="_yetJQEv9EemhOoNL4S6HQw" base_State="_yer7IUv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yewMkEv9EemhOoNL4S6HQw" base_Pseudostate="_yeuXYEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTPort xmi:id="_yfrZoEv9EemhOoNL4S6HQw" isWired="false" base_Port="_yfpkcEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTPort xmi:id="_yf2YwEv9EemhOoNL4S6HQw" isPublish="true" isWired="false" base_Port="_yfw5MEv9EemhOoNL4S6HQw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_yf-7oEv9EemhOoNL4S6HQw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_DFR5EAquEeiwdpidSbDb2g" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_ygAw0Ev9EemhOoNL4S6HQw" base_Class="_DFR5EAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_yhbGEEv9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_yhZ38Ev9EemhOoNL4S6HQw"/>
  <RTCppProperties:ParameterProperties xmi:id="_yhjB4Ev9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_yhhzwEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yirDQEv9EemhOoNL4S6HQw" base_Pseudostate="_yiqcMEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yitfgEv9EemhOoNL4S6HQw" base_Pseudostate="_yisRYEv9EemhOoNL4S6HQw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_yjdtcEv9EemhOoNL4S6HQw" headerPreface="#include &quot;ExecContext.hpp&quot; &#xA;#include &quot;PMDTypes.hpp&quot;&#xA;#include &quot;Config.hpp&quot;&#xA;#include &quot;Heap.hpp&quot;&#xA;#include &lt;iostream>&#xA;#include &lt;map>&#xA;#include &lt;functional>&#xA;#include &quot;ExecHelper.hpp&quot;&#xA;#include &lt;boost/any.hpp>&#xA;" base_Class="_x2D04Ev9EemhOoNL4S6HQw" privateDeclarations="pmd::Heap  heap;&#xA;pmd::ExecHelper execHelper;&#xA;Config config;&#xA;UMLRTMessage currentMessage;&#xA;bool runStateCode;&#xA;pmd::ExecContextOfCapsule execContext;&#xA;"/>
  <RTCppProperties:CapsuleProperties xmi:id="_yjgJsEv9EemhOoNL4S6HQw" base_Class="_x2D04Ev9EemhOoNL4S6HQw"/>
  <RTCppProperties:ParameterProperties xmi:id="_ykTa8Ev9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_ykSM0Ev9EemhOoNL4S6HQw"/>
  <RTCppProperties:ParameterProperties xmi:id="_ykdL8Ev9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_ykck4Ev9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTRegion xmi:id="_ym1xkEv9EemhOoNL4S6HQw" base_Region="_ym0jcEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ym3mwEv9EemhOoNL4S6HQw" base_Pseudostate="_ym1xkUv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTState xmi:id="_ym7RIEv9EemhOoNL4S6HQw" base_State="_ym5b8Ev9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ynbAYEv9EemhOoNL4S6HQw" base_Pseudostate="_ynYkIEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTPort xmi:id="_yoDSgEv9EemhOoNL4S6HQw" isWired="false" base_Port="_yn7WsEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:RTPort xmi:id="_yoFuwEv9EemhOoNL4S6HQw" isPublish="true" isWired="false" base_Port="_yoEgoEv9EemhOoNL4S6HQw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_yoR8AEv9EemhOoNL4S6HQw" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_yoU_UEv9EemhOoNL4S6HQw" base_Class="_xFgrYAquEeiwdpidSbDb2g"/>
  <RTCppProperties:ParameterProperties xmi:id="_yon6QEv9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_yomsIEv9EemhOoNL4S6HQw"/>
  <RTCppProperties:ParameterProperties xmi:id="_ypmKoEv9EemhOoNL4S6HQw" type="pmd::Message" base_Parameter="_ypk8gEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_yqpTgEv9EemhOoNL4S6HQw" base_Pseudostate="_yqoscEv9EemhOoNL4S6HQw"/>
  <UMLRTStateMachines:RTState xmi:id="_yqqhoEv9EemhOoNL4S6HQw" base_State="_yqp6kEv9EemhOoNL4S6HQw"/>
  <UMLRealTime:CapsulePart xmi:id="_yravkEv9EemhOoNL4S6HQw" base_Property="_yraIgEv9EemhOoNL4S6HQw"/>
</xmi:XMI>
